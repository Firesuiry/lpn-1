use std::boxed::Box;
use std::default::Default;
use std::sync::Once;

use fnv::FnvHashMap;

use m4ri_rust::friendly::BinMatrix;
use m4ri_rust::friendly::BinVector;

use crate::codes::BinaryCode;

/// ``[26, 16]`` Wagner code
///
/// Decodes using Syndrome decoding
#[derive(Clone, Serialize)]
pub struct WagnerCode26_16;

static INIT: Once = Once::new();
static mut GENERATOR_MATRIX: *const BinMatrix = 0 as *const BinMatrix;
static mut PARITY_MATRIX: *const BinMatrix = 0 as *const BinMatrix;
static mut PARITY_MATRIX_T: *const BinMatrix = 0 as *const BinMatrix;
static mut SYNDROME_MAP: *const FnvHashMap<u64, &'static [usize; 1]> = 0 as *const FnvHashMap<u64, &'static [usize; 1]>;

fn init() {
    INIT.call_once(|| {
        unsafe {
            let matrix = Box::new(BinMatrix::from_slices(&[
                &[ 29687809 ],
                &[ 57671682 ],
                &[ 11927556 ],
                &[ 5963784 ],
                &[ 67043344 ],
                &[ 36503584 ],
                &[ 59375680 ],
                &[ 51839104 ],
                &[ 48431360 ],
                &[ 28901888 ],
                &[ 11207680 ],
                &[ 19073024 ],
                &[ 21368832 ],
                &[ 6955008 ],
                &[ 20201472 ],
                &[ 52985856 ],
                
            ], 26));
            GENERATOR_MATRIX = Box::into_raw(matrix);

            let matrix = Box::new(BinMatrix::from_slices(&[
                &[ 33404993 ],
                &[ 16384066 ],
                &[ 54263876 ],
                &[ 64036936 ],
                &[ 44679248 ],
                &[ 27742304 ],
                &[ 30111872 ],
                &[ 4155648 ],
                &[ 57006592 ],
                &[ 62049280 ],
                
            ], 26));
            let matrix_t = Box::new(matrix.transposed());
            PARITY_MATRIX = Box::into_raw(matrix);
            PARITY_MATRIX_T = Box::into_raw(matrix_t);

            let mut map = Box::new(FnvHashMap::with_capacity_and_hasher(1024, Default::default()));
            map.insert(0, &[0]);     // 0 => [0]
            map.insert(1, &[1]);     // 1 => [1]
            map.insert(2, &[2]);     // 2 => [2]
            map.insert(3, &[3]);     // 3 => [3]
            map.insert(4, &[4]);     // 4 => [4]
            map.insert(5, &[5]);     // 5 => [5]
            map.insert(6, &[6]);     // 6 => [6]
            map.insert(7, &[7]);     // 7 => [7]
            map.insert(8, &[8]);     // 8 => [8]
            map.insert(9, &[9]);     // 9 => [9]
            map.insert(10, &[10]);     // 10 => [10]
            map.insert(11, &[11]);     // 11 => [11]
            map.insert(12, &[12]);     // 12 => [12]
            map.insert(13, &[33587200]);     // 13 => [33587200]
            map.insert(14, &[14]);     // 14 => [14]
            map.insert(15, &[33587202]);     // 15 => [33587202]
            map.insert(16, &[16]);     // 16 => [16]
            map.insert(17, &[17]);     // 17 => [17]
            map.insert(18, &[18]);     // 18 => [18]
            map.insert(19, &[19]);     // 19 => [19]
            map.insert(20, &[20]);     // 20 => [20]
            map.insert(21, &[21]);     // 21 => [21]
            map.insert(22, &[22]);     // 22 => [22]
            map.insert(23, &[104]);     // 23 => [104]
            map.insert(24, &[24]);     // 24 => [24]
            map.insert(25, &[25]);     // 25 => [25]
            map.insert(26, &[26]);     // 26 => [26]
            map.insert(27, &[100]);     // 27 => [100]
            map.insert(28, &[532482]);     // 28 => [532482]
            map.insert(29, &[98]);     // 29 => [98]
            map.insert(30, &[532480]);     // 30 => [532480]
            map.insert(31, &[96]);     // 31 => [96]
            map.insert(32, &[32]);     // 32 => [32]
            map.insert(33, &[33]);     // 33 => [33]
            map.insert(34, &[34]);     // 34 => [34]
            map.insert(35, &[35]);     // 35 => [35]
            map.insert(36, &[36]);     // 36 => [36]
            map.insert(37, &[37]);     // 37 => [37]
            map.insert(38, &[38]);     // 38 => [38]
            map.insert(39, &[88]);     // 39 => [88]
            map.insert(40, &[40]);     // 40 => [40]
            map.insert(41, &[41]);     // 41 => [41]
            map.insert(42, &[4198400]);     // 42 => [4198400]
            map.insert(43, &[4198401]);     // 43 => [4198401]
            map.insert(44, &[44]);     // 44 => [44]
            map.insert(45, &[82]);     // 45 => [82]
            map.insert(46, &[81]);     // 46 => [81]
            map.insert(47, &[80]);     // 47 => [80]
            map.insert(48, &[48]);     // 48 => [48]
            map.insert(49, &[18432]);     // 49 => [18432]
            map.insert(50, &[50]);     // 50 => [50]
            map.insert(51, &[18434]);     // 51 => [18434]
            map.insert(52, &[52]);     // 52 => [52]
            map.insert(53, &[74]);     // 53 => [74]
            map.insert(54, &[73]);     // 54 => [73]
            map.insert(55, &[72]);     // 55 => [72]
            map.insert(56, &[56]);     // 56 => [56]
            map.insert(57, &[70]);     // 57 => [70]
            map.insert(58, &[69]);     // 58 => [69]
            map.insert(59, &[68]);     // 59 => [68]
            map.insert(60, &[67]);     // 60 => [67]
            map.insert(61, &[66]);     // 61 => [66]
            map.insert(62, &[65]);     // 62 => [65]
            map.insert(63, &[64]);     // 63 => [64]
            map.insert(64, &[128]);     // 64 => [128]
            map.insert(65, &[129]);     // 65 => [129]
            map.insert(66, &[130]);     // 66 => [130]
            map.insert(67, &[131]);     // 67 => [131]
            map.insert(68, &[132]);     // 68 => [132]
            map.insert(69, &[133]);     // 69 => [133]
            map.insert(70, &[2113537]);     // 70 => [2113537]
            map.insert(71, &[2113536]);     // 71 => [2113536]
            map.insert(72, &[136]);     // 72 => [136]
            map.insert(73, &[8448]);     // 73 => [8448]
            map.insert(74, &[4194817]);     // 74 => [4194817]
            map.insert(75, &[4194816]);     // 75 => [4194816]
            map.insert(76, &[140]);     // 76 => [140]
            map.insert(77, &[8452]);     // 77 => [8452]
            map.insert(78, &[50331712]);     // 78 => [50331712]
            map.insert(79, &[4194820]);     // 79 => [4194820]
            map.insert(80, &[144]);     // 80 => [144]
            map.insert(81, &[145]);     // 81 => [145]
            map.insert(82, &[146]);     // 82 => [146]
            map.insert(83, &[524548]);     // 83 => [524548]
            map.insert(84, &[148]);     // 84 => [148]
            map.insert(85, &[524546]);     // 85 => [524546]
            map.insert(86, &[524545]);     // 86 => [524545]
            map.insert(87, &[524544]);     // 87 => [524544]
            map.insert(88, &[327684]);     // 88 => [327684]
            map.insert(89, &[8464]);     // 89 => [8464]
            map.insert(90, &[18874624]);     // 90 => [18874624]
            map.insert(91, &[4194832]);     // 91 => [4194832]
            map.insert(92, &[327680]);     // 92 => [327680]
            map.insert(93, &[327681]);     // 93 => [327681]
            map.insert(94, &[327682]);     // 94 => [327682]
            map.insert(95, &[524552]);     // 95 => [524552]
            map.insert(96, &[160]);     // 96 => [160]
            map.insert(97, &[4608]);     // 97 => [4608]
            map.insert(98, &[162]);     // 98 => [162]
            map.insert(99, &[4610]);     // 99 => [4610]
            map.insert(100, &[164]);     // 100 => [164]
            map.insert(101, &[4612]);     // 101 => [4612]
            map.insert(102, &[2099216]);     // 102 => [2099216]
            map.insert(103, &[2113568]);     // 103 => [2113568]
            map.insert(104, &[168]);     // 104 => [168]
            map.insert(105, &[1179652]);     // 105 => [1179652]
            map.insert(106, &[4198528]);     // 106 => [4198528]
            map.insert(107, &[8389648]);     // 107 => [8389648]
            map.insert(108, &[1179649]);     // 108 => [1179649]
            map.insert(109, &[1179648]);     // 109 => [1179648]
            map.insert(110, &[4456704]);     // 110 => [4456704]
            map.insert(111, &[1179650]);     // 111 => [1179650]
            map.insert(112, &[50331649]);     // 112 => [50331649]
            map.insert(113, &[50331648]);     // 113 => [50331648]
            map.insert(114, &[2099204]);     // 114 => [2099204]
            map.insert(115, &[50331650]);     // 115 => [50331650]
            map.insert(116, &[2099202]);     // 116 => [2099202]
            map.insert(117, &[50331652]);     // 117 => [50331652]
            map.insert(118, &[2099200]);     // 118 => [2099200]
            map.insert(119, &[2099201]);     // 119 => [2099201]
            map.insert(120, &[16809988]);     // 120 => [16809988]
            map.insert(121, &[8389634]);     // 121 => [8389634]
            map.insert(122, &[8389633]);     // 122 => [8389633]
            map.insert(123, &[8389632]);     // 123 => [8389632]
            map.insert(124, &[16809984]);     // 124 => [16809984]
            map.insert(125, &[16809985]);     // 125 => [16809985]
            map.insert(126, &[193]);     // 126 => [193]
            map.insert(127, &[192]);     // 127 => [192]
            map.insert(128, &[256]);     // 128 => [256]
            map.insert(129, &[257]);     // 129 => [257]
            map.insert(130, &[258]);     // 130 => [258]
            map.insert(131, &[259]);     // 131 => [259]
            map.insert(132, &[260]);     // 132 => [260]
            map.insert(133, &[261]);     // 133 => [261]
            map.insert(134, &[262]);     // 134 => [262]
            map.insert(135, &[1049608]);     // 135 => [1049608]
            map.insert(136, &[264]);     // 136 => [264]
            map.insert(137, &[8320]);     // 137 => [8320]
            map.insert(138, &[266]);     // 138 => [266]
            map.insert(139, &[8322]);     // 139 => [8322]
            map.insert(140, &[268]);     // 140 => [268]
            map.insert(141, &[1049602]);     // 141 => [1049602]
            map.insert(142, &[1049601]);     // 142 => [1049601]
            map.insert(143, &[1049600]);     // 143 => [1049600]
            map.insert(144, &[272]);     // 144 => [272]
            map.insert(145, &[273]);     // 145 => [273]
            map.insert(146, &[274]);     // 146 => [274]
            map.insert(147, &[524420]);     // 147 => [524420]
            map.insert(148, &[276]);     // 148 => [276]
            map.insert(149, &[524418]);     // 149 => [524418]
            map.insert(150, &[524417]);     // 150 => [524417]
            map.insert(151, &[524416]);     // 151 => [524416]
            map.insert(152, &[69632]);     // 152 => [69632]
            map.insert(153, &[8519680]);     // 153 => [8519680]
            map.insert(154, &[69634]);     // 154 => [69634]
            map.insert(155, &[8519682]);     // 155 => [8519682]
            map.insert(156, &[16793601]);     // 156 => [16793601]
            map.insert(157, &[16793600]);     // 157 => [16793600]
            map.insert(158, &[532736]);     // 158 => [532736]
            map.insert(159, &[16793602]);     // 159 => [16793602]
            map.insert(160, &[288]);     // 160 => [288]
            map.insert(161, &[289]);     // 161 => [289]
            map.insert(162, &[290]);     // 162 => [290]
            map.insert(163, &[35651592]);     // 163 => [35651592]
            map.insert(164, &[262657]);     // 164 => [262657]
            map.insert(165, &[262656]);     // 165 => [262656]
            map.insert(166, &[2129920]);     // 166 => [2129920]
            map.insert(167, &[2129921]);     // 167 => [2129921]
            map.insert(168, &[16779268]);     // 168 => [16779268]
            map.insert(169, &[35651586]);     // 169 => [35651586]
            map.insert(170, &[35651585]);     // 170 => [35651585]
            map.insert(171, &[35651584]);     // 171 => [35651584]
            map.insert(172, &[16779264]);     // 172 => [16779264]
            map.insert(173, &[16779265]);     // 173 => [16779265]
            map.insert(174, &[16779266]);     // 174 => [16779266]
            map.insert(175, &[35651588]);     // 175 => [35651588]
            map.insert(176, &[4259842]);     // 176 => [4259842]
            map.insert(177, &[18688]);     // 177 => [18688]
            map.insert(178, &[4259840]);     // 178 => [4259840]
            map.insert(179, &[4259841]);     // 179 => [4259841]
            map.insert(180, &[9437312]);     // 180 => [9437312]
            map.insert(181, &[262672]);     // 181 => [262672]
            map.insert(182, &[4259844]);     // 182 => [4259844]
            map.insert(183, &[328]);     // 183 => [328]
            map.insert(184, &[69664]);     // 184 => [69664]
            map.insert(185, &[8519712]);     // 185 => [8519712]
            map.insert(186, &[4259848]);     // 186 => [4259848]
            map.insert(187, &[324]);     // 187 => [324]
            map.insert(188, &[16779280]);     // 188 => [16779280]
            map.insert(189, &[322]);     // 189 => [322]
            map.insert(190, &[321]);     // 190 => [321]
            map.insert(191, &[320]);     // 191 => [320]
            map.insert(192, &[384]);     // 192 => [384]
            map.insert(193, &[8200]);     // 193 => [8200]
            map.insert(194, &[386]);     // 194 => [386]
            map.insert(195, &[8202]);     // 195 => [8202]
            map.insert(196, &[266240]);     // 196 => [266240]
            map.insert(197, &[266241]);     // 197 => [266241]
            map.insert(198, &[524305]);     // 198 => [524305]
            map.insert(199, &[524304]);     // 199 => [524304]
            map.insert(200, &[8193]);     // 200 => [8193]
            map.insert(201, &[8192]);     // 201 => [8192]
            map.insert(202, &[8195]);     // 202 => [8195]
            map.insert(203, &[8194]);     // 203 => [8194]
            map.insert(204, &[8197]);     // 204 => [8197]
            map.insert(205, &[8196]);     // 205 => [8196]
            map.insert(206, &[4456480]);     // 206 => [4456480]
            map.insert(207, &[8198]);     // 207 => [8198]
            map.insert(208, &[34816]);     // 208 => [34816]
            map.insert(209, &[34817]);     // 209 => [34817]
            map.insert(210, &[524293]);     // 210 => [524293]
            map.insert(211, &[524292]);     // 211 => [524292]
            map.insert(212, &[524291]);     // 212 => [524291]
            map.insert(213, &[524290]);     // 213 => [524290]
            map.insert(214, &[524289]);     // 214 => [524289]
            map.insert(215, &[524288]);     // 215 => [524288]
            map.insert(216, &[8209]);     // 216 => [8209]
            map.insert(217, &[8208]);     // 217 => [8208]
            map.insert(218, &[18874368]);     // 218 => [18874368]
            map.insert(219, &[18874369]);     // 219 => [18874369]
            map.insert(220, &[33556481]);     // 220 => [33556481]
            map.insert(221, &[33556480]);     // 221 => [33556480]
            map.insert(222, &[524297]);     // 222 => [524297]
            map.insert(223, &[524296]);     // 223 => [524296]
            map.insert(224, &[49153]);     // 224 => [49153]
            map.insert(225, &[49152]);     // 225 => [49152]
            map.insert(226, &[132096]);     // 226 => [132096]
            map.insert(227, &[132097]);     // 227 => [132097]
            map.insert(228, &[33570824]);     // 228 => [33570824]
            map.insert(229, &[49156]);     // 229 => [49156]
            map.insert(230, &[132100]);     // 230 => [132100]
            map.insert(231, &[524336]);     // 231 => [524336]
            map.insert(232, &[524352]);     // 232 => [524352]
            map.insert(233, &[8224]);     // 233 => [8224]
            map.insert(234, &[524354]);     // 234 => [524354]
            map.insert(235, &[8226]);     // 235 => [8226]
            map.insert(236, &[33570816]);     // 236 => [33570816]
            map.insert(237, &[33570817]);     // 237 => [33570817]
            map.insert(238, &[4456448]);     // 238 => [4456448]
            map.insert(239, &[4456449]);     // 239 => [4456449]
            map.insert(240, &[9437188]);     // 240 => [9437188]
            map.insert(241, &[66056]);     // 241 => [66056]
            map.insert(242, &[8260]);     // 242 => [8260]
            map.insert(243, &[524324]);     // 243 => [524324]
            map.insert(244, &[9437184]);     // 244 => [9437184]
            map.insert(245, &[9437185]);     // 245 => [9437185]
            map.insert(246, &[8256]);     // 246 => [8256]
            map.insert(247, &[524320]);     // 247 => [524320]
            map.insert(248, &[66049]);     // 248 => [66049]
            map.insert(249, &[66048]);     // 249 => [66048]
            map.insert(250, &[18874400]);     // 250 => [18874400]
            map.insert(251, &[66050]);     // 251 => [66050]
            map.insert(252, &[9437192]);     // 252 => [9437192]
            map.insert(253, &[66052]);     // 253 => [66052]
            map.insert(254, &[8264]);     // 254 => [8264]
            map.insert(255, &[524328]);     // 255 => [524328]
            map.insert(256, &[512]);     // 256 => [512]
            map.insert(257, &[513]);     // 257 => [513]
            map.insert(258, &[514]);     // 258 => [514]
            map.insert(259, &[515]);     // 259 => [515]
            map.insert(260, &[516]);     // 260 => [516]
            map.insert(261, &[517]);     // 261 => [517]
            map.insert(262, &[518]);     // 262 => [518]
            map.insert(263, &[3145792]);     // 263 => [3145792]
            map.insert(264, &[520]);     // 264 => [520]
            map.insert(265, &[521]);     // 265 => [521]
            map.insert(266, &[4194433]);     // 266 => [4194433]
            map.insert(267, &[4194432]);     // 267 => [4194432]
            map.insert(268, &[524]);     // 268 => [524]
            map.insert(269, &[33587712]);     // 269 => [33587712]
            map.insert(270, &[589856]);     // 270 => [589856]
            map.insert(271, &[4194436]);     // 271 => [4194436]
            map.insert(272, &[528]);     // 272 => [528]
            map.insert(273, &[33792]);     // 273 => [33792]
            map.insert(274, &[147456]);     // 274 => [147456]
            map.insert(275, &[147457]);     // 275 => [147457]
            map.insert(276, &[25165826]);     // 276 => [25165826]
            map.insert(277, &[33796]);     // 277 => [33796]
            map.insert(278, &[25165824]);     // 278 => [25165824]
            map.insert(279, &[25165825]);     // 279 => [25165825]
            map.insert(280, &[33555460]);     // 280 => [33555460]
            map.insert(281, &[33800]);     // 281 => [33800]
            map.insert(282, &[147464]);     // 282 => [147464]
            map.insert(283, &[4194448]);     // 283 => [4194448]
            map.insert(284, &[33555456]);     // 284 => [33555456]
            map.insert(285, &[33555457]);     // 285 => [33555457]
            map.insert(286, &[33555458]);     // 286 => [33555458]
            map.insert(287, &[608]);     // 287 => [608]
            map.insert(288, &[544]);     // 288 => [544]
            map.insert(289, &[4224]);     // 289 => [4224]
            map.insert(290, &[133121]);     // 290 => [133121]
            map.insert(291, &[133120]);     // 291 => [133120]
            map.insert(292, &[262401]);     // 292 => [262401]
            map.insert(293, &[262400]);     // 293 => [262400]
            map.insert(294, &[589832]);     // 294 => [589832]
            map.insert(295, &[262402]);     // 295 => [262402]
            map.insert(296, &[552]);     // 296 => [552]
            map.insert(297, &[4232]);     // 297 => [4232]
            map.insert(298, &[589828]);     // 298 => [589828]
            map.insert(299, &[133128]);     // 299 => [133128]
            map.insert(300, &[589826]);     // 300 => [589826]
            map.insert(301, &[262408]);     // 301 => [262408]
            map.insert(302, &[589824]);     // 302 => [589824]
            map.insert(303, &[589825]);     // 303 => [589825]
            map.insert(304, &[73728]);     // 304 => [73728]
            map.insert(305, &[73729]);     // 305 => [73729]
            map.insert(306, &[73730]);     // 306 => [73730]
            map.insert(307, &[133136]);     // 307 => [133136]
            map.insert(308, &[73732]);     // 308 => [73732]
            map.insert(309, &[262416]);     // 309 => [262416]
            map.insert(310, &[25165856]);     // 310 => [25165856]
            map.insert(311, &[584]);     // 311 => [584]
            map.insert(312, &[3145728]);     // 312 => [3145728]
            map.insert(313, &[3145729]);     // 313 => [3145729]
            map.insert(314, &[3145730]);     // 314 => [3145730]
            map.insert(315, &[580]);     // 315 => [580]
            map.insert(316, &[3145732]);     // 316 => [3145732]
            map.insert(317, &[578]);     // 317 => [578]
            map.insert(318, &[577]);     // 318 => [577]
            map.insert(319, &[576]);     // 319 => [576]
            map.insert(320, &[640]);     // 320 => [640]
            map.insert(321, &[4128]);     // 321 => [4128]
            map.insert(322, &[4194313]);     // 322 => [4194313]
            map.insert(323, &[4194312]);     // 323 => [4194312]
            map.insert(324, &[644]);     // 324 => [644]
            map.insert(325, &[4132]);     // 325 => [4132]
            map.insert(326, &[1050632]);     // 326 => [1050632]
            map.insert(327, &[4194316]);     // 327 => [4194316]
            map.insert(328, &[4194307]);     // 328 => [4194307]
            map.insert(329, &[4194306]);     // 329 => [4194306]
            map.insert(330, &[4194305]);     // 330 => [4194305]
            map.insert(331, &[4194304]);     // 331 => [4194304]
            map.insert(332, &[1050626]);     // 332 => [1050626]
            map.insert(333, &[4194310]);     // 333 => [4194310]
            map.insert(334, &[1050624]);     // 334 => [1050624]
            map.insert(335, &[4194308]);     // 335 => [4194308]
            map.insert(336, &[656]);     // 336 => [656]
            map.insert(337, &[2228228]);     // 337 => [2228228]
            map.insert(338, &[786464]);     // 338 => [786464]
            map.insert(339, &[4194328]);     // 339 => [4194328]
            map.insert(340, &[2228225]);     // 340 => [2228225]
            map.insert(341, &[2228224]);     // 341 => [2228224]
            map.insert(342, &[4168]);     // 342 => [4168]
            map.insert(343, &[2228226]);     // 343 => [2228226]
            map.insert(344, &[41943104]);     // 344 => [41943104]
            map.insert(345, &[4194322]);     // 345 => [4194322]
            map.insert(346, &[4194321]);     // 346 => [4194321]
            map.insert(347, &[4194320]);     // 347 => [4194320]
            map.insert(348, &[4162]);     // 348 => [4162]
            map.insert(349, &[2228232]);     // 349 => [2228232]
            map.insert(350, &[4160]);     // 350 => [4160]
            map.insert(351, &[4161]);     // 351 => [4161]
            map.insert(352, &[4097]);     // 352 => [4097]
            map.insert(353, &[4096]);     // 353 => [4096]
            map.insert(354, &[4099]);     // 354 => [4099]
            map.insert(355, &[4098]);     // 355 => [4098]
            map.insert(356, &[4101]);     // 356 => [4101]
            map.insert(357, &[4100]);     // 357 => [4100]
            map.insert(358, &[41943041]);     // 358 => [41943041]
            map.insert(359, &[41943040]);     // 359 => [41943040]
            map.insert(360, &[4105]);     // 360 => [4105]
            map.insert(361, &[4104]);     // 361 => [4104]
            map.insert(362, &[8421376]);     // 362 => [8421376]
            map.insert(363, &[4194336]);     // 363 => [4194336]
            map.insert(364, &[270336]);     // 364 => [270336]
            map.insert(365, &[16778240]);     // 365 => [16778240]
            map.insert(366, &[270338]);     // 366 => [270338]
            map.insert(367, &[16778242]);     // 367 => [16778242]
            map.insert(368, &[4113]);     // 368 => [4113]
            map.insert(369, &[4112]);     // 369 => [4112]
            map.insert(370, &[786432]);     // 370 => [786432]
            map.insert(371, &[786433]);     // 371 => [786433]
            map.insert(372, &[4194368]);     // 372 => [4194368]
            map.insert(373, &[4194369]);     // 373 => [4194369]
            map.insert(374, &[4194370]);     // 374 => [4194370]
            map.insert(375, &[1064968]);     // 375 => [1064968]
            map.insert(376, &[65793]);     // 376 => [65793]
            map.insert(377, &[65792]);     // 377 => [65792]
            map.insert(378, &[786440]);     // 378 => [786440]
            map.insert(379, &[65794]);     // 379 => [65794]
            map.insert(380, &[4194376]);     // 380 => [4194376]
            map.insert(381, &[1064962]);     // 381 => [1064962]
            map.insert(382, &[1064961]);     // 382 => [1064961]
            map.insert(383, &[1064960]);     // 383 => [1064960]
            map.insert(384, &[768]);     // 384 => [768]
            map.insert(385, &[769]);     // 385 => [769]
            map.insert(386, &[4202496]);     // 386 => [4202496]
            map.insert(387, &[4202497]);     // 387 => [4202497]
            map.insert(388, &[262177]);     // 388 => [262177]
            map.insert(389, &[262176]);     // 389 => [262176]
            map.insert(390, &[4202500]);     // 390 => [4202500]
            map.insert(391, &[262178]);     // 391 => [262178]
            map.insert(392, &[776]);     // 392 => [776]
            map.insert(393, &[8404994]);     // 393 => [8404994]
            map.insert(394, &[8404993]);     // 394 => [8404993]
            map.insert(395, &[8404992]);     // 395 => [8404992]
            map.insert(396, &[4718608]);     // 396 => [4718608]
            map.insert(397, &[16908290]);     // 397 => [16908290]
            map.insert(398, &[16908289]);     // 398 => [16908289]
            map.insert(399, &[16908288]);     // 399 => [16908288]
            map.insert(400, &[784]);     // 400 => [784]
            map.insert(401, &[34603010]);     // 401 => [34603010]
            map.insert(402, &[34603009]);     // 402 => [34603009]
            map.insert(403, &[34603008]);     // 403 => [34603008]
            map.insert(404, &[4718600]);     // 404 => [4718600]
            map.insert(405, &[262192]);     // 405 => [262192]
            map.insert(406, &[1081352]);     // 406 => [1081352]
            map.insert(407, &[34603012]);     // 407 => [34603012]
            map.insert(408, &[262210]);     // 408 => [262210]
            map.insert(409, &[65696]);     // 409 => [65696]
            map.insert(410, &[262208]);     // 410 => [262208]
            map.insert(411, &[262209]);     // 411 => [262209]
            map.insert(412, &[4718592]);     // 412 => [4718592]
            map.insert(413, &[4718593]);     // 413 => [4718593]
            map.insert(414, &[1081344]);     // 414 => [1081344]
            map.insert(415, &[1081345]);     // 415 => [1081345]
            map.insert(416, &[262149]);     // 416 => [262149]
            map.insert(417, &[262148]);     // 417 => [262148]
            map.insert(418, &[4202528]);     // 418 => [4202528]
            map.insert(419, &[262150]);     // 419 => [262150]
            map.insert(420, &[262145]);     // 420 => [262145]
            map.insert(421, &[262144]);     // 421 => [262144]
            map.insert(422, &[262147]);     // 422 => [262147]
            map.insert(423, &[262146]);     // 423 => [262146]
            map.insert(424, &[12288]);     // 424 => [12288]
            map.insert(425, &[12289]);     // 425 => [12289]
            map.insert(426, &[12290]);     // 426 => [12290]
            map.insert(427, &[8405024]);     // 427 => [8405024]
            map.insert(428, &[262153]);     // 428 => [262153]
            map.insert(429, &[262152]);     // 429 => [262152]
            map.insert(430, &[590080]);     // 430 => [590080]
            map.insert(431, &[262154]);     // 431 => [262154]
            map.insert(432, &[16908352]);     // 432 => [16908352]
            map.insert(433, &[262164]);     // 433 => [262164]
            map.insert(434, &[528388]);     // 434 => [528388]
            map.insert(435, &[2098180]);     // 435 => [2098180]
            map.insert(436, &[262161]);     // 436 => [262161]
            map.insert(437, &[262160]);     // 437 => [262160]
            map.insert(438, &[528384]);     // 438 => [528384]
            map.insert(439, &[2098176]);     // 439 => [2098176]
            map.insert(440, &[65665]);     // 440 => [65665]
            map.insert(441, &[65664]);     // 441 => [65664]
            map.insert(442, &[8390656]);     // 442 => [8390656]
            map.insert(443, &[8390657]);     // 443 => [8390657]
            map.insert(444, &[4718624]);     // 444 => [4718624]
            map.insert(445, &[65668]);     // 445 => [65668]
            map.insert(446, &[8390660]);     // 446 => [8390660]
            map.insert(447, &[2098184]);     // 447 => [2098184]
            map.insert(448, &[3073]);     // 448 => [3073]
            map.insert(449, &[3072]);     // 449 => [3072]
            map.insert(450, &[65604]);     // 450 => [65604]
            map.insert(451, &[3074]);     // 451 => [3074]
            map.insert(452, &[65602]);     // 452 => [65602]
            map.insert(453, &[3076]);     // 453 => [3076]
            map.insert(454, &[65600]);     // 454 => [65600]
            map.insert(455, &[65601]);     // 455 => [65601]
            map.insert(456, &[8705]);     // 456 => [8705]
            map.insert(457, &[8704]);     // 457 => [8704]
            map.insert(458, &[4194561]);     // 458 => [4194561]
            map.insert(459, &[4194560]);     // 459 => [4194560]
            map.insert(460, &[10485760]);     // 460 => [10485760]
            map.insert(461, &[10485761]);     // 461 => [10485761]
            map.insert(462, &[10485762]);     // 462 => [10485762]
            map.insert(463, &[4194564]);     // 463 => [4194564]
            map.insert(464, &[17440]);     // 464 => [17440]
            map.insert(465, &[65576]);     // 465 => [65576]
            map.insert(466, &[12713984]);     // 466 => [12713984]
            map.insert(467, &[524804]);     // 467 => [524804]
            map.insert(468, &[50593792]);     // 468 => [50593792]
            map.insert(469, &[524802]);     // 469 => [524802]
            map.insert(470, &[524801]);     // 470 => [524801]
            map.insert(471, &[524800]);     // 471 => [524800]
            map.insert(472, &[65569]);     // 472 => [65569]
            map.insert(473, &[65568]);     // 473 => [65568]
            map.insert(474, &[262336]);     // 474 => [262336]
            map.insert(475, &[65570]);     // 475 => [65570]
            map.insert(476, &[10485776]);     // 476 => [10485776]
            map.insert(477, &[65572]);     // 477 => [65572]
            map.insert(478, &[33685536]);     // 478 => [33685536]
            map.insert(479, &[524808]);     // 479 => [524808]
            map.insert(480, &[4353]);     // 480 => [4353]
            map.insert(481, &[4352]);     // 481 => [4352]
            map.insert(482, &[17825792]);     // 482 => [17825792]
            map.insert(483, &[17825793]);     // 483 => [17825793]
            map.insert(484, &[262273]);     // 484 => [262273]
            map.insert(485, &[262272]);     // 485 => [262272]
            map.insert(486, &[17825796]);     // 486 => [17825796]
            map.insert(487, &[262274]);     // 487 => [262274]
            map.insert(488, &[65553]);     // 488 => [65553]
            map.insert(489, &[65552]);     // 489 => [65552]
            map.insert(490, &[17825800]);     // 490 => [17825800]
            map.insert(491, &[65554]);     // 491 => [65554]
            map.insert(492, &[10485792]);     // 492 => [10485792]
            map.insert(493, &[65556]);     // 493 => [65556]
            map.insert(494, &[33685520]);     // 494 => [33685520]
            map.insert(495, &[3670016]);     // 495 => [3670016]
            map.insert(496, &[17408]);     // 496 => [17408]
            map.insert(497, &[65544]);     // 497 => [65544]
            map.insert(498, &[163841]);     // 498 => [163841]
            map.insert(499, &[163840]);     // 499 => [163840]
            map.insert(500, &[17412]);     // 500 => [17412]
            map.insert(501, &[65548]);     // 501 => [65548]
            map.insert(502, &[33685512]);     // 502 => [33685512]
            map.insert(503, &[163844]);     // 503 => [163844]
            map.insert(504, &[65537]);     // 504 => [65537]
            map.insert(505, &[65536]);     // 505 => [65536]
            map.insert(506, &[65539]);     // 506 => [65539]
            map.insert(507, &[65538]);     // 507 => [65538]
            map.insert(508, &[65541]);     // 508 => [65541]
            map.insert(509, &[65540]);     // 509 => [65540]
            map.insert(510, &[33685504]);     // 510 => [33685504]
            map.insert(511, &[33685505]);     // 511 => [33685505]
            map.insert(512, &[1024]);     // 512 => [1024]
            map.insert(513, &[1025]);     // 513 => [1025]
            map.insert(514, &[1026]);     // 514 => [1026]
            map.insert(515, &[1027]);     // 515 => [1027]
            map.insert(516, &[1028]);     // 516 => [1028]
            map.insert(517, &[1029]);     // 517 => [1029]
            map.insert(518, &[1030]);     // 518 => [1030]
            map.insert(519, &[1048840]);     // 519 => [1048840]
            map.insert(520, &[1032]);     // 520 => [1032]
            map.insert(521, &[81920]);     // 521 => [81920]
            map.insert(522, &[1034]);     // 522 => [1034]
            map.insert(523, &[81922]);     // 523 => [81922]
            map.insert(524, &[16781312]);     // 524 => [16781312]
            map.insert(525, &[16781313]);     // 525 => [16781313]
            map.insert(526, &[1048833]);     // 526 => [1048833]
            map.insert(527, &[1048832]);     // 527 => [1048832]
            map.insert(528, &[1040]);     // 528 => [1040]
            map.insert(529, &[33280]);     // 529 => [33280]
            map.insert(530, &[2359296]);     // 530 => [2359296]
            map.insert(531, &[2359297]);     // 531 => [2359297]
            map.insert(532, &[1044]);     // 532 => [1044]
            map.insert(533, &[33284]);     // 533 => [33284]
            map.insert(534, &[2359300]);     // 534 => [2359300]
            map.insert(535, &[37748864]);     // 535 => [37748864]
            map.insert(536, &[33554948]);     // 536 => [33554948]
            map.insert(537, &[33288]);     // 537 => [33288]
            map.insert(538, &[2359304]);     // 538 => [2359304]
            map.insert(539, &[8388768]);     // 539 => [8388768]
            map.insert(540, &[33554944]);     // 540 => [33554944]
            map.insert(541, &[33554945]);     // 541 => [33554945]
            map.insert(542, &[33554946]);     // 542 => [33554946]
            map.insert(543, &[1048848]);     // 543 => [1048848]
            map.insert(544, &[1056]);     // 544 => [1056]
            map.insert(545, &[1057]);     // 545 => [1057]
            map.insert(546, &[1058]);     // 546 => [1058]
            map.insert(547, &[139272]);     // 547 => [139272]
            map.insert(548, &[20971522]);     // 548 => [20971522]
            map.insert(549, &[655376]);     // 549 => [655376]
            map.insert(550, &[20971520]);     // 550 => [20971520]
            map.insert(551, &[20971521]);     // 551 => [20971521]
            map.insert(552, &[1064]);     // 552 => [1064]
            map.insert(553, &[139266]);     // 553 => [139266]
            map.insert(554, &[139265]);     // 554 => [139265]
            map.insert(555, &[139264]);     // 555 => [139264]
            map.insert(556, &[16781344]);     // 556 => [16781344]
            map.insert(557, &[2359360]);     // 557 => [2359360]
            map.insert(558, &[20971528]);     // 558 => [20971528]
            map.insert(559, &[139268]);     // 559 => [139268]
            map.insert(560, &[67592]);     // 560 => [67592]
            map.insert(561, &[655364]);     // 561 => [655364]
            map.insert(562, &[2359328]);     // 562 => [2359328]
            map.insert(563, &[8388744]);     // 563 => [8388744]
            map.insert(564, &[655361]);     // 564 => [655361]
            map.insert(565, &[655360]);     // 565 => [655360]
            map.insert(566, &[20971536]);     // 566 => [20971536]
            map.insert(567, &[655362]);     // 567 => [655362]
            map.insert(568, &[67584]);     // 568 => [67584]
            map.insert(569, &[67585]);     // 569 => [67585]
            map.insert(570, &[8388737]);     // 570 => [8388737]
            map.insert(571, &[8388736]);     // 571 => [8388736]
            map.insert(572, &[67588]);     // 572 => [67588]
            map.insert(573, &[1090]);     // 573 => [1090]
            map.insert(574, &[1089]);     // 574 => [1089]
            map.insert(575, &[1088]);     // 575 => [1088]
            map.insert(576, &[1152]);     // 576 => [1152]
            map.insert(577, &[1153]);     // 577 => [1153]
            map.insert(578, &[1154]);     // 578 => [1154]
            map.insert(579, &[4204544]);     // 579 => [4204544]
            map.insert(580, &[8388672]);     // 580 => [8388672]
            map.insert(581, &[8388673]);     // 581 => [8388673]
            map.insert(582, &[1056768]);     // 582 => [1056768]
            map.insert(583, &[1056769]);     // 583 => [1056769]
            map.insert(584, &[1160]);     // 584 => [1160]
            map.insert(585, &[82048]);     // 585 => [82048]
            map.insert(586, &[2162692]);     // 586 => [2162692]
            map.insert(587, &[8388656]);     // 587 => [8388656]
            map.insert(588, &[2162690]);     // 588 => [2162690]
            map.insert(589, &[16777760]);     // 589 => [16777760]
            map.insert(590, &[2162688]);     // 590 => [2162688]
            map.insert(591, &[2162689]);     // 591 => [2162689]
            map.insert(592, &[1572872]);     // 592 => [1572872]
            map.insert(593, &[278532]);     // 593 => [278532]
            map.insert(594, &[4227080]);     // 594 => [4227080]
            map.insert(595, &[37748740]);     // 595 => [37748740]
            map.insert(596, &[278529]);     // 596 => [278529]
            map.insert(597, &[278528]);     // 597 => [278528]
            map.insert(598, &[37748737]);     // 598 => [37748737]
            map.insert(599, &[37748736]);     // 599 => [37748736]
            map.insert(600, &[1572864]);     // 600 => [1572864]
            map.insert(601, &[1572865]);     // 601 => [1572865]
            map.insert(602, &[4227072]);     // 602 => [4227072]
            map.insert(603, &[8388640]);     // 603 => [8388640]
            map.insert(604, &[1572868]);     // 604 => [1572868]
            map.insert(605, &[278536]);     // 605 => [278536]
            map.insert(606, &[4227076]);     // 606 => [4227076]
            map.insert(607, &[8388644]);     // 607 => [8388644]
            map.insert(608, &[131330]);     // 608 => [131330]
            map.insert(609, &[5632]);     // 609 => [5632]
            map.insert(610, &[131328]);     // 610 => [131328]
            map.insert(611, &[131329]);     // 611 => [131329]
            map.insert(612, &[264192]);     // 612 => [264192]
            map.insert(613, &[264193]);     // 613 => [264193]
            map.insert(614, &[264194]);     // 614 => [264194]
            map.insert(615, &[1572928]);     // 615 => [1572928]
            map.insert(616, &[37748800]);     // 616 => [37748800]
            map.insert(617, &[8388626]);     // 617 => [8388626]
            map.insert(618, &[8388625]);     // 618 => [8388625]
            map.insert(619, &[8388624]);     // 619 => [8388624]
            map.insert(620, &[16777729]);     // 620 => [16777729]
            map.insert(621, &[16777728]);     // 621 => [16777728]
            map.insert(622, &[2162720]);     // 622 => [2162720]
            map.insert(623, &[16777730]);     // 623 => [16777730]
            map.insert(624, &[36864]);     // 624 => [36864]
            map.insert(625, &[36865]);     // 625 => [36865]
            map.insert(626, &[8388617]);     // 626 => [8388617]
            map.insert(627, &[8388616]);     // 627 => [8388616]
            map.insert(628, &[36868]);     // 628 => [36868]
            map.insert(629, &[33558536]);     // 629 => [33558536]
            map.insert(630, &[1114624]);     // 630 => [1114624]
            map.insert(631, &[8388620]);     // 631 => [8388620]
            map.insert(632, &[8388611]);     // 632 => [8388611]
            map.insert(633, &[8388610]);     // 633 => [8388610]
            map.insert(634, &[8388609]);     // 634 => [8388609]
            map.insert(635, &[8388608]);     // 635 => [8388608]
            map.insert(636, &[33558529]);     // 636 => [33558529]
            map.insert(637, &[33558528]);     // 637 => [33558528]
            map.insert(638, &[8388613]);     // 638 => [8388613]
            map.insert(639, &[8388612]);     // 639 => [8388612]
            map.insert(640, &[1280]);     // 640 => [1280]
            map.insert(641, &[1281]);     // 641 => [1281]
            map.insert(642, &[1282]);     // 642 => [1282]
            map.insert(643, &[1048588]);     // 643 => [1048588]
            map.insert(644, &[1284]);     // 644 => [1284]
            map.insert(645, &[1048586]);     // 645 => [1048586]
            map.insert(646, &[1048585]);     // 646 => [1048585]
            map.insert(647, &[1048584]);     // 647 => [1048584]
            map.insert(648, &[4196354]);     // 648 => [4196354]
            map.insert(649, &[1048582]);     // 649 => [1048582]
            map.insert(650, &[4196352]);     // 650 => [4196352]
            map.insert(651, &[1048580]);     // 651 => [1048580]
            map.insert(652, &[1048579]);     // 652 => [1048579]
            map.insert(653, &[1048578]);     // 653 => [1048578]
            map.insert(654, &[1048577]);     // 654 => [1048577]
            map.insert(655, &[1048576]);     // 655 => [1048576]
            map.insert(656, &[20481]);     // 656 => [20481]
            map.insert(657, &[20480]);     // 657 => [20480]
            map.insert(658, &[8396832]);     // 658 => [8396832]
            map.insert(659, &[20482]);     // 659 => [20482]
            map.insert(660, &[16842752]);     // 660 => [16842752]
            map.insert(661, &[16842753]);     // 661 => [16842753]
            map.insert(662, &[16842754]);     // 662 => [16842754]
            map.insert(663, &[1048600]);     // 663 => [1048600]
            map.insert(664, &[70656]);     // 664 => [70656]
            map.insert(665, &[20488]);     // 665 => [20488]
            map.insert(666, &[4196368]);     // 666 => [4196368]
            map.insert(667, &[1048596]);     // 667 => [1048596]
            map.insert(668, &[16842760]);     // 668 => [16842760]
            map.insert(669, &[1048594]);     // 669 => [1048594]
            map.insert(670, &[1048593]);     // 670 => [1048593]
            map.insert(671, &[1048592]);     // 671 => [1048592]
            map.insert(672, &[6144]);     // 672 => [6144]
            map.insert(673, &[6145]);     // 673 => [6145]
            map.insert(674, &[131200]);     // 674 => [131200]
            map.insert(675, &[131201]);     // 675 => [131201]
            map.insert(676, &[6148]);     // 676 => [6148]
            map.insert(677, &[33620096]);     // 677 => [33620096]
            map.insert(678, &[131204]);     // 678 => [131204]
            map.insert(679, &[1048616]);     // 679 => [1048616]
            map.insert(680, &[8912900]);     // 680 => [8912900]
            map.insert(681, &[33816592]);     // 681 => [33816592]
            map.insert(682, &[131208]);     // 682 => [131208]
            map.insert(683, &[1048612]);     // 683 => [1048612]
            map.insert(684, &[8912896]);     // 684 => [8912896]
            map.insert(685, &[8912897]);     // 685 => [8912897]
            map.insert(686, &[1048609]);     // 686 => [1048609]
            map.insert(687, &[1048608]);     // 687 => [1048608]
            map.insert(688, &[1048640]);     // 688 => [1048640]
            map.insert(689, &[1048641]);     // 689 => [1048641]
            map.insert(690, &[8396800]);     // 690 => [8396800]
            map.insert(691, &[8396801]);     // 691 => [8396801]
            map.insert(692, &[294912]);     // 692 => [294912]
            map.insert(693, &[294913]);     // 693 => [294913]
            map.insert(694, &[2097665]);     // 694 => [2097665]
            map.insert(695, &[2097664]);     // 695 => [2097664]
            map.insert(696, &[33816577]);     // 696 => [33816577]
            map.insert(697, &[33816576]);     // 697 => [33816576]
            map.insert(698, &[4210689]);     // 698 => [4210689]
            map.insert(699, &[4210688]);     // 699 => [4210688]
            map.insert(700, &[294920]);     // 700 => [294920]
            map.insert(701, &[33816580]);     // 701 => [33816580]
            map.insert(702, &[1067008]);     // 702 => [1067008]
            map.insert(703, &[4210692]);     // 703 => [4210692]
            map.insert(704, &[2561]);     // 704 => [2561]
            map.insert(705, &[2560]);     // 705 => [2560]
            map.insert(706, &[131104]);     // 706 => [131104]
            map.insert(707, &[131105]);     // 707 => [131105]
            map.insert(708, &[8388928]);     // 708 => [8388928]
            map.insert(709, &[2564]);     // 709 => [2564]
            map.insert(710, &[131108]);     // 710 => [131108]
            map.insert(711, &[1048712]);     // 711 => [1048712]
            map.insert(712, &[17039360]);     // 712 => [17039360]
            map.insert(713, &[9216]);     // 713 => [9216]
            map.insert(714, &[17039362]);     // 714 => [17039362]
            map.insert(715, &[9218]);     // 715 => [9218]
            map.insert(716, &[17039364]);     // 716 => [17039364]
            map.insert(717, &[1048706]);     // 717 => [1048706]
            map.insert(718, &[1048705]);     // 718 => [1048705]
            map.insert(719, &[1048704]);     // 719 => [1048704]
            map.insert(720, &[16928]);     // 720 => [16928]
            map.insert(721, &[2576]);     // 721 => [2576]
            map.insert(722, &[2101252]);     // 722 => [2101252]
            map.insert(723, &[525316]);     // 723 => [525316]
            map.insert(724, &[2101250]);     // 724 => [2101250]
            map.insert(725, &[525314]);     // 725 => [525314]
            map.insert(726, &[2101248]);     // 726 => [2101248]
            map.insert(727, &[525312]);     // 727 => [525312]
            map.insert(728, &[17039376]);     // 728 => [17039376]
            map.insert(729, &[131140]);     // 729 => [131140]
            map.insert(730, &[33620032]);     // 730 => [33620032]
            map.insert(731, &[8388896]);     // 731 => [8388896]
            map.insert(732, &[131137]);     // 732 => [131137]
            map.insert(733, &[131136]);     // 733 => [131136]
            map.insert(734, &[2101256]);     // 734 => [2101256]
            map.insert(735, &[131138]);     // 735 => [131138]
            map.insert(736, &[131074]);     // 736 => [131074]
            map.insert(737, &[131075]);     // 737 => [131075]
            map.insert(738, &[131072]);     // 738 => [131072]
            map.insert(739, &[131073]);     // 739 => [131073]
            map.insert(740, &[33619969]);     // 740 => [33619969]
            map.insert(741, &[33619968]);     // 741 => [33619968]
            map.insert(742, &[131076]);     // 742 => [131076]
            map.insert(743, &[131077]);     // 743 => [131077]
            map.insert(744, &[98304]);     // 744 => [98304]
            map.insert(745, &[98305]);     // 745 => [98305]
            map.insert(746, &[131080]);     // 746 => [131080]
            map.insert(747, &[131081]);     // 747 => [131081]
            map.insert(748, &[98308]);     // 748 => [98308]
            map.insert(749, &[33619976]);     // 749 => [33619976]
            map.insert(750, &[131084]);     // 750 => [131084]
            map.insert(751, &[1048736]);     // 751 => [1048736]
            map.insert(752, &[16896]);     // 752 => [16896]
            map.insert(753, &[16897]);     // 753 => [16897]
            map.insert(754, &[131088]);     // 754 => [131088]
            map.insert(755, &[131089]);     // 755 => [131089]
            map.insert(756, &[16900]);     // 756 => [16900]
            map.insert(757, &[33619984]);     // 757 => [33619984]
            map.insert(758, &[131092]);     // 758 => [131092]
            map.insert(759, &[525344]);     // 759 => [525344]
            map.insert(760, &[6291460]);     // 760 => [6291460]
            map.insert(761, &[8388866]);     // 761 => [8388866]
            map.insert(762, &[8388865]);     // 762 => [8388865]
            map.insert(763, &[8388864]);     // 763 => [8388864]
            map.insert(764, &[6291456]);     // 764 => [6291456]
            map.insert(765, &[6291457]);     // 765 => [6291457]
            map.insert(766, &[6291458]);     // 766 => [6291458]
            map.insert(767, &[8388868]);     // 767 => [8388868]
            map.insert(768, &[1536]);     // 768 => [1536]
            map.insert(769, &[32784]);     // 769 => [32784]
            map.insert(770, &[1538]);     // 770 => [1538]
            map.insert(771, &[32786]);     // 771 => [32786]
            map.insert(772, &[1540]);     // 772 => [1540]
            map.insert(773, &[32788]);     // 773 => [32788]
            map.insert(774, &[526352]);     // 774 => [526352]
            map.insert(775, &[540704]);     // 775 => [540704]
            map.insert(776, &[10240]);     // 776 => [10240]
            map.insert(777, &[10241]);     // 777 => [10241]
            map.insert(778, &[10242]);     // 778 => [10242]
            map.insert(779, &[196624]);     // 779 => [196624]
            map.insert(780, &[33554448]);     // 780 => [33554448]
            map.insert(781, &[33554449]);     // 781 => [33554449]
            map.insert(782, &[33554450]);     // 782 => [33554450]
            map.insert(783, &[12582976]);     // 783 => [12582976]
            map.insert(784, &[32769]);     // 784 => [32769]
            map.insert(785, &[32768]);     // 785 => [32768]
            map.insert(786, &[32771]);     // 786 => [32771]
            map.insert(787, &[32770]);     // 787 => [32770]
            map.insert(788, &[33554440]);     // 788 => [33554440]
            map.insert(789, &[32772]);     // 789 => [32772]
            map.insert(790, &[526336]);     // 790 => [526336]
            map.insert(791, &[526337]);     // 791 => [526337]
            map.insert(792, &[33554436]);     // 792 => [33554436]
            map.insert(793, &[32776]);     // 793 => [32776]
            map.insert(794, &[8392704]);     // 794 => [8392704]
            map.insert(795, &[196608]);     // 795 => [196608]
            map.insert(796, &[33554432]);     // 796 => [33554432]
            map.insert(797, &[33554433]);     // 797 => [33554433]
            map.insert(798, &[33554434]);     // 798 => [33554434]
            map.insert(799, &[33554435]);     // 799 => [33554435]
            map.insert(800, &[12582928]);     // 800 => [12582928]
            map.insert(801, &[33554498]);     // 801 => [33554498]
            map.insert(802, &[33554497]);     // 802 => [33554497]
            map.insert(803, &[33554496]);     // 803 => [33554496]
            map.insert(804, &[196672]);     // 804 => [196672]
            map.insert(805, &[540674]);     // 805 => [540674]
            map.insert(806, &[540673]);     // 806 => [540673]
            map.insert(807, &[540672]);     // 807 => [540672]
            map.insert(808, &[1310722]);     // 808 => [1310722]
            map.insert(809, &[16777348]);     // 809 => [16777348]
            map.insert(810, &[1310720]);     // 810 => [1310720]
            map.insert(811, &[1310721]);     // 811 => [1310721]
            map.insert(812, &[16777345]);     // 812 => [16777345]
            map.insert(813, &[16777344]);     // 813 => [16777344]
            map.insert(814, &[32832]);     // 814 => [32832]
            map.insert(815, &[32833]);     // 815 => [32833]
            map.insert(816, &[12582912]);     // 816 => [12582912]
            map.insert(817, &[32800]);     // 817 => [32800]
            map.insert(818, &[12582914]);     // 818 => [12582914]
            map.insert(819, &[32802]);     // 819 => [32802]
            map.insert(820, &[12582916]);     // 820 => [12582916]
            map.insert(821, &[2097410]);     // 821 => [2097410]
            map.insert(822, &[2097409]);     // 822 => [2097409]
            map.insert(823, &[2097408]);     // 823 => [2097408]
            map.insert(824, &[24577]);     // 824 => [24577]
            map.insert(825, &[24576]);     // 825 => [24576]
            map.insert(826, &[1310736]);     // 826 => [1310736]
            map.insert(827, &[24578]);     // 827 => [24578]
            map.insert(828, &[33554464]);     // 828 => [33554464]
            map.insert(829, &[33554465]);     // 829 => [33554465]
            map.insert(830, &[33554466]);     // 830 => [33554466]
            map.insert(831, &[2097416]);     // 831 => [2097416]
            map.insert(832, &[2305]);     // 832 => [2305]
            map.insert(833, &[2304]);     // 833 => [2304]
            map.insert(834, &[16777296]);     // 834 => [16777296]
            map.insert(835, &[2306]);     // 835 => [2306]
            map.insert(836, &[8389184]);     // 836 => [8389184]
            map.insert(837, &[393218]);     // 837 => [393218]
            map.insert(838, &[393217]);     // 838 => [393217]
            map.insert(839, &[393216]);     // 839 => [393216]
            map.insert(840, &[10368]);     // 840 => [10368]
            map.insert(841, &[4195330]);     // 841 => [4195330]
            map.insert(842, &[4195329]);     // 842 => [4195329]
            map.insert(843, &[4195328]);     // 843 => [4195328]
            map.insert(844, &[16777249]);     // 844 => [16777249]
            map.insert(845, &[16777248]);     // 845 => [16777248]
            map.insert(846, &[2163200]);     // 846 => [2163200]
            map.insert(847, &[16777250]);     // 847 => [16777250]
            map.insert(848, &[32897]);     // 848 => [32897]
            map.insert(849, &[32896]);     // 849 => [32896]
            map.insert(850, &[16777280]);     // 850 => [16777280]
            map.insert(851, &[16777281]);     // 851 => [16777281]
            map.insert(852, &[33554568]);     // 852 => [33554568]
            map.insert(853, &[32900]);     // 853 => [32900]
            map.insert(854, &[16777284]);     // 854 => [16777284]
            map.insert(855, &[393232]);     // 855 => [393232]
            map.insert(856, &[33554564]);     // 856 => [33554564]
            map.insert(857, &[32904]);     // 857 => [32904]
            map.insert(858, &[16777288]);     // 858 => [16777288]
            map.insert(859, &[4195344]);     // 859 => [4195344]
            map.insert(860, &[33554560]);     // 860 => [33554560]
            map.insert(861, &[33554561]);     // 861 => [33554561]
            map.insert(862, &[33554562]);     // 862 => [33554562]
            map.insert(863, &[2621504]);     // 863 => [2621504]
            map.insert(864, &[2621440]);     // 864 => [2621440]
            map.insert(865, &[5120]);     // 865 => [5120]
            map.insert(866, &[2621442]);     // 866 => [2621442]
            map.insert(867, &[5122]);     // 867 => [5122]
            map.insert(868, &[16777225]);     // 868 => [16777225]
            map.insert(869, &[16777224]);     // 869 => [16777224]
            map.insert(870, &[1114128]);     // 870 => [1114128]
            map.insert(871, &[16777226]);     // 871 => [16777226]
            map.insert(872, &[16777221]);     // 872 => [16777221]
            map.insert(873, &[16777220]);     // 873 => [16777220]
            map.insert(874, &[1310848]);     // 874 => [1310848]
            map.insert(875, &[16777222]);     // 875 => [16777222]
            map.insert(876, &[16777217]);     // 876 => [16777217]
            map.insert(877, &[16777216]);     // 877 => [16777216]
            map.insert(878, &[16777219]);     // 878 => [16777219]
            map.insert(879, &[16777218]);     // 879 => [16777218]
            map.insert(880, &[16640]);     // 880 => [16640]
            map.insert(881, &[16641]);     // 881 => [16641]
            map.insert(882, &[16642]);     // 882 => [16642]
            map.insert(883, &[8389128]);     // 883 => [8389128]
            map.insert(884, &[1114114]);     // 884 => [1114114]
            map.insert(885, &[16777240]);     // 885 => [16777240]
            map.insert(886, &[1114112]);     // 886 => [1114112]
            map.insert(887, &[1114113]);     // 887 => [1114113]
            map.insert(888, &[16648]);     // 888 => [16648]
            map.insert(889, &[8389122]);     // 889 => [8389122]
            map.insert(890, &[8389121]);     // 890 => [8389121]
            map.insert(891, &[8389120]);     // 891 => [8389120]
            map.insert(892, &[16777233]);     // 892 => [16777233]
            map.insert(893, &[16777232]);     // 893 => [16777232]
            map.insert(894, &[2105344]);     // 894 => [2105344]
            map.insert(895, &[2105345]);     // 895 => [2105345]
            map.insert(896, &[2177]);     // 896 => [2177]
            map.insert(897, &[2176]);     // 897 => [2176]
            map.insert(898, &[8454144]);     // 898 => [8454144]
            map.insert(899, &[135168]);     // 899 => [135168]
            map.insert(900, &[16785440]);     // 900 => [16785440]
            map.insert(901, &[2180]);     // 901 => [2180]
            map.insert(902, &[8454148]);     // 902 => [8454148]
            map.insert(903, &[135172]);     // 903 => [135172]
            map.insert(904, &[2097216]);     // 904 => [2097216]
            map.insert(905, &[2097217]);     // 905 => [2097217]
            map.insert(906, &[2097218]);     // 906 => [2097218]
            map.insert(907, &[1049092]);     // 907 => [1049092]
            map.insert(908, &[2097220]);     // 908 => [2097220]
            map.insert(909, &[1049090]);     // 909 => [1049090]
            map.insert(910, &[1049089]);     // 910 => [1049089]
            map.insert(911, &[1049088]);     // 911 => [1049088]
            map.insert(912, &[33025]);     // 912 => [33025]
            map.insert(913, &[33024]);     // 913 => [33024]
            map.insert(914, &[8454160]);     // 914 => [8454160]
            map.insert(915, &[33026]);     // 915 => [33026]
            map.insert(916, &[33554696]);     // 916 => [33554696]
            map.insert(917, &[2097186]);     // 917 => [2097186]
            map.insert(918, &[2097185]);     // 918 => [2097185]
            map.insert(919, &[2097184]);     // 919 => [2097184]
            map.insert(920, &[33554692]);     // 920 => [33554692]
            map.insert(921, &[33032]);     // 921 => [33032]
            map.insert(922, &[17301536]);     // 922 => [17301536]
            map.insert(923, &[16785472]);     // 923 => [16785472]
            map.insert(924, &[33554688]);     // 924 => [33554688]
            map.insert(925, &[33554689]);     // 925 => [33554689]
            map.insert(926, &[33554690]);     // 926 => [33554690]
            map.insert(927, &[2097192]);     // 927 => [2097192]
            map.insert(928, &[16785412]);     // 928 => [16785412]
            map.insert(929, &[263172]);     // 929 => [263172]
            map.insert(930, &[8454176]);     // 930 => [8454176]
            map.insert(931, &[2097172]);     // 931 => [2097172]
            map.insert(932, &[16785408]);     // 932 => [16785408]
            map.insert(933, &[263168]);     // 933 => [263168]
            map.insert(934, &[2097169]);     // 934 => [2097169]
            map.insert(935, &[2097168]);     // 935 => [2097168]
            map.insert(936, &[4325377]);     // 936 => [4325377]
            map.insert(937, &[4325376]);     // 937 => [4325376]
            map.insert(938, &[17301520]);     // 938 => [17301520]
            map.insert(939, &[4325378]);     // 939 => [4325378]
            map.insert(940, &[16785416]);     // 940 => [16785416]
            map.insert(941, &[4325380]);     // 941 => [4325380]
            map.insert(942, &[33088]);     // 942 => [33088]
            map.insert(943, &[2097176]);     // 943 => [2097176]
            map.insert(944, &[16512]);     // 944 => [16512]
            map.insert(945, &[16513]);     // 945 => [16513]
            map.insert(946, &[2097157]);     // 946 => [2097157]
            map.insert(947, &[2097156]);     // 947 => [2097156]
            map.insert(948, &[2097155]);     // 948 => [2097155]
            map.insert(949, &[2097154]);     // 949 => [2097154]
            map.insert(950, &[2097153]);     // 950 => [2097153]
            map.insert(951, &[2097152]);     // 951 => [2097152]
            map.insert(952, &[17301506]);     // 952 => [17301506]
            map.insert(953, &[4325392]);     // 953 => [4325392]
            map.insert(954, &[17301504]);     // 954 => [17301504]
            map.insert(955, &[17301505]);     // 955 => [17301505]
            map.insert(956, &[33554720]);     // 956 => [33554720]
            map.insert(957, &[2097162]);     // 957 => [2097162]
            map.insert(958, &[2097161]);     // 958 => [2097161]
            map.insert(959, &[2097160]);     // 959 => [2097160]
            map.insert(960, &[2049]);     // 960 => [2049]
            map.insert(961, &[2048]);     // 961 => [2048]
            map.insert(962, &[2051]);     // 962 => [2051]
            map.insert(963, &[2050]);     // 963 => [2050]
            map.insert(964, &[5242880]);     // 964 => [5242880]
            map.insert(965, &[2052]);     // 965 => [2052]
            map.insert(966, &[557056]);     // 966 => [557056]
            map.insert(967, &[557057]);     // 967 => [557057]
            map.insert(968, &[2057]);     // 968 => [2057]
            map.insert(969, &[2056]);     // 969 => [2056]
            map.insert(970, &[34078721]);     // 970 => [34078721]
            map.insert(971, &[34078720]);     // 971 => [34078720]
            map.insert(972, &[5242888]);     // 972 => [5242888]
            map.insert(973, &[16450]);     // 973 => [16450]
            map.insert(974, &[16449]);     // 974 => [16449]
            map.insert(975, &[16448]);     // 975 => [16448]
            map.insert(976, &[16416]);     // 976 => [16416]
            map.insert(977, &[2064]);     // 977 => [2064]
            map.insert(978, &[16418]);     // 978 => [16418]
            map.insert(979, &[2066]);     // 979 => [2066]
            map.insert(980, &[33562625]);     // 980 => [33562625]
            map.insert(981, &[33562624]);     // 981 => [33562624]
            map.insert(982, &[8650760]);     // 982 => [8650760]
            map.insert(983, &[33562626]);     // 983 => [33562626]
            map.insert(984, &[40960]);     // 984 => [40960]
            map.insert(985, &[40961]);     // 985 => [40961]
            map.insert(986, &[40962]);     // 986 => [40962]
            map.insert(987, &[34078736]);     // 987 => [34078736]
            map.insert(988, &[8650754]);     // 988 => [8650754]
            map.insert(989, &[33562632]);     // 989 => [33562632]
            map.insert(990, &[8650752]);     // 990 => [8650752]
            map.insert(991, &[8650753]);     // 991 => [8650753]
            map.insert(992, &[16400]);     // 992 => [16400]
            map.insert(993, &[2080]);     // 993 => [2080]
            map.insert(994, &[131584]);     // 994 => [131584]
            map.insert(995, &[131585]);     // 995 => [131585]
            map.insert(996, &[16404]);     // 996 => [16404]
            map.insert(997, &[2084]);     // 997 => [2084]
            map.insert(998, &[131588]);     // 998 => [131588]
            map.insert(999, &[2097296]);     // 999 => [2097296]
            map.insert(1000, &[16408]);     // 1000 => [16408]
            map.insert(1001, &[16777476]);     // 1001 => [16777476]
            map.insert(1002, &[1052676]);     // 1002 => [1052676]
            map.insert(1003, &[34078752]);     // 1003 => [34078752]
            map.insert(1004, &[16777473]);     // 1004 => [16777473]
            map.insert(1005, &[16777472]);     // 1005 => [16777472]
            map.insert(1006, &[1052672]);     // 1006 => [1052672]
            map.insert(1007, &[1052673]);     // 1007 => [1052673]
            map.insert(1008, &[16384]);     // 1008 => [16384]
            map.insert(1009, &[16385]);     // 1009 => [16385]
            map.insert(1010, &[16386]);     // 1010 => [16386]
            map.insert(1011, &[16387]);     // 1011 => [16387]
            map.insert(1012, &[16388]);     // 1012 => [16388]
            map.insert(1013, &[16389]);     // 1013 => [16389]
            map.insert(1014, &[2097281]);     // 1014 => [2097281]
            map.insert(1015, &[2097280]);     // 1015 => [2097280]
            map.insert(1016, &[16392]);     // 1016 => [16392]
            map.insert(1017, &[66560]);     // 1017 => [66560]
            map.insert(1018, &[16394]);     // 1018 => [16394]
            map.insert(1019, &[66562]);     // 1019 => [66562]
            map.insert(1020, &[2114]);     // 1020 => [2114]
            map.insert(1021, &[66564]);     // 1021 => [66564]
            map.insert(1022, &[2112]);     // 1022 => [2112]
            map.insert(1023, &[2113]);     // 1023 => [2113]
            
            SYNDROME_MAP = Box::into_raw(map);
        }
    });
}

impl WagnerCode26_16 {
    fn parity_check_matrix_transposed(&self) -> &BinMatrix {
        init();
        unsafe {
            PARITY_MATRIX_T.as_ref().unwrap()
        }
    }
}

impl BinaryCode for WagnerCode26_16 {
    fn name(&self) -> String {
        "[26, 16] Wagner code".to_owned()
    }

    fn length(&self) -> usize {
        26
    }

    fn dimension(&self) -> usize {
        16
    }

    fn generator_matrix(&self) -> &BinMatrix {
        init();
        unsafe {
            GENERATOR_MATRIX.as_ref().unwrap()
        }
    }

    fn parity_check_matrix(&self) -> &BinMatrix {
        init();
        unsafe {
            PARITY_MATRIX.as_ref().unwrap()
        }
    }

    fn decode_to_code(&self, c: &BinVector) -> Result<BinVector, &str> {
        init();
        let map = unsafe {
            SYNDROME_MAP.as_ref().unwrap()
        };
        debug_assert_eq!(c.len(), self.length(), "the length doesn't match the expected length (length of the code)");
        let he = c * self.parity_check_matrix_transposed();
        let mut error = BinVector::with_capacity(26);
        let stor = unsafe { error.get_storage_mut() };
        let errbytes = map[&he.as_u64()];
        debug_assert_eq!(errbytes.len(), 26 / 64 + if 26 % 64 != 0 { 1 } else { 0 });
        stor.clear();
        stor.extend_from_slice(&errbytes[..]);
        unsafe { error.set_len(26) };
        debug_assert_eq!(error.len(), self.length(), "internal: the error vector is of the wrong length");
        let result = c + &error;
        debug_assert_eq!(result.len(), self.length(), "internal: the result vector is of the wrong length");
        debug_assert_eq!((&result * self.parity_check_matrix_transposed()).count_ones(), 0);
        Ok(result)
    }

    fn decode_to_message(&self, c: &BinVector) -> Result<BinVector, &str> {
        
        let mut codeword = self.decode_to_code(c)?;
        codeword.truncate(16);
        Ok(codeword)
        
    }

    fn decode_slice(&self, c: &mut [u64]) {
        init();
        
        debug_assert_eq!(c[26 / 64] & !((1 << 26) - 1), 0, "this message has excess bits");

        let map = unsafe {
            SYNDROME_MAP.as_ref().unwrap()
        };
        let he = &BinMatrix::from_slices(&[&c[..]], self.length()) * self.parity_check_matrix_transposed();
        let error = map[unsafe { &he.get_word_unchecked(0, 0) }];
        c.iter_mut().zip(error.iter().copied()).for_each(|(sample, error)| *sample ^= error as u64);
    }

    
}

#[cfg(test)]
mod tests {
    use super::*;
    use m4ri_rust::friendly::BinVector;
    use crate::oracle::Sample;

    #[test]
    fn size() {
        let code = WagnerCode26_16.generator_matrix();
        assert_eq!(code.ncols(), 26);
        assert_eq!(code.nrows(), 16);
    }

    #[test]
    fn test_decode_sample() {
        let code = WagnerCode26_16;
        for _ in 0..1000 {
            // setup
            let vec = BinVector::random(code.length());
            let mut sample_a = Sample::from_binvector(&vec, false);
            let mut sample_b = Sample::from_binvector(&vec, true);
            
            let decoded_vec = code.decode_to_message(&vec).unwrap();
            println!("decoded_vec: {:?}", decoded_vec);

            // test vectors
            let decoded_vec_sample_a = Sample::from_binvector(&decoded_vec, false);
            let decoded_vec_sample_b = Sample::from_binvector(&decoded_vec, true);

            code.decode_sample(&mut sample_a);
            code.decode_sample(&mut sample_b);
            assert_eq!(sample_a.get_product(), false);
            assert_eq!(sample_b.get_product(), true);
            assert_eq!(sample_a, decoded_vec_sample_a);
            assert_eq!(sample_b, decoded_vec_sample_b);
        }
    }

    #[test]
    fn random_decode_tests() {

        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, true, false, false, false, true, true, false, false, true, true, true, false, false, false, false, false, true, true, true, false, true, true, true, true]);
            let codeword = BinVector::from_bools(&[true, false, true, false, true, false, true, true, false, false, true, false, true, false, false, false, false, false, true, true, true, true, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, true, false, true, true, false, false, false, true, false, true, true, true, true, true, false, false, false]);
            let codeword = BinVector::from_bools(&[false, false, true, false, false, false, false, true, false, true, false, true, true, false, false, false, true, false, true, true, true, true, true, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, true, true, false, true, true, false, false, false, true, false, true, false, true, false, true, false, true, true, true, false, true, false, true, true]);
            let codeword = BinVector::from_bools(&[false, false, true, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, true, false, true, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, false, true, false, false, true, true, false, true, false, false, false, true, true, true, true, false, false, true, false, false, true, false, true, false]);
            let codeword = BinVector::from_bools(&[false, true, false, true, false, false, true, true, false, true, false, false, false, true, false, true, true, false, true, true, false, false, true, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, true, true, false, false, true, false, true, false, true, false, false, false, true, false, true, true, true, true, false, false, false, false, false, false]);
            let codeword = BinVector::from_bools(&[false, false, true, true, false, false, true, false, true, false, true, false, false, false, true, false, true, true, false, true, true, false, false, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, true, true, false, false, true, true, true, true, true, false, true, false, true, false, false, false, true, true, false, false, true, false, false, true]);
            let codeword = BinVector::from_bools(&[true, false, true, true, false, false, true, true, true, true, true, false, true, true, true, false, false, false, true, true, true, false, true, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, true, true, false, true, true, true, true, true, true, false, true, true, false, true, false, true, false, true, false, false, true, true, true, true]);
            let codeword = BinVector::from_bools(&[true, false, true, true, false, false, false, true, true, true, true, false, true, true, false, true, false, true, false, true, false, false, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, false, true, true, true, false, true, true, false, true, true, true, true, true, true, false, false, false, true, true, true, true, false, true, false]);
            let codeword = BinVector::from_bools(&[true, true, false, true, true, true, false, true, true, false, true, true, true, true, true, true, false, false, false, false, true, true, true, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, false, false, true, false, false, true, true, false, true, false, true, false, true, true, false, false, true, false, false, false, true, true, true, false]);
            let codeword = BinVector::from_bools(&[true, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, false, false, false, false, false, false, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, true, true, false, true, true, false, true, true, false, true, false, true, false, false, true, false, true, false, false, true, true, true, true, false]);
            let codeword = BinVector::from_bools(&[false, false, true, false, false, true, true, false, false, true, false, true, false, true, false, false, true, false, false, false, false, true, true, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, true, true, true, true, false, false, false, false, false, false, true, true, true, false, true, false, true, false, true, false, true, true, false, true]);
            let codeword = BinVector::from_bools(&[true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, false, false, false, true, false, true, false, true, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, true, false, false, true, true, false, true, false, true, true, false, true, false, false, true, false, false, false, false, false, true, false, true, false]);
            let codeword = BinVector::from_bools(&[false, true, true, false, false, true, true, false, true, false, true, true, false, true, false, false, false, false, false, false, false, true, true, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, false, false, false, true, false, false, false, true, true, true, false, false, false, false, false, true, true, true, false, false, false, true, false, true]);
            let codeword = BinVector::from_bools(&[true, true, true, false, false, true, false, false, false, false, true, true, false, false, false, true, false, true, true, true, false, false, false, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, true, true, true, true, false, true, false, false, true, false, false, false, false, false, true, false, true, true, false, true, false, true, true, true]);
            let codeword = BinVector::from_bools(&[true, false, true, true, true, true, false, true, false, false, false, false, false, false, false, false, true, false, true, true, false, true, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, false, false, true, true, true, false, true, true, false, true, true, true, false, false, false, false, false, false, true, false, true, false, false, false]);
            let codeword = BinVector::from_bools(&[false, true, false, false, true, false, true, false, true, true, false, true, true, true, false, false, false, false, false, false, true, false, true, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, true, true, false, true, true, false, false, true, true, true, false, true, true, true, true, true, false, true, true, true, false, true, false, false]);
            let codeword = BinVector::from_bools(&[true, true, true, true, false, true, true, false, false, true, true, false, false, true, true, true, true, true, false, true, true, false, false, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, false, true, true, false, false, false, false, false, true, false, false, false, true, false, false, true, true, true, true, false, true, false, true, false]);
            let codeword = BinVector::from_bools(&[false, true, true, true, true, false, false, false, false, false, false, false, false, false, true, false, false, true, true, false, true, false, true, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, false, false, false, false, false, true, false, false, false, true, true, false, false, false, true, false, true, true, true, false, false, true, false, false]);
            let codeword = BinVector::from_bools(&[true, true, false, true, false, false, false, true, false, false, false, true, true, false, false, false, false, false, true, true, true, false, false, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, true, true, true, true, true, false, true, true, false, false, true, false, true, true, true, false, false, false, false, true, true, true, false, false]);
            let codeword = BinVector::from_bools(&[true, false, true, false, true, true, false, false, true, true, false, false, true, false, true, true, true, false, false, false, false, true, false, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, false, false, true, true, false, false, false, true, false, true, true, true, true, true, true, true, true, true, true, true, false, true, true, false]);
            let codeword = BinVector::from_bools(&[false, true, true, false, true, true, false, false, false, true, false, true, true, true, true, true, false, true, true, true, true, true, false, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, true, true, true, true, false, true, true, false, false, false, true, true, false, false, true, false, false, false, false, true, true, false, false, true]);
            let codeword = BinVector::from_bools(&[true, true, true, true, true, true, false, true, true, false, false, true, true, true, false, false, true, false, false, false, true, true, true, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, true, true, true, false, true, false, false, false, false, false, true, true, true, false, true, false, true, true, false, false, false, true, true, false]);
            let codeword = BinVector::from_bools(&[true, true, false, true, true, true, true, false, false, false, false, true, true, true, true, false, true, false, true, true, false, false, false, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, true, false, true, false, false, false, true, true, true, false, true, true, true, true, false, true, false, false, true, false, false, false, false, false]);
            let codeword = BinVector::from_bools(&[false, false, true, false, true, false, true, false, true, true, true, false, true, true, true, true, false, true, false, false, false, false, false, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, true, true, false, true, true, false, false, false, true, false, false, true, false, true, false, false, true, true, true, false, false, true, false, true]);
            let codeword = BinVector::from_bools(&[false, false, true, true, false, true, true, true, false, false, true, false, false, true, false, false, false, false, true, true, true, false, false, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, true, true, false, true, true, false, false, true, false, false, true, true, true, true, false, false, false, false, false, false, true, false, true, true]);
            let codeword = BinVector::from_bools(&[true, false, true, true, false, true, true, false, false, true, false, false, false, true, true, true, false, false, false, false, false, false, true, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, true, false, true, true, true, true, false, true, true, false, false, true, false, true, true, false, true, true, true, false, false, false, false, false]);
            let codeword = BinVector::from_bools(&[true, true, true, false, true, true, true, true, false, true, true, false, false, true, false, true, false, false, true, true, true, false, false, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, false, false, false, true, false, true, false, true, true, true, true, false, true, false, false, true, false, false, true, false, false, true, false, false]);
            let codeword = BinVector::from_bools(&[false, true, true, false, false, false, false, true, false, true, true, true, true, false, true, false, false, true, false, false, true, false, false, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, true, false, false, true, false, true, false, false, true, false, false, false, false, true, false, true, true, true, false, false, false, false, true, false]);
            let codeword = BinVector::from_bools(&[true, true, true, false, false, true, false, true, false, false, true, false, false, false, true, true, false, true, true, true, false, false, false, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, false, true, true, true, false, true, false, false, false, true, false, false, false, false, true, false, false, false, false, true, true, true, true, false]);
            let codeword = BinVector::from_bools(&[false, true, false, true, true, true, false, true, false, false, false, true, true, true, false, false, true, false, false, false, false, true, true, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, false, false, true, true, true, false, false, true, true, false, true, false, false, true, true, false, false, true, false, false, true, false, false, true]);
            let codeword = BinVector::from_bools(&[false, true, true, false, true, true, true, false, false, true, false, false, true, false, false, true, true, false, false, true, false, false, true, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, true, false, false, false, false, false, true, true, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false]);
            let codeword = BinVector::from_bools(&[false, false, true, false, true, false, false, false, true, true, true, false, false, false, true, false, false, false, true, true, false, false, false, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, false, true, true, true, false, false, false, true, true, true, true, false, true, false, false, false, false, false, false, true, false, false, true, false]);
            let codeword = BinVector::from_bools(&[false, false, false, true, true, true, false, false, false, true, true, true, true, true, true, false, false, false, false, false, false, true, false, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, true, true, false, false, false, false, false, true, false, false, false, false, false, true, true, false, false, false, false, true, false, false, false, true]);
            let codeword = BinVector::from_bools(&[false, true, true, true, false, true, false, false, false, true, false, false, false, false, false, true, true, false, false, false, false, true, false, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, false, false, true, false, true, false, false, false, true, true, false, false, true, true, false, false, true, false, false, true, true, false, false, false]);
            let codeword = BinVector::from_bools(&[true, false, false, false, true, false, true, false, false, false, true, true, false, false, true, true, false, false, true, false, false, true, false, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, true, false, false, true, true, false, false, false, false, false, false, true, true, true, true, true, true, true, false, true, true, true, false, true]);
            let codeword = BinVector::from_bools(&[false, false, true, false, false, true, true, false, false, false, true, true, false, true, true, true, true, true, true, true, false, true, true, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, false, true, false, false, false, false, false, true, true, true, false, false, true, false, false, true, true, true, false, false, true, false, true, false]);
            let codeword = BinVector::from_bools(&[false, false, false, true, false, false, false, false, false, true, true, true, false, false, true, false, false, true, true, true, true, false, true, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, false, true, true, true, true, true, true, false, false, false, false, false, true, true, false, true, true, true, true, true, true, false, true, true]);
            let codeword = BinVector::from_bools(&[true, true, false, true, true, true, true, true, true, false, false, false, false, false, true, true, false, true, true, true, true, false, true, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, false, false, true, true, false, true, true, false, true, true, false, true, true, true, true, false, true, true, false, false, false, false, false, true]);
            let codeword = BinVector::from_bools(&[true, false, false, false, true, true, false, true, true, false, true, true, false, true, true, true, true, false, true, true, true, false, false, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, true, true, false, false, true, true, false, true, false, false, true, true, false, true, true, false, true, false, true, false, false, false, false, false]);
            let codeword = BinVector::from_bools(&[false, false, true, false, false, false, true, true, false, true, true, false, true, true, false, false, true, false, true, false, true, false, false, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, true, false, false, true, true, true, false, false, true, true, false, false, false, true, false, true, true, true, false, false, true, false, false, true]);
            let codeword = BinVector::from_bools(&[true, false, true, false, false, false, true, true, false, false, true, true, false, false, false, true, false, true, true, true, false, false, true, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, true, false, true, false, true, true, false, false, false, false, false, false, false, true, true, false, false, true, false, false, true, false, false, false]);
            let codeword = BinVector::from_bools(&[true, true, true, false, true, false, true, true, false, false, false, false, false, false, false, true, true, false, false, true, false, false, true, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, false, false, true, false, false, false, true, false, false, true, true, false, true, false, true, true, true, false, false, true, false, false, true, false]);
            let codeword = BinVector::from_bools(&[true, true, false, false, false, false, false, false, true, false, false, true, true, false, true, false, true, true, true, false, false, false, false, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, true, false, true, false, true, true, true, false, false, true, true, true, true, true, false, false, true, true, false, true, true, true, false, true]);
            let codeword = BinVector::from_bools(&[false, true, true, true, true, false, true, true, false, false, false, true, true, true, true, true, false, false, true, true, false, true, true, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, true, true, false, true, true, true, true, false, true, false, true, true, false, false, false, false, true, true, true, true, false, false, true, true]);
            let codeword = BinVector::from_bools(&[true, false, true, true, false, true, true, true, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, false, true, true, false, true, true, false, false, true]);
            let codeword = BinVector::from_bools(&[false, false, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, false, true, true, false, true, true, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, false, false, true, true, true, true, true, false, false, true, true, true, false, true, true, true, false, true, false, false, false, true, true, true]);
            let codeword = BinVector::from_bools(&[false, false, false, false, true, true, true, true, true, false, false, true, true, true, false, true, true, true, false, true, false, false, false, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, true, true, true, false, true, true, false, false, false, true, true, true, false, false, true, true, false, false, false, false, true, false, true, false]);
            let codeword = BinVector::from_bools(&[true, true, false, true, true, false, true, true, false, false, false, true, true, true, false, false, true, true, false, false, false, false, false, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, false, false, false, false, true, true, true, false, true, true, true, false, true, true, false, false, true, false, false, false, true, true, true, false]);
            let codeword = BinVector::from_bools(&[true, true, true, false, false, true, true, true, true, false, true, true, false, false, true, true, false, false, true, false, false, false, true, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, true, false, false, true, false, false, false, false, false, true, false, false, false, false, true, false, true, true, false, false, false, true, false, true]);
            let codeword = BinVector::from_bools(&[true, false, true, true, false, true, false, false, false, false, true, true, false, false, false, false, true, false, true, true, false, false, false, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, false, true, false, false, true, false, true, false, false, false, true, false, true, true, false, false, true, false, true, true, true, true, true, true]);
            let codeword = BinVector::from_bools(&[true, true, false, true, false, false, true, false, true, false, false, false, true, false, true, false, true, false, true, false, true, true, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, false, false, false, false, true, true, false, false, true, true, false, false, false, true, false, true, false, false, false, false, false, false, true, false]);
            let codeword = BinVector::from_bools(&[true, true, false, false, false, false, false, true, false, false, true, true, false, false, false, true, false, true, false, false, false, false, false, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, true, true, true, false, true, true, true, true, true, false, true, true, true, true, true, false, true, false, true, false, true, true, true, true]);
            let codeword = BinVector::from_bools(&[true, false, true, true, true, false, true, true, true, true, true, false, true, false, false, true, true, false, true, false, true, false, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, false, false, true, false, true, false, false, true, false, true, false, true, true, true, true, true, true, false, true, true, true, false, true, false]);
            let codeword = BinVector::from_bools(&[true, true, false, true, true, false, true, false, false, true, false, true, false, true, true, true, true, true, true, false, true, true, true, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, true, false, false, false, false, false, true, true, false, false, false, true, false, false, false, false, true, true, true, false, true, true, false, false]);
            let codeword = BinVector::from_bools(&[false, false, true, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, true, true, true, false, true, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, false, true, true, false, true, false, true, true, false, true, false, true, false, true, false, true, false, true, false, false, false, false, false, false]);
            let codeword = BinVector::from_bools(&[true, true, false, true, true, false, false, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, true, true, false, false, false, true, false, false, false, true, true, false, false, false, true, false, true, false, false, true, false, false, false, false]);
            let codeword = BinVector::from_bools(&[true, true, false, true, false, false, false, true, false, true, false, true, true, false, false, false, true, false, true, false, false, true, false, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, true, true, false, false, false, false, false, false, false, false, true, false, true, true, false, false, false, false, false, true, true, false, false, false]);
            let codeword = BinVector::from_bools(&[false, false, true, true, false, false, false, false, true, false, false, false, true, false, false, true, false, false, false, false, false, true, true, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, true, true, false, false, true, false, false, true, false, false, true, false, false, true, true, false, false, true, true, false, false, true, true, false]);
            let codeword = BinVector::from_bools(&[false, false, false, true, false, false, true, false, false, true, true, false, true, false, true, true, true, false, false, true, true, false, false, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, false, true, false, false, false, true, true, false, true, false, true, true, false, false, true, true, false, true, false, true, true, false, true, true]);
            let codeword = BinVector::from_bools(&[true, false, false, true, false, true, false, true, true, false, false, false, true, true, false, false, true, true, false, true, false, true, true, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, false, true, false, false, false, true, true, false, false, false, false, true, false, false, true, true, true, false, false, true, false, true, true, false]);
            let codeword = BinVector::from_bools(&[false, false, false, true, false, false, false, true, true, false, false, false, false, false, false, false, true, true, true, true, false, true, false, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, false, true, false, true, false, false, false, true, true, false, true, true, true, false, true, true, true, false, false, false, true, false, false, false]);
            let codeword = BinVector::from_bools(&[true, false, true, true, false, true, false, false, true, true, false, false, true, true, true, false, true, true, true, false, false, false, true, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, true, false, true, false, true, true, false, false, false, true, true, false, false, true, false, false, true, true, true, false, false, false, true, true]);
            let codeword = BinVector::from_bools(&[true, true, true, false, true, false, true, true, false, false, false, true, true, false, true, true, false, false, false, true, true, false, false, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, false, false, false, true, false, false, true, false, false, false, false, true, true, true, false, false, true, false, true, false, true, false, false, true]);
            let codeword = BinVector::from_bools(&[true, false, true, false, false, true, false, false, true, false, true, false, false, true, false, true, false, false, true, false, true, false, true, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, false, true, false, true, true, false, true, false, false, true, true, false, false, false, true, false, true, false, true, false, false, false, true, true]);
            let codeword = BinVector::from_bools(&[false, true, false, true, false, true, true, true, true, false, false, true, true, false, false, false, true, false, true, true, true, false, false, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, false, true, true, false, true, true, false, false, false, false, false, true, false, false, true, false, true, true, true, true, false, true, true, false]);
            let codeword = BinVector::from_bools(&[true, true, false, false, true, false, true, true, false, false, false, false, false, true, false, false, true, false, true, true, true, true, false, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, false, true, true, true, false, true, true, false, true, true, true, false, false, true, false, true, false, true, false, true, true, true, false, false]);
            let codeword = BinVector::from_bools(&[false, true, false, true, true, true, false, true, true, false, true, true, true, false, false, true, true, true, false, true, false, true, true, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, false, false, false, false, true, false, false, false, false, false, false, true, true, true, true, true, true, true, true, false, false, true, false, false]);
            let codeword = BinVector::from_bools(&[false, false, false, false, false, false, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, false, true, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, false, false, true, true, false, false, false, true, true, true, true, false, true, false, false, true, true, false, false, false, true, false, true, false]);
            let codeword = BinVector::from_bools(&[true, false, false, false, true, true, false, false, false, false, false, true, true, false, true, false, false, true, true, false, false, false, true, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, false, false, false, true, false, false, false, false, false, true, false, true, false, false, true, false, false, true, true, true, false, true, true, true]);
            let codeword = BinVector::from_bools(&[false, true, false, false, false, false, false, false, false, false, false, true, false, true, false, false, true, false, false, true, true, true, false, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, true, false, true, true, false, true, false, true, false, true, false, false, false, false, false, false, true, true, true, true, true, false, true, false]);
            let codeword = BinVector::from_bools(&[true, true, true, false, true, true, false, true, false, true, false, true, false, false, false, false, false, false, true, true, true, false, true, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, true, false, false, false, true, true, false, false, false, true, true, false, true, false, true, false, true, true, false, false, false, false, true, true]);
            let codeword = BinVector::from_bools(&[true, true, true, false, false, false, true, true, false, false, false, true, true, false, true, false, true, true, true, true, false, false, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, true, true, false, true, false, true, true, false, true, false, true, false, false, false, false, false, true, false, true, true, false, false, true, true]);
            let codeword = BinVector::from_bools(&[false, false, true, true, false, true, false, true, true, false, false, false, false, false, false, false, false, false, true, false, true, true, false, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, true, true, false, false, false, false, true, false, false, true, true, false, false, true, true, false, false, false, false, true, true, false, false, true]);
            let codeword = BinVector::from_bools(&[true, false, true, true, false, false, false, false, false, false, false, true, true, false, false, true, true, false, true, false, false, true, true, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, true, true, true, true, true, false, false, true, false, true, false, false, false, true, false, true, true, true, false, true, true, true, true, false]);
            let codeword = BinVector::from_bools(&[false, true, true, true, true, false, true, false, false, true, false, true, false, false, true, true, false, true, true, true, false, true, true, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, false, true, true, false, false, true, true, true, false, false, false, true, true, false, false, false, true, false, false, true, true, false, true, false]);
            let codeword = BinVector::from_bools(&[true, true, false, true, true, false, false, true, true, true, false, false, true, true, true, false, false, false, true, false, false, false, true, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, false, true, false, true, false, true, false, false, false, false, true, true, false, true, true, false, false, true, false, true, true, false, true, false]);
            let codeword = BinVector::from_bools(&[false, false, false, true, false, false, false, true, false, false, false, false, true, true, false, true, false, false, false, true, false, false, true, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, true, false, false, true, true, true, true, true, false, false, true, true, true, false, false, true, true, true, true, false, true, false, true, true]);
            let codeword = BinVector::from_bools(&[true, true, true, false, false, true, true, true, true, true, true, false, true, true, true, false, false, true, false, true, true, false, true, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, false, false, true, false, true, true, false, true, true, true, true, false, false, false, false, false, true, false, false, true, true, false, false, false]);
            let codeword = BinVector::from_bools(&[false, true, false, false, true, false, true, true, false, true, true, true, true, false, false, false, true, false, true, false, false, true, true, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, false, true, false, true, true, false, true, false, true, true, false, false, false, false, false, false, false, true, false, true, true, true, true, true]);
            let codeword = BinVector::from_bools(&[false, false, false, false, false, true, true, false, true, false, true, true, false, false, true, false, false, false, false, true, true, true, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, false, true, true, true, false, true, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, true]);
            let codeword = BinVector::from_bools(&[false, false, true, true, true, false, true, true, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, true, false, true, false, false, false, true, false, false, true, true, true, true, true, true, true, true, false, false, true, false, true, false, false]);
            let codeword = BinVector::from_bools(&[true, true, true, false, true, false, false, false, true, false, true, true, true, true, true, true, true, true, true, false, false, true, false, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, false, true, true, false, false, false, true, true, false, false, true, false, false, true, false, false, false, true, false, true, true, false, false, false]);
            let codeword = BinVector::from_bools(&[false, true, false, true, true, false, false, false, true, true, true, true, true, false, false, true, false, false, false, true, false, true, true, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, false, true, false, true, false, false, false, true, true, true, true, true, false, true, true, true, false, true, false, false, true, false, false, false]);
            let codeword = BinVector::from_bools(&[false, false, false, true, false, true, false, false, false, true, true, true, true, true, false, true, true, true, false, false, false, false, true, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, false, false, true, false, false, false, true, false, false, true, false, true, true, true, true, true, false, true, true, false, false, false, false, true]);
            let codeword = BinVector::from_bools(&[false, false, false, true, true, false, false, false, true, false, false, true, false, true, true, true, false, true, false, false, true, false, false, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, false, false, false, false, false, false, true, false, false, false, true, false, true, true, false, true, false, true, false, false, true, false, true, true]);
            let codeword = BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, true, false, true, false, true, true, false, true, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, false, false, true, true, true, false, false, true, false, true, true, false, true, true, true, false, false, false, true, false, false, false, false, false]);
            let codeword = BinVector::from_bools(&[false, false, false, true, false, false, true, false, false, true, false, true, true, false, true, true, true, false, false, false, true, false, false, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, true, true, true, false, true, false, true, true, true, true, false, false, false, true, false, true, false, true, true, false, true, false, false, true]);
            let codeword = BinVector::from_bools(&[false, false, true, true, true, false, true, false, true, true, true, true, false, false, false, false, false, true, false, true, false, false, true, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, false, false, false, false, false, false, false, true, false, false, true, true, false, false, true, false, true, false, true, true, false, false, false, false]);
            let codeword = BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, true, false, false, true, true, false, false, true, false, true, false, true, false, false, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, false, false, false, false, true, false, false, false, true, true, false, true, false, true, true, true, true, false, false, false, false, false, true, true]);
            let codeword = BinVector::from_bools(&[true, false, false, false, false, false, false, false, false, false, true, true, false, true, false, true, true, true, true, true, false, false, false, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, false, true, false, true, false, false, true, true, false, false, false, false, true, true, true, false, true, true, true, false, false, false, true, true]);
            let codeword = BinVector::from_bools(&[false, false, false, true, false, false, false, false, true, true, false, false, false, false, true, true, true, false, true, true, true, false, false, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, true, false, true, true, false, true, false, true, false, false, false, false, true, false, false, false, true, true, true, true, false, true, false, true]);
            let codeword = BinVector::from_bools(&[false, false, true, false, true, true, false, true, false, true, false, false, false, false, true, false, false, true, true, true, true, true, true, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, false, false, true, false, false, true, false, true, true, false, true, false, true, false, false, false, true, false, false, false, true, false, true, true]);
            let codeword = BinVector::from_bools(&[false, false, false, false, true, false, true, true, false, true, true, false, false, false, true, false, false, false, true, false, false, false, true, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, false, true, false, false, false, true, true, false, true, true, false, false, false, true, true, true, true, true, false, false, true, false, true, false]);
            let codeword = BinVector::from_bools(&[false, true, false, true, false, false, false, true, true, false, true, true, false, false, true, true, true, true, false, true, false, false, true, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, true, false, false, true, false, true, false, false, false, false, true, false, false, true, true, false, true, false, true, false, true, false, false, false]);
            let codeword = BinVector::from_bools(&[true, true, true, false, false, true, false, true, false, false, false, false, true, false, false, true, true, true, true, false, true, false, true, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, false, false, false, false, false, true, false, true, false, true, true, false, true, true, false, true, false, false, false, true, true, true, false, true]);
            let codeword = BinVector::from_bools(&[true, true, false, false, false, false, false, true, false, true, false, true, true, false, true, true, false, true, false, false, false, true, true, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, true, false, false, false, true, true, false, true, true, true, false, true, false, true, false, false, true, false, true, false, false, true, true, false]);
            let codeword = BinVector::from_bools(&[false, false, true, false, false, false, false, true, false, true, true, true, true, true, false, true, false, false, true, false, true, false, false, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, false, true, true, false, true, true, true, true, true, true, false, true, false, true, false, true, true, false, true, true, false, true, true, true]);
            let codeword = BinVector::from_bools(&[true, true, false, true, true, false, false, true, true, true, true, true, false, true, false, true, false, true, true, false, true, false, false, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, true, true, false, false, true, false, false, true, false, false, false, true, true, true, true, false, true, false, true, false, true, true, false, true]);
            let codeword = BinVector::from_bools(&[false, false, false, true, true, false, true, false, false, true, false, false, false, true, false, true, true, false, true, false, true, false, true, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, true, true, true, false, false, true, false, false, true, true, false, true, false, true, true, false, true, false, true, true, true, false, true, false]);
            let codeword = BinVector::from_bools(&[false, false, true, true, true, false, true, true, false, false, true, true, false, true, false, true, true, false, true, false, false, false, true, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, true, true, true, false, true, true, true, true, false, true, true, false, false, false, true, true, true, false, false, false, false, false, false, true]);
            let codeword = BinVector::from_bools(&[true, true, true, true, true, false, true, true, true, true, false, true, true, false, false, false, true, false, true, false, false, false, false, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, true, false, true, true, false, true, false, true, false, false, true, false, false, false, false, true, false, true, false, true, true, true, false, true]);
            let codeword = BinVector::from_bools(&[false, true, true, false, true, true, false, false, false, true, false, false, true, false, false, false, true, true, false, true, false, true, true, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, false, false, true, false, true, false, true, true, true, true, false, false, false, true, false, true, false, true, true, false, true, false, false, false]);
            let codeword = BinVector::from_bools(&[true, false, false, false, true, false, true, false, true, true, true, true, false, false, false, true, false, true, false, true, false, false, true, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, false, true, true, false, false, false, true, false, false, true, true, false, true, false, true, true, true, true, true, false, false, true, true, false]);
            let codeword = BinVector::from_bools(&[true, true, true, true, true, false, true, false, true, false, false, true, true, false, true, false, true, true, true, true, true, false, false, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, true, false, false, false, true, true, true, true, false, false, true, false, false, true, true, false, true, true, false, false, true, true, true, true]);
            let codeword = BinVector::from_bools(&[true, false, true, false, false, false, true, false, true, true, false, false, true, false, false, true, true, false, true, true, false, false, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, true, true, false, false, false, true, true, false, false, false, false, true, false, false, true, true, true, true, true, true, false, false, true, false]);
            let codeword = BinVector::from_bools(&[false, true, false, true, false, false, true, true, true, false, false, false, false, true, false, false, true, true, true, true, true, true, false, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, false, false, true, true, false, true, true, true, true, true, true, true, false, true, true, false, true, false, true, true, true, false, true, true]);
            let codeword = BinVector::from_bools(&[false, false, false, false, true, true, false, true, true, true, true, true, false, true, false, true, true, false, true, false, true, false, true, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, true, false, true, true, true, false, false, false, false, true, true, false, true, true, true, false, true, false, false, false, true, false, false, false]);
            let codeword = BinVector::from_bools(&[true, false, true, false, true, true, true, true, false, false, false, true, true, false, true, true, true, false, true, false, false, false, true, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, true, false, true, true, true, true, false, false, false, false, false, true, true, true, true, false, false, false, true, false, false, false, false, false]);
            let codeword = BinVector::from_bools(&[true, true, true, false, true, true, true, true, false, false, false, true, false, true, true, true, true, false, false, true, true, false, false, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, true, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, true, true, true, false, false, false, true, false]);
            let codeword = BinVector::from_bools(&[false, true, true, true, false, true, true, false, false, false, false, true, true, true, false, true, true, false, true, true, true, false, false, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, false, true, true, false, true, false, false, false, true, false, false, true, true, true, false, false, true, true, false, false, false, false, true, false]);
            let codeword = BinVector::from_bools(&[false, false, false, true, false, false, true, false, false, false, true, false, false, true, true, true, false, false, true, true, false, false, false, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, true, true, false, false, true, false, false, false, true, true, true, false, true, false, false, false, false, false, false, true, false, true, false, true]);
            let codeword = BinVector::from_bools(&[true, false, false, true, false, false, true, false, false, false, true, true, false, false, true, false, false, false, false, true, false, true, false, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, false, true, false, false, false, true, false, true, true, true, true, false, true, true, false, false, false, true, true, true, false, true, false, false]);
            let codeword = BinVector::from_bools(&[false, true, false, true, true, false, false, true, false, true, true, true, true, false, true, true, false, false, false, true, false, true, false, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, true, false, true, true, true, false, false, false, true, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true]);
            let codeword = BinVector::from_bools(&[true, false, true, false, true, true, true, false, true, false, false, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, true, true, true, true, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, true, true, true, false, true]);
            let codeword = BinVector::from_bools(&[true, true, true, true, true, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, true, true, true, true, false, true, true, false, false, true, false, false, true, true, false, false, false, true, true, true, false, false, true, false]);
            let codeword = BinVector::from_bools(&[false, false, true, true, true, true, true, true, true, false, false, true, true, false, true, true, false, false, false, true, true, true, false, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, true, false, true, true, true, true, true, false, false, false, true, false, false, true, true, true, true, true, true, false, false, true, false, false]);
            let codeword = BinVector::from_bools(&[false, true, false, false, true, false, true, true, true, false, false, false, true, false, false, true, true, true, true, true, true, false, false, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, false, false, false, false, true, false, false, false, true, false, false, false, false, true, true, false, false, true, false, true, true, false, false, false]);
            let codeword = BinVector::from_bools(&[true, true, true, false, false, false, true, false, true, false, true, false, false, false, false, true, true, false, false, true, false, true, true, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, false, true, true, true, true, true, true, false, false, true, true, true, false, false, true, true, true, false, true, false, true, true, false, false]);
            let codeword = BinVector::from_bools(&[true, false, false, true, true, true, true, true, false, false, false, true, true, true, false, false, false, true, true, true, true, false, true, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, true, false, true, true, false, true, true, false, true, false, true, true, true, false, true, false, true, false, true, false, false, true, false, false]);
            let codeword = BinVector::from_bools(&[false, false, false, false, true, true, false, true, true, false, true, false, true, true, true, false, true, false, true, false, true, false, false, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, false, true, true, true, false, false, false, true, true, true, true, false, false, false, false, true, false, false, true, false, true, false, true, false]);
            let codeword = BinVector::from_bools(&[true, true, false, true, true, false, false, false, false, true, true, true, true, false, true, false, false, true, false, false, true, false, true, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, true, false, false, true, true, false, false, true, false, true, false, false, false, true, false, true, true, false, false, true, true, true, true, true]);
            let codeword = BinVector::from_bools(&[true, false, true, false, false, true, true, false, false, true, false, true, false, false, false, true, false, true, true, false, false, true, true, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, true, true, false, true, false, true, false, false, true, false, false, true, false, false, true, true, false, true, true, false, false, true, true, true]);
            let codeword = BinVector::from_bools(&[true, true, true, true, false, true, false, true, false, false, true, false, false, true, false, false, true, true, false, false, false, true, false, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, true, false, false, false, true, false, false, false, true, true, true, true, true, true, false, false, false, true, true, true, false, true, false, true]);
            let codeword = BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, false, false, false, true, true, true, false, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, true, false, false, false, false, false, true, true, false, true, false, true, true, false, true, false, true, false, true, false, false, false, true, false]);
            let codeword = BinVector::from_bools(&[true, true, true, true, false, false, false, false, true, true, false, true, false, false, true, false, true, false, true, false, true, false, false, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, false, false, true, true, false, true, true, false, false, false, true, false, true, true, false, false, false, false, false, true, false, false, true, true]);
            let codeword = BinVector::from_bools(&[true, false, false, false, true, true, false, true, true, true, false, false, true, false, true, true, false, false, false, false, false, false, false, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, true, true, false, true, true, true, false, false, true, false, true, false, false, false, false, false, true, true, false, true, false, false, true, true]);
            let codeword = BinVector::from_bools(&[true, true, true, true, false, false, true, true, false, false, true, false, true, false, false, false, false, false, false, true, false, true, false, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, false, false, false, true, false, true, true, false, true, false, false, false, true, false, false, false, true, true, false, true, true, true, false, false]);
            let codeword = BinVector::from_bools(&[false, false, true, false, false, true, false, true, true, false, true, false, false, false, false, true, false, false, true, true, false, true, true, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, false, true, false, false, true, true, false, true, false, true, false, false, false, false, false, true, true, true, true, false, true, false, true, true]);
            let codeword = BinVector::from_bools(&[false, true, false, true, false, false, true, true, false, true, false, true, true, false, true, false, false, true, true, true, true, false, true, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, true, false, false, false, true, true, true, false, true, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false]);
            let codeword = BinVector::from_bools(&[true, false, false, false, false, false, true, false, true, false, true, true, true, false, false, true, false, true, false, true, false, false, true, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, false, false, false, true, true, false, true, false, true, false, false, false, true, true, false, false, false, true, true, false, true, false, true, true]);
            let codeword = BinVector::from_bools(&[false, false, false, false, false, true, true, false, true, false, false, false, false, false, true, true, false, false, false, true, true, false, true, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, false, false, true, false, false, true, false, true, true, false, true, true, true, false, false, true, true, true, true, true, false, true, false, true]);
            let codeword = BinVector::from_bools(&[true, false, true, false, true, true, false, true, false, true, true, false, true, true, true, false, false, false, true, true, true, true, false, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, true, false, true, false, true, false, true, true, true, false, false, false, true, false, false, true, false, false, false, false, false, false, true, false]);
            let codeword = BinVector::from_bools(&[true, true, true, false, true, false, true, false, true, false, true, false, false, false, true, false, false, true, false, true, false, false, false, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, true, false, false, true, true, true, false, true, false, false, true, false, true, false, false, false, true, false, false, false, true, true, false, true]);
            let codeword = BinVector::from_bools(&[true, true, true, false, false, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, false, false, true, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, false, true, false, true, true, false, false, false, false, true, false, false, false, true, true, false, true, false, true, false, false, true, false, true]);
            let codeword = BinVector::from_bools(&[false, false, false, false, false, true, true, false, false, true, false, true, false, false, false, true, true, false, true, false, true, false, false, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, true, true, true, true, true, false, false, false, false, false, false, true, true, true, false, false, false, true, true, false, false, false, false, true]);
            let codeword = BinVector::from_bools(&[false, true, true, true, true, true, true, false, false, false, true, false, false, true, true, true, false, false, false, true, true, false, false, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, false, false, false, true, true, false, false, true, false, true, false, false, false, false, false, true, false, true, false, false, true, false, true, false]);
            let codeword = BinVector::from_bools(&[true, false, true, false, false, true, true, false, false, true, false, true, false, false, false, false, false, true, true, true, false, false, true, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, false, true, true, true, false, true, true, false, false, true, false, false, false, true, true, false, true, true, false, true, true, true, true, true]);
            let codeword = BinVector::from_bools(&[false, true, false, true, true, true, false, true, false, false, false, true, false, false, false, true, true, false, true, false, false, true, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, false, true, true, false, true, false, false, false, false, false, true, true, false, false, false, true, true, false, false, false, false, true, false, true]);
            let codeword = BinVector::from_bools(&[true, false, false, true, true, false, false, false, true, false, false, false, true, true, false, true, false, true, true, false, false, false, false, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, true, false, true, false, true, true, false, true, false, false, false, true, false, true, false, true, false, true, false, false, true, false, false, true]);
            let codeword = BinVector::from_bools(&[false, false, true, false, false, false, true, true, false, false, false, true, false, true, false, true, false, true, false, true, false, false, true, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, true, true, false, false, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, false, true, false, true]);
            let codeword = BinVector::from_bools(&[false, true, true, true, false, false, false, true, false, true, true, true, true, true, false, true, true, true, true, true, true, true, false, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, true, true, false, false, true, true, false, true, true, false, false, true, false, true, true, true, false, false, true, true, true, true, false, false]);
            let codeword = BinVector::from_bools(&[false, true, true, true, false, false, true, true, false, true, true, true, false, true, false, true, true, true, false, false, true, true, true, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, false, false, false, false, false, true, false, false, true, false, false, false, false, false, true, true, false, true, true, true, true, true, true, false]);
            let codeword = BinVector::from_bools(&[false, false, false, false, false, true, false, true, false, false, true, false, false, true, false, false, true, true, false, true, true, true, true, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, false, true, true, true, false, false, true, false, false, false, true, false, true, true, false, true, false, true, true, true, true, true, true, false]);
            let codeword = BinVector::from_bools(&[false, false, false, true, true, true, true, false, true, false, false, false, true, false, true, true, false, true, false, true, true, true, false, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, false, false, true, false, true, true, true, false, true, false, false, true, true, true, true, true, true, true, false, true, false, true, true, true]);
            let codeword = BinVector::from_bools(&[true, true, false, false, false, false, true, true, true, true, true, false, false, true, true, true, true, true, true, true, false, true, false, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, false, true, false, false, false, true, false, true, false, true, true, true, true, true, true, false, false, false, false, true, false, false, true, false]);
            let codeword = BinVector::from_bools(&[true, false, false, true, false, false, false, true, false, true, false, true, true, true, true, true, true, true, false, false, false, true, false, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, false, false, true, false, true, true, true, true, true, false, false, false, false, false, true, true, false, false, true, false, false, true, true, true]);
            let codeword = BinVector::from_bools(&[false, false, false, false, true, false, true, true, true, true, true, false, false, false, false, false, true, true, false, false, true, false, false, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, false, false, true, true, true, false, false, true, true, true, true, false, false, true, true, true, false, true, true, false, false, true, false, false]);
            let codeword = BinVector::from_bools(&[true, true, false, false, true, false, true, false, false, true, true, true, true, false, false, true, true, true, true, true, true, false, false, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, false, false, true, true, false, true, false, false, true, true, false, true, true, true, false, true, true, false, true, true, false, false, false, true]);
            let codeword = BinVector::from_bools(&[true, true, false, false, true, true, false, true, false, true, true, true, false, true, true, true, true, true, true, false, true, true, false, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, true, true, false, true, true, true, false, true, false, false, false, false, false, true, false, false, true, true, true, true, false, false, false, false]);
            let codeword = BinVector::from_bools(&[false, false, true, false, false, true, true, true, false, true, true, false, false, false, false, true, false, false, true, true, true, true, false, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, false, true, true, true, false, true, true, false, false, true, false, false, false, false, false, true, true, true, true, false, false, false, false, true]);
            let codeword = BinVector::from_bools(&[false, true, false, true, true, true, false, true, true, false, false, true, false, false, false, false, false, true, true, true, false, true, false, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, true, false, true, true, false, false, true, false, true, true, false, false, true, false, true, true, true, false, true, true, false, true, false, false]);
            let codeword = BinVector::from_bools(&[false, false, true, true, true, true, false, false, false, false, true, true, false, false, false, false, true, true, true, false, true, true, false, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, true, true, false, true, true, false, true, true, false, true, true, false, false, true, false, true, false, true, false, false, false, false, false, true]);
            let codeword = BinVector::from_bools(&[false, false, true, true, false, true, true, true, true, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, true, false, true, false, false, true, true, true, false, true, false, false, false, false, false, false, true, false, false, true, true, true, false, true]);
            let codeword = BinVector::from_bools(&[true, true, true, true, true, true, false, true, true, true, false, true, false, false, false, false, false, false, true, false, false, true, true, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, false, false, true, false, false, true, false, false, true, true, true, true, false, false, false, false, true, true, false, true, false, false, true, false]);
            let codeword = BinVector::from_bools(&[false, true, false, false, true, false, false, true, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, false, true, true, true, true, false, false, false, false, false, true, false, false, false, false, true, true, false, true, true, true, false, true, true]);
            let codeword = BinVector::from_bools(&[true, true, false, true, true, false, true, false, false, false, true, false, true, false, false, false, false, true, true, false, true, true, true, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, false, false, false, true, true, true, false, false, false, false, false, true, true, true, true, true, false, false, false, false, false, false, false, true]);
            let codeword = BinVector::from_bools(&[true, false, false, false, false, true, true, true, false, false, false, false, false, true, true, true, true, true, false, false, false, false, false, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, false, true, false, false, true, false, true, false, false, false, true, true, true, true, true, false, true, true, false, false, true, true, true, false]);
            let codeword = BinVector::from_bools(&[false, false, false, false, false, true, true, false, true, true, false, false, true, true, true, true, true, false, true, true, false, false, true, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, false, true, false, true, false, true, false, false, true, false, true, false, false, true, false, false, false, true, true, false, false, false, false, false]);
            let codeword = BinVector::from_bools(&[false, false, false, true, false, true, false, false, false, false, false, false, true, false, false, true, false, false, false, true, true, false, false, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, true, false, false, true, false, false, false, false, true, false, false, false, false, true, false, false, false, false, true, false, false, true, true, false]);
            let codeword = BinVector::from_bools(&[false, false, true, false, false, true, false, false, false, false, true, false, false, false, false, true, false, false, false, true, true, false, false, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, true, false, true, false, false, true, true, true, true, true, true, false, true, false, true, true, true, false, false, true, true, false, false, true]);
            let codeword = BinVector::from_bools(&[false, false, true, false, true, false, true, false, true, true, true, true, true, false, true, false, true, true, false, false, false, true, true, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, false, true, false, false, true, false, true, false, true, false, true, true, true, true, true, false, true, true, true, true, true, true, false, false]);
            let codeword = BinVector::from_bools(&[true, false, false, false, false, false, false, false, true, false, true, false, true, true, true, true, true, false, true, true, true, true, false, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, true, true, true, true, true, false, false, false, false, false, true, true, true, true, true, true, false, false, true, true, false, false, false, false]);
            let codeword = BinVector::from_bools(&[false, false, false, true, true, true, true, false, false, false, false, false, true, true, true, true, true, true, false, false, true, true, false, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, false, true, false, false, false, true, false, true, true, true, false, true, true, true, true, true, false, true, false, true, true, false, true, true]);
            let codeword = BinVector::from_bools(&[true, false, false, true, false, false, false, true, true, true, true, true, true, true, true, true, true, true, false, true, false, true, true, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, false, false, true, true, true, false, true, true, true, true, false, false, true, false, false, true, true, false, true, true, true, true, true, false]);
            let codeword = BinVector::from_bools(&[false, false, false, false, true, true, true, false, true, true, true, true, false, false, true, false, false, true, true, true, true, true, false, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, false, true, false, true, false, false, false, true, false, true, false, false, false, true, false, false, false, true, false, true, false, false, true, false]);
            let codeword = BinVector::from_bools(&[false, true, true, true, false, true, false, false, false, true, false, true, false, false, false, false, false, true, false, true, false, true, false, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, false, false, true, false, true, true, true, true, true, true, false, false, true, false, false, true, false, false, false, true, true, true, false, false]);
            let codeword = BinVector::from_bools(&[false, true, false, false, true, false, true, false, true, true, true, true, false, false, true, false, true, true, false, false, false, true, true, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, false, true, false, false, false, true, false, true, false, true, false, false, true, false, false, false, true, false, true, true, false, false, false, true]);
            let codeword = BinVector::from_bools(&[false, false, true, true, false, false, false, true, false, true, false, true, false, false, true, false, false, false, true, false, true, false, true, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, false, true, false, true, true, true, false, false, false, false, true, true, true, true, true, true, false, false, true, false, false, true, true, true]);
            let codeword = BinVector::from_bools(&[false, false, false, true, false, true, true, true, true, false, true, false, true, true, true, true, true, true, false, false, true, false, false, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, false, false, true, false, false, false, false, true, true, true, false, false, false, false, true, false, false, false, false, false, true, true, false, false]);
            let codeword = BinVector::from_bools(&[true, true, false, false, true, true, false, true, false, true, true, true, false, false, false, false, true, false, false, false, false, false, true, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, false, false, true, true, true, true, true, true, false, true, false, true, true, false, true, true, false, true, false, false, true, false, true, false]);
            let codeword = BinVector::from_bools(&[false, false, false, false, true, true, true, true, true, true, false, false, false, true, true, false, true, true, false, true, false, false, true, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, false, true, false, false, false, false, true, true, false, true, false, true, true, false, false, true, false, false, true, false, true, false, false, false]);
            let codeword = BinVector::from_bools(&[false, true, true, true, true, false, false, true, true, true, false, true, false, true, true, false, false, true, false, false, true, false, true, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, false, false, false, false, true, true, false, false, false, true, false, true, true, false, true, true, true, false, false, false, false, false, false, true]);
            let codeword = BinVector::from_bools(&[false, false, false, false, false, false, true, true, true, false, false, true, false, true, true, false, true, true, false, false, false, false, false, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, true, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, true, true, true, true, false, true, false]);
            let codeword = BinVector::from_bools(&[false, true, true, false, true, false, false, false, false, false, false, true, false, true, false, false, false, false, false, false, true, true, true, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, true, false, false, false, false, false, false, false, false, true]);
            let codeword = BinVector::from_bools(&[true, true, false, false, false, false, false, false, false, false, true, true, false, false, true, false, true, false, false, true, false, false, false, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, true, true, false, false, false, false, false, true, true, true, false, false, false, false, true, false, true, true, true, false, true, true, false, true]);
            let codeword = BinVector::from_bools(&[true, true, false, true, false, false, false, false, false, true, true, true, false, false, false, false, true, true, true, true, true, false, true, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, true, true, true, false, false, true, true, false, true, true, false, false, false, true, false, false, true, false, false, true, false, true, true, false]);
            let codeword = BinVector::from_bools(&[false, false, true, false, true, false, false, true, true, true, true, true, false, false, false, true, false, false, true, false, false, true, false, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, false, true, true, true, false, true, true, true, true, false, false, false, true, false, true, false, true, true, true, false, false, true, true, true]);
            let codeword = BinVector::from_bools(&[false, true, true, true, true, true, false, true, true, true, true, false, false, false, true, false, true, false, true, true, true, false, false, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, true, true, true, false, true, true, true, true, true, true, true, true, false, false, true, true, true, true, true, true, false, true, true, false]);
            let codeword = BinVector::from_bools(&[true, false, true, false, true, false, true, true, true, true, true, true, true, true, false, false, true, true, true, true, false, true, true, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, false, false, true, true, false, false, false, true, true, true, true, true, false, false, true, false, false, true, true, true, true, true, true, true]);
            let codeword = BinVector::from_bools(&[false, true, false, false, true, true, false, false, false, true, true, true, false, true, false, false, true, false, false, true, true, true, true, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, false, false, false, false, true, false, false, false, false, true, false, true, true, false, false, false, false, false, false, true, false, false, false, true]);
            let codeword = BinVector::from_bools(&[true, false, false, false, false, false, true, false, false, false, false, true, false, true, true, false, false, true, false, false, true, true, false, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, true, true, true, true, true, false, false, false, false, false, false, false, true, true, false, true, true, false, false, true, true, true, true, true]);
            let codeword = BinVector::from_bools(&[true, false, true, true, true, true, false, false, false, false, false, false, false, false, true, true, false, true, true, false, false, true, true, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, false, false, false, true, false, true, true, false, true, true, false, true, true, false, true, true, true, false, false, true, false, false, false, false]);
            let codeword = BinVector::from_bools(&[false, false, false, false, false, true, false, true, true, false, true, true, false, true, true, true, true, true, true, false, false, true, false, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, false, true, true, true, false, false, true, false, false, true, false, true, true, true, true, true, true, false, true, false, true, false, true, true]);
            let codeword = BinVector::from_bools(&[false, true, false, true, true, true, false, false, true, false, false, true, false, true, true, true, true, true, true, true, false, false, true, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, true, true, true, true, true, false, true, false, false, false, false, false, false, false, false, true, false, false, false, true, true, true, true, false]);
            let codeword = BinVector::from_bools(&[true, true, true, false, true, true, true, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, true, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, false, false, false, false, true, false, false, true, true, true, true, true, true, true, true, true, false, false, false, false, false, true, true, true]);
            let codeword = BinVector::from_bools(&[false, false, false, false, false, false, true, false, false, true, true, true, true, true, true, false, true, true, false, false, false, true, false, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, true, true, true, false, true, false, false, true, false, true, true, false, true, true, false, false, false, true, false, true, false, false, true, false]);
            let codeword = BinVector::from_bools(&[false, true, true, true, true, false, true, false, false, true, false, true, true, false, true, true, false, false, false, true, false, true, false, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, false, false, true, true, true, true, true, true, false, false, true, true, false, false, false, true, false, false, false, true, false, true, false, true]);
            let codeword = BinVector::from_bools(&[false, true, false, false, true, true, true, true, false, true, false, false, true, true, false, false, false, true, false, true, false, true, false, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, false, true, false, false, true, false, false, true, true, false, false, false, true, false, true, true, false, false, true, true, false, true, true, false]);
            let codeword = BinVector::from_bools(&[false, true, false, true, false, false, true, false, false, true, true, false, false, false, false, false, true, true, false, false, true, true, false, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, false, true, false, false, true, false, false, true, true, false, true, false, true, true, true, false, true, false, false, false, true, false, true, true]);
            let codeword = BinVector::from_bools(&[false, false, false, true, true, false, true, false, false, true, true, true, true, false, true, true, true, false, true, false, false, false, true, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, false, true, true, false, false, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false]);
            let codeword = BinVector::from_bools(&[false, true, false, true, true, false, false, true, false, false, false, false, true, true, true, true, true, true, false, false, true, true, true, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, true, false, false, true, false, false, false, true, true, false, true, false, true, false, false, true, false, true, false, true, true, false, false, false]);
            let codeword = BinVector::from_bools(&[true, true, true, false, false, true, false, false, false, true, true, false, true, false, false, false, false, true, false, true, true, true, true, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, true, true, false, false, true, false, true, false, true, true, false, true, true, true, false, false, true, true, true, false, true, true, false, true]);
            let codeword = BinVector::from_bools(&[true, false, true, true, false, false, true, false, true, false, true, false, false, true, true, true, false, false, true, true, true, false, false, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, false, false, true, false, false, false, true, true, false, true, false, false, false, true, true, true, false, true, false, false, true, true, false, false]);
            let codeword = BinVector::from_bools(&[true, false, true, false, true, false, false, true, true, true, false, true, false, false, false, true, false, true, false, true, false, false, true, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, false, false, true, true, false, true, true, true, true, false, true, false, false, false, true, true, false, false, true, true, true, true, true, true]);
            let codeword = BinVector::from_bools(&[true, true, false, false, true, true, false, true, true, true, true, false, true, false, true, false, true, true, false, false, true, true, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, false, true, false, false, false, true, true, true, false, false, false, false, false, false, true, true, false, true, false, false, true, true, true, false, true]);
            let codeword = BinVector::from_bools(&[false, true, true, false, true, false, false, true, true, false, false, false, false, false, false, true, true, false, true, false, false, true, true, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, true, true, false, false, true, true, false, false, false, false, true, true, false, true, true, false, true, true, false, false, true, false, true, true, false]);
            let codeword = BinVector::from_bools(&[true, true, true, true, false, true, true, false, false, false, false, true, true, false, true, true, false, true, true, false, false, false, false, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, false, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, false, false, false, false, false, false]);
            let codeword = BinVector::from_bools(&[true, false, false, true, true, true, true, true, true, true, true, false, false, false, false, true, false, false, false, true, false, false, false, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, true, true, false, false, false, true, false, true, false, true, true, true, true, false, true, false, true, false, false, false, true, false, false, false]);
            let codeword = BinVector::from_bools(&[true, true, true, true, false, false, false, true, false, true, true, false, true, true, true, false, true, false, true, false, false, false, true, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[true, false, false, true, true, true, true, false, false, false, false, false, true, false, true, true, true, false, true, false, false, false, true, true, true, true]);
            let codeword = BinVector::from_bools(&[true, false, true, true, false, true, true, false, false, false, false, false, true, false, true, true, true, false, true, false, true, false, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode26_16;
            let randvec = BinVector::from_bools(&[false, true, true, true, false, true, true, true, true, true, true, false, false, false, true, false, true, false, true, true, true, false, true, false, false, true]);
            let codeword = BinVector::from_bools(&[false, true, false, true, false, true, true, true, true, true, true, true, false, false, true, false, true, false, true, true, true, true, true, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
    }

    #[test]
    fn test_generator_representation() {
        init();
        let generator_matrix = unsafe { GENERATOR_MATRIX.as_ref().unwrap() };
        let first_row = generator_matrix.get_window(0, 0, 1, generator_matrix.ncols());
        let vector = BinVector::from_bools(&[ true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, true, true, true, false ]);
        assert_eq!(vector, first_row.as_vector());
    }

}
