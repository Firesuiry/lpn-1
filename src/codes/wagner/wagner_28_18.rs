use std::boxed::Box;
use std::default::Default;
use std::sync::Once;

use fnv::FnvHashMap;

use m4ri_rust::friendly::BinMatrix;
use m4ri_rust::friendly::BinVector;

use crate::codes::BinaryCode;

/// ``[28, 18]`` Wagner code
///
/// Decodes using Syndrome decoding
#[derive(Clone, Serialize)]
pub struct WagnerCode28_18;

static INIT: Once = Once::new();
static mut GENERATOR_MATRIX: *const BinMatrix = 0 as *const BinMatrix;
static mut PARITY_MATRIX: *const BinMatrix = 0 as *const BinMatrix;
static mut PARITY_MATRIX_T: *const BinMatrix = 0 as *const BinMatrix;
static mut SYNDROME_MAP: *const FnvHashMap<u64, &'static [usize; 1]> = 0 as *const FnvHashMap<u64, &'static [usize; 1]>;

fn init() {
    INIT.call_once(|| {
        unsafe {
            let matrix = Box::new(BinMatrix::from_slices(&[
                &[ 178782209 ],
                &[ 89391106 ],
                &[ 267386884 ],
                &[ 265027592 ],
                &[ 255590416 ],
                &[ 217841696 ],
                &[ 66846784 ],
                &[ 6029440 ],
                &[ 19661056 ],
                &[ 76284416 ],
                &[ 168559616 ],
                &[ 36964352 ],
                &[ 202641408 ],
                &[ 12066816 ],
                &[ 152584192 ],
                &[ 110133248 ],
                &[ 48300032 ],
                &[ 239206400 ],
                
            ], 28));
            GENERATOR_MATRIX = Box::into_raw(matrix);

            let matrix = Box::new(BinMatrix::from_slices(&[
                &[ 107696129 ],
                &[ 160911362 ],
                &[ 70984772 ],
                &[ 81571912 ],
                &[ 192884816 ],
                &[ 99721312 ],
                &[ 214066304 ],
                &[ 51361024 ],
                &[ 66897408 ],
                &[ 267417600 ],
                
            ], 28));
            let matrix_t = Box::new(matrix.transposed());
            PARITY_MATRIX = Box::into_raw(matrix);
            PARITY_MATRIX_T = Box::into_raw(matrix_t);

            let mut map = Box::new(FnvHashMap::with_capacity_and_hasher(1024, Default::default()));
            map.insert(0, &[0]);     // 0 => [0]
            map.insert(1, &[1]);     // 1 => [1]
            map.insert(2, &[2]);     // 2 => [2]
            map.insert(3, &[3]);     // 3 => [3]
            map.insert(4, &[4]);     // 4 => [4]
            map.insert(5, &[5]);     // 5 => [5]
            map.insert(6, &[6]);     // 6 => [6]
            map.insert(7, &[786432]);     // 7 => [786432]
            map.insert(8, &[8]);     // 8 => [8]
            map.insert(9, &[9]);     // 9 => [9]
            map.insert(10, &[10]);     // 10 => [10]
            map.insert(11, &[3145728]);     // 11 => [3145728]
            map.insert(12, &[12]);     // 12 => [12]
            map.insert(13, &[13]);     // 13 => [13]
            map.insert(14, &[14]);     // 14 => [14]
            map.insert(15, &[3145732]);     // 15 => [3145732]
            map.insert(16, &[16]);     // 16 => [16]
            map.insert(17, &[17]);     // 17 => [17]
            map.insert(18, &[18]);     // 18 => [18]
            map.insert(19, &[12582912]);     // 19 => [12582912]
            map.insert(20, &[20]);     // 20 => [20]
            map.insert(21, &[21]);     // 21 => [21]
            map.insert(22, &[22]);     // 22 => [22]
            map.insert(23, &[12582916]);     // 23 => [12582916]
            map.insert(24, &[24]);     // 24 => [24]
            map.insert(25, &[25]);     // 25 => [25]
            map.insert(26, &[26]);     // 26 => [26]
            map.insert(27, &[12582920]);     // 27 => [12582920]
            map.insert(28, &[96]);     // 28 => [96]
            map.insert(29, &[97]);     // 29 => [97]
            map.insert(30, &[98]);     // 30 => [98]
            map.insert(31, &[201326624]);     // 31 => [201326624]
            map.insert(32, &[32]);     // 32 => [32]
            map.insert(33, &[33]);     // 33 => [33]
            map.insert(34, &[34]);     // 34 => [34]
            map.insert(35, &[50331648]);     // 35 => [50331648]
            map.insert(36, &[36]);     // 36 => [36]
            map.insert(37, &[37]);     // 37 => [37]
            map.insert(38, &[38]);     // 38 => [38]
            map.insert(39, &[50331652]);     // 39 => [50331652]
            map.insert(40, &[40]);     // 40 => [40]
            map.insert(41, &[8404992]);     // 41 => [8404992]
            map.insert(42, &[42]);     // 42 => [42]
            map.insert(43, &[8404994]);     // 43 => [8404994]
            map.insert(44, &[80]);     // 44 => [80]
            map.insert(45, &[81]);     // 45 => [81]
            map.insert(46, &[82]);     // 46 => [82]
            map.insert(47, &[201326608]);     // 47 => [201326608]
            map.insert(48, &[48]);     // 48 => [48]
            map.insert(49, &[49]);     // 49 => [49]
            map.insert(50, &[294912]);     // 50 => [294912]
            map.insert(51, &[294913]);     // 51 => [294913]
            map.insert(52, &[72]);     // 52 => [72]
            map.insert(53, &[557056]);     // 53 => [557056]
            map.insert(54, &[65793]);     // 54 => [65793]
            map.insert(55, &[65792]);     // 55 => [65792]
            map.insert(56, &[68]);     // 56 => [68]
            map.insert(57, &[69]);     // 57 => [69]
            map.insert(58, &[4210688]);     // 58 => [4210688]
            map.insert(59, &[4210689]);     // 59 => [4210689]
            map.insert(60, &[64]);     // 60 => [64]
            map.insert(61, &[65]);     // 61 => [65]
            map.insert(62, &[66]);     // 62 => [66]
            map.insert(63, &[201326592]);     // 63 => [201326592]
            map.insert(64, &[128]);     // 64 => [128]
            map.insert(65, &[129]);     // 65 => [129]
            map.insert(66, &[130]);     // 66 => [130]
            map.insert(67, &[131]);     // 67 => [131]
            map.insert(68, &[132]);     // 68 => [132]
            map.insert(69, &[133]);     // 69 => [133]
            map.insert(70, &[5242881]);     // 70 => [5242881]
            map.insert(71, &[5242880]);     // 71 => [5242880]
            map.insert(72, &[136]);     // 72 => [136]
            map.insert(73, &[137]);     // 73 => [137]
            map.insert(74, &[138]);     // 74 => [138]
            map.insert(75, &[3145856]);     // 75 => [3145856]
            map.insert(76, &[6291456]);     // 76 => [6291456]
            map.insert(77, &[6291457]);     // 77 => [6291457]
            map.insert(78, &[6291458]);     // 78 => [6291458]
            map.insert(79, &[5242888]);     // 79 => [5242888]
            map.insert(80, &[144]);     // 80 => [144]
            map.insert(81, &[145]);     // 81 => [145]
            map.insert(82, &[134219776]);     // 82 => [134219776]
            map.insert(83, &[134219777]);     // 83 => [134219777]
            map.insert(84, &[9437184]);     // 84 => [9437184]
            map.insert(85, &[9437185]);     // 85 => [9437185]
            map.insert(86, &[131329]);     // 86 => [131329]
            map.insert(87, &[131328]);     // 87 => [131328]
            map.insert(88, &[525313]);     // 88 => [525313]
            map.insert(89, &[525312]);     // 89 => [525312]
            map.insert(90, &[263172]);     // 90 => [263172]
            map.insert(91, &[525314]);     // 91 => [525314]
            map.insert(92, &[263170]);     // 92 => [263170]
            map.insert(93, &[10485762]);     // 93 => [10485762]
            map.insert(94, &[263168]);     // 94 => [263168]
            map.insert(95, &[10485760]);     // 95 => [10485760]
            map.insert(96, &[160]);     // 96 => [160]
            map.insert(97, &[161]);     // 97 => [161]
            map.insert(98, &[162]);     // 98 => [162]
            map.insert(99, &[12292]);     // 99 => [12292]
            map.insert(100, &[164]);     // 100 => [164]
            map.insert(101, &[12290]);     // 101 => [12290]
            map.insert(102, &[12289]);     // 102 => [12289]
            map.insert(103, &[12288]);     // 103 => [12288]
            map.insert(104, &[33796]);     // 104 => [33796]
            map.insert(105, &[67110916]);     // 105 => [67110916]
            map.insert(106, &[8391168]);     // 106 => [8391168]
            map.insert(107, &[131392]);     // 107 => [131392]
            map.insert(108, &[33792]);     // 108 => [33792]
            map.insert(109, &[67110912]);     // 109 => [67110912]
            map.insert(110, &[33794]);     // 110 => [33794]
            map.insert(111, &[67110914]);     // 111 => [67110914]
            map.insert(112, &[176]);     // 112 => [176]
            map.insert(113, &[16793856]);     // 113 => [16793856]
            map.insert(114, &[2113540]);     // 114 => [2113540]
            map.insert(115, &[67072]);     // 115 => [67072]
            map.insert(116, &[2113538]);     // 116 => [2113538]
            map.insert(117, &[1064968]);     // 117 => [1064968]
            map.insert(118, &[2113536]);     // 118 => [2113536]
            map.insert(119, &[2113537]);     // 119 => [2113537]
            map.insert(120, &[196]);     // 120 => [196]
            map.insert(121, &[1064964]);     // 121 => [1064964]
            map.insert(122, &[4210816]);     // 122 => [4210816]
            map.insert(123, &[5242944]);     // 123 => [5242944]
            map.insert(124, &[192]);     // 124 => [192]
            map.insert(125, &[1064960]);     // 125 => [1064960]
            map.insert(126, &[194]);     // 126 => [194]
            map.insert(127, &[1064962]);     // 127 => [1064962]
            map.insert(128, &[256]);     // 128 => [256]
            map.insert(129, &[257]);     // 129 => [257]
            map.insert(130, &[258]);     // 130 => [258]
            map.insert(131, &[259]);     // 131 => [259]
            map.insert(132, &[260]);     // 132 => [260]
            map.insert(133, &[261]);     // 133 => [261]
            map.insert(134, &[18874369]);     // 134 => [18874369]
            map.insert(135, &[18874368]);     // 135 => [18874368]
            map.insert(136, &[264]);     // 136 => [264]
            map.insert(137, &[265]);     // 137 => [265]
            map.insert(138, &[65601]);     // 138 => [65601]
            map.insert(139, &[65600]);     // 139 => [65600]
            map.insert(140, &[17825792]);     // 140 => [17825792]
            map.insert(141, &[17825793]);     // 141 => [17825793]
            map.insert(142, &[17825794]);     // 142 => [17825794]
            map.insert(143, &[65604]);     // 143 => [65604]
            map.insert(144, &[272]);     // 144 => [272]
            map.insert(145, &[67117056]);     // 145 => [67117056]
            map.insert(146, &[274]);     // 146 => [274]
            map.insert(147, &[67117058]);     // 147 => [67117058]
            map.insert(148, &[276]);     // 148 => [276]
            map.insert(149, &[65570]);     // 149 => [65570]
            map.insert(150, &[65569]);     // 150 => [65569]
            map.insert(151, &[65568]);     // 151 => [65568]
            map.insert(152, &[262658]);     // 152 => [262658]
            map.insert(153, &[6146]);     // 153 => [6146]
            map.insert(154, &[262656]);     // 154 => [262656]
            map.insert(155, &[6144]);     // 155 => [6144]
            map.insert(156, &[524801]);     // 156 => [524801]
            map.insert(157, &[524800]);     // 157 => [524800]
            map.insert(158, &[262660]);     // 158 => [262660]
            map.insert(159, &[524802]);     // 159 => [524802]
            map.insert(160, &[288]);     // 160 => [288]
            map.insert(161, &[289]);     // 161 => [289]
            map.insert(162, &[290]);     // 162 => [290]
            map.insert(163, &[65556]);     // 163 => [65556]
            map.insert(164, &[35651584]);     // 164 => [35651584]
            map.insert(165, &[35651585]);     // 165 => [35651585]
            map.insert(166, &[65553]);     // 166 => [65553]
            map.insert(167, &[65552]);     // 167 => [65552]
            map.insert(168, &[33280]);     // 168 => [33280]
            map.insert(169, &[33281]);     // 169 => [33281]
            map.insert(170, &[33282]);     // 170 => [33282]
            map.insert(171, &[34603012]);     // 171 => [34603012]
            map.insert(172, &[134225922]);     // 172 => [134225922]
            map.insert(173, &[34603010]);     // 173 => [34603010]
            map.insert(174, &[134225920]);     // 174 => [134225920]
            map.insert(175, &[34603008]);     // 175 => [34603008]
            map.insert(176, &[304]);     // 176 => [304]
            map.insert(177, &[65542]);     // 177 => [65542]
            map.insert(178, &[65541]);     // 178 => [65541]
            map.insert(179, &[65540]);     // 179 => [65540]
            map.insert(180, &[65539]);     // 180 => [65539]
            map.insert(181, &[65538]);     // 181 => [65538]
            map.insert(182, &[65537]);     // 182 => [65537]
            map.insert(183, &[65536]);     // 183 => [65536]
            map.insert(184, &[324]);     // 184 => [324]
            map.insert(185, &[134266880]);     // 185 => [134266880]
            map.insert(186, &[262688]);     // 186 => [262688]
            map.insert(187, &[65548]);     // 187 => [65548]
            map.insert(188, &[320]);     // 188 => [320]
            map.insert(189, &[321]);     // 189 => [321]
            map.insert(190, &[65545]);     // 190 => [65545]
            map.insert(191, &[65544]);     // 191 => [65544]
            map.insert(192, &[384]);     // 192 => [384]
            map.insert(193, &[385]);     // 193 => [385]
            map.insert(194, &[386]);     // 194 => [386]
            map.insert(195, &[131092]);     // 195 => [131092]
            map.insert(196, &[1536]);     // 196 => [1536]
            map.insert(197, &[1537]);     // 197 => [1537]
            map.insert(198, &[131089]);     // 198 => [131089]
            map.insert(199, &[131088]);     // 199 => [131088]
            map.insert(200, &[134221825]);     // 200 => [134221825]
            map.insert(201, &[134221824]);     // 201 => [134221824]
            map.insert(202, &[20971521]);     // 202 => [20971521]
            map.insert(203, &[20971520]);     // 203 => [20971520]
            map.insert(204, &[1544]);     // 204 => [1544]
            map.insert(205, &[134221828]);     // 205 => [134221828]
            map.insert(206, &[33559552]);     // 206 => [33559552]
            map.insert(207, &[20971524]);     // 207 => [20971524]
            map.insert(208, &[33570818]);     // 208 => [33570818]
            map.insert(209, &[131078]);     // 209 => [131078]
            map.insert(210, &[33570816]);     // 210 => [33570816]
            map.insert(211, &[131076]);     // 211 => [131076]
            map.insert(212, &[131075]);     // 212 => [131075]
            map.insert(213, &[131074]);     // 213 => [131074]
            map.insert(214, &[131073]);     // 214 => [131073]
            map.insert(215, &[131072]);     // 215 => [131072]
            map.insert(216, &[25165824]);     // 216 => [25165824]
            map.insert(217, &[25165825]);     // 217 => [25165825]
            map.insert(218, &[25165826]);     // 218 => [25165826]
            map.insert(219, &[131084]);     // 219 => [131084]
            map.insert(220, &[25165828]);     // 220 => [25165828]
            map.insert(221, &[131082]);     // 221 => [131082]
            map.insert(222, &[131081]);     // 222 => [131081]
            map.insert(223, &[131080]);     // 223 => [131080]
            map.insert(224, &[37748744]);     // 224 => [37748744]
            map.insert(225, &[16793616]);     // 225 => [16793616]
            map.insert(226, &[4198912]);     // 226 => [4198912]
            map.insert(227, &[131144]);     // 227 => [131144]
            map.insert(228, &[1568]);     // 228 => [1568]
            map.insert(229, &[134285312]);     // 229 => [134285312]
            map.insert(230, &[67112976]);     // 230 => [67112976]
            map.insert(231, &[131120]);     // 231 => [131120]
            map.insert(232, &[37748736]);     // 232 => [37748736]
            map.insert(233, &[37748737]);     // 233 => [37748737]
            map.insert(234, &[131137]);     // 234 => [131137]
            map.insert(235, &[131136]);     // 235 => [131136]
            map.insert(236, &[37748740]);     // 236 => [37748740]
            map.insert(237, &[67111168]);     // 237 => [67111168]
            map.insert(238, &[33570880]);     // 238 => [33570880]
            map.insert(239, &[131140]);     // 239 => [131140]
            map.insert(240, &[16793601]);     // 240 => [16793601]
            map.insert(241, &[16793600]);     // 241 => [16793600]
            map.insert(242, &[67112964]);     // 242 => [67112964]
            map.insert(243, &[16793602]);     // 243 => [16793602]
            map.insert(244, &[67112962]);     // 244 => [67112962]
            map.insert(245, &[131106]);     // 245 => [131106]
            map.insert(246, &[67112960]);     // 246 => [67112960]
            map.insert(247, &[131104]);     // 247 => [131104]
            map.insert(248, &[10244]);     // 248 => [10244]
            map.insert(249, &[41943042]);     // 249 => [41943042]
            map.insert(250, &[41943041]);     // 250 => [41943041]
            map.insert(251, &[41943040]);     // 251 => [41943040]
            map.insert(252, &[10240]);     // 252 => [10240]
            map.insert(253, &[10241]);     // 253 => [10241]
            map.insert(254, &[10242]);     // 254 => [10242]
            map.insert(255, &[41943044]);     // 255 => [41943044]
            map.insert(256, &[512]);     // 256 => [512]
            map.insert(257, &[513]);     // 257 => [513]
            map.insert(258, &[514]);     // 258 => [514]
            map.insert(259, &[515]);     // 259 => [515]
            map.insert(260, &[516]);     // 260 => [516]
            map.insert(261, &[517]);     // 261 => [517]
            map.insert(262, &[75497473]);     // 262 => [75497473]
            map.insert(263, &[75497472]);     // 263 => [75497472]
            map.insert(264, &[520]);     // 264 => [520]
            map.insert(265, &[521]);     // 265 => [521]
            map.insert(266, &[33558528]);     // 266 => [33558528]
            map.insert(267, &[33558529]);     // 267 => [33558529]
            map.insert(268, &[524]);     // 268 => [524]
            map.insert(269, &[524560]);     // 269 => [524560]
            map.insert(270, &[33558532]);     // 270 => [33558532]
            map.insert(271, &[75497480]);     // 271 => [75497480]
            map.insert(272, &[528]);     // 272 => [528]
            map.insert(273, &[134234112]);     // 273 => [134234112]
            map.insert(274, &[132097]);     // 274 => [132097]
            map.insert(275, &[132096]);     // 275 => [132096]
            map.insert(276, &[71303168]);     // 276 => [71303168]
            map.insert(277, &[71303169]);     // 277 => [71303169]
            map.insert(278, &[71303170]);     // 278 => [71303170]
            map.insert(279, &[132100]);     // 279 => [132100]
            map.insert(280, &[262402]);     // 280 => [262402]
            map.insert(281, &[524548]);     // 281 => [524548]
            map.insert(282, &[262400]);     // 282 => [262400]
            map.insert(283, &[262401]);     // 283 => [262401]
            map.insert(284, &[524545]);     // 284 => [524545]
            map.insert(285, &[524544]);     // 285 => [524544]
            map.insert(286, &[98305]);     // 286 => [98305]
            map.insert(287, &[98304]);     // 287 => [98304]
            map.insert(288, &[544]);     // 288 => [544]
            map.insert(289, &[545]);     // 289 => [545]
            map.insert(290, &[546]);     // 290 => [546]
            map.insert(291, &[138412040]);     // 291 => [138412040]
            map.insert(292, &[548]);     // 292 => [548]
            map.insert(293, &[327688]);     // 293 => [327688]
            map.insert(294, &[67125256]);     // 294 => [67125256]
            map.insert(295, &[75497504]);     // 295 => [75497504]
            map.insert(296, &[33024]);     // 296 => [33024]
            map.insert(297, &[16781312]);     // 297 => [16781312]
            map.insert(298, &[589824]);     // 298 => [589824]
            map.insert(299, &[138412032]);     // 299 => [138412032]
            map.insert(300, &[327681]);     // 300 => [327681]
            map.insert(301, &[327680]);     // 301 => [327680]
            map.insert(302, &[67125248]);     // 302 => [67125248]
            map.insert(303, &[67125249]);     // 303 => [67125249]
            map.insert(304, &[142606344]);     // 304 => [142606344]
            map.insert(305, &[2099204]);     // 305 => [2099204]
            map.insert(306, &[16779520]);     // 306 => [16779520]
            map.insert(307, &[132128]);     // 307 => [132128]
            map.insert(308, &[2099201]);     // 308 => [2099201]
            map.insert(309, &[2099200]);     // 309 => [2099200]
            map.insert(310, &[1050632]);     // 310 => [1050632]
            map.insert(311, &[2099202]);     // 311 => [2099202]
            map.insert(312, &[142606336]);     // 312 => [142606336]
            map.insert(313, &[142606337]);     // 313 => [142606337]
            map.insert(314, &[142606338]);     // 314 => [142606338]
            map.insert(315, &[138412048]);     // 315 => [138412048]
            map.insert(316, &[576]);     // 316 => [576]
            map.insert(317, &[577]);     // 317 => [577]
            map.insert(318, &[1050624]);     // 318 => [1050624]
            map.insert(319, &[1050625]);     // 319 => [1050625]
            map.insert(320, &[640]);     // 320 => [640]
            map.insert(321, &[641]);     // 321 => [641]
            map.insert(322, &[18433]);     // 322 => [18433]
            map.insert(323, &[18432]);     // 323 => [18432]
            map.insert(324, &[1280]);     // 324 => [1280]
            map.insert(325, &[1281]);     // 325 => [1281]
            map.insert(326, &[1282]);     // 326 => [1282]
            map.insert(327, &[18436]);     // 327 => [18436]
            map.insert(328, &[655362]);     // 328 => [655362]
            map.insert(329, &[393220]);     // 329 => [393220]
            map.insert(330, &[655360]);     // 330 => [655360]
            map.insert(331, &[655361]);     // 331 => [655361]
            map.insert(332, &[393217]);     // 332 => [393217]
            map.insert(333, &[393216]);     // 333 => [393216]
            map.insert(334, &[16785408]);     // 334 => [16785408]
            map.insert(335, &[16785409]);     // 335 => [16785409]
            map.insert(336, &[69206024]);     // 336 => [69206024]
            map.insert(337, &[68157442]);     // 337 => [68157442]
            map.insert(338, &[68157441]);     // 338 => [68157441]
            map.insert(339, &[68157440]);     // 339 => [68157440]
            map.insert(340, &[1296]);     // 340 => [1296]
            map.insert(341, &[67118080]);     // 341 => [67118080]
            map.insert(342, &[8390720]);     // 342 => [8390720]
            map.insert(343, &[68157444]);     // 343 => [68157444]
            map.insert(344, &[69206016]);     // 344 => [69206016]
            map.insert(345, &[69206017]);     // 345 => [69206017]
            map.insert(346, &[69206018]);     // 346 => [69206018]
            map.insert(347, &[68157448]);     // 347 => [68157448]
            map.insert(348, &[69206020]);     // 348 => [69206020]
            map.insert(349, &[393232]);     // 349 => [393232]
            map.insert(350, &[16785424]);     // 350 => [16785424]
            map.insert(351, &[163872]);     // 351 => [163872]
            map.insert(352, &[672]);     // 352 => [672]
            map.insert(353, &[534528]);     // 353 => [534528]
            map.insert(354, &[8390664]);     // 354 => [8390664]
            map.insert(355, &[136314884]);     // 355 => [136314884]
            map.insert(356, &[135266312]);     // 356 => [135266312]
            map.insert(357, &[136314882]);     // 357 => [136314882]
            map.insert(358, &[136314881]);     // 358 => [136314881]
            map.insert(359, &[136314880]);     // 359 => [136314880]
            map.insert(360, &[8390658]);     // 360 => [8390658]
            map.insert(361, &[33562628]);     // 361 => [33562628]
            map.insert(362, &[8390656]);     // 362 => [8390656]
            map.insert(363, &[8390657]);     // 363 => [8390657]
            map.insert(364, &[135266304]);     // 364 => [135266304]
            map.insert(365, &[33562624]);     // 365 => [33562624]
            map.insert(366, &[135266306]);     // 366 => [135266306]
            map.insert(367, &[33562626]);     // 367 => [33562626]
            map.insert(368, &[25198592]);     // 368 => [25198592]
            map.insert(369, &[66562]);     // 369 => [66562]
            map.insert(370, &[66561]);     // 370 => [66561]
            map.insert(371, &[66560]);     // 371 => [66560]
            map.insert(372, &[167837696]);     // 372 => [167837696]
            map.insert(373, &[2099328]);     // 373 => [2099328]
            map.insert(374, &[655424]);     // 374 => [655424]
            map.insert(375, &[66564]);     // 375 => [66564]
            map.insert(376, &[4196353]);     // 376 => [4196353]
            map.insert(377, &[4196352]);     // 377 => [4196352]
            map.insert(378, &[8390672]);     // 378 => [8390672]
            map.insert(379, &[4196354]);     // 379 => [4196354]
            map.insert(380, &[135266320]);     // 380 => [135266320]
            map.insert(381, &[163842]);     // 381 => [163842]
            map.insert(382, &[163841]);     // 382 => [163841]
            map.insert(383, &[163840]);     // 383 => [163840]
            map.insert(384, &[768]);     // 384 => [768]
            map.insert(385, &[769]);     // 385 => [769]
            map.insert(386, &[770]);     // 386 => [770]
            map.insert(387, &[24640]);     // 387 => [24640]
            map.insert(388, &[1152]);     // 388 => [1152]
            map.insert(389, &[4202496]);     // 389 => [4202496]
            map.insert(390, &[1154]);     // 390 => [1154]
            map.insert(391, &[4202498]);     // 391 => [4202498]
            map.insert(392, &[32800]);     // 392 => [32800]
            map.insert(393, &[32801]);     // 393 => [32801]
            map.insert(394, &[262160]);     // 394 => [262160]
            map.insert(395, &[262161]);     // 395 => [262161]
            map.insert(396, &[524305]);     // 396 => [524305]
            map.insert(397, &[524304]);     // 397 => [524304]
            map.insert(398, &[262164]);     // 398 => [262164]
            map.insert(399, &[524306]);     // 399 => [524306]
            map.insert(400, &[33556481]);     // 400 => [33556481]
            map.insert(401, &[33556480]);     // 401 => [33556480]
            map.insert(402, &[262152]);     // 402 => [262152]
            map.insert(403, &[262153]);     // 403 => [262153]
            map.insert(404, &[32832]);     // 404 => [32832]
            map.insert(405, &[524296]);     // 405 => [524296]
            map.insert(406, &[8396800]);     // 406 => [8396800]
            map.insert(407, &[8396801]);     // 407 => [8396801]
            map.insert(408, &[262146]);     // 408 => [262146]
            map.insert(409, &[524292]);     // 409 => [524292]
            map.insert(410, &[262144]);     // 410 => [262144]
            map.insert(411, &[262145]);     // 411 => [262145]
            map.insert(412, &[524289]);     // 412 => [524289]
            map.insert(413, &[524288]);     // 413 => [524288]
            map.insert(414, &[262148]);     // 414 => [262148]
            map.insert(415, &[524290]);     // 415 => [524290]
            map.insert(416, &[32776]);     // 416 => [32776]
            map.insert(417, &[524352]);     // 417 => [524352]
            map.insert(418, &[32778]);     // 418 => [32778]
            map.insert(419, &[524354]);     // 419 => [524354]
            map.insert(420, &[1052673]);     // 420 => [1052673]
            map.insert(421, &[1052672]);     // 421 => [1052672]
            map.insert(422, &[262208]);     // 422 => [262208]
            map.insert(423, &[262209]);     // 423 => [262209]
            map.insert(424, &[32768]);     // 424 => [32768]
            map.insert(425, &[32769]);     // 425 => [32769]
            map.insert(426, &[32770]);     // 426 => [32770]
            map.insert(427, &[32771]);     // 427 => [32771]
            map.insert(428, &[32772]);     // 428 => [32772]
            map.insert(429, &[32773]);     // 429 => [32773]
            map.insert(430, &[2101248]);     // 430 => [2101248]
            map.insert(431, &[2101249]);     // 431 => [2101249]
            map.insert(432, &[16779266]);     // 432 => [16779266]
            map.insert(433, &[524368]);     // 433 => [524368]
            map.insert(434, &[16779264]);     // 434 => [16779264]
            map.insert(435, &[16779265]);     // 435 => [16779265]
            map.insert(436, &[32864]);     // 436 => [32864]
            map.insert(437, &[66050]);     // 437 => [66050]
            map.insert(438, &[66049]);     // 438 => [66049]
            map.insert(439, &[66048]);     // 439 => [66048]
            map.insert(440, &[32784]);     // 440 => [32784]
            map.insert(441, &[32785]);     // 441 => [32785]
            map.insert(442, &[262176]);     // 442 => [262176]
            map.insert(443, &[262177]);     // 443 => [262177]
            map.insert(444, &[524321]);     // 444 => [524321]
            map.insert(445, &[524320]);     // 445 => [524320]
            map.insert(446, &[24577]);     // 446 => [24577]
            map.insert(447, &[24576]);     // 447 => [24576]
            map.insert(448, &[1028]);     // 448 => [1028]
            map.insert(449, &[1029]);     // 449 => [1029]
            map.insert(450, &[1056768]);     // 450 => [1056768]
            map.insert(451, &[167772160]);     // 451 => [167772160]
            map.insert(452, &[1024]);     // 452 => [1024]
            map.insert(453, &[1025]);     // 453 => [1025]
            map.insert(454, &[1026]);     // 454 => [1026]
            map.insert(455, &[1027]);     // 455 => [1027]
            map.insert(456, &[2105345]);     // 456 => [2105345]
            map.insert(457, &[2105344]);     // 457 => [2105344]
            map.insert(458, &[1056776]);     // 458 => [1056776]
            map.insert(459, &[2105346]);     // 459 => [2105346]
            map.insert(460, &[1032]);     // 460 => [1032]
            map.insert(461, &[1033]);     // 461 => [1033]
            map.insert(462, &[1034]);     // 462 => [1034]
            map.insert(463, &[83886096]);     // 463 => [83886096]
            map.insert(464, &[1044]);     // 464 => [1044]
            map.insert(465, &[8392736]);     // 465 => [8392736]
            map.insert(466, &[262280]);     // 466 => [262280]
            map.insert(467, &[131588]);     // 467 => [131588]
            map.insert(468, &[1040]);     // 468 => [1040]
            map.insert(469, &[1041]);     // 469 => [1041]
            map.insert(470, &[131585]);     // 470 => [131585]
            map.insert(471, &[131584]);     // 471 => [131584]
            map.insert(472, &[20480]);     // 472 => [20480]
            map.insert(473, &[20481]);     // 473 => [20481]
            map.insert(474, &[262272]);     // 474 => [262272]
            map.insert(475, &[262273]);     // 475 => [262273]
            map.insert(476, &[524417]);     // 476 => [524417]
            map.insert(477, &[524416]);     // 477 => [524416]
            map.insert(478, &[83886081]);     // 478 => [83886081]
            map.insert(479, &[83886080]);     // 479 => [83886080]
            map.insert(480, &[150994944]);     // 480 => [150994944]
            map.insert(481, &[150994945]);     // 481 => [150994945]
            map.insert(482, &[4198400]);     // 482 => [4198400]
            map.insert(483, &[4198401]);     // 483 => [4198401]
            map.insert(484, &[1056]);     // 484 => [1056]
            map.insert(485, &[1057]);     // 485 => [1057]
            map.insert(486, &[1058]);     // 486 => [1058]
            map.insert(487, &[136315136]);     // 487 => [136315136]
            map.insert(488, &[32896]);     // 488 => [32896]
            map.insert(489, &[32897]);     // 489 => [32897]
            map.insert(490, &[32898]);     // 490 => [32898]
            map.insert(491, &[131648]);     // 491 => [131648]
            map.insert(492, &[32900]);     // 492 => [32900]
            map.insert(493, &[33562880]);     // 493 => [33562880]
            map.insert(494, &[2101376]);     // 494 => [2101376]
            map.insert(495, &[5275648]);     // 495 => [5275648]
            map.insert(496, &[8392705]);     // 496 => [8392705]
            map.insert(497, &[8392704]);     // 497 => [8392704]
            map.insert(498, &[4198416]);     // 498 => [4198416]
            map.insert(499, &[8392706]);     // 499 => [8392706]
            map.insert(500, &[100663304]);     // 500 => [100663304]
            map.insert(501, &[8392708]);     // 501 => [8392708]
            map.insert(502, &[67113472]);     // 502 => [67113472]
            map.insert(503, &[131616]);     // 503 => [131616]
            map.insert(504, &[1088]);     // 504 => [1088]
            map.insert(505, &[1089]);     // 505 => [1089]
            map.insert(506, &[1090]);     // 506 => [1090]
            map.insert(507, &[41943552]);     // 507 => [41943552]
            map.insert(508, &[100663296]);     // 508 => [100663296]
            map.insert(509, &[100663297]);     // 509 => [100663297]
            map.insert(510, &[100663298]);     // 510 => [100663298]
            map.insert(511, &[83886112]);     // 511 => [83886112]
            map.insert(512, &[2048]);     // 512 => [2048]
            map.insert(513, &[2049]);     // 513 => [2049]
            map.insert(514, &[2050]);     // 514 => [2050]
            map.insert(515, &[2051]);     // 515 => [2051]
            map.insert(516, &[2052]);     // 516 => [2052]
            map.insert(517, &[2053]);     // 517 => [2053]
            map.insert(518, &[2054]);     // 518 => [2054]
            map.insert(519, &[17664]);     // 519 => [17664]
            map.insert(520, &[2056]);     // 520 => [2056]
            map.insert(521, &[2057]);     // 521 => [2057]
            map.insert(522, &[33816577]);     // 522 => [33816577]
            map.insert(523, &[33816576]);     // 523 => [33816576]
            map.insert(524, &[34078720]);     // 524 => [34078720]
            map.insert(525, &[34078721]);     // 525 => [34078721]
            map.insert(526, &[34078722]);     // 526 => [34078722]
            map.insert(527, &[33816580]);     // 527 => [33816580]
            map.insert(528, &[2064]);     // 528 => [2064]
            map.insert(529, &[2065]);     // 529 => [2065]
            map.insert(530, &[134217856]);     // 530 => [134217856]
            map.insert(531, &[134217857]);     // 531 => [134217857]
            map.insert(532, &[2068]);     // 532 => [2068]
            map.insert(533, &[2097696]);     // 533 => [2097696]
            map.insert(534, &[134217860]);     // 534 => [134217860]
            map.insert(535, &[139328]);     // 535 => [139328]
            map.insert(536, &[16809986]);     // 536 => [16809986]
            map.insert(537, &[4354]);     // 537 => [4354]
            map.insert(538, &[16809984]);     // 538 => [16809984]
            map.insert(539, &[4352]);     // 539 => [4352]
            map.insert(540, &[34078736]);     // 540 => [34078736]
            map.insert(541, &[2130176]);     // 541 => [2130176]
            map.insert(542, &[16809988]);     // 542 => [16809988]
            map.insert(543, &[4356]);     // 543 => [4356]
            map.insert(544, &[2080]);     // 544 => [2080]
            map.insert(545, &[2081]);     // 545 => [2081]
            map.insert(546, &[2082]);     // 546 => [2082]
            map.insert(547, &[139272]);     // 547 => [139272]
            map.insert(548, &[2084]);     // 548 => [2084]
            map.insert(549, &[67109000]);     // 549 => [67109000]
            map.insert(550, &[16810048]);     // 550 => [16810048]
            map.insert(551, &[17301512]);     // 551 => [17301512]
            map.insert(552, &[17039360]);     // 552 => [17039360]
            map.insert(553, &[17039361]);     // 553 => [17039361]
            map.insert(554, &[139265]);     // 554 => [139265]
            map.insert(555, &[139264]);     // 555 => [139264]
            map.insert(556, &[69632]);     // 556 => [69632]
            map.insert(557, &[67108992]);     // 557 => [67108992]
            map.insert(558, &[17301505]);     // 558 => [17301505]
            map.insert(559, &[17301504]);     // 559 => [17301504]
            map.insert(560, &[2096]);     // 560 => [2096]
            map.insert(561, &[2097668]);     // 561 => [2097668]
            map.insert(562, &[134217888]);     // 562 => [134217888]
            map.insert(563, &[37376]);     // 563 => [37376]
            map.insert(564, &[2097665]);     // 564 => [2097665]
            map.insert(565, &[2097664]);     // 565 => [2097664]
            map.insert(566, &[1049096]);     // 566 => [1049096]
            map.insert(567, &[2097666]);     // 567 => [2097666]
            map.insert(568, &[33587201]);     // 568 => [33587201]
            map.insert(569, &[33587200]);     // 569 => [33587200]
            map.insert(570, &[1049092]);     // 570 => [1049092]
            map.insert(571, &[33587202]);     // 571 => [33587202]
            map.insert(572, &[2112]);     // 572 => [2112]
            map.insert(573, &[2113]);     // 573 => [2113]
            map.insert(574, &[1049088]);     // 574 => [1049088]
            map.insert(575, &[1049089]);     // 575 => [1049089]
            map.insert(576, &[2176]);     // 576 => [2176]
            map.insert(577, &[2177]);     // 577 => [2177]
            map.insert(578, &[134217744]);     // 578 => [134217744]
            map.insert(579, &[16896]);     // 579 => [16896]
            map.insert(580, &[2180]);     // 580 => [2180]
            map.insert(581, &[67108904]);     // 581 => [67108904]
            map.insert(582, &[134217748]);     // 582 => [134217748]
            map.insert(583, &[16900]);     // 583 => [16900]
            map.insert(584, &[135172]);     // 584 => [135172]
            map.insert(585, &[73730]);     // 585 => [73730]
            map.insert(586, &[73729]);     // 586 => [73729]
            map.insert(587, &[73728]);     // 587 => [73728]
            map.insert(588, &[135168]);     // 588 => [135168]
            map.insert(589, &[67108896]);     // 589 => [67108896]
            map.insert(590, &[135170]);     // 590 => [135170]
            map.insert(591, &[67108898]);     // 591 => [67108898]
            map.insert(592, &[134217730]);     // 592 => [134217730]
            map.insert(593, &[67108928]);     // 593 => [67108928]
            map.insert(594, &[134217728]);     // 594 => [134217728]
            map.insert(595, &[134217729]);     // 595 => [134217729]
            map.insert(596, &[33555457]);     // 596 => [33555457]
            map.insert(597, &[33555456]);     // 597 => [33555456]
            map.insert(598, &[134217732]);     // 598 => [134217732]
            map.insert(599, &[134217733]);     // 599 => [134217733]
            map.insert(600, &[134217738]);     // 600 => [134217738]
            map.insert(601, &[67108936]);     // 601 => [67108936]
            map.insert(602, &[134217736]);     // 602 => [134217736]
            map.insert(603, &[134217737]);     // 603 => [134217737]
            map.insert(604, &[135184]);     // 604 => [135184]
            map.insert(605, &[33555464]);     // 605 => [33555464]
            map.insert(606, &[134217740]);     // 606 => [134217740]
            map.insert(607, &[5632]);     // 607 => [5632]
            map.insert(608, &[2208]);     // 608 => [2208]
            map.insert(609, &[67108876]);     // 609 => [67108876]
            map.insert(610, &[8389128]);     // 610 => [8389128]
            map.insert(611, &[16928]);     // 611 => [16928]
            map.insert(612, &[67108873]);     // 612 => [67108873]
            map.insert(613, &[67108872]);     // 613 => [67108872]
            map.insert(614, &[134217800]);     // 614 => [134217800]
            map.insert(615, &[67108874]);     // 615 => [67108874]
            map.insert(616, &[67108869]);     // 616 => [67108869]
            map.insert(617, &[67108868]);     // 617 => [67108868]
            map.insert(618, &[8389120]);     // 618 => [8389120]
            map.insert(619, &[8389121]);     // 619 => [8389121]
            map.insert(620, &[67108865]);     // 620 => [67108865]
            map.insert(621, &[67108864]);     // 621 => [67108864]
            map.insert(622, &[134217792]);     // 622 => [134217792]
            map.insert(623, &[67108866]);     // 623 => [67108866]
            map.insert(624, &[134217762]);     // 624 => [134217762]
            map.insert(625, &[4194824]);     // 625 => [4194824]
            map.insert(626, &[134217760]);     // 626 => [134217760]
            map.insert(627, &[134217761]);     // 627 => [134217761]
            map.insert(628, &[16778242]);     // 628 => [16778242]
            map.insert(629, &[67108888]);     // 629 => [67108888]
            map.insert(630, &[16778240]);     // 630 => [16778240]
            map.insert(631, &[16778241]);     // 631 => [16778241]
            map.insert(632, &[4194817]);     // 632 => [4194817]
            map.insert(633, &[4194816]);     // 633 => [4194816]
            map.insert(634, &[134217768]);     // 634 => [134217768]
            map.insert(635, &[4194818]);     // 635 => [4194818]
            map.insert(636, &[8448]);     // 636 => [8448]
            map.insert(637, &[67108880]);     // 637 => [67108880]
            map.insert(638, &[8450]);     // 638 => [8450]
            map.insert(639, &[67108882]);     // 639 => [67108882]
            map.insert(640, &[2304]);     // 640 => [2304]
            map.insert(641, &[2305]);     // 641 => [2305]
            map.insert(642, &[2306]);     // 642 => [2306]
            map.insert(643, &[17412]);     // 643 => [17412]
            map.insert(644, &[134348801]);     // 644 => [134348801]
            map.insert(645, &[134348800]);     // 645 => [134348800]
            map.insert(646, &[17409]);     // 646 => [17409]
            map.insert(647, &[17408]);     // 647 => [17408]
            map.insert(648, &[2312]);     // 648 => [2312]
            map.insert(649, &[4114]);     // 649 => [4114]
            map.insert(650, &[4113]);     // 650 => [4113]
            map.insert(651, &[4112]);     // 651 => [4112]
            map.insert(652, &[34078976]);     // 652 => [34078976]
            map.insert(653, &[134348808]);     // 653 => [134348808]
            map.insert(654, &[8389664]);     // 654 => [8389664]
            map.insert(655, &[4116]);     // 655 => [4116]
            map.insert(656, &[33554945]);     // 656 => [33554945]
            map.insert(657, &[33554944]);     // 657 => [33554944]
            map.insert(658, &[4105]);     // 658 => [4105]
            map.insert(659, &[4104]);     // 659 => [4104]
            map.insert(660, &[1081346]);     // 660 => [1081346]
            map.insert(661, &[33554948]);     // 661 => [33554948]
            map.insert(662, &[1081344]);     // 662 => [1081344]
            map.insert(663, &[1081345]);     // 663 => [1081345]
            map.insert(664, &[4099]);     // 664 => [4099]
            map.insert(665, &[4098]);     // 665 => [4098]
            map.insert(666, &[4097]);     // 666 => [4097]
            map.insert(667, &[4096]);     // 667 => [4096]
            map.insert(668, &[2129921]);     // 668 => [2129921]
            map.insert(669, &[2129920]);     // 669 => [2129920]
            map.insert(670, &[4101]);     // 670 => [4101]
            map.insert(671, &[4100]);     // 671 => [4100]
            map.insert(672, &[1310724]);     // 672 => [1310724]
            map.insert(673, &[1572866]);     // 673 => [1572866]
            map.insert(674, &[1572865]);     // 674 => [1572865]
            map.insert(675, &[1572864]);     // 675 => [1572864]
            map.insert(676, &[1310720]);     // 676 => [1310720]
            map.insert(677, &[1310721]);     // 677 => [1310721]
            map.insert(678, &[4161]);     // 678 => [4161]
            map.insert(679, &[4160]);     // 679 => [4160]
            map.insert(680, &[2621440]);     // 680 => [2621440]
            map.insert(681, &[2621441]);     // 681 => [2621441]
            map.insert(682, &[2621442]);     // 682 => [2621442]
            map.insert(683, &[2359300]);     // 683 => [2359300]
            map.insert(684, &[8389634]);     // 684 => [8389634]
            map.insert(685, &[2359298]);     // 685 => [2359298]
            map.insert(686, &[8389632]);     // 686 => [8389632]
            map.insert(687, &[2359296]);     // 687 => [2359296]
            map.insert(688, &[16777730]);     // 688 => [16777730]
            map.insert(689, &[33554976]);     // 689 => [33554976]
            map.insert(690, &[16777728]);     // 690 => [16777728]
            map.insert(691, &[16777729]);     // 691 => [16777729]
            map.insert(692, &[8328]);     // 692 => [8328]
            map.insert(693, &[67586]);     // 693 => [67586]
            map.insert(694, &[67585]);     // 694 => [67585]
            map.insert(695, &[67584]);     // 695 => [67584]
            map.insert(696, &[67239938]);     // 696 => [67239938]
            map.insert(697, &[4130]);     // 697 => [4130]
            map.insert(698, &[67239936]);     // 698 => [67239936]
            map.insert(699, &[4128]);     // 699 => [4128]
            map.insert(700, &[8320]);     // 700 => [8320]
            map.insert(701, &[4195328]);     // 701 => [4195328]
            map.insert(702, &[8322]);     // 702 => [8322]
            map.insert(703, &[4195330]);     // 703 => [4195330]
            map.insert(704, &[8256]);     // 704 => [8256]
            map.insert(705, &[8257]);     // 705 => [8257]
            map.insert(706, &[8421376]);     // 706 => [8421376]
            map.insert(707, &[8421377]);     // 707 => [8421377]
            map.insert(708, &[8260]);     // 708 => [8260]
            map.insert(709, &[134283296]);     // 709 => [134283296]
            map.insert(710, &[8421380]);     // 710 => [8421380]
            map.insert(711, &[133136]);     // 711 => [133136]
            map.insert(712, &[8264]);     // 712 => [8264]
            map.insert(713, &[278544]);     // 713 => [278544]
            map.insert(714, &[8421384]);     // 714 => [8421384]
            map.insert(715, &[4240]);     // 715 => [4240]
            map.insert(716, &[8240]);     // 716 => [8240]
            map.insert(717, &[67109152]);     // 717 => [67109152]
            map.insert(718, &[540688]);     // 718 => [540688]
            map.insert(719, &[134742528]);     // 719 => [134742528]
            map.insert(720, &[4227073]);     // 720 => [4227073]
            map.insert(721, &[4227072]);     // 721 => [4227072]
            map.insert(722, &[134217984]);     // 722 => [134217984]
            map.insert(723, &[134217985]);     // 723 => [134217985]
            map.insert(724, &[8232]);     // 724 => [8232]
            map.insert(725, &[133122]);     // 725 => [133122]
            map.insert(726, &[133121]);     // 726 => [133121]
            map.insert(727, &[133120]);     // 727 => [133120]
            map.insert(728, &[278529]);     // 728 => [278529]
            map.insert(729, &[278528]);     // 729 => [278528]
            map.insert(730, &[67174400]);     // 730 => [67174400]
            map.insert(731, &[4224]);     // 731 => [4224]
            map.insert(732, &[8224]);     // 732 => [8224]
            map.insert(733, &[8225]);     // 733 => [8225]
            map.insert(734, &[540672]);     // 734 => [540672]
            map.insert(735, &[540673]);     // 735 => [540673]
            map.insert(736, &[4718596]);     // 736 => [4718596]
            map.insert(737, &[4456450]);     // 737 => [4456450]
            map.insert(738, &[4456449]);     // 738 => [4456449]
            map.insert(739, &[4456448]);     // 739 => [4456448]
            map.insert(740, &[4718592]);     // 740 => [4718592]
            map.insert(741, &[134283264]);     // 741 => [134283264]
            map.insert(742, &[4718594]);     // 742 => [4718594]
            map.insert(743, &[134283266]);     // 743 => [134283266]
            map.insert(744, &[8212]);     // 744 => [8212]
            map.insert(745, &[49154]);     // 745 => [49154]
            map.insert(746, &[49153]);     // 746 => [49153]
            map.insert(747, &[49152]);     // 747 => [49152]
            map.insert(748, &[8208]);     // 748 => [8208]
            map.insert(749, &[67109120]);     // 749 => [67109120]
            map.insert(750, &[8210]);     // 750 => [8210]
            map.insert(751, &[67109122]);     // 751 => [67109122]
            map.insert(752, &[8650752]);     // 752 => [8650752]
            map.insert(753, &[2098176]);     // 753 => [2098176]
            map.insert(754, &[8650754]);     // 754 => [8650754]
            map.insert(755, &[2098178]);     // 755 => [2098178]
            map.insert(756, &[8200]);     // 756 => [8200]
            map.insert(757, &[8201]);     // 757 => [8201]
            map.insert(758, &[8912897]);     // 758 => [8912897]
            map.insert(759, &[8912896]);     // 759 => [8912896]
            map.insert(760, &[8196]);     // 760 => [8196]
            map.insert(761, &[8197]);     // 761 => [8197]
            map.insert(762, &[1049600]);     // 762 => [1049600]
            map.insert(763, &[1049601]);     // 763 => [1049601]
            map.insert(764, &[8192]);     // 764 => [8192]
            map.insert(765, &[8193]);     // 765 => [8193]
            map.insert(766, &[8194]);     // 766 => [8194]
            map.insert(767, &[8195]);     // 767 => [8195]
            map.insert(768, &[2560]);     // 768 => [2560]
            map.insert(769, &[266240]);     // 769 => [266240]
            map.insert(770, &[1048640]);     // 770 => [1048640]
            map.insert(771, &[16512]);     // 771 => [16512]
            map.insert(772, &[16842753]);     // 772 => [16842753]
            map.insert(773, &[16842752]);     // 773 => [16842752]
            map.insert(774, &[528384]);     // 774 => [528384]
            map.insert(775, &[528385]);     // 775 => [528385]
            map.insert(776, &[2097217]);     // 776 => [2097217]
            map.insert(777, &[2097216]);     // 777 => [2097216]
            map.insert(778, &[1048648]);     // 778 => [1048648]
            map.insert(779, &[2097218]);     // 779 => [2097218]
            map.insert(780, &[34079232]);     // 780 => [34079232]
            map.insert(781, &[2097220]);     // 781 => [2097220]
            map.insert(782, &[528392]);     // 782 => [528392]
            map.insert(783, &[36928]);     // 783 => [36928]
            map.insert(784, &[33554689]);     // 784 => [33554689]
            map.insert(785, &[33554688]);     // 785 => [33554688]
            map.insert(786, &[1048656]);     // 786 => [1048656]
            map.insert(787, &[33554690]);     // 787 => [33554690]
            map.insert(788, &[2097185]);     // 788 => [2097185]
            map.insert(789, &[2097184]);     // 789 => [2097184]
            map.insert(790, &[1048616]);     // 790 => [1048616]
            map.insert(791, &[2097186]);     // 791 => [2097186]
            map.insert(792, &[9248]);     // 792 => [9248]
            map.insert(793, &[33554696]);     // 793 => [33554696]
            map.insert(794, &[1048612]);     // 794 => [1048612]
            map.insert(795, &[4864]);     // 795 => [4864]
            map.insert(796, &[1048610]);     // 796 => [1048610]
            map.insert(797, &[2097192]);     // 797 => [2097192]
            map.insert(798, &[1048608]);     // 798 => [1048608]
            map.insert(799, &[1048609]);     // 799 => [1048609]
            map.insert(800, &[2592]);     // 800 => [2592]
            map.insert(801, &[2097172]);     // 801 => [2097172]
            map.insert(802, &[33619972]);     // 802 => [33619972]
            map.insert(803, &[36880]);     // 803 => [36880]
            map.insert(804, &[2097169]);     // 804 => [2097169]
            map.insert(805, &[2097168]);     // 805 => [2097168]
            map.insert(806, &[33619968]);     // 806 => [33619968]
            map.insert(807, &[33619969]);     // 807 => [33619969]
            map.insert(808, &[8388738]);     // 808 => [8388738]
            map.insert(809, &[4194448]);     // 809 => [4194448]
            map.insert(810, &[8388736]);     // 810 => [8388736]
            map.insert(811, &[8388737]);     // 811 => [8388737]
            map.insert(812, &[1048594]);     // 812 => [1048594]
            map.insert(813, &[2097176]);     // 813 => [2097176]
            map.insert(814, &[1048592]);     // 814 => [1048592]
            map.insert(815, &[1048593]);     // 815 => [1048593]
            map.insert(816, &[2097157]);     // 816 => [2097157]
            map.insert(817, &[2097156]);     // 817 => [2097156]
            map.insert(818, &[16777472]);     // 818 => [16777472]
            map.insert(819, &[36864]);     // 819 => [36864]
            map.insert(820, &[2097153]);     // 820 => [2097153]
            map.insert(821, &[2097152]);     // 821 => [2097152]
            map.insert(822, &[1048584]);     // 822 => [1048584]
            map.insert(823, &[2097154]);     // 823 => [2097154]
            map.insert(824, &[9216]);     // 824 => [9216]
            map.insert(825, &[4194432]);     // 825 => [4194432]
            map.insert(826, &[1048580]);     // 826 => [1048580]
            map.insert(827, &[1048581]);     // 827 => [1048581]
            map.insert(828, &[1048578]);     // 828 => [1048578]
            map.insert(829, &[2097160]);     // 829 => [2097160]
            map.insert(830, &[1048576]);     // 830 => [1048576]
            map.insert(831, &[1048577]);     // 831 => [1048577]
            map.insert(832, &[16387]);     // 832 => [16387]
            map.insert(833, &[16386]);     // 833 => [16386]
            map.insert(834, &[16385]);     // 834 => [16385]
            map.insert(835, &[16384]);     // 835 => [16384]
            map.insert(836, &[4194369]);     // 836 => [4194369]
            map.insert(837, &[4194368]);     // 837 => [4194368]
            map.insert(838, &[33685504]);     // 838 => [33685504]
            map.insert(839, &[16388]);     // 839 => [16388]
            map.insert(840, &[8388642]);     // 840 => [8388642]
            map.insert(841, &[16394]);     // 841 => [16394]
            map.insert(842, &[8388640]);     // 842 => [8388640]
            map.insert(843, &[16392]);     // 843 => [16392]
            map.insert(844, &[135680]);     // 844 => [135680]
            map.insert(845, &[4194376]);     // 845 => [4194376]
            map.insert(846, &[8388644]);     // 846 => [8388644]
            map.insert(847, &[16396]);     // 847 => [16396]
            map.insert(848, &[134218242]);     // 848 => [134218242]
            map.insert(849, &[16402]);     // 849 => [16402]
            map.insert(850, &[134218240]);     // 850 => [134218240]
            map.insert(851, &[16400]);     // 851 => [16400]
            map.insert(852, &[40960]);     // 852 => [40960]
            map.insert(853, &[40961]);     // 853 => [40961]
            map.insert(854, &[8388672]);     // 854 => [8388672]
            map.insert(855, &[8388673]);     // 855 => [8388673]
            map.insert(856, &[4194337]);     // 856 => [4194337]
            map.insert(857, &[4194336]);     // 857 => [4194336]
            map.insert(858, &[134218248]);     // 858 => [134218248]
            map.insert(859, &[4194338]);     // 859 => [4194338]
            map.insert(860, &[40968]);     // 860 => [40968]
            map.insert(861, &[5122]);     // 861 => [5122]
            map.insert(862, &[5121]);     // 862 => [5121]
            map.insert(863, &[5120]);     // 863 => [5120]
            map.insert(864, &[532481]);     // 864 => [532481]
            map.insert(865, &[532480]);     // 865 => [532480]
            map.insert(866, &[8388616]);     // 866 => [8388616]
            map.insert(867, &[16416]);     // 867 => [16416]
            map.insert(868, &[16908289]);     // 868 => [16908289]
            map.insert(869, &[16908288]);     // 869 => [16908288]
            map.insert(870, &[270336]);     // 870 => [270336]
            map.insert(871, &[270337]);     // 871 => [270337]
            map.insert(872, &[8388610]);     // 872 => [8388610]
            map.insert(873, &[4194320]);     // 873 => [4194320]
            map.insert(874, &[8388608]);     // 874 => [8388608]
            map.insert(875, &[8388609]);     // 875 => [8388609]
            map.insert(876, &[67109377]);     // 876 => [67109377]
            map.insert(877, &[67109376]);     // 877 => [67109376]
            map.insert(878, &[8388612]);     // 878 => [8388612]
            map.insert(879, &[8388613]);     // 879 => [8388613]
            map.insert(880, &[4194313]);     // 880 => [4194313]
            map.insert(881, &[4194312]);     // 881 => [4194312]
            map.insert(882, &[8388632]);     // 882 => [8388632]
            map.insert(883, &[4194314]);     // 883 => [4194314]
            map.insert(884, &[2097281]);     // 884 => [2097281]
            map.insert(885, &[2097280]);     // 885 => [2097280]
            map.insert(886, &[1048712]);     // 886 => [1048712]
            map.insert(887, &[2097282]);     // 887 => [2097282]
            map.insert(888, &[4194305]);     // 888 => [4194305]
            map.insert(889, &[4194304]);     // 889 => [4194304]
            map.insert(890, &[8388624]);     // 890 => [8388624]
            map.insert(891, &[4194306]);     // 891 => [4194306]
            map.insert(892, &[4194309]);     // 892 => [4194309]
            map.insert(893, &[4194308]);     // 893 => [4194308]
            map.insert(894, &[1048704]);     // 894 => [1048704]
            map.insert(895, &[16448]);     // 895 => [16448]
            map.insert(896, &[33554449]);     // 896 => [33554449]
            map.insert(897, &[33554448]);     // 897 => [33554448]
            map.insert(898, &[2162688]);     // 898 => [2162688]
            map.insert(899, &[2162689]);     // 899 => [2162689]
            map.insert(900, &[147472]);     // 900 => [147472]
            map.insert(901, &[33554452]);     // 901 => [33554452]
            map.insert(902, &[2162692]);     // 902 => [2162692]
            map.insert(903, &[17920]);     // 903 => [17920]
            map.insert(904, &[1114113]);     // 904 => [1114113]
            map.insert(905, &[1114112]);     // 905 => [1114112]
            map.insert(906, &[16777284]);     // 906 => [16777284]
            map.insert(907, &[1114114]);     // 907 => [1114114]
            map.insert(908, &[16777282]);     // 908 => [16777282]
            map.insert(909, &[1114116]);     // 909 => [1114116]
            map.insert(910, &[16777280]);     // 910 => [16777280]
            map.insert(911, &[16777281]);     // 911 => [16777281]
            map.insert(912, &[33554433]);     // 912 => [33554433]
            map.insert(913, &[33554432]);     // 913 => [33554432]
            map.insert(914, &[16777248]);     // 914 => [16777248]
            map.insert(915, &[33554434]);     // 915 => [33554434]
            map.insert(916, &[147456]);     // 916 => [147456]
            map.insert(917, &[33554436]);     // 917 => [33554436]
            map.insert(918, &[134218752]);     // 918 => [134218752]
            map.insert(919, &[134218753]);     // 919 => [134218753]
            map.insert(920, &[33554441]);     // 920 => [33554441]
            map.insert(921, &[33554440]);     // 921 => [33554440]
            map.insert(922, &[264192]);     // 922 => [264192]
            map.insert(923, &[4608]);     // 923 => [4608]
            map.insert(924, &[526337]);     // 924 => [526337]
            map.insert(925, &[526336]);     // 925 => [526336]
            map.insert(926, &[264196]);     // 926 => [264196]
            map.insert(927, &[526338]);     // 927 => [526338]
            map.insert(928, &[16777234]);     // 928 => [16777234]
            map.insert(929, &[67109896]);     // 929 => [67109896]
            map.insert(930, &[16777232]);     // 930 => [16777232]
            map.insert(931, &[16777233]);     // 931 => [16777233]
            map.insert(932, &[1311232]);     // 932 => [1311232]
            map.insert(933, &[33554504]);     // 933 => [33554504]
            map.insert(934, &[16777236]);     // 934 => [16777236]
            map.insert(935, &[4672]);     // 935 => [4672]
            map.insert(936, &[34816]);     // 936 => [34816]
            map.insert(937, &[67109888]);     // 937 => [67109888]
            map.insert(938, &[34818]);     // 938 => [34818]
            map.insert(939, &[67109890]);     // 939 => [67109890]
            map.insert(940, &[33554497]);     // 940 => [33554497]
            map.insert(941, &[33554496]);     // 941 => [33554496]
            map.insert(942, &[4325376]);     // 942 => [4325376]
            map.insert(943, &[4325377]);     // 943 => [4325377]
            map.insert(944, &[16777218]);     // 944 => [16777218]
            map.insert(945, &[33554464]);     // 945 => [33554464]
            map.insert(946, &[16777216]);     // 946 => [16777216]
            map.insert(947, &[16777217]);     // 947 => [16777217]
            map.insert(948, &[2097409]);     // 948 => [2097409]
            map.insert(949, &[2097408]);     // 949 => [2097408]
            map.insert(950, &[16777220]);     // 950 => [16777220]
            map.insert(951, &[16777221]);     // 951 => [16777221]
            map.insert(952, &[16777226]);     // 952 => [16777226]
            map.insert(953, &[8519684]);     // 953 => [8519684]
            map.insert(954, &[16777224]);     // 954 => [16777224]
            map.insert(955, &[16777225]);     // 955 => [16777225]
            map.insert(956, &[8519681]);     // 956 => [8519681]
            map.insert(957, &[8519680]);     // 957 => [8519680]
            map.insert(958, &[1048832]);     // 958 => [1048832]
            map.insert(959, &[1048833]);     // 959 => [1048833]
            map.insert(960, &[3076]);     // 960 => [3076]
            map.insert(961, &[16642]);     // 961 => [16642]
            map.insert(962, &[16641]);     // 962 => [16641]
            map.insert(963, &[16640]);     // 963 => [16640]
            map.insert(964, &[3072]);     // 964 => [3072]
            map.insert(965, &[67141632]);     // 965 => [67141632]
            map.insert(966, &[3074]);     // 966 => [3074]
            map.insert(967, &[67141634]);     // 967 => [67141634]
            map.insert(968, &[134479872]);     // 968 => [134479872]
            map.insert(969, &[134479873]);     // 969 => [134479873]
            map.insert(970, &[134479874]);     // 970 => [134479874]
            map.insert(971, &[134742020]);     // 971 => [134742020]
            map.insert(972, &[4259842]);     // 972 => [4259842]
            map.insert(973, &[134742018]);     // 973 => [134742018]
            map.insert(974, &[4259840]);     // 974 => [4259840]
            map.insert(975, &[134742016]);     // 975 => [134742016]
            map.insert(976, &[33554561]);     // 976 => [33554561]
            map.insert(977, &[33554560]);     // 977 => [33554560]
            map.insert(978, &[16777376]);     // 978 => [16777376]
            map.insert(979, &[33554562]);     // 979 => [33554562]
            map.insert(980, &[3088]);     // 980 => [3088]
            map.insert(981, &[33554564]);     // 981 => [33554564]
            map.insert(982, &[8388928]);     // 982 => [8388928]
            map.insert(983, &[67371040]);     // 983 => [67371040]
            map.insert(984, &[134479888]);     // 984 => [134479888]
            map.insert(985, &[8454148]);     // 985 => [8454148]
            map.insert(986, &[134250528]);     // 986 => [134250528]
            map.insert(987, &[4736]);     // 987 => [4736]
            map.insert(988, &[8454145]);     // 988 => [8454145]
            map.insert(989, &[8454144]);     // 989 => [8454144]
            map.insert(990, &[4259856]);     // 990 => [4259856]
            map.insert(991, &[8454146]);     // 991 => [8454146]
            map.insert(992, &[2228226]);     // 992 => [2228226]
            map.insert(993, &[1179656]);     // 993 => [1179656]
            map.insert(994, &[2228224]);     // 994 => [2228224]
            map.insert(995, &[2228225]);     // 995 => [2228225]
            map.insert(996, &[81936]);     // 996 => [81936]
            map.insert(997, &[67141664]);     // 997 => [67141664]
            map.insert(998, &[2228228]);     // 998 => [2228228]
            map.insert(999, &[67371024]);     // 999 => [67371024]
            map.insert(1000, &[1179649]);     // 1000 => [1179649]
            map.insert(1001, &[1179648]);     // 1001 => [1179648]
            map.insert(1002, &[8388864]);     // 1002 => [8388864]
            map.insert(1003, &[8388865]);     // 1003 => [8388865]
            map.insert(1004, &[8720]);     // 1004 => [8720]
            map.insert(1005, &[1179652]);     // 1005 => [1179652]
            map.insert(1006, &[8388868]);     // 1006 => [8388868]
            map.insert(1007, &[134742048]);     // 1007 => [134742048]
            map.insert(1008, &[67633152]);     // 1008 => [67633152]
            map.insert(1009, &[67633153]);     // 1009 => [67633153]
            map.insert(1010, &[16777344]);     // 1010 => [16777344]
            map.insert(1011, &[16777345]);     // 1011 => [16777345]
            map.insert(1012, &[81920]);     // 1012 => [81920]
            map.insert(1013, &[81921]);     // 1013 => [81921]
            map.insert(1014, &[67371009]);     // 1014 => [67371009]
            map.insert(1015, &[67371008]);     // 1015 => [67371008]
            map.insert(1016, &[4194561]);     // 1016 => [4194561]
            map.insert(1017, &[4194560]);     // 1017 => [4194560]
            map.insert(1018, &[134250496]);     // 1018 => [134250496]
            map.insert(1019, &[134250497]);     // 1019 => [134250497]
            map.insert(1020, &[8704]);     // 1020 => [8704]
            map.insert(1021, &[8705]);     // 1021 => [8705]
            map.insert(1022, &[8706]);     // 1022 => [8706]
            map.insert(1023, &[67371016]);     // 1023 => [67371016]
            
            SYNDROME_MAP = Box::into_raw(map);
        }
    });
}

impl WagnerCode28_18 {
    fn parity_check_matrix_transposed(&self) -> &BinMatrix {
        init();
        unsafe {
            PARITY_MATRIX_T.as_ref().unwrap()
        }
    }
}

impl BinaryCode for WagnerCode28_18 {
    fn name(&self) -> String {
        "[28, 18] Wagner code".to_owned()
    }

    fn length(&self) -> usize {
        28
    }

    fn dimension(&self) -> usize {
        18
    }

    fn generator_matrix(&self) -> &BinMatrix {
        init();
        unsafe {
            GENERATOR_MATRIX.as_ref().unwrap()
        }
    }

    fn parity_check_matrix(&self) -> &BinMatrix {
        init();
        unsafe {
            PARITY_MATRIX.as_ref().unwrap()
        }
    }

    fn decode_to_code(&self, c: &BinVector) -> Result<BinVector, &str> {
        init();
        let map = unsafe {
            SYNDROME_MAP.as_ref().unwrap()
        };
        debug_assert_eq!(c.len(), self.length(), "the length doesn't match the expected length (length of the code)");
        let he = c * self.parity_check_matrix_transposed();
        let mut error = BinVector::with_capacity(28);
        let stor = unsafe { error.get_storage_mut() };
        let errbytes = map[&he.as_u64()];
        debug_assert_eq!(errbytes.len(), 28 / 64 + if 28 % 64 != 0 { 1 } else { 0 });
        stor.clear();
        stor.extend_from_slice(&errbytes[..]);
        unsafe { error.set_len(28) };
        debug_assert_eq!(error.len(), self.length(), "internal: the error vector is of the wrong length");
        let result = c + &error;
        debug_assert_eq!(result.len(), self.length(), "internal: the result vector is of the wrong length");
        debug_assert_eq!((&result * self.parity_check_matrix_transposed()).count_ones(), 0);
        Ok(result)
    }

    fn decode_to_message(&self, c: &BinVector) -> Result<BinVector, &str> {
        
        let mut codeword = self.decode_to_code(c)?;
        codeword.truncate(18);
        Ok(codeword)
        
    }

    fn decode_slice(&self, c: &mut [u64]) {
        init();
        
        debug_assert_eq!(c[28 / 64] & !((1 << 28) - 1), 0, "this message has excess bits");

        let map = unsafe {
            SYNDROME_MAP.as_ref().unwrap()
        };
        let he = &BinMatrix::from_slices(&[&c[..]], self.length()) * self.parity_check_matrix_transposed();
        let error = map[unsafe { &he.get_word_unchecked(0, 0) }];
        c.iter_mut().zip(error.iter().copied()).for_each(|(sample, error)| *sample ^= error as u64);
    }

    
}

#[cfg(test)]
mod tests {
    use super::*;
    use m4ri_rust::friendly::BinVector;
    use crate::oracle::Sample;

    #[test]
    fn size() {
        let code = WagnerCode28_18.generator_matrix();
        assert_eq!(code.ncols(), 28);
        assert_eq!(code.nrows(), 18);
    }

    #[test]
    fn test_decode_sample() {
        let code = WagnerCode28_18;
        for _ in 0..1000 {
            // setup
            let vec = BinVector::random(code.length());
            let mut sample_a = Sample::from_binvector(&vec, false);
            let mut sample_b = Sample::from_binvector(&vec, true);
            
            let decoded_vec = code.decode_to_message(&vec).unwrap();
            println!("decoded_vec: {:?}", decoded_vec);

            // test vectors
            let decoded_vec_sample_a = Sample::from_binvector(&decoded_vec, false);
            let decoded_vec_sample_b = Sample::from_binvector(&decoded_vec, true);

            code.decode_sample(&mut sample_a);
            code.decode_sample(&mut sample_b);
            assert_eq!(sample_a.get_product(), false);
            assert_eq!(sample_b.get_product(), true);
            assert_eq!(sample_a, decoded_vec_sample_a);
            assert_eq!(sample_b, decoded_vec_sample_b);
        }
    }

    #[test]
    fn random_decode_tests() {

        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, false, true, false, true, false, false, false, true, false, false, true, true, false, false, false, true, false, false, true, true, false, false, false, true, true, false]);
            let codeword = BinVector::from_bools(&[false, true, false, true, false, true, false, false, false, true, false, true, true, true, false, false, false, true, false, false, true, true, false, false, false, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, true, true, true, false, true, true, false, true, true, false, true]);
            let codeword = BinVector::from_bools(&[true, false, false, false, false, false, false, false, true, false, true, true, false, false, false, true, false, true, true, true, false, true, true, false, true, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, true, true, false, false, false, false, false, false, false, false, false, true, true, false, true, true, true, true, true, true, true, true, true, false, true, false]);
            let codeword = BinVector::from_bools(&[true, true, true, true, true, false, false, false, false, false, false, false, false, true, true, false, true, true, true, true, true, true, true, true, true, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, false, false, false, true, true, true, false, true, false, false, true, false, true, false, true, false, false, false, false, true, true, true, false, false, false, false]);
            let codeword = BinVector::from_bools(&[true, true, false, true, false, false, true, true, false, true, false, false, true, false, true, false, true, false, false, false, true, true, true, true, false, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, true, true, true, false, true, true, false, true, false, false, true, false, true, true, false, false, true, false, false, false, true, true, true, false, true, true]);
            let codeword = BinVector::from_bools(&[false, true, true, false, true, true, true, true, false, true, false, false, true, false, true, true, false, false, true, false, true, false, true, true, true, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, false, true, false, false, false, true, false, false, false, false, false, true, false, true, true, true, true, false, true, false, false, false, true, false, false, false]);
            let codeword = BinVector::from_bools(&[false, false, false, true, false, false, false, true, false, true, false, false, false, true, false, true, true, true, true, false, true, false, false, true, true, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, false, false, true, false, false, false, true, true, false, false, true, true, true, true, true, true, false, false, false, false, false, true, false, true, true, false]);
            let codeword = BinVector::from_bools(&[false, true, false, false, true, false, false, true, true, true, false, false, true, true, true, false, true, true, false, false, false, false, false, true, false, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, true, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, true, false, true, true, true, true, true, false, false]);
            let codeword = BinVector::from_bools(&[false, false, true, true, false, false, true, false, true, false, false, false, false, false, false, false, false, false, true, true, false, true, true, true, false, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, false, true, true, true, false, true, true, false, false, false, true, false, false, false, false, false, false, true, true, false, true, false, false, true, true, true]);
            let codeword = BinVector::from_bools(&[true, true, true, true, false, true, false, true, true, false, false, false, true, false, false, false, false, false, false, true, true, false, true, false, false, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, false, false, false, false, false, true, false, false, true, false, true, false, true, true, true, false, true, false, true, false, true, false, true, true, true, false]);
            let codeword = BinVector::from_bools(&[false, true, false, false, false, false, false, true, true, false, true, false, true, false, true, true, true, false, true, false, true, false, true, false, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, true, false, false, true, false, false, false, true, true, true, false, false, false, false, true, false, true, true, false, true, true, true, true, false, true, true]);
            let codeword = BinVector::from_bools(&[true, true, false, false, false, true, false, false, false, true, true, true, false, true, false, false, true, false, true, true, false, true, true, true, true, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, true, false, true, true, false, false, false, false, true, false, true, false, true, true, false, true, false, false, false, true, false, false, true, true, false, false]);
            let codeword = BinVector::from_bools(&[true, false, true, false, true, true, false, true, false, false, true, true, true, false, true, true, false, true, false, false, false, true, false, false, true, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, true, false, true, true, true, true, false, false, true, false, false, false, false, false, false, true, true, false, true, false, false, true, true, false, false, true]);
            let codeword = BinVector::from_bools(&[false, true, false, false, true, true, true, true, false, false, false, false, false, false, false, false, true, true, true, false, true, false, false, true, true, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, false, false, true, true, false, true, false, true, false, true, false, true, false, false, false, true, true, true, false, true, true, false, false, true, false, true]);
            let codeword = BinVector::from_bools(&[false, false, true, false, true, true, false, true, false, true, false, true, false, true, false, false, false, false, true, true, false, true, true, false, false, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, false, false, true, true, true, true, false, true, true, false, true, false, false, true, false, true, false, true, false, true, true, false, false, false, true, true]);
            let codeword = BinVector::from_bools(&[false, true, false, false, true, true, true, true, true, true, true, true, true, false, false, true, false, true, false, true, false, true, true, false, false, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, true, true, true, false, true, false, false, false, false, true, false, true, false, false, true, true, true, true, false, true, false, true, true, false, false, true]);
            let codeword = BinVector::from_bools(&[false, false, false, true, true, false, true, false, false, true, false, true, false, true, false, false, true, true, true, true, false, true, false, true, true, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, false, false, true, true, false, true, false, true, true, false, false, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false]);
            let codeword = BinVector::from_bools(&[true, true, false, false, true, true, false, true, true, true, true, false, false, true, true, true, true, true, true, true, true, false, true, false, false, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, true, false, true, false, true, false, true, false, true, true, true, true, false, false, false, false, true, false, true, false, true, false, true, true, false, true]);
            let codeword = BinVector::from_bools(&[false, false, true, false, false, false, true, false, true, false, true, true, true, true, false, false, true, false, true, false, true, false, true, false, true, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, false, true, true, true, false, false, true, false, true, false, true, true, false, false, false, false, true, false, false, false, false, true, false, true, false, true]);
            let codeword = BinVector::from_bools(&[true, true, false, true, true, true, false, false, true, false, true, false, true, false, false, false, false, true, true, false, false, false, false, true, false, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, true, true, false, false, true, false, true, true, true, false, true, false, false, false, false, true, true, true, false, false, false, true, true, false, false, false]);
            let codeword = BinVector::from_bools(&[false, true, true, true, false, false, true, false, true, true, true, false, true, false, false, false, true, true, true, true, false, false, false, true, true, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, true, true, true, false, false, true, true, false, true, false, false, false, false, true, true, false, false, false, true, false, false, false, false, false, false, true]);
            let codeword = BinVector::from_bools(&[false, true, false, true, true, false, false, true, true, false, true, false, false, true, false, true, true, false, false, false, true, false, false, false, false, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, false, true, true, true, false, true, true, true, false, true, true, false, true, false, false, true, true, true, false, true, true, true, false, true, true, false]);
            let codeword = BinVector::from_bools(&[false, true, false, false, true, false, false, true, true, true, false, true, true, false, true, false, false, true, true, true, false, true, true, true, false, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, false, false, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, true, false, true, true, false, false, true, true, false]);
            let codeword = BinVector::from_bools(&[true, true, true, true, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, true, false, true, true, false, false, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, true, true, true, true, false, true, true, true, true, false, true, true, true, false, true, true, true, false, false, true, true, true, false, false, true, false]);
            let codeword = BinVector::from_bools(&[false, false, true, true, true, true, true, true, true, true, true, false, true, true, true, false, true, true, true, false, false, true, true, true, false, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, true, true, false, true, false, true, false, true, false, true, false, true, true, false, false, false, false, false, false, false, true, true, true, false, true, true]);
            let codeword = BinVector::from_bools(&[true, true, true, true, false, true, false, true, false, true, false, true, false, false, true, false, false, false, false, false, false, false, true, true, false, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, true, true, false, false, false, true, false, true, true, false, true, false, true, true, false, false, false, true, false, true, true, false, true, true, false, false]);
            let codeword = BinVector::from_bools(&[false, false, true, true, false, false, false, true, false, true, true, false, false, false, true, true, false, false, false, true, false, true, true, false, true, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, true, false, true, true, false, true, true, true, false, false, true, true, false, false, false, false, true, false, true, false, true, false, false, false, false, false]);
            let codeword = BinVector::from_bools(&[true, false, true, true, true, true, false, true, true, true, false, false, true, true, false, false, false, false, true, false, false, false, false, false, false, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, true, true, true, false, true, true, true, false, false, true, true, false, true, false, false, true, true, true, true, true, true, false, false, true, true, true]);
            let codeword = BinVector::from_bools(&[true, false, true, true, true, false, true, true, true, false, false, true, true, false, true, false, false, true, true, true, true, false, true, false, false, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, true, true, true, false, false, false, true, false, false, true, true, true, false, false, true, true, false, false, true, false, true, true, true, false, false, true]);
            let codeword = BinVector::from_bools(&[true, false, true, true, true, false, false, false, false, false, false, true, true, true, false, false, true, false, false, false, true, false, true, true, true, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, false, true, false, true, true, false, false, false, false, true, true, false, false, true, true, false, false, true, true, true, false, true, true, false, false, false]);
            let codeword = BinVector::from_bools(&[true, false, false, false, false, true, true, false, false, false, false, true, true, false, false, true, true, true, false, true, true, true, false, true, true, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, false, false, true, false, true, true, false, false, false, true, false, true, false, true, true, true, false, false, false, false, true, false, true, false, false, true]);
            let codeword = BinVector::from_bools(&[true, false, true, false, true, false, true, true, false, false, true, false, false, true, false, true, true, true, false, false, false, false, true, false, true, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, true, false, false, true, true, false, true, false, false, false, false, false, true, true, false, false, true, false, true, false, true, false, false, false, false, false]);
            let codeword = BinVector::from_bools(&[true, true, true, false, false, true, false, false, true, false, false, false, false, false, true, true, false, false, true, false, true, false, true, false, false, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, true, false, true, true, true, true, false, false, false, true, true, true, false, false, true, false, true, false, false, false, true, true, false, true, false, false]);
            let codeword = BinVector::from_bools(&[false, false, true, false, true, true, true, true, true, false, false, true, true, true, false, false, true, false, true, false, false, false, true, true, false, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, false, true, false, true, false, true, false, true, false, true, true, false, false, true, false, false, false, true, true, true, false, true, true, false, true, true]);
            let codeword = BinVector::from_bools(&[true, false, false, true, false, true, false, true, false, true, false, true, true, false, false, true, false, false, false, true, true, true, true, true, true, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, false, false, true, true, false, true, false, false, false, false, false, false, false, false, true, true, true, false, false, true, false, true, false, false, true, true]);
            let codeword = BinVector::from_bools(&[false, true, false, false, true, true, false, false, false, false, false, false, false, false, false, true, true, true, true, false, false, true, false, true, false, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, false, true, true, false, false, false, false, true, false, false, false, false, false, true, true, true, true, false, true, false, true, false, true, false, true, true]);
            let codeword = BinVector::from_bools(&[false, false, false, true, true, false, false, false, true, true, false, true, false, false, false, true, true, true, true, false, true, false, true, false, true, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, false, true, true, true, false, false, true, false, true, true, false, false, false, true, true, false, true, false, true, false, true, true, false, false, true, true]);
            let codeword = BinVector::from_bools(&[true, true, false, true, true, true, false, false, true, false, true, true, false, false, false, true, true, false, true, false, true, false, false, true, false, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, true, true, true, false, true, false, false, false, false, false, true, false, false, false, false, true, false, true, false, true, false, false, false, true, false, false]);
            let codeword = BinVector::from_bools(&[true, false, true, true, true, false, true, false, false, false, false, false, true, true, false, true, false, true, false, true, false, true, false, false, false, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, true, false, true, false, false, false, false, true, false, true, false, true, false, true, false, true, true, true, true, true, false, true, true, true, true, true]);
            let codeword = BinVector::from_bools(&[true, false, true, false, false, false, false, false, false, false, false, true, false, false, false, true, false, true, true, true, true, true, false, true, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, false, true, true, true, true, true, true, true, false, false, false, false, false, false, true, true, false, false, true, true, true, true, false, false, true, false]);
            let codeword = BinVector::from_bools(&[true, true, false, true, true, false, true, false, true, true, false, false, false, false, false, false, true, true, false, false, true, true, true, true, true, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, true, true, false, false, false, false, false, false, true, false, false, false, true, true, false, true, false, true, true, false, true, true, false, true, false, true]);
            let codeword = BinVector::from_bools(&[true, true, false, true, false, false, false, false, true, false, true, false, false, false, true, true, false, true, false, true, true, false, true, true, false, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, true, false, false, true, true, true, true, true, true, true, false, true, true, false, false, false, false, false, false, true, false, true, true, false, true, false]);
            let codeword = BinVector::from_bools(&[true, true, true, false, false, false, true, true, true, true, true, false, false, true, true, false, false, false, false, false, false, true, false, true, true, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, false, true, false, false, true, true, false, false, true, true, true, true, true, true, true, true, false, false, false, false, false, true, true, true, false, true]);
            let codeword = BinVector::from_bools(&[false, false, false, true, false, false, true, true, false, false, true, true, true, true, true, true, true, true, false, false, true, false, true, true, true, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, false, true, true, true, false, true, true, false, false, true, true, false, false, false, false, false, false, false, false, false, false, false, true, false, true, true]);
            let codeword = BinVector::from_bools(&[true, true, true, true, true, true, false, true, true, false, false, true, true, false, false, false, false, true, false, false, true, false, false, false, true, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, true, false, false, false, true, true, false, false, true, false, true, true, false, false, false, true, false, true, false, true, false, true, true, true, true, true]);
            let codeword = BinVector::from_bools(&[true, false, false, false, false, false, true, true, false, false, true, false, true, true, false, false, false, false, false, true, false, true, false, true, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, false, false, true, false, false, true, true, false, true, false, false, true, false, true, false, true, false, true, false, true, true, true, false, true, false, false]);
            let codeword = BinVector::from_bools(&[false, false, false, false, true, false, false, true, true, false, true, false, false, true, false, true, false, false, false, true, false, true, true, false, false, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, false, false, false, true, true, false, false, true, false, false, true, true, true, false, false, false, false, false, false, true, false, true, false, true, false, true]);
            let codeword = BinVector::from_bools(&[true, false, false, true, false, true, false, false, false, true, false, false, true, true, true, false, false, false, false, false, false, true, false, true, false, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, true, false, true, false, true, true, false, false, true, true, false, true, false, true, true, false, true, false, false, false, true, false, true, false, true, true]);
            let codeword = BinVector::from_bools(&[false, true, true, true, true, false, true, true, false, false, true, true, false, true, false, true, true, false, true, false, false, false, false, false, true, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, false, false, false, false, false, true, true, false, true, true, true, true, true, true, true, false, false, true, false, true, false, true, false, false, true, true]);
            let codeword = BinVector::from_bools(&[false, true, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, false, false, true, false, true, false, true, false, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, true, true, true, false, true, true, true, false, false, false, true, true, true, true, true, false, true, false, false, true, true, true, true, false, true, true]);
            let codeword = BinVector::from_bools(&[true, true, true, true, true, false, true, true, true, false, false, false, true, true, true, true, true, true, true, false, true, true, true, true, true, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, true, true, true, false, true, false, true, true, false, true, true, true, false, true, false, true, true, true, false, true, false, false, true, true, true, true]);
            let codeword = BinVector::from_bools(&[false, false, true, true, true, false, true, false, true, true, false, true, true, false, false, true, false, true, true, true, false, true, false, true, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, false, false, false, false, true, true, true, false, false, true, true, false, true, false, true, false, true, true, false, true, false, true, true, true, false, false]);
            let codeword = BinVector::from_bools(&[false, true, false, false, false, false, true, true, false, false, false, true, true, false, true, false, true, false, true, true, false, true, false, false, true, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, false, true, true, true, true, false, false, false, true, true, false, true, true, false, false, true, true, true, false, true, true, true, false, true, true, true]);
            let codeword = BinVector::from_bools(&[true, true, true, true, true, false, true, false, false, false, true, false, false, true, true, false, false, true, true, true, false, true, true, true, false, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, false, true, true, true, true, true, false, false, false, false, true, false, true, false, false, true, true, false, false, true, false, false, false, true, false, true]);
            let codeword = BinVector::from_bools(&[true, false, false, true, true, true, false, true, false, false, false, false, true, false, true, true, false, true, true, false, false, true, false, false, true, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, false, false, false, false, false, true, false, false, false, true, true, false, false, false, false, false, false, true, false, false, true, false, true, true, false, true]);
            let codeword = BinVector::from_bools(&[false, true, false, false, false, false, false, true, false, false, false, true, true, false, false, false, false, false, false, true, false, true, false, false, true, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, true, false, false, true, true, false, true, true, true, true, true, false, false, false, false, true, false, false, false, false, false, false, true, true, true, true]);
            let codeword = BinVector::from_bools(&[false, false, false, true, false, true, true, false, true, true, true, true, true, false, false, false, false, true, false, false, false, false, false, false, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, true, false, true, true, false, true, false, false, false, true, false, false, false, true, false, true, true, false, true, false, true, false, false, true, false, false]);
            let codeword = BinVector::from_bools(&[true, true, true, false, true, true, false, true, true, false, true, true, false, false, false, true, false, true, true, false, true, false, true, false, false, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, false, false, false, true, true, false, false, false, false, false, true, true, true, true, false, true, false, true, true, false, false, false, false, true, false, false]);
            let codeword = BinVector::from_bools(&[false, false, false, false, false, true, true, true, false, false, false, false, true, true, true, true, false, true, false, true, true, true, false, false, false, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, true, false, false, true, true, false, false, false, true, true, true, true, false, false, false, false, false, false, true, true, true, false, false, false, true, true]);
            let codeword = BinVector::from_bools(&[false, false, true, false, false, true, true, false, false, false, true, true, false, true, false, false, false, false, false, false, true, true, true, false, false, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, true, true, true, true, true, false, false, true, false, true, false, true, false, true, false, false, true, false, false, false, true, true, true, false, true, false]);
            let codeword = BinVector::from_bools(&[false, true, true, true, true, true, true, false, false, true, false, true, false, true, false, true, false, false, true, false, false, false, true, true, true, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, true, true, false, true, false, false, true, true, false, false, false, false, false, true, false, false, false, false, false, false, false, true, true, true, false, true]);
            let codeword = BinVector::from_bools(&[false, false, true, true, false, true, false, false, true, true, false, false, false, false, false, false, true, false, false, false, false, false, false, true, true, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, true, true, false, false, true, true, true, false, false, false, false, true, false, true, false, true, true, false, false, false, false, false, false, false, false, false]);
            let codeword = BinVector::from_bools(&[false, true, true, true, false, false, true, true, true, false, false, false, false, true, true, false, false, true, true, false, false, false, false, false, false, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, false, false, false, false, false, true, true, false, true, false, true, false, true, false, false, true, false, false, true, false, false, false, false, false, true, false]);
            let codeword = BinVector::from_bools(&[true, true, false, true, false, false, false, true, true, false, true, false, true, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, false, true, true, false, false, true, true, true, true, false, true, true]);
            let codeword = BinVector::from_bools(&[false, true, true, false, false, false, true, false, false, true, false, false, false, true, true, true, false, true, true, false, false, true, false, true, false, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, false, true, false, false, false, true, false, false, true, true, true, false, true, false, false, true, true, false, true, true, false, false, true, true, false, false]);
            let codeword = BinVector::from_bools(&[false, true, false, true, false, false, false, true, false, false, true, true, false, false, true, true, false, true, true, false, true, true, false, false, true, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, false, false, true, false, false, true, false, false, true, true, true, false, true, false, false, true, false, false, false, false, false, false, false, false, true, false]);
            let codeword = BinVector::from_bools(&[false, false, false, false, true, false, false, true, false, false, true, true, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, true, false, false, true, false, false, true, true, true, false, false, false, true, false, true, true, false, false, false, true, true, false, true, true, true, true]);
            let codeword = BinVector::from_bools(&[false, true, true, false, false, true, false, false, false, true, true, false, false, false, true, false, true, true, false, false, false, true, true, false, true, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, false, false, false, false, true, true, false, false, true, true, true, false, true, false, true, false, true, false, true, true, true, false, false, false, true, true]);
            let codeword = BinVector::from_bools(&[false, false, false, false, false, false, true, true, false, false, true, true, true, false, true, false, true, false, true, false, true, true, true, false, false, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, false, true, true, false, true, true, true, false, true, false, false, false, true, true, false, false, true, true, false, false, false, true, true, true, false, false]);
            let codeword = BinVector::from_bools(&[false, true, false, true, true, false, true, true, true, false, true, false, false, false, true, true, false, false, true, true, false, true, false, true, false, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, false, true, true, true, false, true, false, false, true, false, false, false, false, false, false, true, false, false, false, true, true, true, false, true, true, true]);
            let codeword = BinVector::from_bools(&[true, false, false, true, true, true, false, true, false, false, true, false, true, false, false, false, false, true, false, false, false, true, false, true, false, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, true, true, false, false, false, false, true, false, false, true, true, true, false, true, true, true, true, true, false, false, true, false, false, true, true, true]);
            let codeword = BinVector::from_bools(&[true, true, true, true, false, false, false, false, true, false, false, true, true, true, false, true, true, true, true, false, false, false, true, false, false, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, true, true, false, true, false, true, false, true, false, false, false, true, true, false, false, false, false, false, false, false, false, false, true, false, false, false]);
            let codeword = BinVector::from_bools(&[true, true, true, false, false, true, false, true, false, true, false, false, false, true, true, false, false, false, false, false, false, false, false, true, true, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, false, false, true, true, true, false, true, true, true, true, true, true, false, false, true, true, true, false, true, false, true, false, true, true, true, false]);
            let codeword = BinVector::from_bools(&[true, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, true, true, true, true, true, false, true, false, true, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, true, false, true, true, true, false, true, true, true, true, false, true, true, true, false, true, false, true, false, true, true, true, false, true, true, false]);
            let codeword = BinVector::from_bools(&[false, true, true, false, true, true, true, false, true, true, true, true, false, false, true, true, false, true, false, true, false, false, true, true, false, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, false, false, true, true, true, false, false, false, false, false, true, true, false, false, false, false, false, false, false, true, true, false, true, false, true, true]);
            let codeword = BinVector::from_bools(&[false, true, false, false, true, true, true, false, false, false, false, true, true, true, false, true, false, false, false, false, false, true, true, false, true, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, true, false, true, false, false, true, true, false, false, true, false, false, true, true, false, false, true, false, true, true, false, true, false, false, true, true]);
            let codeword = BinVector::from_bools(&[true, true, false, false, true, false, false, true, true, false, false, true, false, true, true, true, false, false, true, false, true, true, false, true, false, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, false, false, true, false, true, false, true, true, true, true, true, false, false, false, true, false, true, false, false, false, false, true, true, false, true, false]);
            let codeword = BinVector::from_bools(&[true, false, false, false, true, false, true, false, true, true, true, true, true, false, false, false, true, false, true, false, false, false, false, false, true, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, true, true, false, false, true, true, true, true, false, true, false, false, true, true, false, false, true, true, true, true, false, true, true, false, true, false]);
            let codeword = BinVector::from_bools(&[false, false, true, true, true, false, true, true, true, true, false, true, false, false, true, true, false, false, true, true, true, true, false, true, false, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, true, true, false, true, true, false, false, false, true, true, true, false, false, true, true, false, false, true, false, true, true, false, false, true, false, true]);
            let codeword = BinVector::from_bools(&[false, true, true, true, false, true, true, true, false, false, true, true, true, false, false, true, true, false, false, true, false, true, true, false, false, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, false, false, false, true, false, false, false, true, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, true, true, true]);
            let codeword = BinVector::from_bools(&[true, false, false, false, false, true, false, false, true, true, true, true, true, false, false, true, false, true, false, true, false, false, false, false, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, true, true, true, true, true, false, true, false, false, false, false, false, true, true, false, false, false, true, false, true, true, false, true, true, true, false]);
            let codeword = BinVector::from_bools(&[true, false, false, true, true, true, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, true, true, true, true, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, false, true, true, true, true, false, false, true, false, true, true, false, true, false, false, true, true, true, true, true, false, false, false, false, true, false]);
            let codeword = BinVector::from_bools(&[true, false, false, true, true, true, false, false, true, true, false, true, true, false, true, false, false, false, true, true, true, true, false, false, false, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, false, true, true, false, true, true, false, true, false, false, false, true, false, true, false, true, false, false, true, true, true, false, false, false, false, true]);
            let codeword = BinVector::from_bools(&[true, true, false, true, true, false, true, true, false, true, true, true, false, true, false, true, false, true, false, false, true, true, true, false, false, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, false, false, false, true, false, true, true, true, false, false, true, true, false, false, false, true, true, false, false, true, true, true, false, false, false, true]);
            let codeword = BinVector::from_bools(&[true, false, false, false, false, true, false, true, true, true, false, false, true, false, true, false, false, true, true, false, false, true, true, true, false, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, false, true, true, true, true, false, true, true, true, true, true, false, false, false, false, false, true, false, true, false, false, false, false, false, true, false]);
            let codeword = BinVector::from_bools(&[false, true, false, true, false, true, true, false, true, true, true, true, true, false, false, false, false, false, true, false, true, false, false, false, false, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, false, false, false, true, true, false, false, false, false, true, true, true, true, true, true, true, false, true, true, false, false, false, true, false, true, true]);
            let codeword = BinVector::from_bools(&[true, false, false, false, false, true, true, false, false, false, false, true, true, true, true, true, true, true, false, true, true, false, false, false, false, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, false, true, true, true, false, false, true, true, true, false, true, true, true, false, true, false, false, true, false, false, false, false, true, false, true, true]);
            let codeword = BinVector::from_bools(&[false, false, false, true, true, false, false, false, true, true, true, false, true, true, true, false, true, false, false, true, false, false, false, false, false, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, true, false, true, false, true, false, false, false, false, false, false, false, false, true, true, false, true, true, false, true, true, false, false, true, false, true]);
            let codeword = BinVector::from_bools(&[false, false, true, true, true, false, true, false, false, false, false, false, false, false, false, true, false, false, true, true, false, true, true, false, false, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, false, false, false, false, false, true, false, true, true, true, true, false, false, true, false, false, true, false, false, false, true, false, false, true, false, false]);
            let codeword = BinVector::from_bools(&[false, true, false, false, true, false, false, true, false, true, true, true, true, false, false, true, false, true, true, false, false, false, true, false, false, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, false, false, false, true, true, true, false, false, false, false, false, true, true, true, false, true, true, true, true, true, true, false, false, true, false, false]);
            let codeword = BinVector::from_bools(&[true, true, false, false, false, true, false, true, false, false, false, false, false, true, true, true, false, true, true, true, false, true, false, false, false, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, false, true, false, true, true, false, false, false, true, false, true, false, false, false, true, false, true, true, false, false, false, false, false, true, false, false]);
            let codeword = BinVector::from_bools(&[false, false, false, true, false, true, true, false, false, true, true, true, true, false, false, false, true, false, true, true, false, false, false, true, false, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, true, true, true, true, true, false, true, false, false, false, true, true, true, false, true, true, true, true, true, true, false, false, true, true, true, true]);
            let codeword = BinVector::from_bools(&[false, false, true, true, false, true, true, false, true, false, true, true, true, true, true, false, true, true, true, true, true, true, false, false, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, true, false, true, false, true, false, false, true, false, false, false, true, false, false, false, false, false, false, true, false, false, false, true, false, true, false]);
            let codeword = BinVector::from_bools(&[false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, false, false, false, false, false, true, true, false, false, true, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, true, false, false, false, false, false, false, false, true, false, true, true, true, false, true, true, true, false, false, false, true, false, false, true, false, true]);
            let codeword = BinVector::from_bools(&[false, true, true, false, false, false, true, false, false, false, true, false, true, true, true, false, true, true, false, false, false, false, true, false, false, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, true, false, false, true, true, false, false, false, false, false, true, true, false, true, true, true, false, true, true, true, true, false, false, false, false, false]);
            let codeword = BinVector::from_bools(&[false, true, true, true, false, true, true, false, false, true, false, false, true, true, false, true, true, true, false, true, true, true, true, false, false, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, true, false, true, false, false, true, true, true, false, false, true, false, false, false, true, false, false, true, true, false, false, true, true, false, true, false]);
            let codeword = BinVector::from_bools(&[true, false, true, false, true, true, false, true, true, true, false, false, true, false, false, false, true, false, false, false, true, false, false, true, true, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, false, false, false, true, false, false, true, true, false, false, true, true, false, false, false, true, true, false, false, true, true, true, true, false, true, true]);
            let codeword = BinVector::from_bools(&[true, false, false, false, false, false, false, false, true, true, false, false, true, true, false, false, false, true, true, false, false, true, true, true, true, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, true, false, false, false, false, true, false, true, false, false, true, false, true, false, false, false, false, true, false, true, true, true, true, true, false, true]);
            let codeword = BinVector::from_bools(&[false, true, true, false, false, false, false, true, false, true, false, false, true, false, true, false, false, false, false, true, true, true, true, false, true, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, true, true, true, true, true, true, true, false, false, false, false, false, false, true, false, false, false, true, false, false, false, false, false, true, true, false]);
            let codeword = BinVector::from_bools(&[true, true, true, true, true, true, true, true, true, false, false, false, true, false, false, true, false, false, false, true, false, false, false, false, false, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, true, false, false, false, false, false, true, true, true, true, false, true, true, true, false, false, false, true, true, true, false, false, false, true, true, false]);
            let codeword = BinVector::from_bools(&[true, false, true, false, false, false, true, false, true, true, true, false, false, true, true, true, false, false, false, true, true, true, false, false, false, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, true, false, true, true, false, false, false, false, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true]);
            let codeword = BinVector::from_bools(&[false, true, true, true, true, true, false, false, false, false, true, true, true, false, true, true, true, false, true, true, false, true, true, true, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, true, false, true, false, false, false, false, false, false, true, true, true, true, false, false, false, false, false, false, true, true, true, false, false, true, true]);
            let codeword = BinVector::from_bools(&[false, true, true, false, true, false, false, false, false, false, false, true, true, false, true, false, false, true, false, false, false, true, true, true, false, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, false, true, true, false, false, true, false, true, true, false, true, true, true, false, true, false, false, true, false, false, true, true, false, false, false, true]);
            let codeword = BinVector::from_bools(&[false, false, true, true, true, false, false, true, false, true, true, false, true, true, true, false, true, true, false, true, false, false, true, true, false, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, true, true, false, false, false, true, true, true, true, false, false, false, false, false, true, true, true, false, true, true, true, true, true, false, true, false]);
            let codeword = BinVector::from_bools(&[true, false, true, false, false, false, true, true, true, true, true, false, false, false, false, false, true, true, true, false, true, true, true, true, true, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, false, false, true, false, true, true, true, false, true, true, true, true, true, false, false, true, false, false, true, true, false, false, false, false, false, false]);
            let codeword = BinVector::from_bools(&[true, true, true, false, true, false, true, true, true, false, true, true, true, true, true, false, false, false, false, false, true, true, false, false, false, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, false, true, false, true, false, true, false, true, true, true, false, true, true, false, false, false, true, true, true, false, true, true, false, false, false, true]);
            let codeword = BinVector::from_bools(&[true, false, false, true, false, true, false, true, false, false, true, true, false, true, true, false, false, false, true, true, true, false, true, false, false, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, false, false, false, false, false, true, true, false, false, true, false, false, true, true, true, true, true, false, true, true, false, true, true, true, true, true]);
            let codeword = BinVector::from_bools(&[true, true, false, false, false, false, false, true, true, false, false, true, false, false, true, true, true, true, false, false, true, false, false, true, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, true, false, true, false, false, false, false, false, true, true, true, true, false, true, false, false, false, false, false, true, true, false, true, true, true, true]);
            let codeword = BinVector::from_bools(&[true, true, true, false, true, false, false, false, false, false, true, true, false, true, false, true, false, true, false, false, false, true, true, false, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, true, true, true, true, true, true, true, false, false, false, false, false, false, true, false, false, true, true, true, true, true, true, true, false, true, false]);
            let codeword = BinVector::from_bools(&[false, false, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, false, false, false, false, false, true, true, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, true]);
            let codeword = BinVector::from_bools(&[true, false, false, false, false, false, false, true, true, true, false, true, false, false, false, false, true, false, false, false, false, false, false, true, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, true, true, true, false, true, false, true, false, false, true, false, false, true, false, true, true, true, false, false, false, true, true, false, false, false, true]);
            let codeword = BinVector::from_bools(&[true, false, true, false, true, false, false, false, true, false, false, true, false, false, true, false, true, true, true, false, false, false, true, true, false, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, true, true, true, true, false, false, true, true, true, true, false, true, false, false, true, false, false, false, true, false, true, false, true, true, false, false]);
            let codeword = BinVector::from_bools(&[true, true, true, true, true, true, false, false, true, true, true, true, false, true, false, false, true, false, false, false, false, false, true, true, true, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, true, false, false, false, false, true, true, true, false, true, true, false, false, true, true, true, false, false, true, false, false, false, false, true, true, true]);
            let codeword = BinVector::from_bools(&[false, false, true, false, false, false, false, true, true, true, false, true, true, false, false, true, true, true, true, true, true, false, false, false, false, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, true, true, true, true, true, true, false, false, false, false, true, true, true, false, false, false, false, true, true, false, false, true, true, false, false, false]);
            let codeword = BinVector::from_bools(&[false, true, true, true, true, true, true, true, true, false, false, false, true, true, true, false, false, false, false, false, true, false, false, true, true, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, true, true, true, true, true, false, false, false, false, true, true, true, false, true, false, true, true, false, true, true, true, false, false, false, false, false]);
            let codeword = BinVector::from_bools(&[true, false, true, true, true, true, true, false, false, false, false, true, false, true, false, true, false, true, true, false, true, true, true, true, false, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, false, false, false, true, false, false, false, true, true, false, true, true, true, false, false, false, false, false, true, false, true, false, false, true, true, false]);
            let codeword = BinVector::from_bools(&[true, false, false, true, false, false, false, false, false, true, true, false, true, true, true, false, false, false, false, false, true, false, true, false, false, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, true, false, false, true, true, false, false, false, true, true, true, true, false, true, false, true, false, true, true, true, true, false, true, true, true, true]);
            let codeword = BinVector::from_bools(&[false, false, true, false, false, true, true, false, true, false, true, true, true, true, false, true, true, true, false, true, true, true, true, false, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, true, false, true, true, true, true, false, false, true, true, true, true, false, false, false, false, false, false, false, false, true, true, false, false, true, false]);
            let codeword = BinVector::from_bools(&[true, false, true, false, true, true, false, true, false, false, true, true, true, true, false, true, false, false, false, false, false, false, true, true, false, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, true, false, true, true, false, false, false, false, false, true, false, false, true, false, true, true, false, true, false, false, false, true, true, false, true, false]);
            let codeword = BinVector::from_bools(&[true, false, true, false, true, true, false, false, false, true, false, true, false, false, true, false, true, true, false, true, true, false, false, true, true, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, true, false, false, false, true, false, true, false, false, false, true, false, false, true, false, true, true, false, false, false, false, true, false, true, false, false]);
            let codeword = BinVector::from_bools(&[true, false, true, false, false, false, false, false, true, false, false, true, true, false, false, true, false, true, true, false, false, false, false, true, false, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, true, true, false, false, true, true, false, false, false, true, true, true, false, true, false, true, true, true, true, true, false, false, true, true, true, false]);
            let codeword = BinVector::from_bools(&[true, true, true, true, false, false, true, true, false, false, false, true, false, true, false, true, false, true, true, true, true, true, false, false, false, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, false, false, true, true, true, true, true, false, true, false, false, false, true, false, false, false, true, true, false, false, false, false, false, false, false, true]);
            let codeword = BinVector::from_bools(&[false, true, false, false, true, false, false, true, true, false, true, false, false, false, true, false, false, false, true, true, false, false, false, false, false, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, true, false, true, false, true, true, false, false, false, true, false, false, true, true, true, true, true, true, true, false, false, true, false, false, true, true]);
            let codeword = BinVector::from_bools(&[false, false, false, false, true, false, false, true, false, false, false, true, false, false, true, true, false, true, true, true, true, false, false, true, false, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, true, false, false, true, false, true, true, false, true, false, false, true, true, false, false, false, true, true, false, false, true, true, true, false, true, true]);
            let codeword = BinVector::from_bools(&[false, false, true, false, false, true, false, true, true, false, true, false, true, true, true, false, false, false, true, false, false, false, true, true, true, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, false, true, false, false, true, true, false, false, false, false, false, false, false, true, true, false, false, true, true, false, false, false, false, true, true, true]);
            let codeword = BinVector::from_bools(&[true, false, false, true, false, false, true, true, false, false, false, false, true, true, false, true, true, false, false, true, true, false, false, false, false, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, true, false, true, true, false, false, true, true, false, true, true, true, true, true, false, false, true, true, false, false, true, true, false, false, true, false]);
            let codeword = BinVector::from_bools(&[false, true, true, false, true, true, false, false, true, true, false, true, true, true, false, true, false, false, true, true, false, false, true, true, false, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, false, true, true, true, true, false, false, true, false, true, false, false, false, true, true, true, false, false, true, true, false, true, false, false, false, false]);
            let codeword = BinVector::from_bools(&[true, true, false, true, true, true, true, false, false, true, false, true, true, false, false, true, true, true, false, false, true, false, false, true, false, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, false, true, true, false, true, true, false, true, false, false, false, true, true, true, true, false, true, false, false, true, false, true, true, false, true, true]);
            let codeword = BinVector::from_bools(&[false, true, false, true, true, false, false, true, false, true, false, false, false, true, true, true, true, false, true, false, false, true, false, true, false, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, true, true, false, false, false, false, false, true, true, false, false, false, false, false, true, false, true, false, true, true, false, true, true, false, true, false]);
            let codeword = BinVector::from_bools(&[false, true, true, true, false, true, false, false, false, true, true, false, false, false, false, false, true, false, true, false, true, true, true, true, true, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, false, false, true, false, true, false, true, false, false, true, true, true, true, true, false, true, false, true, false, true, false, false, true, true, true, true]);
            let codeword = BinVector::from_bools(&[true, true, false, false, true, false, true, true, true, false, false, false, true, true, true, true, false, true, false, true, false, true, false, false, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, true, true, false, false, false, false, false, false, false, true, false, true, false, false, true, true, true, false, true, false, true, false, false, false, true, false]);
            let codeword = BinVector::from_bools(&[false, true, false, true, false, false, false, false, false, false, false, true, false, true, false, false, false, true, true, false, true, false, true, false, false, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, false, false, true, true, true, false, true, false, false, false, false, false, false, true, true, true, false, false, false, false, true, false, true, true, true, false]);
            let codeword = BinVector::from_bools(&[true, false, true, false, true, true, true, false, true, false, false, false, false, false, true, true, true, true, false, false, false, true, true, false, true, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, true, true, false, false, true, true, false, false, false, false]);
            let codeword = BinVector::from_bools(&[false, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, true, true, false, false, true, true, false, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, false, false, false, false, true, true, false, true, true, true, false, true, true, true, false, false, true, false, false, true, false, false, false, false, true, false]);
            let codeword = BinVector::from_bools(&[false, false, false, false, false, false, true, true, false, true, true, true, false, true, true, true, false, false, true, false, false, true, false, false, false, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, true, false, true, true, false, true, false, false, false, true, false, false, false, false, true, false, false, true, true, false, false, false, true, false, false, false]);
            let codeword = BinVector::from_bools(&[true, true, true, false, true, true, false, false, false, false, false, true, false, false, false, false, true, false, false, true, true, false, false, false, true, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, true, true, false, false, true, false, false, false, true, false, true, true, true, false, false, false, false, false, false, false, false, false, true, true, false, false]);
            let codeword = BinVector::from_bools(&[false, true, true, true, false, false, true, false, false, false, false, false, true, true, true, false, false, false, false, false, false, true, false, false, true, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, false, false, false, true, false, false, true, true, true, true, false, true, false, false, false, true, true, false, true, true, true, false, false, true, false, false]);
            let codeword = BinVector::from_bools(&[false, false, false, true, false, true, false, false, true, true, true, false, false, true, false, false, false, true, true, false, false, true, true, false, false, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, false, true, true, true, false, true, false, true, false, false, true, true, false, true, true, false, false, false, true, true, false, false, false, false, false, true]);
            let codeword = BinVector::from_bools(&[false, false, false, false, true, true, true, true, false, true, false, false, true, true, false, true, true, false, false, false, true, true, false, false, false, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, false, false, false, false, false, true, true, false, true, false, false, false, true, false, true, false, false, false, true, true, false, true, true, true, true, true]);
            let codeword = BinVector::from_bools(&[true, true, true, false, true, false, false, true, true, false, true, false, false, false, true, false, true, false, true, false, true, true, false, true, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, true, false, false, false, false, true, false, false, false, false, true, true, false, false, false, true, true, true, true, true, false, true, true, true, false, false]);
            let codeword = BinVector::from_bools(&[true, true, true, false, false, false, false, true, false, false, false, false, true, true, false, false, false, true, true, true, true, true, false, true, false, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, true, true, false, true, false, true, false, true, false, false, false, true, false, true, true, true, true, true, false, false, false, true, true, true, true, true]);
            let codeword = BinVector::from_bools(&[false, false, true, true, false, true, false, true, false, true, false, false, true, true, false, true, true, true, true, true, false, false, false, true, false, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, false, true, true, false, true, true, false, true, false, false, true, false, true, true, false, false, true, true, false, false, false, true, true, true, true, true]);
            let codeword = BinVector::from_bools(&[false, false, false, false, true, false, true, true, false, true, false, false, true, false, true, true, false, false, true, true, false, false, false, true, true, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, false, false, true, true, false, true, true, false, false, true, false, true, false, true, true, true, false, true, true, false, false, true, true, true, true, true]);
            let codeword = BinVector::from_bools(&[true, false, false, false, false, true, false, true, true, false, false, true, false, true, false, true, true, true, false, true, true, false, false, true, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, false, false, true, true, true, false, true, true, false, false, true, false, true, true, true, false, true, true, true, true, true, true, false, true, true, false]);
            let codeword = BinVector::from_bools(&[true, true, true, false, true, true, true, false, true, true, false, false, true, false, true, true, true, false, true, true, false, true, true, true, false, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, true, false, true, false, false, false, false, true, true, false, true, false, true, false, true, false, true, false, true, true, true, true, true, true, true, false]);
            let codeword = BinVector::from_bools(&[true, false, true, false, true, true, false, false, false, true, true, false, true, false, true, false, true, false, true, false, true, true, true, true, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, false, true, true, false, true, false, false, true, false, false, true, true, true, false, false, true, true, false, true, true, true, true, false, true, false, true]);
            let codeword = BinVector::from_bools(&[false, false, false, true, true, false, true, false, false, true, false, false, true, true, true, true, false, true, true, false, false, true, true, true, false, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, false, false, false, false, true, true, true, false, false, true, true, false, false, true, false, false, true, false, true, true, true, false, false, false, true, true]);
            let codeword = BinVector::from_bools(&[false, true, true, false, false, true, true, true, true, false, false, true, true, false, false, true, false, false, true, false, false, true, true, false, false, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, true, false, true, true, true, false, false, false, true, false, true, true, false, false, false, true, false, false, false, false, false, false, false, false, true, false]);
            let codeword = BinVector::from_bools(&[false, false, true, false, true, true, true, false, true, false, true, false, true, true, false, false, false, true, false, false, false, false, false, false, false, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, true, false, true, true, false, false, true, false, true, true, true, false, false, false, false, true, false, true, false, false, true, false, true, true, true, false]);
            let codeword = BinVector::from_bools(&[false, true, true, false, true, true, true, false, true, false, true, true, true, false, false, true, false, true, false, true, false, false, true, false, true, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, false, true, true, false, true, true, true, true, false, true, true, false, false, false, false, false, true, false, true, false, false, true, false, true, true, true]);
            let codeword = BinVector::from_bools(&[true, false, false, true, true, true, true, true, true, true, false, true, true, false, false, false, false, false, true, false, false, false, false, true, false, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, false, true, false, true, false, false, false, false, true, true, false, false, true, true, true, false, false, true, true, true, true, false, false, true, false, true]);
            let codeword = BinVector::from_bools(&[true, false, false, true, false, true, false, false, false, false, true, true, false, false, true, false, true, false, false, true, true, false, true, false, false, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, false, true, false, true, false, false, true, true, true, true, true, false, false, false, false, true, false, false, false, false, false, false, false, false, false, true]);
            let codeword = BinVector::from_bools(&[false, false, false, true, false, false, false, false, true, true, true, true, true, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, false, true, true, false, true, false, true, false, true, true, true, true, true, false, false, true, false, false, true, true, true, false, true, false, false, true]);
            let codeword = BinVector::from_bools(&[true, false, false, true, true, false, true, false, true, false, true, false, true, true, true, false, false, true, false, false, true, true, true, false, true, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, false, true, true, false, true, true, true, true, false, false, false, false, false, true, false, false, true, true, true, false, true, false, true, true, false, false]);
            let codeword = BinVector::from_bools(&[true, true, false, true, false, false, false, true, true, true, false, false, false, false, false, true, false, false, true, true, true, false, true, false, true, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, true, true, false, true, false, false, false, true, true, true, true, false, true, false, true, true, true, true, false, false, false, true, false, true, false, false]);
            let codeword = BinVector::from_bools(&[false, true, true, true, false, true, false, false, false, true, true, true, true, false, true, false, true, false, true, true, false, false, true, true, false, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, true, true, false, true, true, true, false, false, true, false, true, true, true, true, true, true, true, true, false, true, false, false, true, true, false, false]);
            let codeword = BinVector::from_bools(&[true, true, true, true, false, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, false, true, false, true, true, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, false, true, false, true, true, false, false, false, false, false, true, false, true, true, true, false, false, false, false, true, true, false, false, true, false, false]);
            let codeword = BinVector::from_bools(&[true, false, false, true, false, true, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, true, true, false, false, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, false, true, false, false, true, true, true, false, true, true, true, true, true, true, false, true, false, true, true, false, true, true, true, true, false, false]);
            let codeword = BinVector::from_bools(&[false, true, false, true, false, false, true, true, true, false, true, true, true, true, true, false, false, true, false, true, true, false, true, true, true, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, false, true, true, false, false, false, false, true, false, true, true, false, false, false, false, false, false, false, false, false, true, true, false, true, true, false]);
            let codeword = BinVector::from_bools(&[false, false, false, true, true, false, false, false, false, true, true, true, true, false, false, true, false, false, false, false, false, false, true, true, false, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, true, true, false, true, true, false, false, true, false, true, true, true, true, false, false, true, true, false, false]);
            let codeword = BinVector::from_bools(&[true, false, false, false, false, false, false, false, false, true, true, false, true, true, true, false, true, false, true, true, true, true, true, false, true, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, true, false, true, false, false, true, false, false, false, false, false, false, false, false, true, false, false, true, true, false, false, false, true, true, true, false]);
            let codeword = BinVector::from_bools(&[false, true, false, true, true, false, false, true, false, false, false, false, false, false, false, false, true, false, false, true, true, false, false, false, true, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, true, false, true, false, true, true, true, false, true, true, false, true, true, false, false, true, false, true, true, true, true, true, false, false, false, true]);
            let codeword = BinVector::from_bools(&[true, false, true, true, true, false, true, true, true, false, true, true, false, true, true, false, false, true, true, true, true, true, true, true, false, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, true, true, true, false, true, true, false, false, true, true, false, false, false, false, true, true, true, true, true, false, false, false, false, true, false, true]);
            let codeword = BinVector::from_bools(&[false, true, true, true, true, false, false, true, false, true, true, true, false, false, false, false, true, true, true, true, true, false, false, false, false, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, false, false, false, true, false, false, true, false, true, true, true, true, true, false, true, false, true, false, false, true, false, false, true, true, true, true]);
            let codeword = BinVector::from_bools(&[true, true, true, false, false, true, false, false, true, true, true, true, true, true, false, false, true, false, true, false, false, true, false, false, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, true, false, false, true, true, false, false, false, true, false, false, false, false, true, false, true, false, false, true, false, false, true, true, true, true, false]);
            let codeword = BinVector::from_bools(&[false, true, true, false, false, false, true, false, false, false, true, false, true, false, false, true, false, true, false, false, true, false, false, true, true, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, false, false, false, false, true, true, true, false, true, false, true, true, false, false, false, false, true, true, true, false, false, true, true, false, true, false]);
            let codeword = BinVector::from_bools(&[true, false, false, false, false, false, true, true, true, false, true, false, true, true, true, false, false, false, true, true, true, false, false, true, true, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, true, false, false, false, true, false, true, true, false, true, true, false, true, true, false, false, true, false, false, false, true, false, true, true, true, true]);
            let codeword = BinVector::from_bools(&[false, true, true, false, false, false, true, false, true, true, false, false, true, false, true, true, false, false, true, false, false, true, true, false, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, true, true, true, false, true, true, false, false, true, true, false, true, true, false, false, false, true, true, false, false, true, false, false, false, false, false]);
            let codeword = BinVector::from_bools(&[false, true, true, true, true, false, true, true, false, false, true, true, false, true, true, false, false, false, true, true, false, true, true, false, false, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, false, true, false, false, true, true, true, false, true, true, true, true, true, false, false, false, false, false, true, true, false, true, false, false, true, false]);
            let codeword = BinVector::from_bools(&[true, false, true, true, false, false, true, true, false, false, true, true, true, true, true, false, false, false, false, true, true, true, false, true, false, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, true, false, true, true, false, true, true, false, true, true, true, false, false, false, false, true, true, false, true, false, true, true, false, false, true, false]);
            let codeword = BinVector::from_bools(&[true, true, true, false, true, true, false, true, true, false, true, true, false, false, false, false, false, true, true, false, false, false, true, true, false, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, false, false, false, true, true, false, true, true, false, false, true, true, false, false, true, false, true, false, false, false, false, false, true, true, false, false]);
            let codeword = BinVector::from_bools(&[true, true, false, false, false, true, true, false, true, true, false, false, false, true, false, false, true, false, true, false, false, false, false, false, true, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, false, true, true, true, true, false, false, true, false, true, true, false, true, true, true, false, false, false, true, true, true, true, false, true, true, false]);
            let codeword = BinVector::from_bools(&[true, false, false, true, true, true, false, false, false, true, false, true, true, false, true, false, true, false, false, false, true, true, true, true, true, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, false, false, true, false, true, false, false, false, false, true, false, true, true, true, true, true, false, false, false, true, true, false, false, true, true, true]);
            let codeword = BinVector::from_bools(&[true, false, false, false, false, false, true, false, false, false, false, true, false, true, true, false, true, true, false, false, false, true, true, false, false, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, true, false, true, false, false, false, true, false, false, true, true, true, false, false, true, false, true, false, true, true, true, true, false, false, true, false]);
            let codeword = BinVector::from_bools(&[true, true, true, false, true, false, false, false, true, false, false, true, true, true, false, true, true, false, true, false, true, true, true, true, false, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, true, false, false, true, false, false, false, true, true, true, false, true, false, false, false, false, false, true, false, true, false, true, false, true, false, false]);
            let codeword = BinVector::from_bools(&[true, true, true, false, false, true, false, false, false, true, true, true, true, true, false, false, false, true, false, true, false, true, false, true, false, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, false, true, false, true, true, true, false, false, false, false, true, true, false, false, false, true, false, false, true, true, true, true, true, false, false, false]);
            let codeword = BinVector::from_bools(&[true, false, true, false, false, true, true, true, false, false, false, false, true, true, true, false, false, true, false, false, true, true, true, true, true, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, true, false, false, false, false, true, true, false, true, true, true, false, false, false, true, false, false, true, true, true, false, false, false, false, false, true]);
            let codeword = BinVector::from_bools(&[true, true, true, false, false, false, false, true, true, false, true, true, true, false, true, true, true, false, false, true, true, true, false, false, false, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, false, true, false, false, false, true, true, true, false, false, true, true, true, true, false, false, false, true, false, false, true, false, false, false, false, true]);
            let codeword = BinVector::from_bools(&[false, false, false, true, false, false, false, false, true, true, false, false, true, true, true, true, false, false, false, true, false, false, true, false, true, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, false, true, false, false, true, false, false, false, true, true, false, false, false, true, false, false, true, false, false, true, true, false, true, true, true, false]);
            let codeword = BinVector::from_bools(&[false, false, true, true, false, false, true, false, false, false, false, true, false, false, false, true, false, false, true, false, false, true, true, false, true, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, true, true, false, false, true, false, false, false, true, false, true, true, true, false, true, true, false, false, false, true, false, true, true, false, true, true]);
            let codeword = BinVector::from_bools(&[true, false, false, true, false, false, true, false, false, false, true, false, true, true, true, false, true, true, false, false, false, false, false, true, true, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, false, false, true, true, false, true, false, true, false, true, false]);
            let codeword = BinVector::from_bools(&[true, false, true, false, true, false, false, false, true, false, false, false, true, false, false, false, false, false, true, true, true, false, true, false, true, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, false, false, true, true, true, true, false, true, false, false, false, false, false, false, true, false, true, false, false, true, true, false, true, false, true, false]);
            let codeword = BinVector::from_bools(&[true, true, false, false, true, true, true, true, false, true, false, false, true, false, false, false, true, false, true, false, false, true, true, true, true, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, false, false, true, true, true, true, true, true, false, true, true, true, false, true, false, false, false, false, true, false, true, true, false, false, true, false]);
            let codeword = BinVector::from_bools(&[false, false, false, false, true, true, true, true, true, true, false, true, true, true, true, true, false, false, false, false, true, false, true, true, false, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, true, true, true, true, false, true, true, false, true, false, false, false, true, true, false, true, true, true, true, true, true, false, true, false, true, false]);
            let codeword = BinVector::from_bools(&[false, false, true, true, true, true, false, true, true, false, true, false, true, false, true, true, false, true, true, true, true, false, true, false, true, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, false, true, true, false, true, true, false, false, true, false, false, true, false, true, true, true, true, true, true, false, true, false, true, false, false, false]);
            let codeword = BinVector::from_bools(&[true, false, false, true, true, false, true, true, false, false, true, false, false, true, false, true, true, true, true, true, true, true, true, false, true, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, false, false, true, true, true, false, false, false, false, false, true, true, false, false, true, true, false, true, false, true, false, true, false, true, false, true]);
            let codeword = BinVector::from_bools(&[true, false, false, false, true, true, true, false, false, false, false, false, true, true, false, false, true, true, false, true, true, false, false, true, false, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, true, false, true, true, true, true, true, true, true, false, true, true, false, false, false, false, false, false, false, false, false, true, true, false, false, true]);
            let codeword = BinVector::from_bools(&[false, true, true, false, true, true, true, true, true, true, true, false, true, true, false, false, false, false, true, false, false, false, true, true, true, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, false, true, true, true, false, true, false, false, true, true, true, false, false, true, true, false, true, false, true, false, false, true, false, false, false, true]);
            let codeword = BinVector::from_bools(&[true, false, false, false, true, true, true, true, false, false, true, true, true, false, false, true, true, false, true, false, true, false, false, true, false, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, true, false, false, true, true, false, true, false, false, true, false, false, true, false, false, false, true, true, true, true, true, true, false, true, false, true]);
            let codeword = BinVector::from_bools(&[false, false, true, false, false, true, true, false, true, false, false, true, false, false, true, false, false, false, false, false, true, true, true, true, false, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, true, false, false, false, true, false, false, false, false, true, true, true, true, true, false, false, false, true, false, true, false, false, false, true, false, true]);
            let codeword = BinVector::from_bools(&[true, false, true, false, true, false, true, false, false, false, false, true, true, true, true, true, true, false, false, true, false, true, true, false, false, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, false, false, false, true, false, false, false, false, true, false, true, true, false, true, true, false, false, false, false, false, true, false, true, false, true, false]);
            let codeword = BinVector::from_bools(&[true, true, false, false, false, true, false, false, false, false, true, false, true, true, false, false, true, false, false, false, false, false, true, false, true, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, true, true, true, true, false, true, true, false, true, true, true, true, false, true, true, false, true, true, true, true, false, false, true, false, true, false]);
            let codeword = BinVector::from_bools(&[false, true, true, true, true, true, false, true, true, false, true, true, true, true, false, true, true, false, true, true, true, true, false, false, true, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, false, false, true, false, false, true, true, true, false, false, true, false, true, false, true, false, true, true, true, true, false, true, true, false, true, false]);
            let codeword = BinVector::from_bools(&[false, true, true, false, true, false, false, true, true, true, false, true, true, false, true, false, true, false, true, true, true, true, false, true, true, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, true, true, true, true, true, false, false, true, false, false, false, false, false, false, false, true, true, true, false, false, false, true, true, true, true, true, false]);
            let codeword = BinVector::from_bools(&[false, true, true, false, true, true, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, false, true, true, true, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, true, false, false, false, false, false, false, false, true, false, true, false, true, true, true, true, true, true, false, true, true, false, true, true, true, true]);
            let codeword = BinVector::from_bools(&[true, true, true, false, false, false, false, true, false, false, false, false, true, false, true, true, true, true, true, true, false, true, true, false, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, true, false, false, false, false, true, false, false, true, false, false, true, true, true, false, false, false, true, true, true, true, false, false, false, false, false]);
            let codeword = BinVector::from_bools(&[true, false, true, false, false, false, false, true, false, false, true, false, false, true, true, true, false, false, false, true, true, true, false, false, false, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, true, false, true, true, true, true, false, false, true, false, true, true, false, true, false, true, false, true, false, false, true, false, false, false, false, false]);
            let codeword = BinVector::from_bools(&[false, true, true, false, true, false, true, true, false, false, true, false, true, true, false, true, false, true, false, true, false, false, true, false, false, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, true, true, false, false, true, true, false, true, true, false, true, false, false, false, true, true, false, true, true, false, true, true, true, false, true, false, false]);
            let codeword = BinVector::from_bools(&[false, true, true, false, false, true, true, false, true, false, false, true, false, false, false, true, true, false, true, true, false, false, true, true, false, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[true, false, false, false, false, false, true, true, true, false, true, true, false, true, false, true, false, true, false, false, false, false, true, true, true, true, false, false]);
            let codeword = BinVector::from_bools(&[false, false, false, false, false, false, false, true, true, false, true, true, false, true, false, true, true, true, false, false, false, false, true, true, true, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = WagnerCode28_18;
            let randvec = BinVector::from_bools(&[false, false, true, true, false, false, true, true, true, false, true, false, false, false, false, false, false, false, true, true, true, false, true, true, false, false, true, false]);
            let codeword = BinVector::from_bools(&[false, false, true, true, false, false, true, true, true, true, false, false, false, false, false, false, true, false, true, true, true, false, true, true, false, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
    }

    #[test]
    fn test_generator_representation() {
        init();
        let generator_matrix = unsafe { GENERATOR_MATRIX.as_ref().unwrap() };
        let first_row = generator_matrix.get_window(0, 0, 1, generator_matrix.ncols());
        let vector = BinVector::from_bools(&[ true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, true, false, true, false, true ]);
        assert_eq!(vector, first_row.as_vector());
    }

}
