use std::boxed::Box;
use std::default::Default;
use std::sync::Once;

use fnv::FnvHashMap;

use m4ri_rust::friendly::BinMatrix;
use m4ri_rust::friendly::BinVector;

use crate::codes::BinaryCode;

/// ``[14, 4]`` Guava code
///
/// Best code found from the GUAVA database version 3.15
///
/// Decodes using Syndrome decoding
#[derive(Clone, Serialize)]
pub struct GuavaCode14_4;

static INIT: Once = Once::new();
static mut GENERATOR_MATRIX: *const BinMatrix = 0 as *const BinMatrix;
static mut PARITY_MATRIX: *const BinMatrix = 0 as *const BinMatrix;
static mut PARITY_MATRIX_T: *const BinMatrix = 0 as *const BinMatrix;
static mut SYNDROME_MAP: *const FnvHashMap<u64, &'static [usize; 1]> = 0 as *const FnvHashMap<u64, &'static [usize; 1]>;

fn init() {
    INIT.call_once(|| {
        unsafe {
            let matrix = Box::new(BinMatrix::from_slices(&[
                &[ 5841 ],
                &[ 9650 ],
                &[ 15476 ],
                &[ 16264 ],
                
            ], 14));
            GENERATOR_MATRIX = Box::into_raw(matrix);

            let matrix = Box::new(BinMatrix::from_slices(&[
                &[ 6145 ],
                &[ 10242 ],
                &[ 4612 ],
                &[ 6664 ],
                &[ 8720 ],
                &[ 14880 ],
                &[ 2624 ],
                &[ 10880 ],
                &[ 13056 ],
                &[ 15360 ],
                
            ], 14));
            let matrix_t = Box::new(matrix.transposed());
            PARITY_MATRIX = Box::into_raw(matrix);
            PARITY_MATRIX_T = Box::into_raw(matrix_t);

            let mut map = Box::new(FnvHashMap::with_capacity_and_hasher(1024, Default::default()));
            map.insert(0, &[0]);     // 0 => [0]
            map.insert(1, &[1]);     // 1 => [1]
            map.insert(2, &[2]);     // 2 => [2]
            map.insert(4, &[4]);     // 4 => [4]
            map.insert(8, &[8]);     // 8 => [8]
            map.insert(16, &[16]);     // 16 => [16]
            map.insert(32, &[32]);     // 32 => [32]
            map.insert(64, &[64]);     // 64 => [64]
            map.insert(128, &[128]);     // 128 => [128]
            map.insert(256, &[256]);     // 256 => [256]
            map.insert(508, &[512]);     // 508 => [512]
            map.insert(512, &[1024]);     // 512 => [1024]
            map.insert(747, &[2048]);     // 747 => [2048]
            map.insert(813, &[4096]);     // 813 => [4096]
            map.insert(946, &[8192]);     // 946 => [8192]
            map.insert(3, &[3]);     // 3 => [3]
            map.insert(5, &[5]);     // 5 => [5]
            map.insert(9, &[9]);     // 9 => [9]
            map.insert(17, &[17]);     // 17 => [17]
            map.insert(33, &[33]);     // 33 => [33]
            map.insert(65, &[65]);     // 65 => [65]
            map.insert(129, &[129]);     // 129 => [129]
            map.insert(257, &[257]);     // 257 => [257]
            map.insert(509, &[513]);     // 509 => [513]
            map.insert(513, &[1025]);     // 513 => [1025]
            map.insert(746, &[2049]);     // 746 => [2049]
            map.insert(812, &[4097]);     // 812 => [4097]
            map.insert(947, &[8193]);     // 947 => [8193]
            map.insert(6, &[6]);     // 6 => [6]
            map.insert(10, &[10]);     // 10 => [10]
            map.insert(18, &[18]);     // 18 => [18]
            map.insert(34, &[34]);     // 34 => [34]
            map.insert(66, &[66]);     // 66 => [66]
            map.insert(130, &[130]);     // 130 => [130]
            map.insert(258, &[258]);     // 258 => [258]
            map.insert(510, &[514]);     // 510 => [514]
            map.insert(514, &[1026]);     // 514 => [1026]
            map.insert(745, &[2050]);     // 745 => [2050]
            map.insert(815, &[4098]);     // 815 => [4098]
            map.insert(944, &[8194]);     // 944 => [8194]
            map.insert(12, &[12]);     // 12 => [12]
            map.insert(20, &[20]);     // 20 => [20]
            map.insert(36, &[36]);     // 36 => [36]
            map.insert(68, &[68]);     // 68 => [68]
            map.insert(132, &[132]);     // 132 => [132]
            map.insert(260, &[260]);     // 260 => [260]
            map.insert(504, &[516]);     // 504 => [516]
            map.insert(516, &[1028]);     // 516 => [1028]
            map.insert(751, &[2052]);     // 751 => [2052]
            map.insert(809, &[4100]);     // 809 => [4100]
            map.insert(950, &[8196]);     // 950 => [8196]
            map.insert(24, &[24]);     // 24 => [24]
            map.insert(40, &[40]);     // 40 => [40]
            map.insert(72, &[72]);     // 72 => [72]
            map.insert(136, &[136]);     // 136 => [136]
            map.insert(264, &[264]);     // 264 => [264]
            map.insert(500, &[520]);     // 500 => [520]
            map.insert(520, &[1032]);     // 520 => [1032]
            map.insert(739, &[2056]);     // 739 => [2056]
            map.insert(805, &[4104]);     // 805 => [4104]
            map.insert(954, &[8200]);     // 954 => [8200]
            map.insert(48, &[48]);     // 48 => [48]
            map.insert(80, &[80]);     // 80 => [80]
            map.insert(144, &[144]);     // 144 => [144]
            map.insert(272, &[272]);     // 272 => [272]
            map.insert(492, &[528]);     // 492 => [528]
            map.insert(528, &[1040]);     // 528 => [1040]
            map.insert(763, &[2064]);     // 763 => [2064]
            map.insert(829, &[4112]);     // 829 => [4112]
            map.insert(930, &[8208]);     // 930 => [8208]
            map.insert(96, &[96]);     // 96 => [96]
            map.insert(160, &[160]);     // 160 => [160]
            map.insert(288, &[288]);     // 288 => [288]
            map.insert(476, &[544]);     // 476 => [544]
            map.insert(544, &[1056]);     // 544 => [1056]
            map.insert(715, &[2080]);     // 715 => [2080]
            map.insert(781, &[4128]);     // 781 => [4128]
            map.insert(914, &[8224]);     // 914 => [8224]
            map.insert(192, &[192]);     // 192 => [192]
            map.insert(320, &[320]);     // 320 => [320]
            map.insert(444, &[576]);     // 444 => [576]
            map.insert(576, &[1088]);     // 576 => [1088]
            map.insert(683, &[2112]);     // 683 => [2112]
            map.insert(877, &[4160]);     // 877 => [4160]
            map.insert(1010, &[8256]);     // 1010 => [8256]
            map.insert(384, &[384]);     // 384 => [384]
            map.insert(380, &[640]);     // 380 => [640]
            map.insert(640, &[1152]);     // 640 => [1152]
            map.insert(619, &[2176]);     // 619 => [2176]
            map.insert(941, &[4224]);     // 941 => [4224]
            map.insert(818, &[8320]);     // 818 => [8320]
            map.insert(252, &[768]);     // 252 => [768]
            map.insert(768, &[1280]);     // 768 => [1280]
            map.insert(1003, &[2304]);     // 1003 => [2304]
            map.insert(557, &[4352]);     // 557 => [4352]
            map.insert(690, &[8448]);     // 690 => [8448]
            map.insert(1020, &[1536]);     // 1020 => [1536]
            map.insert(791, &[2560]);     // 791 => [2560]
            map.insert(721, &[4608]);     // 721 => [4608]
            map.insert(590, &[8704]);     // 590 => [8704]
            map.insert(235, &[3072]);     // 235 => [3072]
            map.insert(301, &[5120]);     // 301 => [5120]
            map.insert(434, &[9216]);     // 434 => [9216]
            map.insert(454, &[6144]);     // 454 => [6144]
            map.insert(345, &[10240]);     // 345 => [10240]
            map.insert(159, &[12288]);     // 159 => [12288]
            map.insert(7, &[7]);     // 7 => [7]
            map.insert(11, &[11]);     // 11 => [11]
            map.insert(19, &[19]);     // 19 => [19]
            map.insert(35, &[35]);     // 35 => [35]
            map.insert(67, &[67]);     // 67 => [67]
            map.insert(131, &[131]);     // 131 => [131]
            map.insert(259, &[259]);     // 259 => [259]
            map.insert(511, &[515]);     // 511 => [515]
            map.insert(515, &[1027]);     // 515 => [1027]
            map.insert(744, &[2051]);     // 744 => [2051]
            map.insert(814, &[4099]);     // 814 => [4099]
            map.insert(945, &[8195]);     // 945 => [8195]
            map.insert(13, &[13]);     // 13 => [13]
            map.insert(21, &[21]);     // 21 => [21]
            map.insert(37, &[37]);     // 37 => [37]
            map.insert(69, &[69]);     // 69 => [69]
            map.insert(133, &[133]);     // 133 => [133]
            map.insert(261, &[261]);     // 261 => [261]
            map.insert(505, &[517]);     // 505 => [517]
            map.insert(517, &[1029]);     // 517 => [1029]
            map.insert(750, &[2053]);     // 750 => [2053]
            map.insert(808, &[4101]);     // 808 => [4101]
            map.insert(951, &[8197]);     // 951 => [8197]
            map.insert(25, &[25]);     // 25 => [25]
            map.insert(41, &[41]);     // 41 => [41]
            map.insert(73, &[73]);     // 73 => [73]
            map.insert(137, &[137]);     // 137 => [137]
            map.insert(265, &[265]);     // 265 => [265]
            map.insert(501, &[521]);     // 501 => [521]
            map.insert(521, &[1033]);     // 521 => [1033]
            map.insert(738, &[2057]);     // 738 => [2057]
            map.insert(804, &[4105]);     // 804 => [4105]
            map.insert(955, &[8201]);     // 955 => [8201]
            map.insert(49, &[49]);     // 49 => [49]
            map.insert(81, &[81]);     // 81 => [81]
            map.insert(145, &[145]);     // 145 => [145]
            map.insert(273, &[273]);     // 273 => [273]
            map.insert(493, &[529]);     // 493 => [529]
            map.insert(529, &[1041]);     // 529 => [1041]
            map.insert(762, &[2065]);     // 762 => [2065]
            map.insert(828, &[4113]);     // 828 => [4113]
            map.insert(931, &[8209]);     // 931 => [8209]
            map.insert(97, &[97]);     // 97 => [97]
            map.insert(161, &[161]);     // 161 => [161]
            map.insert(289, &[289]);     // 289 => [289]
            map.insert(477, &[545]);     // 477 => [545]
            map.insert(545, &[1057]);     // 545 => [1057]
            map.insert(714, &[2081]);     // 714 => [2081]
            map.insert(780, &[4129]);     // 780 => [4129]
            map.insert(915, &[8225]);     // 915 => [8225]
            map.insert(193, &[193]);     // 193 => [193]
            map.insert(321, &[321]);     // 321 => [321]
            map.insert(445, &[577]);     // 445 => [577]
            map.insert(577, &[1089]);     // 577 => [1089]
            map.insert(682, &[2113]);     // 682 => [2113]
            map.insert(876, &[4161]);     // 876 => [4161]
            map.insert(1011, &[8257]);     // 1011 => [8257]
            map.insert(385, &[385]);     // 385 => [385]
            map.insert(381, &[641]);     // 381 => [641]
            map.insert(641, &[1153]);     // 641 => [1153]
            map.insert(618, &[2177]);     // 618 => [2177]
            map.insert(940, &[4225]);     // 940 => [4225]
            map.insert(819, &[8321]);     // 819 => [8321]
            map.insert(253, &[769]);     // 253 => [769]
            map.insert(769, &[1281]);     // 769 => [1281]
            map.insert(1002, &[2305]);     // 1002 => [2305]
            map.insert(556, &[4353]);     // 556 => [4353]
            map.insert(691, &[8449]);     // 691 => [8449]
            map.insert(1021, &[1537]);     // 1021 => [1537]
            map.insert(790, &[2561]);     // 790 => [2561]
            map.insert(720, &[4609]);     // 720 => [4609]
            map.insert(591, &[8705]);     // 591 => [8705]
            map.insert(234, &[3073]);     // 234 => [3073]
            map.insert(300, &[5121]);     // 300 => [5121]
            map.insert(435, &[9217]);     // 435 => [9217]
            map.insert(455, &[6145]);     // 455 => [6145]
            map.insert(344, &[10241]);     // 344 => [10241]
            map.insert(158, &[12289]);     // 158 => [12289]
            map.insert(14, &[14]);     // 14 => [14]
            map.insert(22, &[22]);     // 22 => [22]
            map.insert(38, &[38]);     // 38 => [38]
            map.insert(70, &[70]);     // 70 => [70]
            map.insert(134, &[134]);     // 134 => [134]
            map.insert(262, &[262]);     // 262 => [262]
            map.insert(506, &[518]);     // 506 => [518]
            map.insert(518, &[1030]);     // 518 => [1030]
            map.insert(749, &[2054]);     // 749 => [2054]
            map.insert(811, &[4102]);     // 811 => [4102]
            map.insert(948, &[8198]);     // 948 => [8198]
            map.insert(26, &[26]);     // 26 => [26]
            map.insert(42, &[42]);     // 42 => [42]
            map.insert(74, &[74]);     // 74 => [74]
            map.insert(138, &[138]);     // 138 => [138]
            map.insert(266, &[266]);     // 266 => [266]
            map.insert(502, &[522]);     // 502 => [522]
            map.insert(522, &[1034]);     // 522 => [1034]
            map.insert(737, &[2058]);     // 737 => [2058]
            map.insert(807, &[4106]);     // 807 => [4106]
            map.insert(952, &[8202]);     // 952 => [8202]
            map.insert(50, &[50]);     // 50 => [50]
            map.insert(82, &[82]);     // 82 => [82]
            map.insert(146, &[146]);     // 146 => [146]
            map.insert(274, &[274]);     // 274 => [274]
            map.insert(494, &[530]);     // 494 => [530]
            map.insert(530, &[1042]);     // 530 => [1042]
            map.insert(761, &[2066]);     // 761 => [2066]
            map.insert(831, &[4114]);     // 831 => [4114]
            map.insert(928, &[8210]);     // 928 => [8210]
            map.insert(98, &[98]);     // 98 => [98]
            map.insert(162, &[162]);     // 162 => [162]
            map.insert(290, &[290]);     // 290 => [290]
            map.insert(478, &[546]);     // 478 => [546]
            map.insert(546, &[1058]);     // 546 => [1058]
            map.insert(713, &[2082]);     // 713 => [2082]
            map.insert(783, &[4130]);     // 783 => [4130]
            map.insert(912, &[8226]);     // 912 => [8226]
            map.insert(194, &[194]);     // 194 => [194]
            map.insert(322, &[322]);     // 322 => [322]
            map.insert(446, &[578]);     // 446 => [578]
            map.insert(578, &[1090]);     // 578 => [1090]
            map.insert(681, &[2114]);     // 681 => [2114]
            map.insert(879, &[4162]);     // 879 => [4162]
            map.insert(1008, &[8258]);     // 1008 => [8258]
            map.insert(386, &[386]);     // 386 => [386]
            map.insert(382, &[642]);     // 382 => [642]
            map.insert(642, &[1154]);     // 642 => [1154]
            map.insert(617, &[2178]);     // 617 => [2178]
            map.insert(943, &[4226]);     // 943 => [4226]
            map.insert(816, &[8322]);     // 816 => [8322]
            map.insert(254, &[770]);     // 254 => [770]
            map.insert(770, &[1282]);     // 770 => [1282]
            map.insert(1001, &[2306]);     // 1001 => [2306]
            map.insert(559, &[4354]);     // 559 => [4354]
            map.insert(688, &[8450]);     // 688 => [8450]
            map.insert(1022, &[1538]);     // 1022 => [1538]
            map.insert(789, &[2562]);     // 789 => [2562]
            map.insert(723, &[4610]);     // 723 => [4610]
            map.insert(588, &[8706]);     // 588 => [8706]
            map.insert(233, &[3074]);     // 233 => [3074]
            map.insert(303, &[5122]);     // 303 => [5122]
            map.insert(432, &[9218]);     // 432 => [9218]
            map.insert(452, &[6146]);     // 452 => [6146]
            map.insert(347, &[10242]);     // 347 => [10242]
            map.insert(157, &[12290]);     // 157 => [12290]
            map.insert(28, &[28]);     // 28 => [28]
            map.insert(44, &[44]);     // 44 => [44]
            map.insert(76, &[76]);     // 76 => [76]
            map.insert(140, &[140]);     // 140 => [140]
            map.insert(268, &[268]);     // 268 => [268]
            map.insert(496, &[524]);     // 496 => [524]
            map.insert(524, &[1036]);     // 524 => [1036]
            map.insert(743, &[2060]);     // 743 => [2060]
            map.insert(801, &[4108]);     // 801 => [4108]
            map.insert(958, &[8204]);     // 958 => [8204]
            map.insert(52, &[52]);     // 52 => [52]
            map.insert(84, &[84]);     // 84 => [84]
            map.insert(148, &[148]);     // 148 => [148]
            map.insert(276, &[276]);     // 276 => [276]
            map.insert(488, &[532]);     // 488 => [532]
            map.insert(532, &[1044]);     // 532 => [1044]
            map.insert(767, &[2068]);     // 767 => [2068]
            map.insert(825, &[4116]);     // 825 => [4116]
            map.insert(934, &[8212]);     // 934 => [8212]
            map.insert(100, &[100]);     // 100 => [100]
            map.insert(164, &[164]);     // 164 => [164]
            map.insert(292, &[292]);     // 292 => [292]
            map.insert(472, &[548]);     // 472 => [548]
            map.insert(548, &[1060]);     // 548 => [1060]
            map.insert(719, &[2084]);     // 719 => [2084]
            map.insert(777, &[4132]);     // 777 => [4132]
            map.insert(918, &[8228]);     // 918 => [8228]
            map.insert(196, &[196]);     // 196 => [196]
            map.insert(324, &[324]);     // 324 => [324]
            map.insert(440, &[580]);     // 440 => [580]
            map.insert(580, &[1092]);     // 580 => [1092]
            map.insert(687, &[2116]);     // 687 => [2116]
            map.insert(873, &[4164]);     // 873 => [4164]
            map.insert(1014, &[8260]);     // 1014 => [8260]
            map.insert(388, &[388]);     // 388 => [388]
            map.insert(376, &[644]);     // 376 => [644]
            map.insert(644, &[1156]);     // 644 => [1156]
            map.insert(623, &[2180]);     // 623 => [2180]
            map.insert(937, &[4228]);     // 937 => [4228]
            map.insert(822, &[8324]);     // 822 => [8324]
            map.insert(248, &[772]);     // 248 => [772]
            map.insert(772, &[1284]);     // 772 => [1284]
            map.insert(1007, &[2308]);     // 1007 => [2308]
            map.insert(553, &[4356]);     // 553 => [4356]
            map.insert(694, &[8452]);     // 694 => [8452]
            map.insert(1016, &[1540]);     // 1016 => [1540]
            map.insert(787, &[2564]);     // 787 => [2564]
            map.insert(725, &[4612]);     // 725 => [4612]
            map.insert(586, &[8708]);     // 586 => [8708]
            map.insert(239, &[3076]);     // 239 => [3076]
            map.insert(297, &[5124]);     // 297 => [5124]
            map.insert(438, &[9220]);     // 438 => [9220]
            map.insert(450, &[6148]);     // 450 => [6148]
            map.insert(349, &[10244]);     // 349 => [10244]
            map.insert(155, &[12292]);     // 155 => [12292]
            map.insert(56, &[56]);     // 56 => [56]
            map.insert(88, &[88]);     // 88 => [88]
            map.insert(152, &[152]);     // 152 => [152]
            map.insert(280, &[280]);     // 280 => [280]
            map.insert(484, &[536]);     // 484 => [536]
            map.insert(536, &[1048]);     // 536 => [1048]
            map.insert(755, &[2072]);     // 755 => [2072]
            map.insert(821, &[4120]);     // 821 => [4120]
            map.insert(938, &[8216]);     // 938 => [8216]
            map.insert(104, &[104]);     // 104 => [104]
            map.insert(168, &[168]);     // 168 => [168]
            map.insert(296, &[296]);     // 296 => [296]
            map.insert(468, &[552]);     // 468 => [552]
            map.insert(552, &[1064]);     // 552 => [1064]
            map.insert(707, &[2088]);     // 707 => [2088]
            map.insert(773, &[4136]);     // 773 => [4136]
            map.insert(922, &[8232]);     // 922 => [8232]
            map.insert(200, &[200]);     // 200 => [200]
            map.insert(328, &[328]);     // 328 => [328]
            map.insert(436, &[584]);     // 436 => [584]
            map.insert(584, &[1096]);     // 584 => [1096]
            map.insert(675, &[2120]);     // 675 => [2120]
            map.insert(869, &[4168]);     // 869 => [4168]
            map.insert(1018, &[8264]);     // 1018 => [8264]
            map.insert(392, &[392]);     // 392 => [392]
            map.insert(372, &[648]);     // 372 => [648]
            map.insert(648, &[1160]);     // 648 => [1160]
            map.insert(611, &[2184]);     // 611 => [2184]
            map.insert(933, &[4232]);     // 933 => [4232]
            map.insert(826, &[8328]);     // 826 => [8328]
            map.insert(244, &[776]);     // 244 => [776]
            map.insert(776, &[1288]);     // 776 => [1288]
            map.insert(995, &[2312]);     // 995 => [2312]
            map.insert(549, &[4360]);     // 549 => [4360]
            map.insert(698, &[8456]);     // 698 => [8456]
            map.insert(1012, &[1544]);     // 1012 => [1544]
            map.insert(799, &[2568]);     // 799 => [2568]
            map.insert(729, &[4616]);     // 729 => [4616]
            map.insert(582, &[8712]);     // 582 => [8712]
            map.insert(227, &[3080]);     // 227 => [3080]
            map.insert(293, &[5128]);     // 293 => [5128]
            map.insert(442, &[9224]);     // 442 => [9224]
            map.insert(462, &[6152]);     // 462 => [6152]
            map.insert(337, &[10248]);     // 337 => [10248]
            map.insert(151, &[12296]);     // 151 => [12296]
            map.insert(112, &[112]);     // 112 => [112]
            map.insert(176, &[176]);     // 176 => [176]
            map.insert(304, &[304]);     // 304 => [304]
            map.insert(460, &[560]);     // 460 => [560]
            map.insert(560, &[1072]);     // 560 => [1072]
            map.insert(731, &[2096]);     // 731 => [2096]
            map.insert(797, &[4144]);     // 797 => [4144]
            map.insert(898, &[8240]);     // 898 => [8240]
            map.insert(208, &[208]);     // 208 => [208]
            map.insert(336, &[336]);     // 336 => [336]
            map.insert(428, &[592]);     // 428 => [592]
            map.insert(592, &[1104]);     // 592 => [1104]
            map.insert(699, &[2128]);     // 699 => [2128]
            map.insert(893, &[4176]);     // 893 => [4176]
            map.insert(994, &[8272]);     // 994 => [8272]
            map.insert(400, &[400]);     // 400 => [400]
            map.insert(364, &[656]);     // 364 => [656]
            map.insert(656, &[1168]);     // 656 => [1168]
            map.insert(635, &[2192]);     // 635 => [2192]
            map.insert(957, &[4240]);     // 957 => [4240]
            map.insert(802, &[8336]);     // 802 => [8336]
            map.insert(236, &[784]);     // 236 => [784]
            map.insert(784, &[1296]);     // 784 => [1296]
            map.insert(1019, &[2320]);     // 1019 => [2320]
            map.insert(573, &[4368]);     // 573 => [4368]
            map.insert(674, &[8464]);     // 674 => [8464]
            map.insert(1004, &[1552]);     // 1004 => [1552]
            map.insert(775, &[2576]);     // 775 => [2576]
            map.insert(705, &[4624]);     // 705 => [4624]
            map.insert(606, &[8720]);     // 606 => [8720]
            map.insert(251, &[3088]);     // 251 => [3088]
            map.insert(317, &[5136]);     // 317 => [5136]
            map.insert(418, &[9232]);     // 418 => [9232]
            map.insert(470, &[6160]);     // 470 => [6160]
            map.insert(329, &[10256]);     // 329 => [10256]
            map.insert(143, &[12304]);     // 143 => [12304]
            map.insert(224, &[224]);     // 224 => [224]
            map.insert(352, &[352]);     // 352 => [352]
            map.insert(412, &[608]);     // 412 => [608]
            map.insert(608, &[1120]);     // 608 => [1120]
            map.insert(651, &[2144]);     // 651 => [2144]
            map.insert(845, &[4192]);     // 845 => [4192]
            map.insert(978, &[8288]);     // 978 => [8288]
            map.insert(416, &[416]);     // 416 => [416]
            map.insert(348, &[672]);     // 348 => [672]
            map.insert(672, &[1184]);     // 672 => [1184]
            map.insert(587, &[2208]);     // 587 => [2208]
            map.insert(909, &[4256]);     // 909 => [4256]
            map.insert(786, &[8352]);     // 786 => [8352]
            map.insert(220, &[800]);     // 220 => [800]
            map.insert(800, &[1312]);     // 800 => [1312]
            map.insert(971, &[2336]);     // 971 => [2336]
            map.insert(525, &[4384]);     // 525 => [4384]
            map.insert(658, &[8480]);     // 658 => [8480]
            map.insert(988, &[1568]);     // 988 => [1568]
            map.insert(823, &[2592]);     // 823 => [2592]
            map.insert(753, &[4640]);     // 753 => [4640]
            map.insert(622, &[8736]);     // 622 => [8736]
            map.insert(203, &[3104]);     // 203 => [3104]
            map.insert(269, &[5152]);     // 269 => [5152]
            map.insert(402, &[9248]);     // 402 => [9248]
            map.insert(486, &[6176]);     // 486 => [6176]
            map.insert(377, &[10272]);     // 377 => [10272]
            map.insert(191, &[12320]);     // 191 => [12320]
            map.insert(448, &[448]);     // 448 => [448]
            map.insert(316, &[704]);     // 316 => [704]
            map.insert(704, &[1216]);     // 704 => [1216]
            map.insert(555, &[2240]);     // 555 => [2240]
            map.insert(1005, &[4288]);     // 1005 => [4288]
            map.insert(882, &[8384]);     // 882 => [8384]
            map.insert(188, &[832]);     // 188 => [832]
            map.insert(832, &[1344]);     // 832 => [1344]
            map.insert(939, &[2368]);     // 939 => [2368]
            map.insert(621, &[4416]);     // 621 => [4416]
            map.insert(754, &[8512]);     // 754 => [8512]
            map.insert(956, &[1600]);     // 956 => [1600]
            map.insert(855, &[2624]);     // 855 => [2624]
            map.insert(657, &[4672]);     // 657 => [4672]
            map.insert(526, &[8768]);     // 526 => [8768]
            map.insert(171, &[3136]);     // 171 => [3136]
            map.insert(365, &[5184]);     // 365 => [5184]
            map.insert(498, &[9280]);     // 498 => [9280]
            map.insert(390, &[6208]);     // 390 => [6208]
            map.insert(281, &[10304]);     // 281 => [10304]
            map.insert(223, &[12352]);     // 223 => [12352]
            map.insert(124, &[896]);     // 124 => [896]
            map.insert(896, &[1408]);     // 896 => [1408]
            map.insert(875, &[2432]);     // 875 => [2432]
            map.insert(685, &[4480]);     // 685 => [4480]
            map.insert(562, &[8576]);     // 562 => [8576]
            map.insert(892, &[1664]);     // 892 => [1664]
            map.insert(919, &[2688]);     // 919 => [2688]
            map.insert(593, &[4736]);     // 593 => [4736]
            map.insert(718, &[8832]);     // 718 => [8832]
            map.insert(107, &[3200]);     // 107 => [3200]
            map.insert(429, &[5248]);     // 429 => [5248]
            map.insert(306, &[9344]);     // 306 => [9344]
            map.insert(326, &[6272]);     // 326 => [6272]
            map.insert(473, &[10368]);     // 473 => [10368]
            map.insert(31, &[12416]);     // 31 => [12416]
            map.insert(764, &[1792]);     // 764 => [1792]
            map.insert(535, &[2816]);     // 535 => [2816]
            map.insert(977, &[4864]);     // 977 => [4864]
            map.insert(846, &[8960]);     // 846 => [8960]
            map.insert(491, &[3328]);     // 491 => [3328]
            map.insert(45, &[5376]);     // 45 => [5376]
            map.insert(178, &[9472]);     // 178 => [9472]
            map.insert(198, &[6400]);     // 198 => [6400]
            map.insert(89, &[10496]);     // 89 => [10496]
            map.insert(415, &[12544]);     // 415 => [12544]
            map.insert(279, &[3584]);     // 279 => [3584]
            map.insert(209, &[5632]);     // 209 => [5632]
            map.insert(78, &[9728]);     // 78 => [9728]
            map.insert(58, &[6656]);     // 58 => [6656]
            map.insert(165, &[10752]);     // 165 => [10752]
            map.insert(355, &[12800]);     // 355 => [12800]
            map.insert(966, &[7168]);     // 966 => [7168]
            map.insert(857, &[11264]);     // 857 => [11264]
            map.insert(671, &[13312]);     // 671 => [13312]
            map.insert(628, &[14336]);     // 628 => [14336]
            map.insert(15, &[15]);     // 15 => [15]
            map.insert(23, &[23]);     // 23 => [23]
            map.insert(39, &[39]);     // 39 => [39]
            map.insert(71, &[71]);     // 71 => [71]
            map.insert(135, &[135]);     // 135 => [135]
            map.insert(263, &[263]);     // 263 => [263]
            map.insert(507, &[519]);     // 507 => [519]
            map.insert(519, &[1031]);     // 519 => [1031]
            map.insert(748, &[2055]);     // 748 => [2055]
            map.insert(810, &[4103]);     // 810 => [4103]
            map.insert(949, &[8199]);     // 949 => [8199]
            map.insert(27, &[27]);     // 27 => [27]
            map.insert(43, &[43]);     // 43 => [43]
            map.insert(75, &[75]);     // 75 => [75]
            map.insert(139, &[139]);     // 139 => [139]
            map.insert(267, &[267]);     // 267 => [267]
            map.insert(503, &[523]);     // 503 => [523]
            map.insert(523, &[1035]);     // 523 => [1035]
            map.insert(736, &[2059]);     // 736 => [2059]
            map.insert(806, &[4107]);     // 806 => [4107]
            map.insert(953, &[8203]);     // 953 => [8203]
            map.insert(51, &[51]);     // 51 => [51]
            map.insert(83, &[83]);     // 83 => [83]
            map.insert(147, &[147]);     // 147 => [147]
            map.insert(275, &[275]);     // 275 => [275]
            map.insert(495, &[531]);     // 495 => [531]
            map.insert(531, &[1043]);     // 531 => [1043]
            map.insert(760, &[2067]);     // 760 => [2067]
            map.insert(830, &[4115]);     // 830 => [4115]
            map.insert(929, &[8211]);     // 929 => [8211]
            map.insert(99, &[99]);     // 99 => [99]
            map.insert(163, &[163]);     // 163 => [163]
            map.insert(291, &[291]);     // 291 => [291]
            map.insert(479, &[547]);     // 479 => [547]
            map.insert(547, &[1059]);     // 547 => [1059]
            map.insert(712, &[2083]);     // 712 => [2083]
            map.insert(782, &[4131]);     // 782 => [4131]
            map.insert(913, &[8227]);     // 913 => [8227]
            map.insert(195, &[195]);     // 195 => [195]
            map.insert(323, &[323]);     // 323 => [323]
            map.insert(447, &[579]);     // 447 => [579]
            map.insert(579, &[1091]);     // 579 => [1091]
            map.insert(680, &[2115]);     // 680 => [2115]
            map.insert(878, &[4163]);     // 878 => [4163]
            map.insert(1009, &[8259]);     // 1009 => [8259]
            map.insert(387, &[387]);     // 387 => [387]
            map.insert(383, &[643]);     // 383 => [643]
            map.insert(643, &[1155]);     // 643 => [1155]
            map.insert(616, &[2179]);     // 616 => [2179]
            map.insert(942, &[4227]);     // 942 => [4227]
            map.insert(817, &[8323]);     // 817 => [8323]
            map.insert(255, &[771]);     // 255 => [771]
            map.insert(771, &[1283]);     // 771 => [1283]
            map.insert(1000, &[2307]);     // 1000 => [2307]
            map.insert(558, &[4355]);     // 558 => [4355]
            map.insert(689, &[8451]);     // 689 => [8451]
            map.insert(1023, &[1539]);     // 1023 => [1539]
            map.insert(788, &[2563]);     // 788 => [2563]
            map.insert(722, &[4611]);     // 722 => [4611]
            map.insert(589, &[8707]);     // 589 => [8707]
            map.insert(232, &[3075]);     // 232 => [3075]
            map.insert(302, &[5123]);     // 302 => [5123]
            map.insert(433, &[9219]);     // 433 => [9219]
            map.insert(453, &[6147]);     // 453 => [6147]
            map.insert(346, &[10243]);     // 346 => [10243]
            map.insert(156, &[12291]);     // 156 => [12291]
            map.insert(29, &[29]);     // 29 => [29]
            map.insert(77, &[77]);     // 77 => [77]
            map.insert(141, &[141]);     // 141 => [141]
            map.insert(497, &[525]);     // 497 => [525]
            map.insert(742, &[2061]);     // 742 => [2061]
            map.insert(959, &[8205]);     // 959 => [8205]
            map.insert(53, &[53]);     // 53 => [53]
            map.insert(85, &[85]);     // 85 => [85]
            map.insert(149, &[149]);     // 149 => [149]
            map.insert(277, &[277]);     // 277 => [277]
            map.insert(489, &[533]);     // 489 => [533]
            map.insert(533, &[1045]);     // 533 => [1045]
            map.insert(766, &[2069]);     // 766 => [2069]
            map.insert(824, &[4117]);     // 824 => [4117]
            map.insert(935, &[8213]);     // 935 => [8213]
            map.insert(101, &[101]);     // 101 => [101]
            map.insert(197, &[197]);     // 197 => [197]
            map.insert(325, &[325]);     // 325 => [325]
            map.insert(441, &[581]);     // 441 => [581]
            map.insert(581, &[1093]);     // 581 => [1093]
            map.insert(686, &[2117]);     // 686 => [2117]
            map.insert(872, &[4165]);     // 872 => [4165]
            map.insert(1015, &[8261]);     // 1015 => [8261]
            map.insert(389, &[389]);     // 389 => [389]
            map.insert(645, &[1157]);     // 645 => [1157]
            map.insert(936, &[4229]);     // 936 => [4229]
            map.insert(249, &[773]);     // 249 => [773]
            map.insert(1006, &[2309]);     // 1006 => [2309]
            map.insert(695, &[8453]);     // 695 => [8453]
            map.insert(1017, &[1541]);     // 1017 => [1541]
            map.insert(724, &[4613]);     // 724 => [4613]
            map.insert(238, &[3077]);     // 238 => [3077]
            map.insert(439, &[9221]);     // 439 => [9221]
            map.insert(451, &[6149]);     // 451 => [6149]
            map.insert(154, &[12293]);     // 154 => [12293]
            map.insert(57, &[57]);     // 57 => [57]
            map.insert(153, &[153]);     // 153 => [153]
            map.insert(485, &[537]);     // 485 => [537]
            map.insert(537, &[1049]);     // 537 => [1049]
            map.insert(820, &[4121]);     // 820 => [4121]
            map.insert(105, &[105]);     // 105 => [105]
            map.insert(169, &[169]);     // 169 => [169]
            map.insert(469, &[553]);     // 469 => [553]
            map.insert(706, &[2089]);     // 706 => [2089]
            map.insert(923, &[8233]);     // 923 => [8233]
            map.insert(201, &[201]);     // 201 => [201]
            map.insert(437, &[585]);     // 437 => [585]
            map.insert(585, &[1097]);     // 585 => [1097]
            map.insert(868, &[4169]);     // 868 => [4169]
            map.insert(393, &[393]);     // 393 => [393]
            map.insert(373, &[649]);     // 373 => [649]
            map.insert(649, &[1161]);     // 649 => [1161]
            map.insert(610, &[2185]);     // 610 => [2185]
            map.insert(932, &[4233]);     // 932 => [4233]
            map.insert(827, &[8329]);     // 827 => [8329]
            map.insert(245, &[777]);     // 245 => [777]
            map.insert(1013, &[1545]);     // 1013 => [1545]
            map.insert(798, &[2569]);     // 798 => [2569]
            map.insert(728, &[4617]);     // 728 => [4617]
            map.insert(583, &[8713]);     // 583 => [8713]
            map.insert(226, &[3081]);     // 226 => [3081]
            map.insert(443, &[9225]);     // 443 => [9225]
            map.insert(463, &[6153]);     // 463 => [6153]
            map.insert(150, &[12297]);     // 150 => [12297]
            map.insert(113, &[113]);     // 113 => [113]
            map.insert(177, &[177]);     // 177 => [177]
            map.insert(305, &[305]);     // 305 => [305]
            map.insert(461, &[561]);     // 461 => [561]
            map.insert(561, &[1073]);     // 561 => [1073]
            map.insert(730, &[2097]);     // 730 => [2097]
            map.insert(796, &[4145]);     // 796 => [4145]
            map.insert(899, &[8241]);     // 899 => [8241]
            map.insert(401, &[401]);     // 401 => [401]
            map.insert(634, &[2193]);     // 634 => [2193]
            map.insert(803, &[8337]);     // 803 => [8337]
            map.insert(237, &[785]);     // 237 => [785]
            map.insert(785, &[1297]);     // 785 => [1297]
            map.insert(572, &[4369]);     // 572 => [4369]
            map.insert(774, &[2577]);     // 774 => [2577]
            map.insert(607, &[8721]);     // 607 => [8721]
            map.insert(250, &[3089]);     // 250 => [3089]
            map.insert(419, &[9233]);     // 419 => [9233]
            map.insert(471, &[6161]);     // 471 => [6161]
            map.insert(142, &[12305]);     // 142 => [12305]
            map.insert(225, &[225]);     // 225 => [225]
            map.insert(353, &[353]);     // 353 => [353]
            map.insert(413, &[609]);     // 413 => [609]
            map.insert(609, &[1121]);     // 609 => [1121]
            map.insert(650, &[2145]);     // 650 => [2145]
            map.insert(844, &[4193]);     // 844 => [4193]
            map.insert(979, &[8289]);     // 979 => [8289]
            map.insert(417, &[417]);     // 417 => [417]
            map.insert(673, &[1185]);     // 673 => [1185]
            map.insert(908, &[4257]);     // 908 => [4257]
            map.insert(221, &[801]);     // 221 => [801]
            map.insert(970, &[2337]);     // 970 => [2337]
            map.insert(659, &[8481]);     // 659 => [8481]
            map.insert(989, &[1569]);     // 989 => [1569]
            map.insert(752, &[4641]);     // 752 => [4641]
            map.insert(202, &[3105]);     // 202 => [3105]
            map.insert(403, &[9249]);     // 403 => [9249]
            map.insert(487, &[6177]);     // 487 => [6177]
            map.insert(190, &[12321]);     // 190 => [12321]
            map.insert(449, &[449]);     // 449 => [449]
            map.insert(554, &[2241]);     // 554 => [2241]
            map.insert(883, &[8385]);     // 883 => [8385]
            map.insert(189, &[833]);     // 189 => [833]
            map.insert(833, &[1345]);     // 833 => [1345]
            map.insert(620, &[4417]);     // 620 => [4417]
            map.insert(854, &[2625]);     // 854 => [2625]
            map.insert(527, &[8769]);     // 527 => [8769]
            map.insert(170, &[3137]);     // 170 => [3137]
            map.insert(499, &[9281]);     // 499 => [9281]
            map.insert(391, &[6209]);     // 391 => [6209]
            map.insert(222, &[12353]);     // 222 => [12353]
            map.insert(125, &[897]);     // 125 => [897]
            map.insert(897, &[1409]);     // 897 => [1409]
            map.insert(874, &[2433]);     // 874 => [2433]
            map.insert(684, &[4481]);     // 684 => [4481]
            map.insert(563, &[8577]);     // 563 => [8577]
            map.insert(106, &[3201]);     // 106 => [3201]
            map.insert(307, &[9345]);     // 307 => [9345]
            map.insert(327, &[6273]);     // 327 => [6273]
            map.insert(30, &[12417]);     // 30 => [12417]
            map.insert(765, &[1793]);     // 765 => [1793]
            map.insert(534, &[2817]);     // 534 => [2817]
            map.insert(976, &[4865]);     // 976 => [4865]
            map.insert(847, &[8961]);     // 847 => [8961]
            map.insert(490, &[3329]);     // 490 => [3329]
            map.insert(179, &[9473]);     // 179 => [9473]
            map.insert(199, &[6401]);     // 199 => [6401]
            map.insert(414, &[12545]);     // 414 => [12545]
            map.insert(278, &[3585]);     // 278 => [3585]
            map.insert(79, &[9729]);     // 79 => [9729]
            map.insert(59, &[6657]);     // 59 => [6657]
            map.insert(354, &[12801]);     // 354 => [12801]
            map.insert(967, &[7169]);     // 967 => [7169]
            map.insert(856, &[11265]);     // 856 => [11265]
            map.insert(670, &[13313]);     // 670 => [13313]
            map.insert(629, &[14337]);     // 629 => [14337]
            map.insert(46, &[46]);     // 46 => [46]
            map.insert(270, &[270]);     // 270 => [270]
            map.insert(741, &[2062]);     // 741 => [2062]
            map.insert(54, &[54]);     // 54 => [54]
            map.insert(86, &[86]);     // 86 => [86]
            map.insert(102, &[102]);     // 102 => [102]
            map.insert(166, &[166]);     // 166 => [166]
            map.insert(294, &[294]);     // 294 => [294]
            map.insert(474, &[550]);     // 474 => [550]
            map.insert(550, &[1062]);     // 550 => [1062]
            map.insert(717, &[2086]);     // 717 => [2086]
            map.insert(779, &[4134]);     // 779 => [4134]
            map.insert(916, &[8230]);     // 916 => [8230]
            map.insert(378, &[646]);     // 378 => [646]
            map.insert(646, &[1158]);     // 646 => [1158]
            map.insert(692, &[8454]);     // 692 => [8454]
            map.insert(727, &[4614]);     // 727 => [4614]
            map.insert(299, &[5126]);     // 299 => [5126]
            map.insert(351, &[10246]);     // 351 => [10246]
            map.insert(90, &[90]);     // 90 => [90]
            map.insert(282, &[282]);     // 282 => [282]
            map.insert(538, &[1050]);     // 538 => [1050]
            map.insert(298, &[298]);     // 298 => [298]
            map.insert(920, &[8234]);     // 920 => [8234]
            map.insert(330, &[330]);     // 330 => [330]
            map.insert(871, &[4170]);     // 871 => [4170]
            map.insert(394, &[394]);     // 394 => [394]
            map.insert(374, &[650]);     // 374 => [650]
            map.insert(246, &[778]);     // 246 => [778]
            map.insert(778, &[1290]);     // 778 => [1290]
            map.insert(993, &[2314]);     // 993 => [2314]
            map.insert(551, &[4362]);     // 551 => [4362]
            map.insert(696, &[8458]);     // 696 => [8458]
            map.insert(295, &[5130]);     // 295 => [5130]
            map.insert(339, &[10250]);     // 339 => [10250]
            map.insert(114, &[114]);     // 114 => [114]
            map.insert(210, &[210]);     // 210 => [210]
            map.insert(338, &[338]);     // 338 => [338]
            map.insert(430, &[594]);     // 430 => [594]
            map.insert(594, &[1106]);     // 594 => [1106]
            map.insert(697, &[2130]);     // 697 => [2130]
            map.insert(895, &[4178]);     // 895 => [4178]
            map.insert(992, &[8274]);     // 992 => [8274]
            map.insert(366, &[658]);     // 366 => [658]
            map.insert(633, &[2194]);     // 633 => [2194]
            map.insert(575, &[4370]);     // 575 => [4370]
            map.insert(604, &[8722]);     // 604 => [8722]
            map.insert(319, &[5138]);     // 319 => [5138]
            map.insert(331, &[10258]);     // 331 => [10258]
            map.insert(350, &[674]);     // 350 => [674]
            map.insert(911, &[4258]);     // 911 => [4258]
            map.insert(969, &[2338]);     // 969 => [2338]
            map.insert(990, &[1570]);     // 990 => [1570]
            map.insert(271, &[5154]);     // 271 => [5154]
            map.insert(379, &[10274]);     // 379 => [10274]
            map.insert(318, &[706]);     // 318 => [706]
            map.insert(880, &[8386]);     // 880 => [8386]
            map.insert(834, &[1346]);     // 834 => [1346]
            map.insert(853, &[2626]);     // 853 => [2626]
            map.insert(367, &[5186]);     // 367 => [5186]
            map.insert(283, &[10306]);     // 283 => [10306]
            map.insert(126, &[898]);     // 126 => [898]
            map.insert(894, &[1666]);     // 894 => [1666]
            map.insert(917, &[2690]);     // 917 => [2690]
            map.insert(595, &[4738]);     // 595 => [4738]
            map.insert(716, &[8834]);     // 716 => [8834]
            map.insert(431, &[5250]);     // 431 => [5250]
            map.insert(475, &[10370]);     // 475 => [10370]
            map.insert(47, &[5378]);     // 47 => [5378]
            map.insert(91, &[10498]);     // 91 => [10498]
            map.insert(211, &[5634]);     // 211 => [5634]
            map.insert(167, &[10754]);     // 167 => [10754]
            map.insert(964, &[7170]);     // 964 => [7170]
            map.insert(859, &[11266]);     // 859 => [11266]
            map.insert(669, &[13314]);     // 669 => [13314]
            map.insert(630, &[14338]);     // 630 => [14338]
            map.insert(60, &[60]);     // 60 => [60]
            map.insert(92, &[92]);     // 92 => [92]
            map.insert(284, &[284]);     // 284 => [284]
            map.insert(480, &[540]);     // 480 => [540]
            map.insert(540, &[1052]);     // 540 => [1052]
            map.insert(759, &[2076]);     // 759 => [2076]
            map.insert(108, &[108]);     // 108 => [108]
            map.insert(172, &[172]);     // 172 => [172]
            map.insert(464, &[556]);     // 464 => [556]
            map.insert(711, &[2092]);     // 711 => [2092]
            map.insert(926, &[8236]);     // 926 => [8236]
            map.insert(204, &[204]);     // 204 => [204]
            map.insert(332, &[332]);     // 332 => [332]
            map.insert(679, &[2124]);     // 679 => [2124]
            map.insert(865, &[4172]);     // 865 => [4172]
            map.insert(396, &[396]);     // 396 => [396]
            map.insert(368, &[652]);     // 368 => [652]
            map.insert(652, &[1164]);     // 652 => [1164]
            map.insert(615, &[2188]);     // 615 => [2188]
            map.insert(240, &[780]);     // 240 => [780]
            map.insert(999, &[2316]);     // 999 => [2316]
            map.insert(702, &[8460]);     // 702 => [8460]
            map.insert(795, &[2572]);     // 795 => [2572]
            map.insert(733, &[4620]);     // 733 => [4620]
            map.insert(231, &[3084]);     // 231 => [3084]
            map.insert(458, &[6156]);     // 458 => [6156]
            map.insert(341, &[10252]);     // 341 => [10252]
            map.insert(116, &[116]);     // 116 => [116]
            map.insert(180, &[180]);     // 180 => [180]
            map.insert(308, &[308]);     // 308 => [308]
            map.insert(456, &[564]);     // 456 => [564]
            map.insert(564, &[1076]);     // 564 => [1076]
            map.insert(735, &[2100]);     // 735 => [2100]
            map.insert(793, &[4148]);     // 793 => [4148]
            map.insert(902, &[8244]);     // 902 => [8244]
            map.insert(212, &[212]);     // 212 => [212]
            map.insert(340, &[340]);     // 340 => [340]
            map.insert(424, &[596]);     // 424 => [596]
            map.insert(596, &[1108]);     // 596 => [1108]
            map.insert(703, &[2132]);     // 703 => [2132]
            map.insert(889, &[4180]);     // 889 => [4180]
            map.insert(998, &[8276]);     // 998 => [8276]
            map.insert(404, &[404]);     // 404 => [404]
            map.insert(360, &[660]);     // 360 => [660]
            map.insert(660, &[1172]);     // 660 => [1172]
            map.insert(639, &[2196]);     // 639 => [2196]
            map.insert(569, &[4372]);     // 569 => [4372]
            map.insert(678, &[8468]);     // 678 => [8468]
            map.insert(709, &[4628]);     // 709 => [4628]
            map.insert(602, &[8724]);     // 602 => [8724]
            map.insert(313, &[5140]);     // 313 => [5140]
            map.insert(422, &[9236]);     // 422 => [9236]
            map.insert(466, &[6164]);     // 466 => [6164]
            map.insert(333, &[10260]);     // 333 => [10260]
            map.insert(228, &[228]);     // 228 => [228]
            map.insert(356, &[356]);     // 356 => [356]
            map.insert(408, &[612]);     // 408 => [612]
            map.insert(612, &[1124]);     // 612 => [1124]
            map.insert(655, &[2148]);     // 655 => [2148]
            map.insert(841, &[4196]);     // 841 => [4196]
            map.insert(982, &[8292]);     // 982 => [8292]
            map.insert(420, &[420]);     // 420 => [420]
            map.insert(676, &[1188]);     // 676 => [1188]
            map.insert(905, &[4260]);     // 905 => [4260]
            map.insert(216, &[804]);     // 216 => [804]
            map.insert(975, &[2340]);     // 975 => [2340]
            map.insert(662, &[8484]);     // 662 => [8484]
            map.insert(984, &[1572]);     // 984 => [1572]
            map.insert(757, &[4644]);     // 757 => [4644]
            map.insert(207, &[3108]);     // 207 => [3108]
            map.insert(406, &[9252]);     // 406 => [9252]
            map.insert(482, &[6180]);     // 482 => [6180]
            map.insert(187, &[12324]);     // 187 => [12324]
            map.insert(312, &[708]);     // 312 => [708]
            map.insert(708, &[1220]);     // 708 => [1220]
            map.insert(886, &[8388]);     // 886 => [8388]
            map.insert(184, &[836]);     // 184 => [836]
            map.insert(836, &[1348]);     // 836 => [1348]
            map.insert(758, &[8516]);     // 758 => [8516]
            map.insert(851, &[2628]);     // 851 => [2628]
            map.insert(661, &[4676]);     // 661 => [4676]
            map.insert(175, &[3140]);     // 175 => [3140]
            map.insert(361, &[5188]);     // 361 => [5188]
            map.insert(285, &[10308]);     // 285 => [10308]
            map.insert(219, &[12356]);     // 219 => [12356]
            map.insert(120, &[900]);     // 120 => [900]
            map.insert(900, &[1412]);     // 900 => [1412]
            map.insert(566, &[8580]);     // 566 => [8580]
            map.insert(888, &[1668]);     // 888 => [1668]
            map.insert(597, &[4740]);     // 597 => [4740]
            map.insert(111, &[3204]);     // 111 => [3204]
            map.insert(425, &[5252]);     // 425 => [5252]
            map.insert(310, &[9348]);     // 310 => [9348]
            map.insert(981, &[4868]);     // 981 => [4868]
            map.insert(842, &[8964]);     // 842 => [8964]
            map.insert(182, &[9476]);     // 182 => [9476]
            map.insert(93, &[10500]);     // 93 => [10500]
            map.insert(411, &[12548]);     // 411 => [12548]
            map.insert(213, &[5636]);     // 213 => [5636]
            map.insert(62, &[6660]);     // 62 => [6660]
            map.insert(359, &[12804]);     // 359 => [12804]
            map.insert(962, &[7172]);     // 962 => [7172]
            map.insert(861, &[11268]);     // 861 => [11268]
            map.insert(667, &[13316]);     // 667 => [13316]
            map.insert(624, &[14340]);     // 624 => [14340]
            map.insert(568, &[1080]);     // 568 => [1080]
            map.insert(906, &[8248]);     // 906 => [8248]
            map.insert(600, &[1112]);     // 600 => [1112]
            map.insert(885, &[4184]);     // 885 => [4184]
            map.insert(664, &[1176]);     // 664 => [1176]
            map.insert(627, &[2200]);     // 627 => [2200]
            map.insert(792, &[1304]);     // 792 => [1304]
            map.insert(565, &[4376]);     // 565 => [4376]
            map.insert(996, &[1560]);     // 996 => [1560]
            map.insert(598, &[8728]);     // 598 => [8728]
            map.insert(243, &[3096]);     // 243 => [3096]
            map.insert(309, &[5144]);     // 309 => [5144]
            map.insert(426, &[9240]);     // 426 => [9240]
            map.insert(837, &[4200]);     // 837 => [4200]
            map.insert(986, &[8296]);     // 986 => [8296]
            map.insert(901, &[4264]);     // 901 => [4264]
            map.insert(794, &[8360]);     // 794 => [8360]
            map.insert(963, &[2344]);     // 963 => [2344]
            map.insert(666, &[8488]);     // 666 => [8488]
            map.insert(980, &[1576]);     // 980 => [1576]
            map.insert(614, &[8744]);     // 614 => [8744]
            map.insert(410, &[9256]);     // 410 => [9256]
            map.insert(369, &[10280]);     // 369 => [10280]
            map.insert(183, &[12328]);     // 183 => [12328]
            map.insert(997, &[4296]);     // 997 => [4296]
            map.insert(890, &[8392]);     // 890 => [8392]
            map.insert(840, &[1352]);     // 840 => [1352]
            map.insert(613, &[4424]);     // 613 => [4424]
            map.insert(863, &[2632]);     // 863 => [2632]
            map.insert(665, &[4680]);     // 665 => [4680]
            map.insert(357, &[5192]);     // 357 => [5192]
            map.insert(398, &[6216]);     // 398 => [6216]
            map.insert(215, &[12360]);     // 215 => [12360]
            map.insert(904, &[1416]);     // 904 => [1416]
            map.insert(867, &[2440]);     // 867 => [2440]
            map.insert(677, &[4488]);     // 677 => [4488]
            map.insert(570, &[8584]);     // 570 => [8584]
            map.insert(884, &[1672]);     // 884 => [1672]
            map.insert(927, &[2696]);     // 927 => [2696]
            map.insert(601, &[4744]);     // 601 => [4744]
            map.insert(710, &[8840]);     // 710 => [8840]
            map.insert(421, &[5256]);     // 421 => [5256]
            map.insert(314, &[9352]);     // 314 => [9352]
            map.insert(334, &[6280]);     // 334 => [6280]
            map.insert(465, &[10376]);     // 465 => [10376]
            map.insert(756, &[1800]);     // 756 => [1800]
            map.insert(543, &[2824]);     // 543 => [2824]
            map.insert(985, &[4872]);     // 985 => [4872]
            map.insert(838, &[8968]);     // 838 => [8968]
            map.insert(483, &[3336]);     // 483 => [3336]
            map.insert(186, &[9480]);     // 186 => [9480]
            map.insert(206, &[6408]);     // 206 => [6408]
            map.insert(407, &[12552]);     // 407 => [12552]
            map.insert(287, &[3592]);     // 287 => [3592]
            map.insert(217, &[5640]);     // 217 => [5640]
            map.insert(173, &[10760]);     // 173 => [10760]
            map.insert(363, &[12808]);     // 363 => [12808]
            map.insert(974, &[7176]);     // 974 => [7176]
            map.insert(849, &[11272]);     // 849 => [11272]
            map.insert(663, &[13320]);     // 663 => [13320]
            map.insert(636, &[14344]);     // 636 => [14344]
            map.insert(603, &[2224]);     // 603 => [2224]
            map.insert(925, &[4272]);     // 925 => [4272]
            map.insert(987, &[2352]);     // 987 => [2352]
            map.insert(541, &[4400]);     // 541 => [4400]
            map.insert(972, &[1584]);     // 972 => [1584]
            map.insert(638, &[8752]);     // 638 => [8752]
            map.insert(571, &[2256]);     // 571 => [2256]
            map.insert(866, &[8400]);     // 866 => [8400]
            map.insert(848, &[1360]);     // 848 => [1360]
            map.insert(637, &[4432]);     // 637 => [4432]
            map.insert(839, &[2640]);     // 839 => [2640]
            map.insert(542, &[8784]);     // 542 => [8784]
            map.insert(891, &[2448]);     // 891 => [2448]
            map.insert(701, &[4496]);     // 701 => [4496]
            map.insert(903, &[2704]);     // 903 => [2704]
            map.insert(734, &[8848]);     // 734 => [8848]
            map.insert(123, &[3216]);     // 123 => [3216]
            map.insert(342, &[6288]);     // 342 => [6288]
            map.insert(457, &[10384]);     // 457 => [10384]
            map.insert(961, &[4880]);     // 961 => [4880]
            map.insert(862, &[8976]);     // 862 => [8976]
            map.insert(61, &[5392]);     // 61 => [5392]
            map.insert(214, &[6416]);     // 214 => [6416]
            map.insert(399, &[12560]);     // 399 => [12560]
            map.insert(94, &[9744]);     // 94 => [9744]
            map.insert(181, &[10768]);     // 181 => [10768]
            map.insert(371, &[12816]);     // 371 => [12816]
            map.insert(973, &[4320]);     // 973 => [4320]
            map.insert(850, &[8416]);     // 850 => [8416]
            map.insert(864, &[1376]);     // 864 => [1376]
            map.insert(907, &[2400]);     // 907 => [2400]
            map.insert(924, &[1632]);     // 924 => [1632]
            map.insert(887, &[2656]);     // 887 => [2656]
            map.insert(843, &[2464]);     // 843 => [2464]
            map.insert(653, &[4512]);     // 653 => [4512]
            map.insert(860, &[1696]);     // 860 => [1696]
            map.insert(625, &[4768]);     // 625 => [4768]
            map.insert(397, &[5280]);     // 397 => [5280]
            map.insert(358, &[6304]);     // 358 => [6304]
            map.insert(63, &[12448]);     // 63 => [12448]
            map.insert(732, &[1824]);     // 732 => [1824]
            map.insert(567, &[2848]);     // 567 => [2848]
            map.insert(459, &[3360]);     // 459 => [3360]
            map.insert(230, &[6432]);     // 230 => [6432]
            map.insert(121, &[10528]);     // 121 => [10528]
            map.insert(311, &[3616]);     // 311 => [3616]
            map.insert(241, &[5664]);     // 241 => [5664]
            map.insert(110, &[9760]);     // 110 => [9760]
            map.insert(960, &[1472]);     // 960 => [1472]
            map.insert(626, &[8640]);     // 626 => [8640]
            map.insert(983, &[2752]);     // 983 => [2752]
            map.insert(654, &[8896]);     // 654 => [8896]
            map.insert(370, &[9408]);     // 370 => [9408]
            map.insert(409, &[10432]);     // 409 => [10432]
            map.insert(95, &[12480]);     // 95 => [12480]
            map.insert(700, &[1856]);     // 700 => [1856]
            map.insert(599, &[2880]);     // 599 => [2880]
            map.insert(427, &[3392]);     // 427 => [3392]
            map.insert(109, &[5440]);     // 109 => [5440]
            map.insert(242, &[9536]);     // 242 => [9536]
            map.insert(343, &[3648]);     // 343 => [3648]
            map.insert(122, &[6720]);     // 122 => [6720]
            map.insert(229, &[10816]);     // 229 => [10816]
            map.insert(740, &[2063]);     // 740 => [2063]
            map.insert(55, &[55]);     // 55 => [55]
            map.insert(87, &[87]);     // 87 => [87]
            map.insert(103, &[103]);     // 103 => [103]
            map.insert(647, &[1159]);     // 647 => [1159]
            map.insert(693, &[8455]);     // 693 => [8455]
            map.insert(726, &[4615]);     // 726 => [4615]
            map.insert(539, &[1051]);     // 539 => [1051]
            map.insert(921, &[8235]);     // 921 => [8235]
            map.insert(870, &[4171]);     // 870 => [4171]
            map.insert(395, &[395]);     // 395 => [395]
            map.insert(375, &[651]);     // 375 => [651]
            map.insert(247, &[779]);     // 247 => [779]
            map.insert(115, &[115]);     // 115 => [115]
            map.insert(632, &[2195]);     // 632 => [2195]
            map.insert(574, &[4371]);     // 574 => [4371]
            map.insert(605, &[8723]);     // 605 => [8723]
            map.insert(910, &[4259]);     // 910 => [4259]
            map.insert(968, &[2339]);     // 968 => [2339]
            map.insert(991, &[1571]);     // 991 => [1571]
            map.insert(881, &[8387]);     // 881 => [8387]
            map.insert(835, &[1347]);     // 835 => [1347]
            map.insert(852, &[2627]);     // 852 => [2627]
            map.insert(127, &[899]);     // 127 => [899]
            map.insert(965, &[7171]);     // 965 => [7171]
            map.insert(858, &[11267]);     // 858 => [11267]
            map.insert(668, &[13315]);     // 668 => [13315]
            map.insert(631, &[14339]);     // 631 => [14339]
            map.insert(481, &[541]);     // 481 => [541]
            map.insert(205, &[205]);     // 205 => [205]
            map.insert(117, &[117]);     // 117 => [117]
            map.insert(405, &[405]);     // 405 => [405]
            map.insert(423, &[9237]);     // 423 => [9237]
            map.insert(467, &[6165]);     // 467 => [6165]
            map.insert(185, &[837]);     // 185 => [837]
            map.insert(174, &[3141]);     // 174 => [3141]
            map.insert(218, &[12357]);     // 218 => [12357]
            map.insert(315, &[9353]);     // 315 => [9353]
            map.insert(335, &[6281]);     // 335 => [6281]
            map.insert(286, &[3593]);     // 286 => [3593]
            map.insert(362, &[12809]);     // 362 => [12809]
            map.insert(118, &[118]);     // 118 => [118]
            map.insert(119, &[119]);     // 119 => [119]
            
            SYNDROME_MAP = Box::into_raw(map);
        }
    });
}

impl GuavaCode14_4 {
    fn parity_check_matrix_transposed(&self) -> &BinMatrix {
        init();
        unsafe {
            PARITY_MATRIX_T.as_ref().unwrap()
        }
    }
}

impl BinaryCode for GuavaCode14_4 {
    fn name(&self) -> String {
        "[14, 4] Guava code".to_owned()
    }

    fn length(&self) -> usize {
        14
    }

    fn dimension(&self) -> usize {
        4
    }

    fn generator_matrix(&self) -> &BinMatrix {
        init();
        unsafe {
            GENERATOR_MATRIX.as_ref().unwrap()
        }
    }

    fn parity_check_matrix(&self) -> &BinMatrix {
        init();
        unsafe {
            PARITY_MATRIX.as_ref().unwrap()
        }
    }

    fn decode_to_code(&self, c: &BinVector) -> Result<BinVector, &str> {
        init();
        let map = unsafe {
            SYNDROME_MAP.as_ref().unwrap()
        };
        debug_assert_eq!(c.len(), self.length(), "the length doesn't match the expected length (length of the code)");
        let he = c * self.parity_check_matrix_transposed();
        let mut error = BinVector::with_capacity(14);
        let stor = unsafe { error.get_storage_mut() };
        let errbytes = map[&he.as_u64()];
        debug_assert_eq!(errbytes.len(), 14 / 64 + if 14 % 64 != 0 { 1 } else { 0 });
        stor.clear();
        stor.extend_from_slice(&errbytes[..]);
        unsafe { error.set_len(14) };
        debug_assert_eq!(error.len(), self.length(), "internal: the error vector is of the wrong length");
        let result = c + &error;
        debug_assert_eq!(result.len(), self.length(), "internal: the result vector is of the wrong length");
        debug_assert_eq!((&result * self.parity_check_matrix_transposed()).count_ones(), 0);
        Ok(result)
    }

    fn decode_to_message(&self, c: &BinVector) -> Result<BinVector, &str> {
        
        let mut codeword = self.decode_to_code(c)?;
        codeword.truncate(4);
        Ok(codeword)
        
    }

    fn decode_slice(&self, c: &mut [u64]) {
        init();
        
        debug_assert_eq!(c[14 / 64] & !((1 << 14) - 1), 0, "this message has excess bits");

        let map = unsafe {
            SYNDROME_MAP.as_ref().unwrap()
        };
        let he = &BinMatrix::from_slices(&[&c[..]], self.length()) * self.parity_check_matrix_transposed();
        let error = map[unsafe { &he.get_word_unchecked(0, 0) }];
        c.iter_mut().zip(error.iter().copied()).for_each(|(sample, error)| *sample ^= error as u64);
    }

    
}

#[cfg(test)]
mod tests {
    use super::*;
    use m4ri_rust::friendly::BinVector;
    use crate::oracle::Sample;

    #[test]
    fn size() {
        let code = GuavaCode14_4.generator_matrix();
        assert_eq!(code.ncols(), 14);
        assert_eq!(code.nrows(), 4);
    }

    #[test]
    fn test_decode_sample() {
        let code = GuavaCode14_4;
        for _ in 0..1000 {
            // setup
            let vec = BinVector::random(code.length());
            let mut sample_a = Sample::from_binvector(&vec, false);
            let mut sample_b = Sample::from_binvector(&vec, true);
            
            let decoded_vec = code.decode_to_message(&vec).unwrap();
            println!("decoded_vec: {:?}", decoded_vec);

            // test vectors
            let decoded_vec_sample_a = Sample::from_binvector(&decoded_vec, false);
            let decoded_vec_sample_b = Sample::from_binvector(&decoded_vec, true);

            code.decode_sample(&mut sample_a);
            code.decode_sample(&mut sample_b);
            assert_eq!(sample_a.get_product(), false);
            assert_eq!(sample_b.get_product(), true);
            assert_eq!(sample_a, decoded_vec_sample_a);
            assert_eq!(sample_b, decoded_vec_sample_b);
        }
    }

    #[test]
    fn random_decode_tests() {

        
        {
            let code = GuavaCode14_4;
            let randvec = BinVector::from_bools(&[false, false, true, true, true, true, true, true, false, true, true, true, true, false]);
            let codeword = BinVector::from_bools(&[false, false, true, false, true, true, true, false, false, false, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode14_4;
            let randvec = BinVector::from_bools(&[false, true, true, false, false, false, false, false, false, true, true, false, true, true]);
            let codeword = BinVector::from_bools(&[false, true, true, true, false, false, true, false, false, true, true, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode14_4;
            let randvec = BinVector::from_bools(&[false, true, true, true, false, false, false, true, false, false, true, false, false, false]);
            let codeword = BinVector::from_bools(&[false, true, true, true, false, false, true, false, false, true, true, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode14_4;
            let randvec = BinVector::from_bools(&[false, false, true, true, true, true, true, false, false, false, false, false, true, true]);
            let codeword = BinVector::from_bools(&[false, false, true, false, true, true, true, false, false, false, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode14_4;
            let randvec = BinVector::from_bools(&[false, false, false, true, false, false, true, false, false, true, true, false, false, false]);
            let codeword = BinVector::from_bools(&[false, true, true, true, false, false, true, false, false, true, true, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode14_4;
            let randvec = BinVector::from_bools(&[false, false, false, true, true, false, false, true, false, true, true, true, false, false]);
            let codeword = BinVector::from_bools(&[false, false, false, true, false, false, false, true, true, true, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode14_4;
            let randvec = BinVector::from_bools(&[false, false, true, true, false, true, false, true, false, false, true, false, false, true]);
            let codeword = BinVector::from_bools(&[true, false, true, false, false, true, false, true, false, true, false, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode14_4;
            let randvec = BinVector::from_bools(&[false, false, true, true, false, true, true, false, true, false, true, true, true, false]);
            let codeword = BinVector::from_bools(&[true, false, true, true, false, true, false, false, true, false, true, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode14_4;
            let randvec = BinVector::from_bools(&[true, true, false, true, true, true, true, false, true, false, true, false, false, false]);
            let codeword = BinVector::from_bools(&[true, true, false, true, false, true, true, true, false, false, true, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode14_4;
            let randvec = BinVector::from_bools(&[true, false, false, true, true, false, true, false, true, true, false, true, false, true]);
            let codeword = BinVector::from_bools(&[true, false, false, true, true, false, true, false, true, false, false, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode14_4;
            let randvec = BinVector::from_bools(&[true, false, false, true, false, false, true, true, true, true, true, false, false, false]);
            let codeword = BinVector::from_bools(&[true, false, false, false, true, false, true, true, false, true, true, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode14_4;
            let randvec = BinVector::from_bools(&[false, false, false, true, false, false, false, true, true, false, true, false, true, false]);
            let codeword = BinVector::from_bools(&[false, false, false, true, false, false, false, true, true, true, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode14_4;
            let randvec = BinVector::from_bools(&[true, false, true, true, true, false, false, true, true, false, false, false, true, false]);
            let codeword = BinVector::from_bools(&[true, true, true, true, true, false, false, true, false, false, false, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode14_4;
            let randvec = BinVector::from_bools(&[false, true, true, false, true, true, false, true, false, false, false, false, true, false]);
            let codeword = BinVector::from_bools(&[true, true, true, true, true, false, false, true, false, false, false, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode14_4;
            let randvec = BinVector::from_bools(&[true, true, true, true, true, false, true, true, false, false, true, false, false, true]);
            let codeword = BinVector::from_bools(&[true, true, true, true, true, false, false, true, false, false, false, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode14_4;
            let randvec = BinVector::from_bools(&[false, false, false, false, false, false, true, false, false, true, false, true, false, false]);
            let codeword = BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode14_4;
            let randvec = BinVector::from_bools(&[false, true, false, true, true, true, false, false, true, true, true, true, true, true]);
            let codeword = BinVector::from_bools(&[false, true, false, true, true, true, false, false, false, true, false, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode14_4;
            let randvec = BinVector::from_bools(&[true, true, true, false, false, false, false, false, false, false, false, false, true, false]);
            let codeword = BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode14_4;
            let randvec = BinVector::from_bools(&[true, false, true, true, false, false, true, true, false, true, true, false, false, false]);
            let codeword = BinVector::from_bools(&[false, true, true, true, false, false, true, false, false, true, true, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode14_4;
            let randvec = BinVector::from_bools(&[true, true, false, false, true, false, true, false, true, true, false, true, false, true]);
            let codeword = BinVector::from_bools(&[true, false, false, true, true, false, true, false, true, false, false, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
    }

    #[test]
    fn test_generator_representation() {
        init();
        let generator_matrix = unsafe { GENERATOR_MATRIX.as_ref().unwrap() };
        let first_row = generator_matrix.get_window(0, 0, 1, generator_matrix.ncols());
        let vector = BinVector::from_bools(&[ true, false, false, false, true, false, true, true, false, true, true, false, true, false ]);
        assert_eq!(vector, first_row.as_vector());
    }

}
