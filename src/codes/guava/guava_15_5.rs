use std::boxed::Box;
use std::default::Default;
use std::sync::Once;

use fnv::FnvHashMap;

use m4ri_rust::friendly::BinMatrix;
use m4ri_rust::friendly::BinVector;

use crate::codes::BinaryCode;

/// ``[15, 5]`` Guava code
///
/// Best code found from the GUAVA database version 3.15
///
/// Decodes using Syndrome decoding
#[derive(Clone, Serialize)]
pub struct GuavaCode15_5;

static INIT: Once = Once::new();
static mut GENERATOR_MATRIX: *const BinMatrix = 0 as *const BinMatrix;
static mut PARITY_MATRIX: *const BinMatrix = 0 as *const BinMatrix;
static mut PARITY_MATRIX_T: *const BinMatrix = 0 as *const BinMatrix;
static mut SYNDROME_MAP: *const FnvHashMap<u64, &'static [usize; 1]> = 0 as *const FnvHashMap<u64, &'static [usize; 1]>;

fn init() {
    INIT.call_once(|| {
        unsafe {
            let matrix = Box::new(BinMatrix::from_slices(&[
                &[ 7873 ],
                &[ 11682 ],
                &[ 19300 ],
                &[ 30952 ],
                &[ 32528 ],
                
            ], 15));
            GENERATOR_MATRIX = Box::into_raw(matrix);

            let matrix = Box::new(BinMatrix::from_slices(&[
                &[ 5249 ],
                &[ 9346 ],
                &[ 17540 ],
                &[ 12424 ],
                &[ 13328 ],
                &[ 20640 ],
                &[ 24768 ],
                &[ 21760 ],
                &[ 26112 ],
                &[ 30720 ],
                
            ], 15));
            let matrix_t = Box::new(matrix.transposed());
            PARITY_MATRIX = Box::into_raw(matrix);
            PARITY_MATRIX_T = Box::into_raw(matrix_t);

            let mut map = Box::new(FnvHashMap::with_capacity_and_hasher(1024, Default::default()));
            map.insert(0, &[0]);     // 0 => [0]
            map.insert(1, &[1]);     // 1 => [1]
            map.insert(2, &[2]);     // 2 => [2]
            map.insert(4, &[4]);     // 4 => [4]
            map.insert(8, &[8]);     // 8 => [8]
            map.insert(16, &[16]);     // 16 => [16]
            map.insert(32, &[32]);     // 32 => [32]
            map.insert(64, &[64]);     // 64 => [64]
            map.insert(111, &[128]);     // 111 => [128]
            map.insert(128, &[256]);     // 128 => [256]
            map.insert(256, &[512]);     // 256 => [512]
            map.insert(407, &[1024]);     // 407 => [1024]
            map.insert(512, &[2048]);     // 512 => [2048]
            map.insert(697, &[4096]);     // 697 => [4096]
            map.insert(858, &[8192]);     // 858 => [8192]
            map.insert(996, &[16384]);     // 996 => [16384]
            map.insert(3, &[3]);     // 3 => [3]
            map.insert(5, &[5]);     // 5 => [5]
            map.insert(9, &[9]);     // 9 => [9]
            map.insert(17, &[17]);     // 17 => [17]
            map.insert(33, &[33]);     // 33 => [33]
            map.insert(65, &[65]);     // 65 => [65]
            map.insert(110, &[129]);     // 110 => [129]
            map.insert(129, &[257]);     // 129 => [257]
            map.insert(257, &[513]);     // 257 => [513]
            map.insert(406, &[1025]);     // 406 => [1025]
            map.insert(513, &[2049]);     // 513 => [2049]
            map.insert(696, &[4097]);     // 696 => [4097]
            map.insert(859, &[8193]);     // 859 => [8193]
            map.insert(997, &[16385]);     // 997 => [16385]
            map.insert(6, &[6]);     // 6 => [6]
            map.insert(10, &[10]);     // 10 => [10]
            map.insert(18, &[18]);     // 18 => [18]
            map.insert(34, &[34]);     // 34 => [34]
            map.insert(66, &[66]);     // 66 => [66]
            map.insert(109, &[130]);     // 109 => [130]
            map.insert(130, &[258]);     // 130 => [258]
            map.insert(258, &[514]);     // 258 => [514]
            map.insert(405, &[1026]);     // 405 => [1026]
            map.insert(514, &[2050]);     // 514 => [2050]
            map.insert(699, &[4098]);     // 699 => [4098]
            map.insert(856, &[8194]);     // 856 => [8194]
            map.insert(998, &[16386]);     // 998 => [16386]
            map.insert(12, &[12]);     // 12 => [12]
            map.insert(20, &[20]);     // 20 => [20]
            map.insert(36, &[36]);     // 36 => [36]
            map.insert(68, &[68]);     // 68 => [68]
            map.insert(107, &[132]);     // 107 => [132]
            map.insert(132, &[260]);     // 132 => [260]
            map.insert(260, &[516]);     // 260 => [516]
            map.insert(403, &[1028]);     // 403 => [1028]
            map.insert(516, &[2052]);     // 516 => [2052]
            map.insert(701, &[4100]);     // 701 => [4100]
            map.insert(862, &[8196]);     // 862 => [8196]
            map.insert(992, &[16388]);     // 992 => [16388]
            map.insert(24, &[24]);     // 24 => [24]
            map.insert(40, &[40]);     // 40 => [40]
            map.insert(72, &[72]);     // 72 => [72]
            map.insert(103, &[136]);     // 103 => [136]
            map.insert(136, &[264]);     // 136 => [264]
            map.insert(264, &[520]);     // 264 => [520]
            map.insert(415, &[1032]);     // 415 => [1032]
            map.insert(520, &[2056]);     // 520 => [2056]
            map.insert(689, &[4104]);     // 689 => [4104]
            map.insert(850, &[8200]);     // 850 => [8200]
            map.insert(1004, &[16392]);     // 1004 => [16392]
            map.insert(48, &[48]);     // 48 => [48]
            map.insert(80, &[80]);     // 80 => [80]
            map.insert(127, &[144]);     // 127 => [144]
            map.insert(144, &[272]);     // 144 => [272]
            map.insert(272, &[528]);     // 272 => [528]
            map.insert(391, &[1040]);     // 391 => [1040]
            map.insert(528, &[2064]);     // 528 => [2064]
            map.insert(681, &[4112]);     // 681 => [4112]
            map.insert(842, &[8208]);     // 842 => [8208]
            map.insert(1012, &[16400]);     // 1012 => [16400]
            map.insert(96, &[96]);     // 96 => [96]
            map.insert(79, &[160]);     // 79 => [160]
            map.insert(160, &[288]);     // 160 => [288]
            map.insert(288, &[544]);     // 288 => [544]
            map.insert(439, &[1056]);     // 439 => [1056]
            map.insert(544, &[2080]);     // 544 => [2080]
            map.insert(665, &[4128]);     // 665 => [4128]
            map.insert(890, &[8224]);     // 890 => [8224]
            map.insert(964, &[16416]);     // 964 => [16416]
            map.insert(47, &[192]);     // 47 => [192]
            map.insert(192, &[320]);     // 192 => [320]
            map.insert(320, &[576]);     // 320 => [576]
            map.insert(471, &[1088]);     // 471 => [1088]
            map.insert(576, &[2112]);     // 576 => [2112]
            map.insert(761, &[4160]);     // 761 => [4160]
            map.insert(794, &[8256]);     // 794 => [8256]
            map.insert(932, &[16448]);     // 932 => [16448]
            map.insert(239, &[384]);     // 239 => [384]
            map.insert(367, &[640]);     // 367 => [640]
            map.insert(504, &[1152]);     // 504 => [1152]
            map.insert(623, &[2176]);     // 623 => [2176]
            map.insert(726, &[4224]);     // 726 => [4224]
            map.insert(821, &[8320]);     // 821 => [8320]
            map.insert(907, &[16512]);     // 907 => [16512]
            map.insert(384, &[768]);     // 384 => [768]
            map.insert(279, &[1280]);     // 279 => [1280]
            map.insert(640, &[2304]);     // 640 => [2304]
            map.insert(569, &[4352]);     // 569 => [4352]
            map.insert(986, &[8448]);     // 986 => [8448]
            map.insert(868, &[16640]);     // 868 => [16640]
            map.insert(151, &[1536]);     // 151 => [1536]
            map.insert(768, &[2560]);     // 768 => [2560]
            map.insert(953, &[4608]);     // 953 => [4608]
            map.insert(602, &[8704]);     // 602 => [8704]
            map.insert(740, &[16896]);     // 740 => [16896]
            map.insert(919, &[3072]);     // 919 => [3072]
            map.insert(814, &[5120]);     // 814 => [5120]
            map.insert(717, &[9216]);     // 717 => [9216]
            map.insert(627, &[17408]);     // 627 => [17408]
            map.insert(185, &[6144]);     // 185 => [6144]
            map.insert(346, &[10240]);     // 346 => [10240]
            map.insert(484, &[18432]);     // 484 => [18432]
            map.insert(483, &[12288]);     // 483 => [12288]
            map.insert(349, &[20480]);     // 349 => [20480]
            map.insert(190, &[24576]);     // 190 => [24576]
            map.insert(7, &[7]);     // 7 => [7]
            map.insert(11, &[11]);     // 11 => [11]
            map.insert(19, &[19]);     // 19 => [19]
            map.insert(35, &[35]);     // 35 => [35]
            map.insert(67, &[67]);     // 67 => [67]
            map.insert(108, &[131]);     // 108 => [131]
            map.insert(131, &[259]);     // 131 => [259]
            map.insert(259, &[515]);     // 259 => [515]
            map.insert(404, &[1027]);     // 404 => [1027]
            map.insert(515, &[2051]);     // 515 => [2051]
            map.insert(698, &[4099]);     // 698 => [4099]
            map.insert(857, &[8195]);     // 857 => [8195]
            map.insert(999, &[16387]);     // 999 => [16387]
            map.insert(13, &[13]);     // 13 => [13]
            map.insert(21, &[21]);     // 21 => [21]
            map.insert(37, &[37]);     // 37 => [37]
            map.insert(69, &[69]);     // 69 => [69]
            map.insert(106, &[133]);     // 106 => [133]
            map.insert(133, &[261]);     // 133 => [261]
            map.insert(261, &[517]);     // 261 => [517]
            map.insert(402, &[1029]);     // 402 => [1029]
            map.insert(517, &[2053]);     // 517 => [2053]
            map.insert(700, &[4101]);     // 700 => [4101]
            map.insert(863, &[8197]);     // 863 => [8197]
            map.insert(993, &[16389]);     // 993 => [16389]
            map.insert(25, &[25]);     // 25 => [25]
            map.insert(41, &[41]);     // 41 => [41]
            map.insert(73, &[73]);     // 73 => [73]
            map.insert(102, &[137]);     // 102 => [137]
            map.insert(137, &[265]);     // 137 => [265]
            map.insert(265, &[521]);     // 265 => [521]
            map.insert(414, &[1033]);     // 414 => [1033]
            map.insert(521, &[2057]);     // 521 => [2057]
            map.insert(688, &[4105]);     // 688 => [4105]
            map.insert(851, &[8201]);     // 851 => [8201]
            map.insert(1005, &[16393]);     // 1005 => [16393]
            map.insert(49, &[49]);     // 49 => [49]
            map.insert(81, &[81]);     // 81 => [81]
            map.insert(126, &[145]);     // 126 => [145]
            map.insert(145, &[273]);     // 145 => [273]
            map.insert(273, &[529]);     // 273 => [529]
            map.insert(390, &[1041]);     // 390 => [1041]
            map.insert(529, &[2065]);     // 529 => [2065]
            map.insert(680, &[4113]);     // 680 => [4113]
            map.insert(843, &[8209]);     // 843 => [8209]
            map.insert(1013, &[16401]);     // 1013 => [16401]
            map.insert(97, &[97]);     // 97 => [97]
            map.insert(78, &[161]);     // 78 => [161]
            map.insert(161, &[289]);     // 161 => [289]
            map.insert(289, &[545]);     // 289 => [545]
            map.insert(438, &[1057]);     // 438 => [1057]
            map.insert(545, &[2081]);     // 545 => [2081]
            map.insert(664, &[4129]);     // 664 => [4129]
            map.insert(891, &[8225]);     // 891 => [8225]
            map.insert(965, &[16417]);     // 965 => [16417]
            map.insert(46, &[193]);     // 46 => [193]
            map.insert(193, &[321]);     // 193 => [321]
            map.insert(321, &[577]);     // 321 => [577]
            map.insert(470, &[1089]);     // 470 => [1089]
            map.insert(577, &[2113]);     // 577 => [2113]
            map.insert(760, &[4161]);     // 760 => [4161]
            map.insert(795, &[8257]);     // 795 => [8257]
            map.insert(933, &[16449]);     // 933 => [16449]
            map.insert(238, &[385]);     // 238 => [385]
            map.insert(366, &[641]);     // 366 => [641]
            map.insert(505, &[1153]);     // 505 => [1153]
            map.insert(622, &[2177]);     // 622 => [2177]
            map.insert(727, &[4225]);     // 727 => [4225]
            map.insert(820, &[8321]);     // 820 => [8321]
            map.insert(906, &[16513]);     // 906 => [16513]
            map.insert(385, &[769]);     // 385 => [769]
            map.insert(278, &[1281]);     // 278 => [1281]
            map.insert(641, &[2305]);     // 641 => [2305]
            map.insert(568, &[4353]);     // 568 => [4353]
            map.insert(987, &[8449]);     // 987 => [8449]
            map.insert(869, &[16641]);     // 869 => [16641]
            map.insert(150, &[1537]);     // 150 => [1537]
            map.insert(769, &[2561]);     // 769 => [2561]
            map.insert(952, &[4609]);     // 952 => [4609]
            map.insert(603, &[8705]);     // 603 => [8705]
            map.insert(741, &[16897]);     // 741 => [16897]
            map.insert(918, &[3073]);     // 918 => [3073]
            map.insert(815, &[5121]);     // 815 => [5121]
            map.insert(716, &[9217]);     // 716 => [9217]
            map.insert(626, &[17409]);     // 626 => [17409]
            map.insert(184, &[6145]);     // 184 => [6145]
            map.insert(347, &[10241]);     // 347 => [10241]
            map.insert(485, &[18433]);     // 485 => [18433]
            map.insert(482, &[12289]);     // 482 => [12289]
            map.insert(348, &[20481]);     // 348 => [20481]
            map.insert(191, &[24577]);     // 191 => [24577]
            map.insert(14, &[14]);     // 14 => [14]
            map.insert(22, &[22]);     // 22 => [22]
            map.insert(38, &[38]);     // 38 => [38]
            map.insert(70, &[70]);     // 70 => [70]
            map.insert(105, &[134]);     // 105 => [134]
            map.insert(134, &[262]);     // 134 => [262]
            map.insert(262, &[518]);     // 262 => [518]
            map.insert(401, &[1030]);     // 401 => [1030]
            map.insert(518, &[2054]);     // 518 => [2054]
            map.insert(703, &[4102]);     // 703 => [4102]
            map.insert(860, &[8198]);     // 860 => [8198]
            map.insert(994, &[16390]);     // 994 => [16390]
            map.insert(26, &[26]);     // 26 => [26]
            map.insert(42, &[42]);     // 42 => [42]
            map.insert(74, &[74]);     // 74 => [74]
            map.insert(101, &[138]);     // 101 => [138]
            map.insert(138, &[266]);     // 138 => [266]
            map.insert(266, &[522]);     // 266 => [522]
            map.insert(413, &[1034]);     // 413 => [1034]
            map.insert(522, &[2058]);     // 522 => [2058]
            map.insert(691, &[4106]);     // 691 => [4106]
            map.insert(848, &[8202]);     // 848 => [8202]
            map.insert(1006, &[16394]);     // 1006 => [16394]
            map.insert(50, &[50]);     // 50 => [50]
            map.insert(82, &[82]);     // 82 => [82]
            map.insert(125, &[146]);     // 125 => [146]
            map.insert(146, &[274]);     // 146 => [274]
            map.insert(274, &[530]);     // 274 => [530]
            map.insert(389, &[1042]);     // 389 => [1042]
            map.insert(530, &[2066]);     // 530 => [2066]
            map.insert(683, &[4114]);     // 683 => [4114]
            map.insert(840, &[8210]);     // 840 => [8210]
            map.insert(1014, &[16402]);     // 1014 => [16402]
            map.insert(98, &[98]);     // 98 => [98]
            map.insert(77, &[162]);     // 77 => [162]
            map.insert(162, &[290]);     // 162 => [290]
            map.insert(290, &[546]);     // 290 => [546]
            map.insert(437, &[1058]);     // 437 => [1058]
            map.insert(546, &[2082]);     // 546 => [2082]
            map.insert(667, &[4130]);     // 667 => [4130]
            map.insert(888, &[8226]);     // 888 => [8226]
            map.insert(966, &[16418]);     // 966 => [16418]
            map.insert(45, &[194]);     // 45 => [194]
            map.insert(194, &[322]);     // 194 => [322]
            map.insert(322, &[578]);     // 322 => [578]
            map.insert(469, &[1090]);     // 469 => [1090]
            map.insert(578, &[2114]);     // 578 => [2114]
            map.insert(763, &[4162]);     // 763 => [4162]
            map.insert(792, &[8258]);     // 792 => [8258]
            map.insert(934, &[16450]);     // 934 => [16450]
            map.insert(237, &[386]);     // 237 => [386]
            map.insert(365, &[642]);     // 365 => [642]
            map.insert(506, &[1154]);     // 506 => [1154]
            map.insert(621, &[2178]);     // 621 => [2178]
            map.insert(724, &[4226]);     // 724 => [4226]
            map.insert(823, &[8322]);     // 823 => [8322]
            map.insert(905, &[16514]);     // 905 => [16514]
            map.insert(386, &[770]);     // 386 => [770]
            map.insert(277, &[1282]);     // 277 => [1282]
            map.insert(642, &[2306]);     // 642 => [2306]
            map.insert(571, &[4354]);     // 571 => [4354]
            map.insert(984, &[8450]);     // 984 => [8450]
            map.insert(870, &[16642]);     // 870 => [16642]
            map.insert(149, &[1538]);     // 149 => [1538]
            map.insert(770, &[2562]);     // 770 => [2562]
            map.insert(955, &[4610]);     // 955 => [4610]
            map.insert(600, &[8706]);     // 600 => [8706]
            map.insert(742, &[16898]);     // 742 => [16898]
            map.insert(917, &[3074]);     // 917 => [3074]
            map.insert(812, &[5122]);     // 812 => [5122]
            map.insert(719, &[9218]);     // 719 => [9218]
            map.insert(625, &[17410]);     // 625 => [17410]
            map.insert(187, &[6146]);     // 187 => [6146]
            map.insert(344, &[10242]);     // 344 => [10242]
            map.insert(486, &[18434]);     // 486 => [18434]
            map.insert(481, &[12290]);     // 481 => [12290]
            map.insert(351, &[20482]);     // 351 => [20482]
            map.insert(188, &[24578]);     // 188 => [24578]
            map.insert(28, &[28]);     // 28 => [28]
            map.insert(44, &[44]);     // 44 => [44]
            map.insert(76, &[76]);     // 76 => [76]
            map.insert(99, &[140]);     // 99 => [140]
            map.insert(140, &[268]);     // 140 => [268]
            map.insert(268, &[524]);     // 268 => [524]
            map.insert(411, &[1036]);     // 411 => [1036]
            map.insert(524, &[2060]);     // 524 => [2060]
            map.insert(693, &[4108]);     // 693 => [4108]
            map.insert(854, &[8204]);     // 854 => [8204]
            map.insert(1000, &[16396]);     // 1000 => [16396]
            map.insert(52, &[52]);     // 52 => [52]
            map.insert(84, &[84]);     // 84 => [84]
            map.insert(123, &[148]);     // 123 => [148]
            map.insert(148, &[276]);     // 148 => [276]
            map.insert(276, &[532]);     // 276 => [532]
            map.insert(387, &[1044]);     // 387 => [1044]
            map.insert(532, &[2068]);     // 532 => [2068]
            map.insert(685, &[4116]);     // 685 => [4116]
            map.insert(846, &[8212]);     // 846 => [8212]
            map.insert(1008, &[16404]);     // 1008 => [16404]
            map.insert(100, &[100]);     // 100 => [100]
            map.insert(75, &[164]);     // 75 => [164]
            map.insert(164, &[292]);     // 164 => [292]
            map.insert(292, &[548]);     // 292 => [548]
            map.insert(435, &[1060]);     // 435 => [1060]
            map.insert(548, &[2084]);     // 548 => [2084]
            map.insert(669, &[4132]);     // 669 => [4132]
            map.insert(894, &[8228]);     // 894 => [8228]
            map.insert(960, &[16420]);     // 960 => [16420]
            map.insert(43, &[196]);     // 43 => [196]
            map.insert(196, &[324]);     // 196 => [324]
            map.insert(324, &[580]);     // 324 => [580]
            map.insert(467, &[1092]);     // 467 => [1092]
            map.insert(580, &[2116]);     // 580 => [2116]
            map.insert(765, &[4164]);     // 765 => [4164]
            map.insert(798, &[8260]);     // 798 => [8260]
            map.insert(928, &[16452]);     // 928 => [16452]
            map.insert(235, &[388]);     // 235 => [388]
            map.insert(363, &[644]);     // 363 => [644]
            map.insert(508, &[1156]);     // 508 => [1156]
            map.insert(619, &[2180]);     // 619 => [2180]
            map.insert(722, &[4228]);     // 722 => [4228]
            map.insert(817, &[8324]);     // 817 => [8324]
            map.insert(911, &[16516]);     // 911 => [16516]
            map.insert(388, &[772]);     // 388 => [772]
            map.insert(275, &[1284]);     // 275 => [1284]
            map.insert(644, &[2308]);     // 644 => [2308]
            map.insert(573, &[4356]);     // 573 => [4356]
            map.insert(990, &[8452]);     // 990 => [8452]
            map.insert(864, &[16644]);     // 864 => [16644]
            map.insert(147, &[1540]);     // 147 => [1540]
            map.insert(772, &[2564]);     // 772 => [2564]
            map.insert(957, &[4612]);     // 957 => [4612]
            map.insert(606, &[8708]);     // 606 => [8708]
            map.insert(736, &[16900]);     // 736 => [16900]
            map.insert(915, &[3076]);     // 915 => [3076]
            map.insert(810, &[5124]);     // 810 => [5124]
            map.insert(713, &[9220]);     // 713 => [9220]
            map.insert(631, &[17412]);     // 631 => [17412]
            map.insert(189, &[6148]);     // 189 => [6148]
            map.insert(350, &[10244]);     // 350 => [10244]
            map.insert(480, &[18436]);     // 480 => [18436]
            map.insert(487, &[12292]);     // 487 => [12292]
            map.insert(345, &[20484]);     // 345 => [20484]
            map.insert(186, &[24580]);     // 186 => [24580]
            map.insert(56, &[56]);     // 56 => [56]
            map.insert(88, &[88]);     // 88 => [88]
            map.insert(119, &[152]);     // 119 => [152]
            map.insert(152, &[280]);     // 152 => [280]
            map.insert(280, &[536]);     // 280 => [536]
            map.insert(399, &[1048]);     // 399 => [1048]
            map.insert(536, &[2072]);     // 536 => [2072]
            map.insert(673, &[4120]);     // 673 => [4120]
            map.insert(834, &[8216]);     // 834 => [8216]
            map.insert(1020, &[16408]);     // 1020 => [16408]
            map.insert(104, &[104]);     // 104 => [104]
            map.insert(71, &[168]);     // 71 => [168]
            map.insert(168, &[296]);     // 168 => [296]
            map.insert(296, &[552]);     // 296 => [552]
            map.insert(447, &[1064]);     // 447 => [1064]
            map.insert(552, &[2088]);     // 552 => [2088]
            map.insert(657, &[4136]);     // 657 => [4136]
            map.insert(882, &[8232]);     // 882 => [8232]
            map.insert(972, &[16424]);     // 972 => [16424]
            map.insert(39, &[200]);     // 39 => [200]
            map.insert(200, &[328]);     // 200 => [328]
            map.insert(328, &[584]);     // 328 => [584]
            map.insert(479, &[1096]);     // 479 => [1096]
            map.insert(584, &[2120]);     // 584 => [2120]
            map.insert(753, &[4168]);     // 753 => [4168]
            map.insert(786, &[8264]);     // 786 => [8264]
            map.insert(940, &[16456]);     // 940 => [16456]
            map.insert(231, &[392]);     // 231 => [392]
            map.insert(359, &[648]);     // 359 => [648]
            map.insert(496, &[1160]);     // 496 => [1160]
            map.insert(615, &[2184]);     // 615 => [2184]
            map.insert(734, &[4232]);     // 734 => [4232]
            map.insert(829, &[8328]);     // 829 => [8328]
            map.insert(899, &[16520]);     // 899 => [16520]
            map.insert(392, &[776]);     // 392 => [776]
            map.insert(287, &[1288]);     // 287 => [1288]
            map.insert(648, &[2312]);     // 648 => [2312]
            map.insert(561, &[4360]);     // 561 => [4360]
            map.insert(978, &[8456]);     // 978 => [8456]
            map.insert(876, &[16648]);     // 876 => [16648]
            map.insert(159, &[1544]);     // 159 => [1544]
            map.insert(776, &[2568]);     // 776 => [2568]
            map.insert(945, &[4616]);     // 945 => [4616]
            map.insert(594, &[8712]);     // 594 => [8712]
            map.insert(748, &[16904]);     // 748 => [16904]
            map.insert(927, &[3080]);     // 927 => [3080]
            map.insert(806, &[5128]);     // 806 => [5128]
            map.insert(709, &[9224]);     // 709 => [9224]
            map.insert(635, &[17416]);     // 635 => [17416]
            map.insert(177, &[6152]);     // 177 => [6152]
            map.insert(338, &[10248]);     // 338 => [10248]
            map.insert(492, &[18440]);     // 492 => [18440]
            map.insert(491, &[12296]);     // 491 => [12296]
            map.insert(341, &[20488]);     // 341 => [20488]
            map.insert(182, &[24584]);     // 182 => [24584]
            map.insert(112, &[112]);     // 112 => [112]
            map.insert(95, &[176]);     // 95 => [176]
            map.insert(176, &[304]);     // 176 => [304]
            map.insert(304, &[560]);     // 304 => [560]
            map.insert(423, &[1072]);     // 423 => [1072]
            map.insert(560, &[2096]);     // 560 => [2096]
            map.insert(649, &[4144]);     // 649 => [4144]
            map.insert(874, &[8240]);     // 874 => [8240]
            map.insert(980, &[16432]);     // 980 => [16432]
            map.insert(63, &[208]);     // 63 => [208]
            map.insert(208, &[336]);     // 208 => [336]
            map.insert(336, &[592]);     // 336 => [592]
            map.insert(455, &[1104]);     // 455 => [1104]
            map.insert(592, &[2128]);     // 592 => [2128]
            map.insert(745, &[4176]);     // 745 => [4176]
            map.insert(778, &[8272]);     // 778 => [8272]
            map.insert(948, &[16464]);     // 948 => [16464]
            map.insert(255, &[400]);     // 255 => [400]
            map.insert(383, &[656]);     // 383 => [656]
            map.insert(488, &[1168]);     // 488 => [1168]
            map.insert(639, &[2192]);     // 639 => [2192]
            map.insert(710, &[4240]);     // 710 => [4240]
            map.insert(805, &[8336]);     // 805 => [8336]
            map.insert(923, &[16528]);     // 923 => [16528]
            map.insert(400, &[784]);     // 400 => [784]
            map.insert(263, &[1296]);     // 263 => [1296]
            map.insert(656, &[2320]);     // 656 => [2320]
            map.insert(553, &[4368]);     // 553 => [4368]
            map.insert(970, &[8464]);     // 970 => [8464]
            map.insert(884, &[16656]);     // 884 => [16656]
            map.insert(135, &[1552]);     // 135 => [1552]
            map.insert(784, &[2576]);     // 784 => [2576]
            map.insert(937, &[4624]);     // 937 => [4624]
            map.insert(586, &[8720]);     // 586 => [8720]
            map.insert(756, &[16912]);     // 756 => [16912]
            map.insert(903, &[3088]);     // 903 => [3088]
            map.insert(830, &[5136]);     // 830 => [5136]
            map.insert(733, &[9232]);     // 733 => [9232]
            map.insert(611, &[17424]);     // 611 => [17424]
            map.insert(169, &[6160]);     // 169 => [6160]
            map.insert(330, &[10256]);     // 330 => [10256]
            map.insert(500, &[18448]);     // 500 => [18448]
            map.insert(499, &[12304]);     // 499 => [12304]
            map.insert(333, &[20496]);     // 333 => [20496]
            map.insert(174, &[24592]);     // 174 => [24592]
            map.insert(15, &[224]);     // 15 => [224]
            map.insert(224, &[352]);     // 224 => [352]
            map.insert(352, &[608]);     // 352 => [608]
            map.insert(503, &[1120]);     // 503 => [1120]
            map.insert(608, &[2144]);     // 608 => [2144]
            map.insert(729, &[4192]);     // 729 => [4192]
            map.insert(826, &[8288]);     // 826 => [8288]
            map.insert(900, &[16480]);     // 900 => [16480]
            map.insert(207, &[416]);     // 207 => [416]
            map.insert(335, &[672]);     // 335 => [672]
            map.insert(472, &[1184]);     // 472 => [1184]
            map.insert(591, &[2208]);     // 591 => [2208]
            map.insert(758, &[4256]);     // 758 => [4256]
            map.insert(789, &[8352]);     // 789 => [8352]
            map.insert(939, &[16544]);     // 939 => [16544]
            map.insert(416, &[800]);     // 416 => [800]
            map.insert(311, &[1312]);     // 311 => [1312]
            map.insert(672, &[2336]);     // 672 => [2336]
            map.insert(537, &[4384]);     // 537 => [4384]
            map.insert(1018, &[8480]);     // 1018 => [8480]
            map.insert(836, &[16672]);     // 836 => [16672]
            map.insert(183, &[1568]);     // 183 => [1568]
            map.insert(800, &[2592]);     // 800 => [2592]
            map.insert(921, &[4640]);     // 921 => [4640]
            map.insert(634, &[8736]);     // 634 => [8736]
            map.insert(708, &[16928]);     // 708 => [16928]
            map.insert(951, &[3104]);     // 951 => [3104]
            map.insert(782, &[5152]);     // 782 => [5152]
            map.insert(749, &[9248]);     // 749 => [9248]
            map.insert(595, &[17440]);     // 595 => [17440]
            map.insert(153, &[6176]);     // 153 => [6176]
            map.insert(378, &[10272]);     // 378 => [10272]
            map.insert(452, &[18464]);     // 452 => [18464]
            map.insert(451, &[12320]);     // 451 => [12320]
            map.insert(381, &[20512]);     // 381 => [20512]
            map.insert(158, &[24608]);     // 158 => [24608]
            map.insert(175, &[448]);     // 175 => [448]
            map.insert(303, &[704]);     // 303 => [704]
            map.insert(440, &[1216]);     // 440 => [1216]
            map.insert(559, &[2240]);     // 559 => [2240]
            map.insert(662, &[4288]);     // 662 => [4288]
            map.insert(885, &[8384]);     // 885 => [8384]
            map.insert(971, &[16576]);     // 971 => [16576]
            map.insert(448, &[832]);     // 448 => [832]
            map.insert(343, &[1344]);     // 343 => [1344]
            map.insert(704, &[2368]);     // 704 => [2368]
            map.insert(633, &[4416]);     // 633 => [4416]
            map.insert(922, &[8512]);     // 922 => [8512]
            map.insert(804, &[16704]);     // 804 => [16704]
            map.insert(215, &[1600]);     // 215 => [1600]
            map.insert(832, &[2624]);     // 832 => [2624]
            map.insert(1017, &[4672]);     // 1017 => [4672]
            map.insert(538, &[8768]);     // 538 => [8768]
            map.insert(676, &[16960]);     // 676 => [16960]
            map.insert(983, &[3136]);     // 983 => [3136]
            map.insert(878, &[5184]);     // 878 => [5184]
            map.insert(653, &[9280]);     // 653 => [9280]
            map.insert(563, &[17472]);     // 563 => [17472]
            map.insert(249, &[6208]);     // 249 => [6208]
            map.insert(282, &[10304]);     // 282 => [10304]
            map.insert(420, &[18496]);     // 420 => [18496]
            map.insert(419, &[12352]);     // 419 => [12352]
            map.insert(285, &[20544]);     // 285 => [20544]
            map.insert(254, &[24640]);     // 254 => [24640]
            map.insert(495, &[896]);     // 495 => [896]
            map.insert(376, &[1408]);     // 376 => [1408]
            map.insert(751, &[2432]);     // 751 => [2432]
            map.insert(598, &[4480]);     // 598 => [4480]
            map.insert(949, &[8576]);     // 949 => [8576]
            map.insert(779, &[16768]);     // 779 => [16768]
            map.insert(248, &[1664]);     // 248 => [1664]
            map.insert(879, &[2688]);     // 879 => [2688]
            map.insert(982, &[4736]);     // 982 => [4736]
            map.insert(565, &[8832]);     // 565 => [8832]
            map.insert(651, &[17024]);     // 651 => [17024]
            map.insert(1016, &[3200]);     // 1016 => [3200]
            map.insert(833, &[5248]);     // 833 => [5248]
            map.insert(674, &[9344]);     // 674 => [9344]
            map.insert(540, &[17536]);     // 540 => [17536]
            map.insert(214, &[6272]);     // 214 => [6272]
            map.insert(309, &[10368]);     // 309 => [10368]
            map.insert(395, &[18560]);     // 395 => [18560]
            map.insert(396, &[12416]);     // 396 => [12416]
            map.insert(306, &[20608]);     // 306 => [20608]
            map.insert(209, &[24704]);     // 209 => [24704]
            map.insert(23, &[1792]);     // 23 => [1792]
            map.insert(896, &[2816]);     // 896 => [2816]
            map.insert(825, &[4864]);     // 825 => [4864]
            map.insert(730, &[8960]);     // 730 => [8960]
            map.insert(612, &[17152]);     // 612 => [17152]
            map.insert(791, &[3328]);     // 791 => [3328]
            map.insert(942, &[5376]);     // 942 => [5376]
            map.insert(589, &[9472]);     // 589 => [9472]
            map.insert(755, &[17664]);     // 755 => [17664]
            map.insert(57, &[6400]);     // 57 => [6400]
            map.insert(474, &[10496]);     // 474 => [10496]
            map.insert(356, &[18688]);     // 356 => [18688]
            map.insert(355, &[12544]);     // 355 => [12544]
            map.insert(477, &[20736]);     // 477 => [20736]
            map.insert(62, &[24832]);     // 62 => [24832]
            map.insert(663, &[3584]);     // 663 => [3584]
            map.insert(558, &[5632]);     // 558 => [5632]
            map.insert(973, &[9728]);     // 973 => [9728]
            map.insert(883, &[17920]);     // 883 => [17920]
            map.insert(441, &[6656]);     // 441 => [6656]
            map.insert(90, &[10752]);     // 90 => [10752]
            map.insert(228, &[18944]);     // 228 => [18944]
            map.insert(227, &[12800]);     // 227 => [12800]
            map.insert(93, &[20992]);     // 93 => [20992]
            map.insert(446, &[25088]);     // 446 => [25088]
            map.insert(302, &[7168]);     // 302 => [7168]
            map.insert(205, &[11264]);     // 205 => [11264]
            map.insert(115, &[19456]);     // 115 => [19456]
            map.insert(116, &[13312]);     // 116 => [13312]
            map.insert(202, &[21504]);     // 202 => [21504]
            map.insert(297, &[25600]);     // 297 => [25600]
            map.insert(995, &[14336]);     // 995 => [14336]
            map.insert(861, &[22528]);     // 861 => [22528]
            map.insert(702, &[26624]);     // 702 => [26624]
            map.insert(519, &[28672]);     // 519 => [28672]
            map.insert(27, &[27]);     // 27 => [27]
            map.insert(139, &[267]);     // 139 => [267]
            map.insert(267, &[523]);     // 267 => [523]
            map.insert(412, &[1035]);     // 412 => [1035]
            map.insert(523, &[2059]);     // 523 => [2059]
            map.insert(690, &[4107]);     // 690 => [4107]
            map.insert(849, &[8203]);     // 849 => [8203]
            map.insert(1007, &[16395]);     // 1007 => [16395]
            map.insert(51, &[51]);     // 51 => [51]
            map.insert(83, &[83]);     // 83 => [83]
            map.insert(124, &[147]);     // 124 => [147]
            map.insert(531, &[2067]);     // 531 => [2067]
            map.insert(682, &[4115]);     // 682 => [4115]
            map.insert(841, &[8211]);     // 841 => [8211]
            map.insert(1015, &[16403]);     // 1015 => [16403]
            map.insert(163, &[291]);     // 163 => [291]
            map.insert(291, &[547]);     // 291 => [547]
            map.insert(436, &[1059]);     // 436 => [1059]
            map.insert(547, &[2083]);     // 547 => [2083]
            map.insert(666, &[4131]);     // 666 => [4131]
            map.insert(889, &[8227]);     // 889 => [8227]
            map.insert(967, &[16419]);     // 967 => [16419]
            map.insert(195, &[323]);     // 195 => [323]
            map.insert(323, &[579]);     // 323 => [579]
            map.insert(468, &[1091]);     // 468 => [1091]
            map.insert(579, &[2115]);     // 579 => [2115]
            map.insert(762, &[4163]);     // 762 => [4163]
            map.insert(793, &[8259]);     // 793 => [8259]
            map.insert(935, &[16451]);     // 935 => [16451]
            map.insert(236, &[387]);     // 236 => [387]
            map.insert(364, &[643]);     // 364 => [643]
            map.insert(507, &[1155]);     // 507 => [1155]
            map.insert(620, &[2179]);     // 620 => [2179]
            map.insert(725, &[4227]);     // 725 => [4227]
            map.insert(822, &[8323]);     // 822 => [8323]
            map.insert(904, &[16515]);     // 904 => [16515]
            map.insert(643, &[2307]);     // 643 => [2307]
            map.insert(570, &[4355]);     // 570 => [4355]
            map.insert(985, &[8451]);     // 985 => [8451]
            map.insert(871, &[16643]);     // 871 => [16643]
            map.insert(771, &[2563]);     // 771 => [2563]
            map.insert(954, &[4611]);     // 954 => [4611]
            map.insert(601, &[8707]);     // 601 => [8707]
            map.insert(743, &[16899]);     // 743 => [16899]
            map.insert(916, &[3075]);     // 916 => [3075]
            map.insert(813, &[5123]);     // 813 => [5123]
            map.insert(718, &[9219]);     // 718 => [9219]
            map.insert(624, &[17411]);     // 624 => [17411]
            map.insert(29, &[29]);     // 29 => [29]
            map.insert(141, &[269]);     // 141 => [269]
            map.insert(269, &[525]);     // 269 => [525]
            map.insert(410, &[1037]);     // 410 => [1037]
            map.insert(525, &[2061]);     // 525 => [2061]
            map.insert(692, &[4109]);     // 692 => [4109]
            map.insert(855, &[8205]);     // 855 => [8205]
            map.insert(1001, &[16397]);     // 1001 => [16397]
            map.insert(53, &[53]);     // 53 => [53]
            map.insert(85, &[85]);     // 85 => [85]
            map.insert(122, &[149]);     // 122 => [149]
            map.insert(533, &[2069]);     // 533 => [2069]
            map.insert(684, &[4117]);     // 684 => [4117]
            map.insert(847, &[8213]);     // 847 => [8213]
            map.insert(1009, &[16405]);     // 1009 => [16405]
            map.insert(165, &[293]);     // 165 => [293]
            map.insert(293, &[549]);     // 293 => [549]
            map.insert(434, &[1061]);     // 434 => [1061]
            map.insert(549, &[2085]);     // 549 => [2085]
            map.insert(668, &[4133]);     // 668 => [4133]
            map.insert(895, &[8229]);     // 895 => [8229]
            map.insert(961, &[16421]);     // 961 => [16421]
            map.insert(197, &[325]);     // 197 => [325]
            map.insert(325, &[581]);     // 325 => [581]
            map.insert(466, &[1093]);     // 466 => [1093]
            map.insert(581, &[2117]);     // 581 => [2117]
            map.insert(764, &[4165]);     // 764 => [4165]
            map.insert(799, &[8261]);     // 799 => [8261]
            map.insert(929, &[16453]);     // 929 => [16453]
            map.insert(234, &[389]);     // 234 => [389]
            map.insert(362, &[645]);     // 362 => [645]
            map.insert(509, &[1157]);     // 509 => [1157]
            map.insert(618, &[2181]);     // 618 => [2181]
            map.insert(723, &[4229]);     // 723 => [4229]
            map.insert(816, &[8325]);     // 816 => [8325]
            map.insert(910, &[16517]);     // 910 => [16517]
            map.insert(645, &[2309]);     // 645 => [2309]
            map.insert(572, &[4357]);     // 572 => [4357]
            map.insert(991, &[8453]);     // 991 => [8453]
            map.insert(865, &[16645]);     // 865 => [16645]
            map.insert(773, &[2565]);     // 773 => [2565]
            map.insert(956, &[4613]);     // 956 => [4613]
            map.insert(607, &[8709]);     // 607 => [8709]
            map.insert(737, &[16901]);     // 737 => [16901]
            map.insert(914, &[3077]);     // 914 => [3077]
            map.insert(811, &[5125]);     // 811 => [5125]
            map.insert(712, &[9221]);     // 712 => [9221]
            map.insert(630, &[17413]);     // 630 => [17413]
            map.insert(89, &[89]);     // 89 => [89]
            map.insert(118, &[153]);     // 118 => [153]
            map.insert(281, &[537]);     // 281 => [537]
            map.insert(398, &[1049]);     // 398 => [1049]
            map.insert(835, &[8217]);     // 835 => [8217]
            map.insert(1021, &[16409]);     // 1021 => [16409]
            map.insert(201, &[329]);     // 201 => [329]
            map.insert(329, &[585]);     // 329 => [585]
            map.insert(478, &[1097]);     // 478 => [1097]
            map.insert(585, &[2121]);     // 585 => [2121]
            map.insert(752, &[4169]);     // 752 => [4169]
            map.insert(787, &[8265]);     // 787 => [8265]
            map.insert(941, &[16457]);     // 941 => [16457]
            map.insert(230, &[393]);     // 230 => [393]
            map.insert(358, &[649]);     // 358 => [649]
            map.insert(497, &[1161]);     // 497 => [1161]
            map.insert(614, &[2185]);     // 614 => [2185]
            map.insert(735, &[4233]);     // 735 => [4233]
            map.insert(828, &[8329]);     // 828 => [8329]
            map.insert(898, &[16521]);     // 898 => [16521]
            map.insert(393, &[777]);     // 393 => [777]
            map.insert(286, &[1289]);     // 286 => [1289]
            map.insert(979, &[8457]);     // 979 => [8457]
            map.insert(877, &[16649]);     // 877 => [16649]
            map.insert(777, &[2569]);     // 777 => [2569]
            map.insert(944, &[4617]);     // 944 => [4617]
            map.insert(926, &[3081]);     // 926 => [3081]
            map.insert(807, &[5129]);     // 807 => [5129]
            map.insert(339, &[10249]);     // 339 => [10249]
            map.insert(493, &[18441]);     // 493 => [18441]
            map.insert(490, &[12297]);     // 490 => [12297]
            map.insert(340, &[20489]);     // 340 => [20489]
            map.insert(113, &[113]);     // 113 => [113]
            map.insert(94, &[177]);     // 94 => [177]
            map.insert(305, &[561]);     // 305 => [561]
            map.insert(422, &[1073]);     // 422 => [1073]
            map.insert(875, &[8241]);     // 875 => [8241]
            map.insert(981, &[16433]);     // 981 => [16433]
            map.insert(337, &[593]);     // 337 => [593]
            map.insert(454, &[1105]);     // 454 => [1105]
            map.insert(593, &[2129]);     // 593 => [2129]
            map.insert(744, &[4177]);     // 744 => [4177]
            map.insert(382, &[657]);     // 382 => [657]
            map.insert(489, &[1169]);     // 489 => [1169]
            map.insert(638, &[2193]);     // 638 => [2193]
            map.insert(711, &[4241]);     // 711 => [4241]
            map.insert(785, &[2577]);     // 785 => [2577]
            map.insert(936, &[4625]);     // 936 => [4625]
            map.insert(587, &[8721]);     // 587 => [8721]
            map.insert(757, &[16913]);     // 757 => [16913]
            map.insert(902, &[3089]);     // 902 => [3089]
            map.insert(831, &[5137]);     // 831 => [5137]
            map.insert(732, &[9233]);     // 732 => [9233]
            map.insert(610, &[17425]);     // 610 => [17425]
            map.insert(331, &[10257]);     // 331 => [10257]
            map.insert(501, &[18449]);     // 501 => [18449]
            map.insert(498, &[12305]);     // 498 => [12305]
            map.insert(332, &[20497]);     // 332 => [20497]
            map.insert(225, &[353]);     // 225 => [353]
            map.insert(353, &[609]);     // 353 => [609]
            map.insert(502, &[1121]);     // 502 => [1121]
            map.insert(609, &[2145]);     // 609 => [2145]
            map.insert(728, &[4193]);     // 728 => [4193]
            map.insert(827, &[8289]);     // 827 => [8289]
            map.insert(901, &[16481]);     // 901 => [16481]
            map.insert(206, &[417]);     // 206 => [417]
            map.insert(334, &[673]);     // 334 => [673]
            map.insert(473, &[1185]);     // 473 => [1185]
            map.insert(590, &[2209]);     // 590 => [2209]
            map.insert(759, &[4257]);     // 759 => [4257]
            map.insert(788, &[8353]);     // 788 => [8353]
            map.insert(938, &[16545]);     // 938 => [16545]
            map.insert(417, &[801]);     // 417 => [801]
            map.insert(310, &[1313]);     // 310 => [1313]
            map.insert(1019, &[8481]);     // 1019 => [8481]
            map.insert(837, &[16673]);     // 837 => [16673]
            map.insert(801, &[2593]);     // 801 => [2593]
            map.insert(920, &[4641]);     // 920 => [4641]
            map.insert(950, &[3105]);     // 950 => [3105]
            map.insert(783, &[5153]);     // 783 => [5153]
            map.insert(379, &[10273]);     // 379 => [10273]
            map.insert(453, &[18465]);     // 453 => [18465]
            map.insert(450, &[12321]);     // 450 => [12321]
            map.insert(380, &[20513]);     // 380 => [20513]
            map.insert(449, &[833]);     // 449 => [833]
            map.insert(342, &[1345]);     // 342 => [1345]
            map.insert(705, &[2369]);     // 705 => [2369]
            map.insert(632, &[4417]);     // 632 => [4417]
            map.insert(539, &[8769]);     // 539 => [8769]
            map.insert(677, &[16961]);     // 677 => [16961]
            map.insert(652, &[9281]);     // 652 => [9281]
            map.insert(562, &[17473]);     // 562 => [17473]
            map.insert(283, &[10305]);     // 283 => [10305]
            map.insert(421, &[18497]);     // 421 => [18497]
            map.insert(418, &[12353]);     // 418 => [12353]
            map.insert(284, &[20545]);     // 284 => [20545]
            map.insert(494, &[897]);     // 494 => [897]
            map.insert(377, &[1409]);     // 377 => [1409]
            map.insert(750, &[2433]);     // 750 => [2433]
            map.insert(599, &[4481]);     // 599 => [4481]
            map.insert(564, &[8833]);     // 564 => [8833]
            map.insert(650, &[17025]);     // 650 => [17025]
            map.insert(675, &[9345]);     // 675 => [9345]
            map.insert(541, &[17537]);     // 541 => [17537]
            map.insert(308, &[10369]);     // 308 => [10369]
            map.insert(394, &[18561]);     // 394 => [18561]
            map.insert(397, &[12417]);     // 397 => [12417]
            map.insert(307, &[20609]);     // 307 => [20609]
            map.insert(897, &[2817]);     // 897 => [2817]
            map.insert(824, &[4865]);     // 824 => [4865]
            map.insert(731, &[8961]);     // 731 => [8961]
            map.insert(613, &[17153]);     // 613 => [17153]
            map.insert(790, &[3329]);     // 790 => [3329]
            map.insert(943, &[5377]);     // 943 => [5377]
            map.insert(588, &[9473]);     // 588 => [9473]
            map.insert(754, &[17665]);     // 754 => [17665]
            map.insert(475, &[10497]);     // 475 => [10497]
            map.insert(357, &[18689]);     // 357 => [18689]
            map.insert(354, &[12545]);     // 354 => [12545]
            map.insert(476, &[20737]);     // 476 => [20737]
            map.insert(91, &[10753]);     // 91 => [10753]
            map.insert(229, &[18945]);     // 229 => [18945]
            map.insert(226, &[12801]);     // 226 => [12801]
            map.insert(92, &[20993]);     // 92 => [20993]
            map.insert(204, &[11265]);     // 204 => [11265]
            map.insert(114, &[19457]);     // 114 => [19457]
            map.insert(117, &[13313]);     // 117 => [13313]
            map.insert(203, &[21505]);     // 203 => [21505]
            map.insert(30, &[30]);     // 30 => [30]
            map.insert(142, &[270]);     // 142 => [270]
            map.insert(270, &[526]);     // 270 => [526]
            map.insert(409, &[1038]);     // 409 => [1038]
            map.insert(526, &[2062]);     // 526 => [2062]
            map.insert(695, &[4110]);     // 695 => [4110]
            map.insert(852, &[8206]);     // 852 => [8206]
            map.insert(1002, &[16398]);     // 1002 => [16398]
            map.insert(54, &[54]);     // 54 => [54]
            map.insert(86, &[86]);     // 86 => [86]
            map.insert(121, &[150]);     // 121 => [150]
            map.insert(534, &[2070]);     // 534 => [2070]
            map.insert(687, &[4118]);     // 687 => [4118]
            map.insert(844, &[8214]);     // 844 => [8214]
            map.insert(1010, &[16406]);     // 1010 => [16406]
            map.insert(166, &[294]);     // 166 => [294]
            map.insert(294, &[550]);     // 294 => [550]
            map.insert(433, &[1062]);     // 433 => [1062]
            map.insert(550, &[2086]);     // 550 => [2086]
            map.insert(671, &[4134]);     // 671 => [4134]
            map.insert(892, &[8230]);     // 892 => [8230]
            map.insert(962, &[16422]);     // 962 => [16422]
            map.insert(198, &[326]);     // 198 => [326]
            map.insert(326, &[582]);     // 326 => [582]
            map.insert(465, &[1094]);     // 465 => [1094]
            map.insert(582, &[2118]);     // 582 => [2118]
            map.insert(767, &[4166]);     // 767 => [4166]
            map.insert(796, &[8262]);     // 796 => [8262]
            map.insert(930, &[16454]);     // 930 => [16454]
            map.insert(233, &[390]);     // 233 => [390]
            map.insert(361, &[646]);     // 361 => [646]
            map.insert(510, &[1158]);     // 510 => [1158]
            map.insert(617, &[2182]);     // 617 => [2182]
            map.insert(720, &[4230]);     // 720 => [4230]
            map.insert(819, &[8326]);     // 819 => [8326]
            map.insert(909, &[16518]);     // 909 => [16518]
            map.insert(646, &[2310]);     // 646 => [2310]
            map.insert(575, &[4358]);     // 575 => [4358]
            map.insert(988, &[8454]);     // 988 => [8454]
            map.insert(866, &[16646]);     // 866 => [16646]
            map.insert(774, &[2566]);     // 774 => [2566]
            map.insert(959, &[4614]);     // 959 => [4614]
            map.insert(604, &[8710]);     // 604 => [8710]
            map.insert(738, &[16902]);     // 738 => [16902]
            map.insert(913, &[3078]);     // 913 => [3078]
            map.insert(808, &[5126]);     // 808 => [5126]
            map.insert(715, &[9222]);     // 715 => [9222]
            map.insert(629, &[17414]);     // 629 => [17414]
            map.insert(58, &[58]);     // 58 => [58]
            map.insert(154, &[282]);     // 154 => [282]
            map.insert(1022, &[16410]);     // 1022 => [16410]
            map.insert(170, &[298]);     // 170 => [298]
            map.insert(298, &[554]);     // 298 => [554]
            map.insert(445, &[1066]);     // 445 => [1066]
            map.insert(554, &[2090]);     // 554 => [2090]
            map.insert(659, &[4138]);     // 659 => [4138]
            map.insert(880, &[8234]);     // 880 => [8234]
            map.insert(974, &[16426]);     // 974 => [16426]
            map.insert(976, &[8458]);     // 976 => [8458]
            map.insert(157, &[1546]);     // 157 => [1546]
            map.insert(947, &[4618]);     // 947 => [4618]
            map.insert(925, &[3082]);     // 925 => [3082]
            map.insert(179, &[6154]);     // 179 => [6154]
            map.insert(180, &[24586]);     // 180 => [24586]
            map.insert(178, &[306]);     // 178 => [306]
            map.insert(872, &[8242]);     // 872 => [8242]
            map.insert(61, &[210]);     // 61 => [210]
            map.insert(210, &[338]);     // 210 => [338]
            map.insert(747, &[4178]);     // 747 => [4178]
            map.insert(253, &[402]);     // 253 => [402]
            map.insert(637, &[2194]);     // 637 => [2194]
            map.insert(658, &[2322]);     // 658 => [2322]
            map.insert(555, &[4370]);     // 555 => [4370]
            map.insert(968, &[8466]);     // 968 => [8466]
            map.insert(886, &[16658]);     // 886 => [16658]
            map.insert(171, &[6162]);     // 171 => [6162]
            map.insert(172, &[24594]);     // 172 => [24594]
            map.insert(838, &[16674]);     // 838 => [16674]
            map.insert(181, &[1570]);     // 181 => [1570]
            map.insert(802, &[2594]);     // 802 => [2594]
            map.insert(780, &[5154]);     // 780 => [5154]
            map.insert(155, &[6178]);     // 155 => [6178]
            map.insert(156, &[24610]);     // 156 => [24610]
            map.insert(173, &[450]);     // 173 => [450]
            map.insert(301, &[706]);     // 301 => [706]
            map.insert(442, &[1218]);     // 442 => [1218]
            map.insert(557, &[2242]);     // 557 => [2242]
            map.insert(660, &[4290]);     // 660 => [4290]
            map.insert(887, &[8386]);     // 887 => [8386]
            map.insert(969, &[16578]);     // 969 => [16578]
            map.insert(706, &[2370]);     // 706 => [2370]
            map.insert(213, &[1602]);     // 213 => [1602]
            map.insert(678, &[16962]);     // 678 => [16962]
            map.insert(655, &[9282]);     // 655 => [9282]
            map.insert(251, &[6210]);     // 251 => [6210]
            map.insert(252, &[24642]);     // 252 => [24642]
            map.insert(596, &[4482]);     // 596 => [4482]
            map.insert(250, &[1666]);     // 250 => [1666]
            map.insert(567, &[8834]);     // 567 => [8834]
            map.insert(542, &[17538]);     // 542 => [17538]
            map.insert(212, &[6274]);     // 212 => [6274]
            map.insert(211, &[24706]);     // 211 => [24706]
            map.insert(59, &[6402]);     // 59 => [6402]
            map.insert(60, &[24834]);     // 60 => [24834]
            map.insert(661, &[3586]);     // 661 => [3586]
            map.insert(556, &[5634]);     // 556 => [5634]
            map.insert(975, &[9730]);     // 975 => [9730]
            map.insert(881, &[17922]);     // 881 => [17922]
            map.insert(443, &[6658]);     // 443 => [6658]
            map.insert(444, &[25090]);     // 444 => [25090]
            map.insert(300, &[7170]);     // 300 => [7170]
            map.insert(299, &[25602]);     // 299 => [25602]
            map.insert(120, &[120]);     // 120 => [120]
            map.insert(87, &[184]);     // 87 => [184]
            map.insert(312, &[568]);     // 312 => [568]
            map.insert(431, &[1080]);     // 431 => [1080]
            map.insert(55, &[216]);     // 55 => [216]
            map.insert(216, &[344]);     // 216 => [344]
            map.insert(463, &[1112]);     // 463 => [1112]
            map.insert(247, &[408]);     // 247 => [408]
            map.insert(375, &[664]);     // 375 => [664]
            map.insert(408, &[792]);     // 408 => [792]
            map.insert(271, &[1304]);     // 271 => [1304]
            map.insert(143, &[1560]);     // 143 => [1560]
            map.insert(232, &[360]);     // 232 => [360]
            map.insert(360, &[616]);     // 360 => [616]
            map.insert(511, &[1128]);     // 511 => [1128]
            map.insert(616, &[2152]);     // 616 => [2152]
            map.insert(721, &[4200]);     // 721 => [4200]
            map.insert(818, &[8296]);     // 818 => [8296]
            map.insert(908, &[16488]);     // 908 => [16488]
            map.insert(199, &[424]);     // 199 => [424]
            map.insert(327, &[680]);     // 327 => [680]
            map.insert(464, &[1192]);     // 464 => [1192]
            map.insert(583, &[2216]);     // 583 => [2216]
            map.insert(766, &[4264]);     // 766 => [4264]
            map.insert(797, &[8360]);     // 797 => [8360]
            map.insert(931, &[16552]);     // 931 => [16552]
            map.insert(424, &[808]);     // 424 => [808]
            map.insert(319, &[1320]);     // 319 => [1320]
            map.insert(370, &[10280]);     // 370 => [10280]
            map.insert(460, &[18472]);     // 460 => [18472]
            map.insert(459, &[12328]);     // 459 => [12328]
            map.insert(373, &[20520]);     // 373 => [20520]
            map.insert(167, &[456]);     // 167 => [456]
            map.insert(295, &[712]);     // 295 => [712]
            map.insert(432, &[1224]);     // 432 => [1224]
            map.insert(551, &[2248]);     // 551 => [2248]
            map.insert(670, &[4296]);     // 670 => [4296]
            map.insert(893, &[8392]);     // 893 => [8392]
            map.insert(963, &[16584]);     // 963 => [16584]
            map.insert(456, &[840]);     // 456 => [840]
            map.insert(223, &[1608]);     // 223 => [1608]
            map.insert(241, &[6216]);     // 241 => [6216]
            map.insert(428, &[18504]);     // 428 => [18504]
            map.insert(427, &[12360]);     // 427 => [12360]
            map.insert(246, &[24648]);     // 246 => [24648]
            map.insert(368, &[1416]);     // 368 => [1416]
            map.insert(240, &[1672]);     // 240 => [1672]
            map.insert(222, &[6280]);     // 222 => [6280]
            map.insert(317, &[10376]);     // 317 => [10376]
            map.insert(314, &[20616]);     // 314 => [20616]
            map.insert(217, &[24712]);     // 217 => [24712]
            map.insert(31, &[1800]);     // 31 => [1800]
            map.insert(1003, &[14344]);     // 1003 => [14344]
            map.insert(853, &[22536]);     // 853 => [22536]
            map.insert(694, &[26632]);     // 694 => [26632]
            map.insert(527, &[28680]);     // 527 => [28680]
            map.insert(912, &[2832]);     // 912 => [2832]
            map.insert(809, &[4880]);     // 809 => [4880]
            map.insert(714, &[8976]);     // 714 => [8976]
            map.insert(628, &[17168]);     // 628 => [17168]
            map.insert(775, &[3344]);     // 775 => [3344]
            map.insert(958, &[5392]);     // 958 => [5392]
            map.insert(605, &[9488]);     // 605 => [9488]
            map.insert(739, &[17680]);     // 739 => [17680]
            map.insert(458, &[10512]);     // 458 => [10512]
            map.insert(372, &[18704]);     // 372 => [18704]
            map.insert(371, &[12560]);     // 371 => [12560]
            map.insert(461, &[20752]);     // 461 => [20752]
            map.insert(647, &[3600]);     // 647 => [3600]
            map.insert(574, &[5648]);     // 574 => [5648]
            map.insert(989, &[9744]);     // 989 => [9744]
            map.insert(867, &[17936]);     // 867 => [17936]
            map.insert(425, &[6672]);     // 425 => [6672]
            map.insert(244, &[18960]);     // 244 => [18960]
            map.insert(243, &[12816]);     // 243 => [12816]
            map.insert(430, &[25104]);     // 430 => [25104]
            map.insert(318, &[7184]);     // 318 => [7184]
            map.insert(221, &[11280]);     // 221 => [11280]
            map.insert(218, &[21520]);     // 218 => [21520]
            map.insert(313, &[25616]);     // 313 => [25616]
            map.insert(1011, &[14352]);     // 1011 => [14352]
            map.insert(845, &[22544]);     // 845 => [22544]
            map.insert(686, &[26640]);     // 686 => [26640]
            map.insert(535, &[28688]);     // 535 => [28688]
            map.insert(1023, &[16411]);     // 1023 => [16411]
            map.insert(977, &[8459]);     // 977 => [8459]
            map.insert(946, &[4619]);     // 946 => [4619]
            map.insert(924, &[3083]);     // 924 => [3083]
            map.insert(873, &[8243]);     // 873 => [8243]
            map.insert(746, &[4179]);     // 746 => [4179]
            map.insert(636, &[2195]);     // 636 => [2195]
            map.insert(839, &[16675]);     // 839 => [16675]
            map.insert(803, &[2595]);     // 803 => [2595]
            map.insert(781, &[5155]);     // 781 => [5155]
            map.insert(707, &[2371]);     // 707 => [2371]
            map.insert(679, &[16963]);     // 679 => [16963]
            map.insert(654, &[9283]);     // 654 => [9283]
            map.insert(597, &[4483]);     // 597 => [4483]
            map.insert(566, &[8835]);     // 566 => [8835]
            map.insert(543, &[17539]);     // 543 => [17539]
            map.insert(462, &[1113]);     // 462 => [1113]
            map.insert(374, &[665]);     // 374 => [665]
            map.insert(457, &[841]);     // 457 => [841]
            map.insert(429, &[18505]);     // 429 => [18505]
            map.insert(426, &[12361]);     // 426 => [12361]
            map.insert(369, &[1417]);     // 369 => [1417]
            map.insert(316, &[10377]);     // 316 => [10377]
            map.insert(315, &[20617]);     // 315 => [20617]
            map.insert(245, &[18961]);     // 245 => [18961]
            map.insert(242, &[12817]);     // 242 => [12817]
            map.insert(220, &[11281]);     // 220 => [11281]
            map.insert(219, &[21521]);     // 219 => [21521]
            
            SYNDROME_MAP = Box::into_raw(map);
        }
    });
}

impl GuavaCode15_5 {
    fn parity_check_matrix_transposed(&self) -> &BinMatrix {
        init();
        unsafe {
            PARITY_MATRIX_T.as_ref().unwrap()
        }
    }
}

impl BinaryCode for GuavaCode15_5 {
    fn name(&self) -> String {
        "[15, 5] Guava code".to_owned()
    }

    fn length(&self) -> usize {
        15
    }

    fn dimension(&self) -> usize {
        5
    }

    fn generator_matrix(&self) -> &BinMatrix {
        init();
        unsafe {
            GENERATOR_MATRIX.as_ref().unwrap()
        }
    }

    fn parity_check_matrix(&self) -> &BinMatrix {
        init();
        unsafe {
            PARITY_MATRIX.as_ref().unwrap()
        }
    }

    fn decode_to_code(&self, c: &BinVector) -> Result<BinVector, &str> {
        init();
        let map = unsafe {
            SYNDROME_MAP.as_ref().unwrap()
        };
        debug_assert_eq!(c.len(), self.length(), "the length doesn't match the expected length (length of the code)");
        let he = c * self.parity_check_matrix_transposed();
        let mut error = BinVector::with_capacity(15);
        let stor = unsafe { error.get_storage_mut() };
        let errbytes = map[&he.as_u64()];
        debug_assert_eq!(errbytes.len(), 15 / 64 + if 15 % 64 != 0 { 1 } else { 0 });
        stor.clear();
        stor.extend_from_slice(&errbytes[..]);
        unsafe { error.set_len(15) };
        debug_assert_eq!(error.len(), self.length(), "internal: the error vector is of the wrong length");
        let result = c + &error;
        debug_assert_eq!(result.len(), self.length(), "internal: the result vector is of the wrong length");
        debug_assert_eq!((&result * self.parity_check_matrix_transposed()).count_ones(), 0);
        Ok(result)
    }

    fn decode_to_message(&self, c: &BinVector) -> Result<BinVector, &str> {
        
        let mut codeword = self.decode_to_code(c)?;
        codeword.truncate(5);
        Ok(codeword)
        
    }

    fn decode_slice(&self, c: &mut [u64]) {
        init();
        
        debug_assert_eq!(c[15 / 64] & !((1 << 15) - 1), 0, "this message has excess bits");

        let map = unsafe {
            SYNDROME_MAP.as_ref().unwrap()
        };
        let he = &BinMatrix::from_slices(&[&c[..]], self.length()) * self.parity_check_matrix_transposed();
        let error = map[unsafe { &he.get_word_unchecked(0, 0) }];
        c.iter_mut().zip(error.iter().copied()).for_each(|(sample, error)| *sample ^= error as u64);
    }

    
}

#[cfg(test)]
mod tests {
    use super::*;
    use m4ri_rust::friendly::BinVector;
    use crate::oracle::Sample;

    #[test]
    fn size() {
        let code = GuavaCode15_5.generator_matrix();
        assert_eq!(code.ncols(), 15);
        assert_eq!(code.nrows(), 5);
    }

    #[test]
    fn test_decode_sample() {
        let code = GuavaCode15_5;
        for _ in 0..1000 {
            // setup
            let vec = BinVector::random(code.length());
            let mut sample_a = Sample::from_binvector(&vec, false);
            let mut sample_b = Sample::from_binvector(&vec, true);
            
            let decoded_vec = code.decode_to_message(&vec).unwrap();
            println!("decoded_vec: {:?}", decoded_vec);

            // test vectors
            let decoded_vec_sample_a = Sample::from_binvector(&decoded_vec, false);
            let decoded_vec_sample_b = Sample::from_binvector(&decoded_vec, true);

            code.decode_sample(&mut sample_a);
            code.decode_sample(&mut sample_b);
            assert_eq!(sample_a.get_product(), false);
            assert_eq!(sample_b.get_product(), true);
            assert_eq!(sample_a, decoded_vec_sample_a);
            assert_eq!(sample_b, decoded_vec_sample_b);
        }
    }

    #[test]
    fn random_decode_tests() {

        
        {
            let code = GuavaCode15_5;
            let randvec = BinVector::from_bools(&[false, false, true, false, false, false, true, false, false, false, false, true, true, true, true]);
            let codeword = BinVector::from_bools(&[true, true, true, false, false, false, false, false, false, false, false, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode15_5;
            let randvec = BinVector::from_bools(&[false, false, false, true, false, true, true, true, true, false, false, true, false, false, true]);
            let codeword = BinVector::from_bools(&[false, false, false, true, false, true, true, true, false, false, false, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode15_5;
            let randvec = BinVector::from_bools(&[false, true, false, false, true, true, true, true, true, false, true, false, true, true, false]);
            let codeword = BinVector::from_bools(&[false, false, true, false, true, true, true, false, false, false, true, false, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode15_5;
            let randvec = BinVector::from_bools(&[false, true, false, true, false, true, false, true, false, false, false, false, true, false, true]);
            let codeword = BinVector::from_bools(&[false, true, false, false, true, true, false, true, false, true, false, false, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode15_5;
            let randvec = BinVector::from_bools(&[false, true, false, true, false, false, true, true, false, true, true, false, false, false, false]);
            let codeword = BinVector::from_bools(&[false, false, false, true, true, true, true, true, true, true, true, false, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode15_5;
            let randvec = BinVector::from_bools(&[true, false, true, false, true, true, false, false, false, false, false, false, false, false, true]);
            let codeword = BinVector::from_bools(&[false, true, true, true, true, true, false, false, true, false, false, false, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode15_5;
            let randvec = BinVector::from_bools(&[true, false, true, true, true, false, true, true, false, true, true, true, true, false, true]);
            let codeword = BinVector::from_bools(&[true, false, true, true, true, false, true, false, false, true, false, false, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode15_5;
            let randvec = BinVector::from_bools(&[true, false, true, false, true, false, true, false, false, false, false, false, true, false, false]);
            let codeword = BinVector::from_bools(&[true, false, true, true, true, false, true, false, false, true, false, false, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode15_5;
            let randvec = BinVector::from_bools(&[true, false, false, false, false, false, true, false, true, true, false, true, true, true, false]);
            let codeword = BinVector::from_bools(&[true, true, false, false, false, true, true, false, true, true, false, false, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode15_5;
            let randvec = BinVector::from_bools(&[false, false, false, true, false, false, true, false, false, false, false, true, false, false, false]);
            let codeword = BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode15_5;
            let randvec = BinVector::from_bools(&[false, true, false, false, false, true, true, false, true, false, true, false, false, false, false]);
            let codeword = BinVector::from_bools(&[false, true, false, true, false, false, true, false, true, false, true, false, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode15_5;
            let randvec = BinVector::from_bools(&[true, false, false, false, false, true, true, false, false, true, true, false, false, false, false]);
            let codeword = BinVector::from_bools(&[true, false, false, true, false, true, false, false, false, true, true, false, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode15_5;
            let randvec = BinVector::from_bools(&[true, true, false, true, true, false, false, false, true, false, true, true, true, false, false]);
            let codeword = BinVector::from_bools(&[true, false, false, true, true, true, false, false, true, false, false, true, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode15_5;
            let randvec = BinVector::from_bools(&[false, true, false, true, false, true, false, false, false, false, false, true, true, false, false]);
            let codeword = BinVector::from_bools(&[false, true, true, true, false, true, false, false, false, true, true, true, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode15_5;
            let randvec = BinVector::from_bools(&[true, true, false, false, false, false, false, false, false, true, false, true, true, false, true]);
            let codeword = BinVector::from_bools(&[true, true, true, false, false, false, false, false, false, false, false, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode15_5;
            let randvec = BinVector::from_bools(&[false, true, true, false, false, false, true, false, false, false, false, true, true, true, true]);
            let codeword = BinVector::from_bools(&[true, true, true, false, false, false, false, false, false, false, false, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode15_5;
            let randvec = BinVector::from_bools(&[true, true, true, false, false, true, false, false, true, false, false, true, true, false, false]);
            let codeword = BinVector::from_bools(&[true, false, false, true, true, true, false, false, true, false, false, true, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode15_5;
            let randvec = BinVector::from_bools(&[true, false, true, true, true, false, false, true, false, true, false, false, true, false, true]);
            let codeword = BinVector::from_bools(&[true, false, true, true, true, false, true, false, false, true, false, false, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode15_5;
            let randvec = BinVector::from_bools(&[true, false, false, true, false, false, true, true, true, false, true, false, true, true, false]);
            let codeword = BinVector::from_bools(&[true, true, false, true, true, false, false, true, false, false, true, false, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode15_5;
            let randvec = BinVector::from_bools(&[true, false, false, true, false, true, false, false, true, true, false, false, true, true, false]);
            let codeword = BinVector::from_bools(&[true, true, false, false, false, true, true, false, true, true, false, false, true, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
    }

    #[test]
    fn test_generator_representation() {
        init();
        let generator_matrix = unsafe { GENERATOR_MATRIX.as_ref().unwrap() };
        let first_row = generator_matrix.get_window(0, 0, 1, generator_matrix.ncols());
        let vector = BinVector::from_bools(&[ true, false, false, false, false, false, true, true, false, true, true, true, true, false, false ]);
        assert_eq!(vector, first_row.as_vector());
    }

}
