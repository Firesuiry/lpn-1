use std::boxed::Box;
use std::default::Default;
use std::sync::Once;

use fnv::FnvHashMap;

use m4ri_rust::friendly::BinMatrix;
use m4ri_rust::friendly::BinVector;

use crate::codes::BinaryCode;

/// ``[12, 2]`` Guava code
///
/// Best code found from the GUAVA database version 3.15
///
/// Decodes using Syndrome decoding
#[derive(Clone, Serialize)]
pub struct GuavaCode12_2;

static INIT: Once = Once::new();
static mut GENERATOR_MATRIX: *const BinMatrix = 0 as *const BinMatrix;
static mut PARITY_MATRIX: *const BinMatrix = 0 as *const BinMatrix;
static mut PARITY_MATRIX_T: *const BinMatrix = 0 as *const BinMatrix;
static mut SYNDROME_MAP: *const FnvHashMap<u64, &'static [usize; 1]> = 0 as *const FnvHashMap<u64, &'static [usize; 1]>;

fn init() {
    INIT.call_once(|| {
        unsafe {
            let matrix = Box::new(BinMatrix::from_slices(&[
                &[ 3869 ],
                &[ 4066 ],
                
            ], 12));
            GENERATOR_MATRIX = Box::into_raw(matrix);

            let matrix = Box::new(BinMatrix::from_slices(&[
                &[ 2177 ],
                &[ 130 ],
                &[ 2180 ],
                &[ 2184 ],
                &[ 2192 ],
                &[ 160 ],
                &[ 192 ],
                &[ 2304 ],
                &[ 2560 ],
                &[ 3072 ],
                
            ], 12));
            let matrix_t = Box::new(matrix.transposed());
            PARITY_MATRIX = Box::into_raw(matrix);
            PARITY_MATRIX_T = Box::into_raw(matrix_t);

            let mut map = Box::new(FnvHashMap::with_capacity_and_hasher(1024, Default::default()));
            map.insert(0, &[0]);     // 0 => [0]
            map.insert(1, &[1]);     // 1 => [1]
            map.insert(2, &[2]);     // 2 => [2]
            map.insert(4, &[4]);     // 4 => [4]
            map.insert(8, &[8]);     // 8 => [8]
            map.insert(16, &[16]);     // 16 => [16]
            map.insert(32, &[32]);     // 32 => [32]
            map.insert(64, &[64]);     // 64 => [64]
            map.insert(127, &[128]);     // 127 => [128]
            map.insert(128, &[256]);     // 128 => [256]
            map.insert(256, &[512]);     // 256 => [512]
            map.insert(512, &[1024]);     // 512 => [1024]
            map.insert(925, &[2048]);     // 925 => [2048]
            map.insert(3, &[3]);     // 3 => [3]
            map.insert(5, &[5]);     // 5 => [5]
            map.insert(9, &[9]);     // 9 => [9]
            map.insert(17, &[17]);     // 17 => [17]
            map.insert(33, &[33]);     // 33 => [33]
            map.insert(65, &[65]);     // 65 => [65]
            map.insert(126, &[129]);     // 126 => [129]
            map.insert(129, &[257]);     // 129 => [257]
            map.insert(257, &[513]);     // 257 => [513]
            map.insert(513, &[1025]);     // 513 => [1025]
            map.insert(924, &[2049]);     // 924 => [2049]
            map.insert(6, &[6]);     // 6 => [6]
            map.insert(10, &[10]);     // 10 => [10]
            map.insert(18, &[18]);     // 18 => [18]
            map.insert(34, &[34]);     // 34 => [34]
            map.insert(66, &[66]);     // 66 => [66]
            map.insert(125, &[130]);     // 125 => [130]
            map.insert(130, &[258]);     // 130 => [258]
            map.insert(258, &[514]);     // 258 => [514]
            map.insert(514, &[1026]);     // 514 => [1026]
            map.insert(927, &[2050]);     // 927 => [2050]
            map.insert(12, &[12]);     // 12 => [12]
            map.insert(20, &[20]);     // 20 => [20]
            map.insert(36, &[36]);     // 36 => [36]
            map.insert(68, &[68]);     // 68 => [68]
            map.insert(123, &[132]);     // 123 => [132]
            map.insert(132, &[260]);     // 132 => [260]
            map.insert(260, &[516]);     // 260 => [516]
            map.insert(516, &[1028]);     // 516 => [1028]
            map.insert(921, &[2052]);     // 921 => [2052]
            map.insert(24, &[24]);     // 24 => [24]
            map.insert(40, &[40]);     // 40 => [40]
            map.insert(72, &[72]);     // 72 => [72]
            map.insert(119, &[136]);     // 119 => [136]
            map.insert(136, &[264]);     // 136 => [264]
            map.insert(264, &[520]);     // 264 => [520]
            map.insert(520, &[1032]);     // 520 => [1032]
            map.insert(917, &[2056]);     // 917 => [2056]
            map.insert(48, &[48]);     // 48 => [48]
            map.insert(80, &[80]);     // 80 => [80]
            map.insert(111, &[144]);     // 111 => [144]
            map.insert(144, &[272]);     // 144 => [272]
            map.insert(272, &[528]);     // 272 => [528]
            map.insert(528, &[1040]);     // 528 => [1040]
            map.insert(909, &[2064]);     // 909 => [2064]
            map.insert(96, &[96]);     // 96 => [96]
            map.insert(95, &[160]);     // 95 => [160]
            map.insert(160, &[288]);     // 160 => [288]
            map.insert(288, &[544]);     // 288 => [544]
            map.insert(544, &[1056]);     // 544 => [1056]
            map.insert(957, &[2080]);     // 957 => [2080]
            map.insert(63, &[192]);     // 63 => [192]
            map.insert(192, &[320]);     // 192 => [320]
            map.insert(320, &[576]);     // 320 => [576]
            map.insert(576, &[1088]);     // 576 => [1088]
            map.insert(989, &[2112]);     // 989 => [2112]
            map.insert(255, &[384]);     // 255 => [384]
            map.insert(383, &[640]);     // 383 => [640]
            map.insert(639, &[1152]);     // 639 => [1152]
            map.insert(994, &[2176]);     // 994 => [2176]
            map.insert(384, &[768]);     // 384 => [768]
            map.insert(640, &[1280]);     // 640 => [1280]
            map.insert(797, &[2304]);     // 797 => [2304]
            map.insert(768, &[1536]);     // 768 => [1536]
            map.insert(669, &[2560]);     // 669 => [2560]
            map.insert(413, &[3072]);     // 413 => [3072]
            map.insert(7, &[7]);     // 7 => [7]
            map.insert(11, &[11]);     // 11 => [11]
            map.insert(19, &[19]);     // 19 => [19]
            map.insert(35, &[35]);     // 35 => [35]
            map.insert(67, &[67]);     // 67 => [67]
            map.insert(124, &[131]);     // 124 => [131]
            map.insert(131, &[259]);     // 131 => [259]
            map.insert(259, &[515]);     // 259 => [515]
            map.insert(515, &[1027]);     // 515 => [1027]
            map.insert(926, &[2051]);     // 926 => [2051]
            map.insert(13, &[13]);     // 13 => [13]
            map.insert(21, &[21]);     // 21 => [21]
            map.insert(37, &[37]);     // 37 => [37]
            map.insert(69, &[69]);     // 69 => [69]
            map.insert(122, &[133]);     // 122 => [133]
            map.insert(133, &[261]);     // 133 => [261]
            map.insert(261, &[517]);     // 261 => [517]
            map.insert(517, &[1029]);     // 517 => [1029]
            map.insert(920, &[2053]);     // 920 => [2053]
            map.insert(25, &[25]);     // 25 => [25]
            map.insert(41, &[41]);     // 41 => [41]
            map.insert(73, &[73]);     // 73 => [73]
            map.insert(118, &[137]);     // 118 => [137]
            map.insert(137, &[265]);     // 137 => [265]
            map.insert(265, &[521]);     // 265 => [521]
            map.insert(521, &[1033]);     // 521 => [1033]
            map.insert(916, &[2057]);     // 916 => [2057]
            map.insert(49, &[49]);     // 49 => [49]
            map.insert(81, &[81]);     // 81 => [81]
            map.insert(110, &[145]);     // 110 => [145]
            map.insert(145, &[273]);     // 145 => [273]
            map.insert(273, &[529]);     // 273 => [529]
            map.insert(529, &[1041]);     // 529 => [1041]
            map.insert(908, &[2065]);     // 908 => [2065]
            map.insert(97, &[97]);     // 97 => [97]
            map.insert(94, &[161]);     // 94 => [161]
            map.insert(161, &[289]);     // 161 => [289]
            map.insert(289, &[545]);     // 289 => [545]
            map.insert(545, &[1057]);     // 545 => [1057]
            map.insert(956, &[2081]);     // 956 => [2081]
            map.insert(62, &[193]);     // 62 => [193]
            map.insert(193, &[321]);     // 193 => [321]
            map.insert(321, &[577]);     // 321 => [577]
            map.insert(577, &[1089]);     // 577 => [1089]
            map.insert(988, &[2113]);     // 988 => [2113]
            map.insert(254, &[385]);     // 254 => [385]
            map.insert(382, &[641]);     // 382 => [641]
            map.insert(638, &[1153]);     // 638 => [1153]
            map.insert(995, &[2177]);     // 995 => [2177]
            map.insert(385, &[769]);     // 385 => [769]
            map.insert(641, &[1281]);     // 641 => [1281]
            map.insert(796, &[2305]);     // 796 => [2305]
            map.insert(769, &[1537]);     // 769 => [1537]
            map.insert(668, &[2561]);     // 668 => [2561]
            map.insert(412, &[3073]);     // 412 => [3073]
            map.insert(14, &[14]);     // 14 => [14]
            map.insert(22, &[22]);     // 22 => [22]
            map.insert(38, &[38]);     // 38 => [38]
            map.insert(70, &[70]);     // 70 => [70]
            map.insert(121, &[134]);     // 121 => [134]
            map.insert(134, &[262]);     // 134 => [262]
            map.insert(262, &[518]);     // 262 => [518]
            map.insert(518, &[1030]);     // 518 => [1030]
            map.insert(923, &[2054]);     // 923 => [2054]
            map.insert(26, &[26]);     // 26 => [26]
            map.insert(42, &[42]);     // 42 => [42]
            map.insert(74, &[74]);     // 74 => [74]
            map.insert(117, &[138]);     // 117 => [138]
            map.insert(138, &[266]);     // 138 => [266]
            map.insert(266, &[522]);     // 266 => [522]
            map.insert(522, &[1034]);     // 522 => [1034]
            map.insert(919, &[2058]);     // 919 => [2058]
            map.insert(50, &[50]);     // 50 => [50]
            map.insert(82, &[82]);     // 82 => [82]
            map.insert(109, &[146]);     // 109 => [146]
            map.insert(146, &[274]);     // 146 => [274]
            map.insert(274, &[530]);     // 274 => [530]
            map.insert(530, &[1042]);     // 530 => [1042]
            map.insert(911, &[2066]);     // 911 => [2066]
            map.insert(98, &[98]);     // 98 => [98]
            map.insert(93, &[162]);     // 93 => [162]
            map.insert(162, &[290]);     // 162 => [290]
            map.insert(290, &[546]);     // 290 => [546]
            map.insert(546, &[1058]);     // 546 => [1058]
            map.insert(959, &[2082]);     // 959 => [2082]
            map.insert(61, &[194]);     // 61 => [194]
            map.insert(194, &[322]);     // 194 => [322]
            map.insert(322, &[578]);     // 322 => [578]
            map.insert(578, &[1090]);     // 578 => [1090]
            map.insert(991, &[2114]);     // 991 => [2114]
            map.insert(253, &[386]);     // 253 => [386]
            map.insert(381, &[642]);     // 381 => [642]
            map.insert(637, &[1154]);     // 637 => [1154]
            map.insert(992, &[2178]);     // 992 => [2178]
            map.insert(386, &[770]);     // 386 => [770]
            map.insert(642, &[1282]);     // 642 => [1282]
            map.insert(799, &[2306]);     // 799 => [2306]
            map.insert(770, &[1538]);     // 770 => [1538]
            map.insert(671, &[2562]);     // 671 => [2562]
            map.insert(415, &[3074]);     // 415 => [3074]
            map.insert(28, &[28]);     // 28 => [28]
            map.insert(44, &[44]);     // 44 => [44]
            map.insert(76, &[76]);     // 76 => [76]
            map.insert(115, &[140]);     // 115 => [140]
            map.insert(140, &[268]);     // 140 => [268]
            map.insert(268, &[524]);     // 268 => [524]
            map.insert(524, &[1036]);     // 524 => [1036]
            map.insert(913, &[2060]);     // 913 => [2060]
            map.insert(52, &[52]);     // 52 => [52]
            map.insert(84, &[84]);     // 84 => [84]
            map.insert(107, &[148]);     // 107 => [148]
            map.insert(148, &[276]);     // 148 => [276]
            map.insert(276, &[532]);     // 276 => [532]
            map.insert(532, &[1044]);     // 532 => [1044]
            map.insert(905, &[2068]);     // 905 => [2068]
            map.insert(100, &[100]);     // 100 => [100]
            map.insert(91, &[164]);     // 91 => [164]
            map.insert(164, &[292]);     // 164 => [292]
            map.insert(292, &[548]);     // 292 => [548]
            map.insert(548, &[1060]);     // 548 => [1060]
            map.insert(953, &[2084]);     // 953 => [2084]
            map.insert(59, &[196]);     // 59 => [196]
            map.insert(196, &[324]);     // 196 => [324]
            map.insert(324, &[580]);     // 324 => [580]
            map.insert(580, &[1092]);     // 580 => [1092]
            map.insert(985, &[2116]);     // 985 => [2116]
            map.insert(251, &[388]);     // 251 => [388]
            map.insert(379, &[644]);     // 379 => [644]
            map.insert(635, &[1156]);     // 635 => [1156]
            map.insert(998, &[2180]);     // 998 => [2180]
            map.insert(388, &[772]);     // 388 => [772]
            map.insert(644, &[1284]);     // 644 => [1284]
            map.insert(793, &[2308]);     // 793 => [2308]
            map.insert(772, &[1540]);     // 772 => [1540]
            map.insert(665, &[2564]);     // 665 => [2564]
            map.insert(409, &[3076]);     // 409 => [3076]
            map.insert(56, &[56]);     // 56 => [56]
            map.insert(88, &[88]);     // 88 => [88]
            map.insert(103, &[152]);     // 103 => [152]
            map.insert(152, &[280]);     // 152 => [280]
            map.insert(280, &[536]);     // 280 => [536]
            map.insert(536, &[1048]);     // 536 => [1048]
            map.insert(901, &[2072]);     // 901 => [2072]
            map.insert(104, &[104]);     // 104 => [104]
            map.insert(87, &[168]);     // 87 => [168]
            map.insert(168, &[296]);     // 168 => [296]
            map.insert(296, &[552]);     // 296 => [552]
            map.insert(552, &[1064]);     // 552 => [1064]
            map.insert(949, &[2088]);     // 949 => [2088]
            map.insert(55, &[200]);     // 55 => [200]
            map.insert(200, &[328]);     // 200 => [328]
            map.insert(328, &[584]);     // 328 => [584]
            map.insert(584, &[1096]);     // 584 => [1096]
            map.insert(981, &[2120]);     // 981 => [2120]
            map.insert(247, &[392]);     // 247 => [392]
            map.insert(375, &[648]);     // 375 => [648]
            map.insert(631, &[1160]);     // 631 => [1160]
            map.insert(1002, &[2184]);     // 1002 => [2184]
            map.insert(392, &[776]);     // 392 => [776]
            map.insert(648, &[1288]);     // 648 => [1288]
            map.insert(789, &[2312]);     // 789 => [2312]
            map.insert(776, &[1544]);     // 776 => [1544]
            map.insert(661, &[2568]);     // 661 => [2568]
            map.insert(405, &[3080]);     // 405 => [3080]
            map.insert(112, &[112]);     // 112 => [112]
            map.insert(79, &[176]);     // 79 => [176]
            map.insert(176, &[304]);     // 176 => [304]
            map.insert(304, &[560]);     // 304 => [560]
            map.insert(560, &[1072]);     // 560 => [1072]
            map.insert(941, &[2096]);     // 941 => [2096]
            map.insert(47, &[208]);     // 47 => [208]
            map.insert(208, &[336]);     // 208 => [336]
            map.insert(336, &[592]);     // 336 => [592]
            map.insert(592, &[1104]);     // 592 => [1104]
            map.insert(973, &[2128]);     // 973 => [2128]
            map.insert(239, &[400]);     // 239 => [400]
            map.insert(367, &[656]);     // 367 => [656]
            map.insert(623, &[1168]);     // 623 => [1168]
            map.insert(1010, &[2192]);     // 1010 => [2192]
            map.insert(400, &[784]);     // 400 => [784]
            map.insert(656, &[1296]);     // 656 => [1296]
            map.insert(781, &[2320]);     // 781 => [2320]
            map.insert(784, &[1552]);     // 784 => [1552]
            map.insert(653, &[2576]);     // 653 => [2576]
            map.insert(397, &[3088]);     // 397 => [3088]
            map.insert(31, &[224]);     // 31 => [224]
            map.insert(224, &[352]);     // 224 => [352]
            map.insert(352, &[608]);     // 352 => [608]
            map.insert(608, &[1120]);     // 608 => [1120]
            map.insert(1021, &[2144]);     // 1021 => [2144]
            map.insert(223, &[416]);     // 223 => [416]
            map.insert(351, &[672]);     // 351 => [672]
            map.insert(607, &[1184]);     // 607 => [1184]
            map.insert(962, &[2208]);     // 962 => [2208]
            map.insert(416, &[800]);     // 416 => [800]
            map.insert(672, &[1312]);     // 672 => [1312]
            map.insert(829, &[2336]);     // 829 => [2336]
            map.insert(800, &[1568]);     // 800 => [1568]
            map.insert(701, &[2592]);     // 701 => [2592]
            map.insert(445, &[3104]);     // 445 => [3104]
            map.insert(191, &[448]);     // 191 => [448]
            map.insert(319, &[704]);     // 319 => [704]
            map.insert(575, &[1216]);     // 575 => [1216]
            map.insert(930, &[2240]);     // 930 => [2240]
            map.insert(448, &[832]);     // 448 => [832]
            map.insert(704, &[1344]);     // 704 => [1344]
            map.insert(861, &[2368]);     // 861 => [2368]
            map.insert(832, &[1600]);     // 832 => [1600]
            map.insert(733, &[2624]);     // 733 => [2624]
            map.insert(477, &[3136]);     // 477 => [3136]
            map.insert(511, &[896]);     // 511 => [896]
            map.insert(767, &[1408]);     // 767 => [1408]
            map.insert(866, &[2432]);     // 866 => [2432]
            map.insert(895, &[1664]);     // 895 => [1664]
            map.insert(738, &[2688]);     // 738 => [2688]
            map.insert(482, &[3200]);     // 482 => [3200]
            map.insert(896, &[1792]);     // 896 => [1792]
            map.insert(541, &[2816]);     // 541 => [2816]
            map.insert(285, &[3328]);     // 285 => [3328]
            map.insert(157, &[3584]);     // 157 => [3584]
            map.insert(15, &[15]);     // 15 => [15]
            map.insert(23, &[23]);     // 23 => [23]
            map.insert(39, &[39]);     // 39 => [39]
            map.insert(71, &[71]);     // 71 => [71]
            map.insert(120, &[135]);     // 120 => [135]
            map.insert(135, &[263]);     // 135 => [263]
            map.insert(263, &[519]);     // 263 => [519]
            map.insert(519, &[1031]);     // 519 => [1031]
            map.insert(922, &[2055]);     // 922 => [2055]
            map.insert(27, &[27]);     // 27 => [27]
            map.insert(43, &[43]);     // 43 => [43]
            map.insert(75, &[75]);     // 75 => [75]
            map.insert(116, &[139]);     // 116 => [139]
            map.insert(139, &[267]);     // 139 => [267]
            map.insert(267, &[523]);     // 267 => [523]
            map.insert(523, &[1035]);     // 523 => [1035]
            map.insert(918, &[2059]);     // 918 => [2059]
            map.insert(51, &[51]);     // 51 => [51]
            map.insert(83, &[83]);     // 83 => [83]
            map.insert(108, &[147]);     // 108 => [147]
            map.insert(147, &[275]);     // 147 => [275]
            map.insert(275, &[531]);     // 275 => [531]
            map.insert(531, &[1043]);     // 531 => [1043]
            map.insert(910, &[2067]);     // 910 => [2067]
            map.insert(99, &[99]);     // 99 => [99]
            map.insert(92, &[163]);     // 92 => [163]
            map.insert(163, &[291]);     // 163 => [291]
            map.insert(291, &[547]);     // 291 => [547]
            map.insert(547, &[1059]);     // 547 => [1059]
            map.insert(958, &[2083]);     // 958 => [2083]
            map.insert(60, &[195]);     // 60 => [195]
            map.insert(195, &[323]);     // 195 => [323]
            map.insert(323, &[579]);     // 323 => [579]
            map.insert(579, &[1091]);     // 579 => [1091]
            map.insert(990, &[2115]);     // 990 => [2115]
            map.insert(252, &[387]);     // 252 => [387]
            map.insert(380, &[643]);     // 380 => [643]
            map.insert(636, &[1155]);     // 636 => [1155]
            map.insert(993, &[2179]);     // 993 => [2179]
            map.insert(387, &[771]);     // 387 => [771]
            map.insert(643, &[1283]);     // 643 => [1283]
            map.insert(798, &[2307]);     // 798 => [2307]
            map.insert(771, &[1539]);     // 771 => [1539]
            map.insert(670, &[2563]);     // 670 => [2563]
            map.insert(414, &[3075]);     // 414 => [3075]
            map.insert(29, &[29]);     // 29 => [29]
            map.insert(45, &[45]);     // 45 => [45]
            map.insert(77, &[77]);     // 77 => [77]
            map.insert(114, &[141]);     // 114 => [141]
            map.insert(141, &[269]);     // 141 => [269]
            map.insert(269, &[525]);     // 269 => [525]
            map.insert(525, &[1037]);     // 525 => [1037]
            map.insert(912, &[2061]);     // 912 => [2061]
            map.insert(53, &[53]);     // 53 => [53]
            map.insert(85, &[85]);     // 85 => [85]
            map.insert(106, &[149]);     // 106 => [149]
            map.insert(149, &[277]);     // 149 => [277]
            map.insert(277, &[533]);     // 277 => [533]
            map.insert(533, &[1045]);     // 533 => [1045]
            map.insert(904, &[2069]);     // 904 => [2069]
            map.insert(101, &[101]);     // 101 => [101]
            map.insert(90, &[165]);     // 90 => [165]
            map.insert(165, &[293]);     // 165 => [293]
            map.insert(293, &[549]);     // 293 => [549]
            map.insert(549, &[1061]);     // 549 => [1061]
            map.insert(952, &[2085]);     // 952 => [2085]
            map.insert(58, &[197]);     // 58 => [197]
            map.insert(197, &[325]);     // 197 => [325]
            map.insert(325, &[581]);     // 325 => [581]
            map.insert(581, &[1093]);     // 581 => [1093]
            map.insert(984, &[2117]);     // 984 => [2117]
            map.insert(250, &[389]);     // 250 => [389]
            map.insert(378, &[645]);     // 378 => [645]
            map.insert(634, &[1157]);     // 634 => [1157]
            map.insert(999, &[2181]);     // 999 => [2181]
            map.insert(389, &[773]);     // 389 => [773]
            map.insert(645, &[1285]);     // 645 => [1285]
            map.insert(792, &[2309]);     // 792 => [2309]
            map.insert(773, &[1541]);     // 773 => [1541]
            map.insert(664, &[2565]);     // 664 => [2565]
            map.insert(408, &[3077]);     // 408 => [3077]
            map.insert(57, &[57]);     // 57 => [57]
            map.insert(89, &[89]);     // 89 => [89]
            map.insert(102, &[153]);     // 102 => [153]
            map.insert(153, &[281]);     // 153 => [281]
            map.insert(281, &[537]);     // 281 => [537]
            map.insert(537, &[1049]);     // 537 => [1049]
            map.insert(900, &[2073]);     // 900 => [2073]
            map.insert(105, &[105]);     // 105 => [105]
            map.insert(86, &[169]);     // 86 => [169]
            map.insert(169, &[297]);     // 169 => [297]
            map.insert(297, &[553]);     // 297 => [553]
            map.insert(553, &[1065]);     // 553 => [1065]
            map.insert(948, &[2089]);     // 948 => [2089]
            map.insert(54, &[201]);     // 54 => [201]
            map.insert(201, &[329]);     // 201 => [329]
            map.insert(329, &[585]);     // 329 => [585]
            map.insert(585, &[1097]);     // 585 => [1097]
            map.insert(980, &[2121]);     // 980 => [2121]
            map.insert(246, &[393]);     // 246 => [393]
            map.insert(374, &[649]);     // 374 => [649]
            map.insert(630, &[1161]);     // 630 => [1161]
            map.insert(1003, &[2185]);     // 1003 => [2185]
            map.insert(393, &[777]);     // 393 => [777]
            map.insert(649, &[1289]);     // 649 => [1289]
            map.insert(788, &[2313]);     // 788 => [2313]
            map.insert(777, &[1545]);     // 777 => [1545]
            map.insert(660, &[2569]);     // 660 => [2569]
            map.insert(404, &[3081]);     // 404 => [3081]
            map.insert(113, &[113]);     // 113 => [113]
            map.insert(78, &[177]);     // 78 => [177]
            map.insert(177, &[305]);     // 177 => [305]
            map.insert(305, &[561]);     // 305 => [561]
            map.insert(561, &[1073]);     // 561 => [1073]
            map.insert(940, &[2097]);     // 940 => [2097]
            map.insert(46, &[209]);     // 46 => [209]
            map.insert(209, &[337]);     // 209 => [337]
            map.insert(337, &[593]);     // 337 => [593]
            map.insert(593, &[1105]);     // 593 => [1105]
            map.insert(972, &[2129]);     // 972 => [2129]
            map.insert(238, &[401]);     // 238 => [401]
            map.insert(366, &[657]);     // 366 => [657]
            map.insert(622, &[1169]);     // 622 => [1169]
            map.insert(1011, &[2193]);     // 1011 => [2193]
            map.insert(401, &[785]);     // 401 => [785]
            map.insert(657, &[1297]);     // 657 => [1297]
            map.insert(780, &[2321]);     // 780 => [2321]
            map.insert(785, &[1553]);     // 785 => [1553]
            map.insert(652, &[2577]);     // 652 => [2577]
            map.insert(396, &[3089]);     // 396 => [3089]
            map.insert(30, &[225]);     // 30 => [225]
            map.insert(225, &[353]);     // 225 => [353]
            map.insert(353, &[609]);     // 353 => [609]
            map.insert(609, &[1121]);     // 609 => [1121]
            map.insert(1020, &[2145]);     // 1020 => [2145]
            map.insert(222, &[417]);     // 222 => [417]
            map.insert(350, &[673]);     // 350 => [673]
            map.insert(606, &[1185]);     // 606 => [1185]
            map.insert(963, &[2209]);     // 963 => [2209]
            map.insert(417, &[801]);     // 417 => [801]
            map.insert(673, &[1313]);     // 673 => [1313]
            map.insert(828, &[2337]);     // 828 => [2337]
            map.insert(801, &[1569]);     // 801 => [1569]
            map.insert(700, &[2593]);     // 700 => [2593]
            map.insert(444, &[3105]);     // 444 => [3105]
            map.insert(190, &[449]);     // 190 => [449]
            map.insert(318, &[705]);     // 318 => [705]
            map.insert(574, &[1217]);     // 574 => [1217]
            map.insert(931, &[2241]);     // 931 => [2241]
            map.insert(449, &[833]);     // 449 => [833]
            map.insert(705, &[1345]);     // 705 => [1345]
            map.insert(860, &[2369]);     // 860 => [2369]
            map.insert(833, &[1601]);     // 833 => [1601]
            map.insert(732, &[2625]);     // 732 => [2625]
            map.insert(476, &[3137]);     // 476 => [3137]
            map.insert(510, &[897]);     // 510 => [897]
            map.insert(766, &[1409]);     // 766 => [1409]
            map.insert(867, &[2433]);     // 867 => [2433]
            map.insert(894, &[1665]);     // 894 => [1665]
            map.insert(739, &[2689]);     // 739 => [2689]
            map.insert(483, &[3201]);     // 483 => [3201]
            map.insert(897, &[1793]);     // 897 => [1793]
            map.insert(540, &[2817]);     // 540 => [2817]
            map.insert(284, &[3329]);     // 284 => [3329]
            map.insert(156, &[3585]);     // 156 => [3585]
            map.insert(142, &[270]);     // 142 => [270]
            map.insert(270, &[526]);     // 270 => [526]
            map.insert(526, &[1038]);     // 526 => [1038]
            map.insert(915, &[2062]);     // 915 => [2062]
            map.insert(150, &[278]);     // 150 => [278]
            map.insert(278, &[534]);     // 278 => [534]
            map.insert(534, &[1046]);     // 534 => [1046]
            map.insert(907, &[2070]);     // 907 => [2070]
            map.insert(166, &[294]);     // 166 => [294]
            map.insert(294, &[550]);     // 294 => [550]
            map.insert(550, &[1062]);     // 550 => [1062]
            map.insert(955, &[2086]);     // 955 => [2086]
            map.insert(198, &[326]);     // 198 => [326]
            map.insert(326, &[582]);     // 326 => [582]
            map.insert(582, &[1094]);     // 582 => [1094]
            map.insert(987, &[2118]);     // 987 => [2118]
            map.insert(249, &[390]);     // 249 => [390]
            map.insert(377, &[646]);     // 377 => [646]
            map.insert(633, &[1158]);     // 633 => [1158]
            map.insert(996, &[2182]);     // 996 => [2182]
            map.insert(390, &[774]);     // 390 => [774]
            map.insert(646, &[1286]);     // 646 => [1286]
            map.insert(795, &[2310]);     // 795 => [2310]
            map.insert(774, &[1542]);     // 774 => [1542]
            map.insert(667, &[2566]);     // 667 => [2566]
            map.insert(411, &[3078]);     // 411 => [3078]
            map.insert(154, &[282]);     // 154 => [282]
            map.insert(282, &[538]);     // 282 => [538]
            map.insert(538, &[1050]);     // 538 => [1050]
            map.insert(903, &[2074]);     // 903 => [2074]
            map.insert(170, &[298]);     // 170 => [298]
            map.insert(298, &[554]);     // 298 => [554]
            map.insert(554, &[1066]);     // 554 => [1066]
            map.insert(951, &[2090]);     // 951 => [2090]
            map.insert(202, &[330]);     // 202 => [330]
            map.insert(330, &[586]);     // 330 => [586]
            map.insert(586, &[1098]);     // 586 => [1098]
            map.insert(983, &[2122]);     // 983 => [2122]
            map.insert(245, &[394]);     // 245 => [394]
            map.insert(373, &[650]);     // 373 => [650]
            map.insert(629, &[1162]);     // 629 => [1162]
            map.insert(1000, &[2186]);     // 1000 => [2186]
            map.insert(394, &[778]);     // 394 => [778]
            map.insert(650, &[1290]);     // 650 => [1290]
            map.insert(791, &[2314]);     // 791 => [2314]
            map.insert(778, &[1546]);     // 778 => [1546]
            map.insert(663, &[2570]);     // 663 => [2570]
            map.insert(407, &[3082]);     // 407 => [3082]
            map.insert(178, &[306]);     // 178 => [306]
            map.insert(306, &[562]);     // 306 => [562]
            map.insert(562, &[1074]);     // 562 => [1074]
            map.insert(943, &[2098]);     // 943 => [2098]
            map.insert(210, &[338]);     // 210 => [338]
            map.insert(338, &[594]);     // 338 => [594]
            map.insert(594, &[1106]);     // 594 => [1106]
            map.insert(975, &[2130]);     // 975 => [2130]
            map.insert(237, &[402]);     // 237 => [402]
            map.insert(365, &[658]);     // 365 => [658]
            map.insert(621, &[1170]);     // 621 => [1170]
            map.insert(1008, &[2194]);     // 1008 => [2194]
            map.insert(402, &[786]);     // 402 => [786]
            map.insert(658, &[1298]);     // 658 => [1298]
            map.insert(783, &[2322]);     // 783 => [2322]
            map.insert(786, &[1554]);     // 786 => [1554]
            map.insert(655, &[2578]);     // 655 => [2578]
            map.insert(399, &[3090]);     // 399 => [3090]
            map.insert(226, &[354]);     // 226 => [354]
            map.insert(354, &[610]);     // 354 => [610]
            map.insert(610, &[1122]);     // 610 => [1122]
            map.insert(1023, &[2146]);     // 1023 => [2146]
            map.insert(221, &[418]);     // 221 => [418]
            map.insert(349, &[674]);     // 349 => [674]
            map.insert(605, &[1186]);     // 605 => [1186]
            map.insert(960, &[2210]);     // 960 => [2210]
            map.insert(418, &[802]);     // 418 => [802]
            map.insert(674, &[1314]);     // 674 => [1314]
            map.insert(831, &[2338]);     // 831 => [2338]
            map.insert(802, &[1570]);     // 802 => [1570]
            map.insert(703, &[2594]);     // 703 => [2594]
            map.insert(447, &[3106]);     // 447 => [3106]
            map.insert(189, &[450]);     // 189 => [450]
            map.insert(317, &[706]);     // 317 => [706]
            map.insert(573, &[1218]);     // 573 => [1218]
            map.insert(928, &[2242]);     // 928 => [2242]
            map.insert(450, &[834]);     // 450 => [834]
            map.insert(706, &[1346]);     // 706 => [1346]
            map.insert(863, &[2370]);     // 863 => [2370]
            map.insert(834, &[1602]);     // 834 => [1602]
            map.insert(735, &[2626]);     // 735 => [2626]
            map.insert(479, &[3138]);     // 479 => [3138]
            map.insert(509, &[898]);     // 509 => [898]
            map.insert(765, &[1410]);     // 765 => [1410]
            map.insert(864, &[2434]);     // 864 => [2434]
            map.insert(893, &[1666]);     // 893 => [1666]
            map.insert(736, &[2690]);     // 736 => [2690]
            map.insert(480, &[3202]);     // 480 => [3202]
            map.insert(898, &[1794]);     // 898 => [1794]
            map.insert(543, &[2818]);     // 543 => [2818]
            map.insert(287, &[3330]);     // 287 => [3330]
            map.insert(159, &[3586]);     // 159 => [3586]
            map.insert(172, &[300]);     // 172 => [300]
            map.insert(300, &[556]);     // 300 => [556]
            map.insert(556, &[1068]);     // 556 => [1068]
            map.insert(945, &[2092]);     // 945 => [2092]
            map.insert(204, &[332]);     // 204 => [332]
            map.insert(332, &[588]);     // 332 => [588]
            map.insert(588, &[1100]);     // 588 => [1100]
            map.insert(977, &[2124]);     // 977 => [2124]
            map.insert(243, &[396]);     // 243 => [396]
            map.insert(371, &[652]);     // 371 => [652]
            map.insert(627, &[1164]);     // 627 => [1164]
            map.insert(1006, &[2188]);     // 1006 => [2188]
            map.insert(180, &[308]);     // 180 => [308]
            map.insert(308, &[564]);     // 308 => [564]
            map.insert(564, &[1076]);     // 564 => [1076]
            map.insert(937, &[2100]);     // 937 => [2100]
            map.insert(212, &[340]);     // 212 => [340]
            map.insert(340, &[596]);     // 340 => [596]
            map.insert(596, &[1108]);     // 596 => [1108]
            map.insert(969, &[2132]);     // 969 => [2132]
            map.insert(235, &[404]);     // 235 => [404]
            map.insert(363, &[660]);     // 363 => [660]
            map.insert(619, &[1172]);     // 619 => [1172]
            map.insert(1014, &[2196]);     // 1014 => [2196]
            map.insert(228, &[356]);     // 228 => [356]
            map.insert(356, &[612]);     // 356 => [612]
            map.insert(612, &[1124]);     // 612 => [1124]
            map.insert(1017, &[2148]);     // 1017 => [2148]
            map.insert(219, &[420]);     // 219 => [420]
            map.insert(347, &[676]);     // 347 => [676]
            map.insert(603, &[1188]);     // 603 => [1188]
            map.insert(966, &[2212]);     // 966 => [2212]
            map.insert(420, &[804]);     // 420 => [804]
            map.insert(676, &[1316]);     // 676 => [1316]
            map.insert(825, &[2340]);     // 825 => [2340]
            map.insert(804, &[1572]);     // 804 => [1572]
            map.insert(697, &[2596]);     // 697 => [2596]
            map.insert(441, &[3108]);     // 441 => [3108]
            map.insert(187, &[452]);     // 187 => [452]
            map.insert(315, &[708]);     // 315 => [708]
            map.insert(571, &[1220]);     // 571 => [1220]
            map.insert(934, &[2244]);     // 934 => [2244]
            map.insert(452, &[836]);     // 452 => [836]
            map.insert(708, &[1348]);     // 708 => [1348]
            map.insert(857, &[2372]);     // 857 => [2372]
            map.insert(836, &[1604]);     // 836 => [1604]
            map.insert(729, &[2628]);     // 729 => [2628]
            map.insert(473, &[3140]);     // 473 => [3140]
            map.insert(507, &[900]);     // 507 => [900]
            map.insert(763, &[1412]);     // 763 => [1412]
            map.insert(870, &[2436]);     // 870 => [2436]
            map.insert(891, &[1668]);     // 891 => [1668]
            map.insert(742, &[2692]);     // 742 => [2692]
            map.insert(486, &[3204]);     // 486 => [3204]
            map.insert(184, &[312]);     // 184 => [312]
            map.insert(312, &[568]);     // 312 => [568]
            map.insert(568, &[1080]);     // 568 => [1080]
            map.insert(933, &[2104]);     // 933 => [2104]
            map.insert(216, &[344]);     // 216 => [344]
            map.insert(344, &[600]);     // 344 => [600]
            map.insert(600, &[1112]);     // 600 => [1112]
            map.insert(965, &[2136]);     // 965 => [2136]
            map.insert(231, &[408]);     // 231 => [408]
            map.insert(359, &[664]);     // 359 => [664]
            map.insert(615, &[1176]);     // 615 => [1176]
            map.insert(1018, &[2200]);     // 1018 => [2200]
            map.insert(232, &[360]);     // 232 => [360]
            map.insert(360, &[616]);     // 360 => [616]
            map.insert(616, &[1128]);     // 616 => [1128]
            map.insert(1013, &[2152]);     // 1013 => [2152]
            map.insert(215, &[424]);     // 215 => [424]
            map.insert(343, &[680]);     // 343 => [680]
            map.insert(599, &[1192]);     // 599 => [1192]
            map.insert(970, &[2216]);     // 970 => [2216]
            map.insert(424, &[808]);     // 424 => [808]
            map.insert(680, &[1320]);     // 680 => [1320]
            map.insert(821, &[2344]);     // 821 => [2344]
            map.insert(808, &[1576]);     // 808 => [1576]
            map.insert(693, &[2600]);     // 693 => [2600]
            map.insert(437, &[3112]);     // 437 => [3112]
            map.insert(183, &[456]);     // 183 => [456]
            map.insert(311, &[712]);     // 311 => [712]
            map.insert(567, &[1224]);     // 567 => [1224]
            map.insert(938, &[2248]);     // 938 => [2248]
            map.insert(456, &[840]);     // 456 => [840]
            map.insert(712, &[1352]);     // 712 => [1352]
            map.insert(853, &[2376]);     // 853 => [2376]
            map.insert(840, &[1608]);     // 840 => [1608]
            map.insert(725, &[2632]);     // 725 => [2632]
            map.insert(469, &[3144]);     // 469 => [3144]
            map.insert(503, &[904]);     // 503 => [904]
            map.insert(759, &[1416]);     // 759 => [1416]
            map.insert(874, &[2440]);     // 874 => [2440]
            map.insert(887, &[1672]);     // 887 => [1672]
            map.insert(746, &[2696]);     // 746 => [2696]
            map.insert(490, &[3208]);     // 490 => [3208]
            map.insert(240, &[368]);     // 240 => [368]
            map.insert(368, &[624]);     // 368 => [624]
            map.insert(624, &[1136]);     // 624 => [1136]
            map.insert(1005, &[2160]);     // 1005 => [2160]
            map.insert(207, &[432]);     // 207 => [432]
            map.insert(335, &[688]);     // 335 => [688]
            map.insert(591, &[1200]);     // 591 => [1200]
            map.insert(978, &[2224]);     // 978 => [2224]
            map.insert(432, &[816]);     // 432 => [816]
            map.insert(688, &[1328]);     // 688 => [1328]
            map.insert(813, &[2352]);     // 813 => [2352]
            map.insert(816, &[1584]);     // 816 => [1584]
            map.insert(685, &[2608]);     // 685 => [2608]
            map.insert(429, &[3120]);     // 429 => [3120]
            map.insert(175, &[464]);     // 175 => [464]
            map.insert(303, &[720]);     // 303 => [720]
            map.insert(559, &[1232]);     // 559 => [1232]
            map.insert(946, &[2256]);     // 946 => [2256]
            map.insert(464, &[848]);     // 464 => [848]
            map.insert(720, &[1360]);     // 720 => [1360]
            map.insert(845, &[2384]);     // 845 => [2384]
            map.insert(848, &[1616]);     // 848 => [1616]
            map.insert(717, &[2640]);     // 717 => [2640]
            map.insert(461, &[3152]);     // 461 => [3152]
            map.insert(495, &[912]);     // 495 => [912]
            map.insert(751, &[1424]);     // 751 => [1424]
            map.insert(882, &[2448]);     // 882 => [2448]
            map.insert(879, &[1680]);     // 879 => [1680]
            map.insert(754, &[2704]);     // 754 => [2704]
            map.insert(498, &[3216]);     // 498 => [3216]
            map.insert(143, &[271]);     // 143 => [271]
            map.insert(271, &[527]);     // 271 => [527]
            map.insert(527, &[1039]);     // 527 => [1039]
            map.insert(914, &[2063]);     // 914 => [2063]
            map.insert(151, &[279]);     // 151 => [279]
            map.insert(279, &[535]);     // 279 => [535]
            map.insert(535, &[1047]);     // 535 => [1047]
            map.insert(906, &[2071]);     // 906 => [2071]
            map.insert(167, &[295]);     // 167 => [295]
            map.insert(295, &[551]);     // 295 => [551]
            map.insert(551, &[1063]);     // 551 => [1063]
            map.insert(954, &[2087]);     // 954 => [2087]
            map.insert(199, &[327]);     // 199 => [327]
            map.insert(327, &[583]);     // 327 => [583]
            map.insert(583, &[1095]);     // 583 => [1095]
            map.insert(986, &[2119]);     // 986 => [2119]
            map.insert(248, &[391]);     // 248 => [391]
            map.insert(376, &[647]);     // 376 => [647]
            map.insert(632, &[1159]);     // 632 => [1159]
            map.insert(997, &[2183]);     // 997 => [2183]
            map.insert(391, &[775]);     // 391 => [775]
            map.insert(647, &[1287]);     // 647 => [1287]
            map.insert(794, &[2311]);     // 794 => [2311]
            map.insert(775, &[1543]);     // 775 => [1543]
            map.insert(666, &[2567]);     // 666 => [2567]
            map.insert(410, &[3079]);     // 410 => [3079]
            map.insert(155, &[283]);     // 155 => [283]
            map.insert(283, &[539]);     // 283 => [539]
            map.insert(539, &[1051]);     // 539 => [1051]
            map.insert(902, &[2075]);     // 902 => [2075]
            map.insert(171, &[299]);     // 171 => [299]
            map.insert(299, &[555]);     // 299 => [555]
            map.insert(555, &[1067]);     // 555 => [1067]
            map.insert(950, &[2091]);     // 950 => [2091]
            map.insert(203, &[331]);     // 203 => [331]
            map.insert(331, &[587]);     // 331 => [587]
            map.insert(587, &[1099]);     // 587 => [1099]
            map.insert(982, &[2123]);     // 982 => [2123]
            map.insert(244, &[395]);     // 244 => [395]
            map.insert(372, &[651]);     // 372 => [651]
            map.insert(628, &[1163]);     // 628 => [1163]
            map.insert(1001, &[2187]);     // 1001 => [2187]
            map.insert(395, &[779]);     // 395 => [779]
            map.insert(651, &[1291]);     // 651 => [1291]
            map.insert(790, &[2315]);     // 790 => [2315]
            map.insert(779, &[1547]);     // 779 => [1547]
            map.insert(662, &[2571]);     // 662 => [2571]
            map.insert(406, &[3083]);     // 406 => [3083]
            map.insert(179, &[307]);     // 179 => [307]
            map.insert(307, &[563]);     // 307 => [563]
            map.insert(563, &[1075]);     // 563 => [1075]
            map.insert(942, &[2099]);     // 942 => [2099]
            map.insert(211, &[339]);     // 211 => [339]
            map.insert(339, &[595]);     // 339 => [595]
            map.insert(595, &[1107]);     // 595 => [1107]
            map.insert(974, &[2131]);     // 974 => [2131]
            map.insert(236, &[403]);     // 236 => [403]
            map.insert(364, &[659]);     // 364 => [659]
            map.insert(620, &[1171]);     // 620 => [1171]
            map.insert(1009, &[2195]);     // 1009 => [2195]
            map.insert(403, &[787]);     // 403 => [787]
            map.insert(659, &[1299]);     // 659 => [1299]
            map.insert(782, &[2323]);     // 782 => [2323]
            map.insert(787, &[1555]);     // 787 => [1555]
            map.insert(654, &[2579]);     // 654 => [2579]
            map.insert(398, &[3091]);     // 398 => [3091]
            map.insert(227, &[355]);     // 227 => [355]
            map.insert(355, &[611]);     // 355 => [611]
            map.insert(611, &[1123]);     // 611 => [1123]
            map.insert(1022, &[2147]);     // 1022 => [2147]
            map.insert(220, &[419]);     // 220 => [419]
            map.insert(348, &[675]);     // 348 => [675]
            map.insert(604, &[1187]);     // 604 => [1187]
            map.insert(961, &[2211]);     // 961 => [2211]
            map.insert(419, &[803]);     // 419 => [803]
            map.insert(675, &[1315]);     // 675 => [1315]
            map.insert(830, &[2339]);     // 830 => [2339]
            map.insert(803, &[1571]);     // 803 => [1571]
            map.insert(702, &[2595]);     // 702 => [2595]
            map.insert(446, &[3107]);     // 446 => [3107]
            map.insert(188, &[451]);     // 188 => [451]
            map.insert(316, &[707]);     // 316 => [707]
            map.insert(572, &[1219]);     // 572 => [1219]
            map.insert(929, &[2243]);     // 929 => [2243]
            map.insert(451, &[835]);     // 451 => [835]
            map.insert(707, &[1347]);     // 707 => [1347]
            map.insert(862, &[2371]);     // 862 => [2371]
            map.insert(835, &[1603]);     // 835 => [1603]
            map.insert(734, &[2627]);     // 734 => [2627]
            map.insert(478, &[3139]);     // 478 => [3139]
            map.insert(508, &[899]);     // 508 => [899]
            map.insert(764, &[1411]);     // 764 => [1411]
            map.insert(865, &[2435]);     // 865 => [2435]
            map.insert(892, &[1667]);     // 892 => [1667]
            map.insert(737, &[2691]);     // 737 => [2691]
            map.insert(481, &[3203]);     // 481 => [3203]
            map.insert(899, &[1795]);     // 899 => [1795]
            map.insert(542, &[2819]);     // 542 => [2819]
            map.insert(286, &[3331]);     // 286 => [3331]
            map.insert(158, &[3587]);     // 158 => [3587]
            map.insert(173, &[301]);     // 173 => [301]
            map.insert(301, &[557]);     // 301 => [557]
            map.insert(557, &[1069]);     // 557 => [1069]
            map.insert(944, &[2093]);     // 944 => [2093]
            map.insert(205, &[333]);     // 205 => [333]
            map.insert(333, &[589]);     // 333 => [589]
            map.insert(589, &[1101]);     // 589 => [1101]
            map.insert(976, &[2125]);     // 976 => [2125]
            map.insert(242, &[397]);     // 242 => [397]
            map.insert(370, &[653]);     // 370 => [653]
            map.insert(626, &[1165]);     // 626 => [1165]
            map.insert(1007, &[2189]);     // 1007 => [2189]
            map.insert(181, &[309]);     // 181 => [309]
            map.insert(309, &[565]);     // 309 => [565]
            map.insert(565, &[1077]);     // 565 => [1077]
            map.insert(936, &[2101]);     // 936 => [2101]
            map.insert(213, &[341]);     // 213 => [341]
            map.insert(341, &[597]);     // 341 => [597]
            map.insert(597, &[1109]);     // 597 => [1109]
            map.insert(968, &[2133]);     // 968 => [2133]
            map.insert(234, &[405]);     // 234 => [405]
            map.insert(362, &[661]);     // 362 => [661]
            map.insert(618, &[1173]);     // 618 => [1173]
            map.insert(1015, &[2197]);     // 1015 => [2197]
            map.insert(229, &[357]);     // 229 => [357]
            map.insert(357, &[613]);     // 357 => [613]
            map.insert(613, &[1125]);     // 613 => [1125]
            map.insert(1016, &[2149]);     // 1016 => [2149]
            map.insert(218, &[421]);     // 218 => [421]
            map.insert(346, &[677]);     // 346 => [677]
            map.insert(602, &[1189]);     // 602 => [1189]
            map.insert(967, &[2213]);     // 967 => [2213]
            map.insert(421, &[805]);     // 421 => [805]
            map.insert(677, &[1317]);     // 677 => [1317]
            map.insert(824, &[2341]);     // 824 => [2341]
            map.insert(805, &[1573]);     // 805 => [1573]
            map.insert(696, &[2597]);     // 696 => [2597]
            map.insert(440, &[3109]);     // 440 => [3109]
            map.insert(186, &[453]);     // 186 => [453]
            map.insert(314, &[709]);     // 314 => [709]
            map.insert(570, &[1221]);     // 570 => [1221]
            map.insert(935, &[2245]);     // 935 => [2245]
            map.insert(453, &[837]);     // 453 => [837]
            map.insert(709, &[1349]);     // 709 => [1349]
            map.insert(856, &[2373]);     // 856 => [2373]
            map.insert(837, &[1605]);     // 837 => [1605]
            map.insert(728, &[2629]);     // 728 => [2629]
            map.insert(472, &[3141]);     // 472 => [3141]
            map.insert(506, &[901]);     // 506 => [901]
            map.insert(762, &[1413]);     // 762 => [1413]
            map.insert(871, &[2437]);     // 871 => [2437]
            map.insert(890, &[1669]);     // 890 => [1669]
            map.insert(743, &[2693]);     // 743 => [2693]
            map.insert(487, &[3205]);     // 487 => [3205]
            map.insert(185, &[313]);     // 185 => [313]
            map.insert(313, &[569]);     // 313 => [569]
            map.insert(569, &[1081]);     // 569 => [1081]
            map.insert(932, &[2105]);     // 932 => [2105]
            map.insert(217, &[345]);     // 217 => [345]
            map.insert(345, &[601]);     // 345 => [601]
            map.insert(601, &[1113]);     // 601 => [1113]
            map.insert(964, &[2137]);     // 964 => [2137]
            map.insert(230, &[409]);     // 230 => [409]
            map.insert(358, &[665]);     // 358 => [665]
            map.insert(614, &[1177]);     // 614 => [1177]
            map.insert(1019, &[2201]);     // 1019 => [2201]
            map.insert(233, &[361]);     // 233 => [361]
            map.insert(361, &[617]);     // 361 => [617]
            map.insert(617, &[1129]);     // 617 => [1129]
            map.insert(1012, &[2153]);     // 1012 => [2153]
            map.insert(214, &[425]);     // 214 => [425]
            map.insert(342, &[681]);     // 342 => [681]
            map.insert(598, &[1193]);     // 598 => [1193]
            map.insert(971, &[2217]);     // 971 => [2217]
            map.insert(425, &[809]);     // 425 => [809]
            map.insert(681, &[1321]);     // 681 => [1321]
            map.insert(820, &[2345]);     // 820 => [2345]
            map.insert(809, &[1577]);     // 809 => [1577]
            map.insert(692, &[2601]);     // 692 => [2601]
            map.insert(436, &[3113]);     // 436 => [3113]
            map.insert(182, &[457]);     // 182 => [457]
            map.insert(310, &[713]);     // 310 => [713]
            map.insert(566, &[1225]);     // 566 => [1225]
            map.insert(939, &[2249]);     // 939 => [2249]
            map.insert(457, &[841]);     // 457 => [841]
            map.insert(713, &[1353]);     // 713 => [1353]
            map.insert(852, &[2377]);     // 852 => [2377]
            map.insert(841, &[1609]);     // 841 => [1609]
            map.insert(724, &[2633]);     // 724 => [2633]
            map.insert(468, &[3145]);     // 468 => [3145]
            map.insert(502, &[905]);     // 502 => [905]
            map.insert(758, &[1417]);     // 758 => [1417]
            map.insert(875, &[2441]);     // 875 => [2441]
            map.insert(886, &[1673]);     // 886 => [1673]
            map.insert(747, &[2697]);     // 747 => [2697]
            map.insert(491, &[3209]);     // 491 => [3209]
            map.insert(241, &[369]);     // 241 => [369]
            map.insert(369, &[625]);     // 369 => [625]
            map.insert(625, &[1137]);     // 625 => [1137]
            map.insert(1004, &[2161]);     // 1004 => [2161]
            map.insert(206, &[433]);     // 206 => [433]
            map.insert(334, &[689]);     // 334 => [689]
            map.insert(590, &[1201]);     // 590 => [1201]
            map.insert(979, &[2225]);     // 979 => [2225]
            map.insert(433, &[817]);     // 433 => [817]
            map.insert(689, &[1329]);     // 689 => [1329]
            map.insert(812, &[2353]);     // 812 => [2353]
            map.insert(817, &[1585]);     // 817 => [1585]
            map.insert(684, &[2609]);     // 684 => [2609]
            map.insert(428, &[3121]);     // 428 => [3121]
            map.insert(174, &[465]);     // 174 => [465]
            map.insert(302, &[721]);     // 302 => [721]
            map.insert(558, &[1233]);     // 558 => [1233]
            map.insert(947, &[2257]);     // 947 => [2257]
            map.insert(465, &[849]);     // 465 => [849]
            map.insert(721, &[1361]);     // 721 => [1361]
            map.insert(844, &[2385]);     // 844 => [2385]
            map.insert(849, &[1617]);     // 849 => [1617]
            map.insert(716, &[2641]);     // 716 => [2641]
            map.insert(460, &[3153]);     // 460 => [3153]
            map.insert(494, &[913]);     // 494 => [913]
            map.insert(750, &[1425]);     // 750 => [1425]
            map.insert(883, &[2449]);     // 883 => [2449]
            map.insert(878, &[1681]);     // 878 => [1681]
            map.insert(755, &[2705]);     // 755 => [2705]
            map.insert(499, &[3217]);     // 499 => [3217]
            map.insert(422, &[806]);     // 422 => [806]
            map.insert(678, &[1318]);     // 678 => [1318]
            map.insert(827, &[2342]);     // 827 => [2342]
            map.insert(806, &[1574]);     // 806 => [1574]
            map.insert(699, &[2598]);     // 699 => [2598]
            map.insert(443, &[3110]);     // 443 => [3110]
            map.insert(454, &[838]);     // 454 => [838]
            map.insert(710, &[1350]);     // 710 => [1350]
            map.insert(859, &[2374]);     // 859 => [2374]
            map.insert(838, &[1606]);     // 838 => [1606]
            map.insert(731, &[2630]);     // 731 => [2630]
            map.insert(475, &[3142]);     // 475 => [3142]
            map.insert(505, &[902]);     // 505 => [902]
            map.insert(761, &[1414]);     // 761 => [1414]
            map.insert(868, &[2438]);     // 868 => [2438]
            map.insert(889, &[1670]);     // 889 => [1670]
            map.insert(740, &[2694]);     // 740 => [2694]
            map.insert(484, &[3206]);     // 484 => [3206]
            map.insert(426, &[810]);     // 426 => [810]
            map.insert(682, &[1322]);     // 682 => [1322]
            map.insert(823, &[2346]);     // 823 => [2346]
            map.insert(810, &[1578]);     // 810 => [1578]
            map.insert(695, &[2602]);     // 695 => [2602]
            map.insert(439, &[3114]);     // 439 => [3114]
            map.insert(458, &[842]);     // 458 => [842]
            map.insert(714, &[1354]);     // 714 => [1354]
            map.insert(855, &[2378]);     // 855 => [2378]
            map.insert(842, &[1610]);     // 842 => [1610]
            map.insert(727, &[2634]);     // 727 => [2634]
            map.insert(471, &[3146]);     // 471 => [3146]
            map.insert(501, &[906]);     // 501 => [906]
            map.insert(757, &[1418]);     // 757 => [1418]
            map.insert(872, &[2442]);     // 872 => [2442]
            map.insert(885, &[1674]);     // 885 => [1674]
            map.insert(744, &[2698]);     // 744 => [2698]
            map.insert(488, &[3210]);     // 488 => [3210]
            map.insert(434, &[818]);     // 434 => [818]
            map.insert(690, &[1330]);     // 690 => [1330]
            map.insert(815, &[2354]);     // 815 => [2354]
            map.insert(818, &[1586]);     // 818 => [1586]
            map.insert(687, &[2610]);     // 687 => [2610]
            map.insert(431, &[3122]);     // 431 => [3122]
            map.insert(466, &[850]);     // 466 => [850]
            map.insert(722, &[1362]);     // 722 => [1362]
            map.insert(847, &[2386]);     // 847 => [2386]
            map.insert(850, &[1618]);     // 850 => [1618]
            map.insert(719, &[2642]);     // 719 => [2642]
            map.insert(463, &[3154]);     // 463 => [3154]
            map.insert(493, &[914]);     // 493 => [914]
            map.insert(749, &[1426]);     // 749 => [1426]
            map.insert(880, &[2450]);     // 880 => [2450]
            map.insert(877, &[1682]);     // 877 => [1682]
            map.insert(752, &[2706]);     // 752 => [2706]
            map.insert(496, &[3218]);     // 496 => [3218]
            map.insert(423, &[807]);     // 423 => [807]
            map.insert(679, &[1319]);     // 679 => [1319]
            map.insert(826, &[2343]);     // 826 => [2343]
            map.insert(807, &[1575]);     // 807 => [1575]
            map.insert(698, &[2599]);     // 698 => [2599]
            map.insert(442, &[3111]);     // 442 => [3111]
            map.insert(455, &[839]);     // 455 => [839]
            map.insert(711, &[1351]);     // 711 => [1351]
            map.insert(858, &[2375]);     // 858 => [2375]
            map.insert(839, &[1607]);     // 839 => [1607]
            map.insert(730, &[2631]);     // 730 => [2631]
            map.insert(474, &[3143]);     // 474 => [3143]
            map.insert(504, &[903]);     // 504 => [903]
            map.insert(760, &[1415]);     // 760 => [1415]
            map.insert(869, &[2439]);     // 869 => [2439]
            map.insert(888, &[1671]);     // 888 => [1671]
            map.insert(741, &[2695]);     // 741 => [2695]
            map.insert(485, &[3207]);     // 485 => [3207]
            map.insert(427, &[811]);     // 427 => [811]
            map.insert(683, &[1323]);     // 683 => [1323]
            map.insert(822, &[2347]);     // 822 => [2347]
            map.insert(811, &[1579]);     // 811 => [1579]
            map.insert(694, &[2603]);     // 694 => [2603]
            map.insert(438, &[3115]);     // 438 => [3115]
            map.insert(459, &[843]);     // 459 => [843]
            map.insert(715, &[1355]);     // 715 => [1355]
            map.insert(854, &[2379]);     // 854 => [2379]
            map.insert(843, &[1611]);     // 843 => [1611]
            map.insert(726, &[2635]);     // 726 => [2635]
            map.insert(470, &[3147]);     // 470 => [3147]
            map.insert(500, &[907]);     // 500 => [907]
            map.insert(756, &[1419]);     // 756 => [1419]
            map.insert(873, &[2443]);     // 873 => [2443]
            map.insert(884, &[1675]);     // 884 => [1675]
            map.insert(745, &[2699]);     // 745 => [2699]
            map.insert(489, &[3211]);     // 489 => [3211]
            map.insert(435, &[819]);     // 435 => [819]
            map.insert(691, &[1331]);     // 691 => [1331]
            map.insert(814, &[2355]);     // 814 => [2355]
            map.insert(819, &[1587]);     // 819 => [1587]
            map.insert(686, &[2611]);     // 686 => [2611]
            map.insert(430, &[3123]);     // 430 => [3123]
            map.insert(467, &[851]);     // 467 => [851]
            map.insert(723, &[1363]);     // 723 => [1363]
            map.insert(846, &[2387]);     // 846 => [2387]
            map.insert(851, &[1619]);     // 851 => [1619]
            map.insert(718, &[2643]);     // 718 => [2643]
            map.insert(462, &[3155]);     // 462 => [3155]
            map.insert(492, &[915]);     // 492 => [915]
            map.insert(748, &[1427]);     // 748 => [1427]
            map.insert(881, &[2451]);     // 881 => [2451]
            map.insert(876, &[1683]);     // 876 => [1683]
            map.insert(753, &[2707]);     // 753 => [2707]
            map.insert(497, &[3219]);     // 497 => [3219]
            
            SYNDROME_MAP = Box::into_raw(map);
        }
    });
}

impl GuavaCode12_2 {
    fn parity_check_matrix_transposed(&self) -> &BinMatrix {
        init();
        unsafe {
            PARITY_MATRIX_T.as_ref().unwrap()
        }
    }
}

impl BinaryCode for GuavaCode12_2 {
    fn name(&self) -> String {
        "[12, 2] Guava code".to_owned()
    }

    fn length(&self) -> usize {
        12
    }

    fn dimension(&self) -> usize {
        2
    }

    fn generator_matrix(&self) -> &BinMatrix {
        init();
        unsafe {
            GENERATOR_MATRIX.as_ref().unwrap()
        }
    }

    fn parity_check_matrix(&self) -> &BinMatrix {
        init();
        unsafe {
            PARITY_MATRIX.as_ref().unwrap()
        }
    }

    fn decode_to_code(&self, c: &BinVector) -> Result<BinVector, &str> {
        init();
        let map = unsafe {
            SYNDROME_MAP.as_ref().unwrap()
        };
        debug_assert_eq!(c.len(), self.length(), "the length doesn't match the expected length (length of the code)");
        let he = c * self.parity_check_matrix_transposed();
        let mut error = BinVector::with_capacity(12);
        let stor = unsafe { error.get_storage_mut() };
        let errbytes = map[&he.as_u64()];
        debug_assert_eq!(errbytes.len(), 12 / 64 + if 12 % 64 != 0 { 1 } else { 0 });
        stor.clear();
        stor.extend_from_slice(&errbytes[..]);
        unsafe { error.set_len(12) };
        debug_assert_eq!(error.len(), self.length(), "internal: the error vector is of the wrong length");
        let result = c + &error;
        debug_assert_eq!(result.len(), self.length(), "internal: the result vector is of the wrong length");
        debug_assert_eq!((&result * self.parity_check_matrix_transposed()).count_ones(), 0);
        Ok(result)
    }

    fn decode_to_message(&self, c: &BinVector) -> Result<BinVector, &str> {
        
        let mut codeword = self.decode_to_code(c)?;
        codeword.truncate(2);
        Ok(codeword)
        
    }

    fn decode_slice(&self, c: &mut [u64]) {
        init();
        
        debug_assert_eq!(c[12 / 64] & !((1 << 12) - 1), 0, "this message has excess bits");

        let map = unsafe {
            SYNDROME_MAP.as_ref().unwrap()
        };
        let he = &BinMatrix::from_slices(&[&c[..]], self.length()) * self.parity_check_matrix_transposed();
        let error = map[unsafe { &he.get_word_unchecked(0, 0) }];
        c.iter_mut().zip(error.iter().copied()).for_each(|(sample, error)| *sample ^= error as u64);
    }

    
}

#[cfg(test)]
mod tests {
    use super::*;
    use m4ri_rust::friendly::BinVector;
    use crate::oracle::Sample;

    #[test]
    fn size() {
        let code = GuavaCode12_2.generator_matrix();
        assert_eq!(code.ncols(), 12);
        assert_eq!(code.nrows(), 2);
    }

    #[test]
    fn test_decode_sample() {
        let code = GuavaCode12_2;
        for _ in 0..1000 {
            // setup
            let vec = BinVector::random(code.length());
            let mut sample_a = Sample::from_binvector(&vec, false);
            let mut sample_b = Sample::from_binvector(&vec, true);
            
            let decoded_vec = code.decode_to_message(&vec).unwrap();
            println!("decoded_vec: {:?}", decoded_vec);

            // test vectors
            let decoded_vec_sample_a = Sample::from_binvector(&decoded_vec, false);
            let decoded_vec_sample_b = Sample::from_binvector(&decoded_vec, true);

            code.decode_sample(&mut sample_a);
            code.decode_sample(&mut sample_b);
            assert_eq!(sample_a.get_product(), false);
            assert_eq!(sample_b.get_product(), true);
            assert_eq!(sample_a, decoded_vec_sample_a);
            assert_eq!(sample_b, decoded_vec_sample_b);
        }
    }

    #[test]
    fn random_decode_tests() {

        
        {
            let code = GuavaCode12_2;
            let randvec = BinVector::from_bools(&[true, false, true, true, true, false, true, false, false, false, false, false]);
            let codeword = BinVector::from_bools(&[true, true, true, true, true, true, true, true, false, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode12_2;
            let randvec = BinVector::from_bools(&[true, false, false, false, false, false, false, true, true, true, true, true]);
            let codeword = BinVector::from_bools(&[false, true, false, false, false, true, true, true, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode12_2;
            let randvec = BinVector::from_bools(&[true, true, true, false, true, false, false, true, true, false, true, false]);
            let codeword = BinVector::from_bools(&[true, false, true, true, true, false, false, false, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode12_2;
            let randvec = BinVector::from_bools(&[true, false, false, false, true, true, true, true, true, true, false, true]);
            let codeword = BinVector::from_bools(&[false, true, false, false, false, true, true, true, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode12_2;
            let randvec = BinVector::from_bools(&[false, true, true, true, false, false, true, true, false, true, true, true]);
            let codeword = BinVector::from_bools(&[false, true, false, false, false, true, true, true, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode12_2;
            let randvec = BinVector::from_bools(&[false, true, false, false, true, false, false, false, true, false, false, false]);
            let codeword = BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode12_2;
            let randvec = BinVector::from_bools(&[false, true, false, false, true, true, false, true, true, false, true, false]);
            let codeword = BinVector::from_bools(&[false, true, false, false, false, true, true, true, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode12_2;
            let randvec = BinVector::from_bools(&[true, false, false, true, true, false, false, false, true, false, false, true]);
            let codeword = BinVector::from_bools(&[true, false, true, true, true, false, false, false, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode12_2;
            let randvec = BinVector::from_bools(&[true, false, true, true, true, false, false, false, false, false, true, false]);
            let codeword = BinVector::from_bools(&[true, false, true, true, true, false, false, false, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode12_2;
            let randvec = BinVector::from_bools(&[true, false, true, false, false, false, true, true, true, true, true, true]);
            let codeword = BinVector::from_bools(&[false, true, false, false, false, true, true, true, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode12_2;
            let randvec = BinVector::from_bools(&[false, false, true, false, true, true, true, false, false, true, false, true]);
            let codeword = BinVector::from_bools(&[true, true, true, true, true, true, true, true, false, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode12_2;
            let randvec = BinVector::from_bools(&[false, false, false, false, false, false, false, true, false, true, false, true]);
            let codeword = BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode12_2;
            let randvec = BinVector::from_bools(&[true, false, true, false, false, true, false, true, true, false, false, false]);
            let codeword = BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode12_2;
            let randvec = BinVector::from_bools(&[false, false, false, true, false, false, true, true, false, true, true, true]);
            let codeword = BinVector::from_bools(&[false, true, false, false, false, true, true, true, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode12_2;
            let randvec = BinVector::from_bools(&[true, true, true, false, true, true, true, false, false, true, true, true]);
            let codeword = BinVector::from_bools(&[false, true, false, false, false, true, true, true, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode12_2;
            let randvec = BinVector::from_bools(&[true, true, true, true, true, false, false, false, true, true, false, true]);
            let codeword = BinVector::from_bools(&[true, false, true, true, true, false, false, false, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode12_2;
            let randvec = BinVector::from_bools(&[false, false, false, false, true, false, false, false, false, false, false, true]);
            let codeword = BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode12_2;
            let randvec = BinVector::from_bools(&[true, true, true, false, false, true, false, false, false, false, true, true]);
            let codeword = BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode12_2;
            let randvec = BinVector::from_bools(&[false, false, true, true, false, true, false, true, true, true, false, false]);
            let codeword = BinVector::from_bools(&[true, true, true, true, true, true, true, true, false, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode12_2;
            let randvec = BinVector::from_bools(&[true, true, false, false, false, false, true, false, true, true, true, true]);
            let codeword = BinVector::from_bools(&[false, true, false, false, false, true, true, true, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
    }

    #[test]
    fn test_generator_representation() {
        init();
        let generator_matrix = unsafe { GENERATOR_MATRIX.as_ref().unwrap() };
        let first_row = generator_matrix.get_window(0, 0, 1, generator_matrix.ncols());
        let vector = BinVector::from_bools(&[ true, false, true, true, true, false, false, false, true, true, true, true ]);
        assert_eq!(vector, first_row.as_vector());
    }

}
