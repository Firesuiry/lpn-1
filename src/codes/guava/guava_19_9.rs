use std::boxed::Box;
use std::default::Default;
use std::sync::Once;

use fnv::FnvHashMap;

use m4ri_rust::friendly::BinMatrix;
use m4ri_rust::friendly::BinVector;

use crate::codes::BinaryCode;

/// ``[19, 9]`` Guava code
///
/// Best code found from the GUAVA database version 3.15
///
/// Decodes using Syndrome decoding
#[derive(Clone, Serialize)]
pub struct GuavaCode19_9;

static INIT: Once = Once::new();
static mut GENERATOR_MATRIX: *const BinMatrix = 0 as *const BinMatrix;
static mut PARITY_MATRIX: *const BinMatrix = 0 as *const BinMatrix;
static mut PARITY_MATRIX_T: *const BinMatrix = 0 as *const BinMatrix;
static mut SYNDROME_MAP: *const FnvHashMap<u64, &'static [usize; 1]> = 0 as *const FnvHashMap<u64, &'static [usize; 1]>;

fn init() {
    INIT.call_once(|| {
        unsafe {
            let matrix = Box::new(BinMatrix::from_slices(&[
                &[ 338433 ],
                &[ 372738 ],
                &[ 194052 ],
                &[ 285192 ],
                &[ 491024 ],
                &[ 433696 ],
                &[ 442944 ],
                &[ 456832 ],
                &[ 479488 ],
                
            ], 19));
            GENERATOR_MATRIX = Box::into_raw(matrix);

            let matrix = Box::new(BinMatrix::from_slices(&[
                &[ 229377 ],
                &[ 336386 ],
                &[ 477700 ],
                &[ 518152 ],
                &[ 414224 ],
                &[ 370720 ],
                &[ 55872 ],
                &[ 498304 ],
                &[ 127232 ],
                &[ 308224 ],
                
            ], 19));
            let matrix_t = Box::new(matrix.transposed());
            PARITY_MATRIX = Box::into_raw(matrix);
            PARITY_MATRIX_T = Box::into_raw(matrix_t);

            let mut map = Box::new(FnvHashMap::with_capacity_and_hasher(1024, Default::default()));
            map.insert(0, &[0]);     // 0 => [0]
            map.insert(1, &[1]);     // 1 => [1]
            map.insert(2, &[2]);     // 2 => [2]
            map.insert(4, &[4]);     // 4 => [4]
            map.insert(8, &[8]);     // 8 => [8]
            map.insert(16, &[16]);     // 16 => [16]
            map.insert(32, &[32]);     // 32 => [32]
            map.insert(64, &[64]);     // 64 => [64]
            map.insert(128, &[128]);     // 128 => [128]
            map.insert(256, &[256]);     // 256 => [256]
            map.insert(214, &[512]);     // 214 => [512]
            map.insert(512, &[1024]);     // 512 => [1024]
            map.insert(236, &[2048]);     // 236 => [2048]
            map.insert(976, &[4096]);     // 976 => [4096]
            map.insert(810, &[8192]);     // 810 => [8192]
            map.insert(348, &[16384]);     // 348 => [16384]
            map.insert(1001, &[32768]);     // 1001 => [32768]
            map.insert(431, &[65536]);     // 431 => [65536]
            map.insert(157, &[131072]);     // 157 => [131072]
            map.insert(702, &[262144]);     // 702 => [262144]
            map.insert(3, &[3]);     // 3 => [3]
            map.insert(5, &[5]);     // 5 => [5]
            map.insert(9, &[9]);     // 9 => [9]
            map.insert(17, &[17]);     // 17 => [17]
            map.insert(33, &[33]);     // 33 => [33]
            map.insert(65, &[65]);     // 65 => [65]
            map.insert(129, &[129]);     // 129 => [129]
            map.insert(257, &[257]);     // 257 => [257]
            map.insert(215, &[513]);     // 215 => [513]
            map.insert(513, &[1025]);     // 513 => [1025]
            map.insert(237, &[2049]);     // 237 => [2049]
            map.insert(977, &[4097]);     // 977 => [4097]
            map.insert(811, &[8193]);     // 811 => [8193]
            map.insert(349, &[16385]);     // 349 => [16385]
            map.insert(1000, &[32769]);     // 1000 => [32769]
            map.insert(430, &[65537]);     // 430 => [65537]
            map.insert(156, &[131073]);     // 156 => [131073]
            map.insert(703, &[262145]);     // 703 => [262145]
            map.insert(6, &[6]);     // 6 => [6]
            map.insert(10, &[10]);     // 10 => [10]
            map.insert(18, &[18]);     // 18 => [18]
            map.insert(34, &[34]);     // 34 => [34]
            map.insert(66, &[66]);     // 66 => [66]
            map.insert(130, &[130]);     // 130 => [130]
            map.insert(258, &[258]);     // 258 => [258]
            map.insert(212, &[514]);     // 212 => [514]
            map.insert(514, &[1026]);     // 514 => [1026]
            map.insert(238, &[2050]);     // 238 => [2050]
            map.insert(978, &[4098]);     // 978 => [4098]
            map.insert(808, &[8194]);     // 808 => [8194]
            map.insert(350, &[16386]);     // 350 => [16386]
            map.insert(1003, &[32770]);     // 1003 => [32770]
            map.insert(429, &[65538]);     // 429 => [65538]
            map.insert(159, &[131074]);     // 159 => [131074]
            map.insert(700, &[262146]);     // 700 => [262146]
            map.insert(12, &[12]);     // 12 => [12]
            map.insert(20, &[20]);     // 20 => [20]
            map.insert(36, &[36]);     // 36 => [36]
            map.insert(68, &[68]);     // 68 => [68]
            map.insert(132, &[132]);     // 132 => [132]
            map.insert(260, &[260]);     // 260 => [260]
            map.insert(210, &[516]);     // 210 => [516]
            map.insert(516, &[1028]);     // 516 => [1028]
            map.insert(232, &[2052]);     // 232 => [2052]
            map.insert(980, &[4100]);     // 980 => [4100]
            map.insert(814, &[8196]);     // 814 => [8196]
            map.insert(344, &[16388]);     // 344 => [16388]
            map.insert(1005, &[32772]);     // 1005 => [32772]
            map.insert(427, &[65540]);     // 427 => [65540]
            map.insert(153, &[131076]);     // 153 => [131076]
            map.insert(698, &[262148]);     // 698 => [262148]
            map.insert(24, &[24]);     // 24 => [24]
            map.insert(40, &[40]);     // 40 => [40]
            map.insert(72, &[72]);     // 72 => [72]
            map.insert(136, &[136]);     // 136 => [136]
            map.insert(264, &[264]);     // 264 => [264]
            map.insert(222, &[520]);     // 222 => [520]
            map.insert(520, &[1032]);     // 520 => [1032]
            map.insert(228, &[2056]);     // 228 => [2056]
            map.insert(984, &[4104]);     // 984 => [4104]
            map.insert(802, &[8200]);     // 802 => [8200]
            map.insert(340, &[16392]);     // 340 => [16392]
            map.insert(993, &[32776]);     // 993 => [32776]
            map.insert(423, &[65544]);     // 423 => [65544]
            map.insert(149, &[131080]);     // 149 => [131080]
            map.insert(694, &[262152]);     // 694 => [262152]
            map.insert(48, &[48]);     // 48 => [48]
            map.insert(80, &[80]);     // 80 => [80]
            map.insert(144, &[144]);     // 144 => [144]
            map.insert(272, &[272]);     // 272 => [272]
            map.insert(198, &[528]);     // 198 => [528]
            map.insert(528, &[1040]);     // 528 => [1040]
            map.insert(252, &[2064]);     // 252 => [2064]
            map.insert(960, &[4112]);     // 960 => [4112]
            map.insert(826, &[8208]);     // 826 => [8208]
            map.insert(332, &[16400]);     // 332 => [16400]
            map.insert(1017, &[32784]);     // 1017 => [32784]
            map.insert(447, &[65552]);     // 447 => [65552]
            map.insert(141, &[131088]);     // 141 => [131088]
            map.insert(686, &[262160]);     // 686 => [262160]
            map.insert(96, &[96]);     // 96 => [96]
            map.insert(160, &[160]);     // 160 => [160]
            map.insert(288, &[288]);     // 288 => [288]
            map.insert(246, &[544]);     // 246 => [544]
            map.insert(544, &[1056]);     // 544 => [1056]
            map.insert(204, &[2080]);     // 204 => [2080]
            map.insert(1008, &[4128]);     // 1008 => [4128]
            map.insert(778, &[8224]);     // 778 => [8224]
            map.insert(380, &[16416]);     // 380 => [16416]
            map.insert(969, &[32800]);     // 969 => [32800]
            map.insert(399, &[65568]);     // 399 => [65568]
            map.insert(189, &[131104]);     // 189 => [131104]
            map.insert(670, &[262176]);     // 670 => [262176]
            map.insert(192, &[192]);     // 192 => [192]
            map.insert(320, &[320]);     // 320 => [320]
            map.insert(150, &[576]);     // 150 => [576]
            map.insert(576, &[1088]);     // 576 => [1088]
            map.insert(172, &[2112]);     // 172 => [2112]
            map.insert(912, &[4160]);     // 912 => [4160]
            map.insert(874, &[8256]);     // 874 => [8256]
            map.insert(284, &[16448]);     // 284 => [16448]
            map.insert(937, &[32832]);     // 937 => [32832]
            map.insert(495, &[65600]);     // 495 => [65600]
            map.insert(221, &[131136]);     // 221 => [131136]
            map.insert(766, &[262208]);     // 766 => [262208]
            map.insert(384, &[384]);     // 384 => [384]
            map.insert(86, &[640]);     // 86 => [640]
            map.insert(640, &[1152]);     // 640 => [1152]
            map.insert(108, &[2176]);     // 108 => [2176]
            map.insert(848, &[4224]);     // 848 => [4224]
            map.insert(938, &[8320]);     // 938 => [8320]
            map.insert(476, &[16512]);     // 476 => [16512]
            map.insert(873, &[32896]);     // 873 => [32896]
            map.insert(303, &[65664]);     // 303 => [65664]
            map.insert(29, &[131200]);     // 29 => [131200]
            map.insert(574, &[262272]);     // 574 => [262272]
            map.insert(470, &[768]);     // 470 => [768]
            map.insert(768, &[1280]);     // 768 => [1280]
            map.insert(492, &[2304]);     // 492 => [2304]
            map.insert(720, &[4352]);     // 720 => [4352]
            map.insert(554, &[8448]);     // 554 => [8448]
            map.insert(92, &[16640]);     // 92 => [16640]
            map.insert(745, &[33024]);     // 745 => [33024]
            map.insert(175, &[65792]);     // 175 => [65792]
            map.insert(413, &[131328]);     // 413 => [131328]
            map.insert(958, &[262400]);     // 958 => [262400]
            map.insert(726, &[1536]);     // 726 => [1536]
            map.insert(58, &[2560]);     // 58 => [2560]
            map.insert(774, &[4608]);     // 774 => [4608]
            map.insert(1020, &[8704]);     // 1020 => [8704]
            map.insert(394, &[16896]);     // 394 => [16896]
            map.insert(831, &[33280]);     // 831 => [33280]
            map.insert(377, &[66048]);     // 377 => [66048]
            map.insert(75, &[131584]);     // 75 => [131584]
            map.insert(616, &[262656]);     // 616 => [262656]
            map.insert(748, &[3072]);     // 748 => [3072]
            map.insert(464, &[5120]);     // 464 => [5120]
            map.insert(298, &[9216]);     // 298 => [9216]
            map.insert(860, &[17408]);     // 860 => [17408]
            map.insert(489, &[33792]);     // 489 => [33792]
            map.insert(943, &[66560]);     // 943 => [66560]
            map.insert(669, &[132096]);     // 669 => [132096]
            map.insert(190, &[263168]);     // 190 => [263168]
            map.insert(828, &[6144]);     // 828 => [6144]
            map.insert(966, &[10240]);     // 966 => [10240]
            map.insert(432, &[18432]);     // 432 => [18432]
            map.insert(773, &[34816]);     // 773 => [34816]
            map.insert(323, &[67584]);     // 323 => [67584]
            map.insert(113, &[133120]);     // 113 => [133120]
            map.insert(594, &[264192]);     // 594 => [264192]
            map.insert(250, &[12288]);     // 250 => [12288]
            map.insert(652, &[20480]);     // 652 => [20480]
            map.insert(57, &[36864]);     // 57 => [36864]
            map.insert(639, &[69632]);     // 639 => [69632]
            map.insert(845, &[135168]);     // 845 => [135168]
            map.insert(366, &[266240]);     // 366 => [266240]
            map.insert(630, &[24576]);     // 630 => [24576]
            map.insert(195, &[40960]);     // 195 => [40960]
            map.insert(645, &[73728]);     // 645 => [73728]
            map.insert(951, &[139264]);     // 951 => [139264]
            map.insert(404, &[270336]);     // 404 => [270336]
            map.insert(693, &[49152]);     // 693 => [49152]
            map.insert(243, &[81920]);     // 243 => [81920]
            map.insert(449, &[147456]);     // 449 => [147456]
            map.insert(994, &[278528]);     // 994 => [278528]
            map.insert(582, &[98304]);     // 582 => [98304]
            map.insert(884, &[163840]);     // 884 => [163840]
            map.insert(343, &[294912]);     // 343 => [294912]
            map.insert(306, &[196608]);     // 306 => [196608]
            map.insert(785, &[327680]);     // 785 => [327680]
            map.insert(547, &[393216]);     // 547 => [393216]
            map.insert(7, &[7]);     // 7 => [7]
            map.insert(11, &[11]);     // 11 => [11]
            map.insert(19, &[19]);     // 19 => [19]
            map.insert(35, &[35]);     // 35 => [35]
            map.insert(67, &[67]);     // 67 => [67]
            map.insert(131, &[131]);     // 131 => [131]
            map.insert(259, &[259]);     // 259 => [259]
            map.insert(213, &[515]);     // 213 => [515]
            map.insert(515, &[1027]);     // 515 => [1027]
            map.insert(239, &[2051]);     // 239 => [2051]
            map.insert(979, &[4099]);     // 979 => [4099]
            map.insert(809, &[8195]);     // 809 => [8195]
            map.insert(351, &[16387]);     // 351 => [16387]
            map.insert(1002, &[32771]);     // 1002 => [32771]
            map.insert(428, &[65539]);     // 428 => [65539]
            map.insert(158, &[131075]);     // 158 => [131075]
            map.insert(701, &[262147]);     // 701 => [262147]
            map.insert(13, &[13]);     // 13 => [13]
            map.insert(21, &[21]);     // 21 => [21]
            map.insert(37, &[37]);     // 37 => [37]
            map.insert(69, &[69]);     // 69 => [69]
            map.insert(133, &[133]);     // 133 => [133]
            map.insert(261, &[261]);     // 261 => [261]
            map.insert(211, &[517]);     // 211 => [517]
            map.insert(517, &[1029]);     // 517 => [1029]
            map.insert(233, &[2053]);     // 233 => [2053]
            map.insert(981, &[4101]);     // 981 => [4101]
            map.insert(815, &[8197]);     // 815 => [8197]
            map.insert(345, &[16389]);     // 345 => [16389]
            map.insert(1004, &[32773]);     // 1004 => [32773]
            map.insert(426, &[65541]);     // 426 => [65541]
            map.insert(152, &[131077]);     // 152 => [131077]
            map.insert(699, &[262149]);     // 699 => [262149]
            map.insert(25, &[25]);     // 25 => [25]
            map.insert(41, &[41]);     // 41 => [41]
            map.insert(73, &[73]);     // 73 => [73]
            map.insert(137, &[137]);     // 137 => [137]
            map.insert(265, &[265]);     // 265 => [265]
            map.insert(223, &[521]);     // 223 => [521]
            map.insert(521, &[1033]);     // 521 => [1033]
            map.insert(229, &[2057]);     // 229 => [2057]
            map.insert(985, &[4105]);     // 985 => [4105]
            map.insert(803, &[8201]);     // 803 => [8201]
            map.insert(341, &[16393]);     // 341 => [16393]
            map.insert(992, &[32777]);     // 992 => [32777]
            map.insert(422, &[65545]);     // 422 => [65545]
            map.insert(148, &[131081]);     // 148 => [131081]
            map.insert(695, &[262153]);     // 695 => [262153]
            map.insert(49, &[49]);     // 49 => [49]
            map.insert(81, &[81]);     // 81 => [81]
            map.insert(145, &[145]);     // 145 => [145]
            map.insert(273, &[273]);     // 273 => [273]
            map.insert(199, &[529]);     // 199 => [529]
            map.insert(529, &[1041]);     // 529 => [1041]
            map.insert(253, &[2065]);     // 253 => [2065]
            map.insert(961, &[4113]);     // 961 => [4113]
            map.insert(827, &[8209]);     // 827 => [8209]
            map.insert(333, &[16401]);     // 333 => [16401]
            map.insert(1016, &[32785]);     // 1016 => [32785]
            map.insert(446, &[65553]);     // 446 => [65553]
            map.insert(140, &[131089]);     // 140 => [131089]
            map.insert(687, &[262161]);     // 687 => [262161]
            map.insert(97, &[97]);     // 97 => [97]
            map.insert(161, &[161]);     // 161 => [161]
            map.insert(289, &[289]);     // 289 => [289]
            map.insert(247, &[545]);     // 247 => [545]
            map.insert(545, &[1057]);     // 545 => [1057]
            map.insert(205, &[2081]);     // 205 => [2081]
            map.insert(1009, &[4129]);     // 1009 => [4129]
            map.insert(779, &[8225]);     // 779 => [8225]
            map.insert(381, &[16417]);     // 381 => [16417]
            map.insert(968, &[32801]);     // 968 => [32801]
            map.insert(398, &[65569]);     // 398 => [65569]
            map.insert(188, &[131105]);     // 188 => [131105]
            map.insert(671, &[262177]);     // 671 => [262177]
            map.insert(193, &[193]);     // 193 => [193]
            map.insert(321, &[321]);     // 321 => [321]
            map.insert(151, &[577]);     // 151 => [577]
            map.insert(577, &[1089]);     // 577 => [1089]
            map.insert(173, &[2113]);     // 173 => [2113]
            map.insert(913, &[4161]);     // 913 => [4161]
            map.insert(875, &[8257]);     // 875 => [8257]
            map.insert(285, &[16449]);     // 285 => [16449]
            map.insert(936, &[32833]);     // 936 => [32833]
            map.insert(494, &[65601]);     // 494 => [65601]
            map.insert(220, &[131137]);     // 220 => [131137]
            map.insert(767, &[262209]);     // 767 => [262209]
            map.insert(385, &[385]);     // 385 => [385]
            map.insert(87, &[641]);     // 87 => [641]
            map.insert(641, &[1153]);     // 641 => [1153]
            map.insert(109, &[2177]);     // 109 => [2177]
            map.insert(849, &[4225]);     // 849 => [4225]
            map.insert(939, &[8321]);     // 939 => [8321]
            map.insert(477, &[16513]);     // 477 => [16513]
            map.insert(872, &[32897]);     // 872 => [32897]
            map.insert(302, &[65665]);     // 302 => [65665]
            map.insert(28, &[131201]);     // 28 => [131201]
            map.insert(575, &[262273]);     // 575 => [262273]
            map.insert(471, &[769]);     // 471 => [769]
            map.insert(769, &[1281]);     // 769 => [1281]
            map.insert(493, &[2305]);     // 493 => [2305]
            map.insert(721, &[4353]);     // 721 => [4353]
            map.insert(555, &[8449]);     // 555 => [8449]
            map.insert(93, &[16641]);     // 93 => [16641]
            map.insert(744, &[33025]);     // 744 => [33025]
            map.insert(174, &[65793]);     // 174 => [65793]
            map.insert(412, &[131329]);     // 412 => [131329]
            map.insert(959, &[262401]);     // 959 => [262401]
            map.insert(727, &[1537]);     // 727 => [1537]
            map.insert(59, &[2561]);     // 59 => [2561]
            map.insert(775, &[4609]);     // 775 => [4609]
            map.insert(1021, &[8705]);     // 1021 => [8705]
            map.insert(395, &[16897]);     // 395 => [16897]
            map.insert(830, &[33281]);     // 830 => [33281]
            map.insert(376, &[66049]);     // 376 => [66049]
            map.insert(74, &[131585]);     // 74 => [131585]
            map.insert(617, &[262657]);     // 617 => [262657]
            map.insert(749, &[3073]);     // 749 => [3073]
            map.insert(465, &[5121]);     // 465 => [5121]
            map.insert(299, &[9217]);     // 299 => [9217]
            map.insert(861, &[17409]);     // 861 => [17409]
            map.insert(488, &[33793]);     // 488 => [33793]
            map.insert(942, &[66561]);     // 942 => [66561]
            map.insert(668, &[132097]);     // 668 => [132097]
            map.insert(191, &[263169]);     // 191 => [263169]
            map.insert(829, &[6145]);     // 829 => [6145]
            map.insert(967, &[10241]);     // 967 => [10241]
            map.insert(433, &[18433]);     // 433 => [18433]
            map.insert(772, &[34817]);     // 772 => [34817]
            map.insert(322, &[67585]);     // 322 => [67585]
            map.insert(112, &[133121]);     // 112 => [133121]
            map.insert(595, &[264193]);     // 595 => [264193]
            map.insert(251, &[12289]);     // 251 => [12289]
            map.insert(653, &[20481]);     // 653 => [20481]
            map.insert(56, &[36865]);     // 56 => [36865]
            map.insert(638, &[69633]);     // 638 => [69633]
            map.insert(844, &[135169]);     // 844 => [135169]
            map.insert(367, &[266241]);     // 367 => [266241]
            map.insert(631, &[24577]);     // 631 => [24577]
            map.insert(194, &[40961]);     // 194 => [40961]
            map.insert(644, &[73729]);     // 644 => [73729]
            map.insert(950, &[139265]);     // 950 => [139265]
            map.insert(405, &[270337]);     // 405 => [270337]
            map.insert(692, &[49153]);     // 692 => [49153]
            map.insert(242, &[81921]);     // 242 => [81921]
            map.insert(448, &[147457]);     // 448 => [147457]
            map.insert(995, &[278529]);     // 995 => [278529]
            map.insert(583, &[98305]);     // 583 => [98305]
            map.insert(885, &[163841]);     // 885 => [163841]
            map.insert(342, &[294913]);     // 342 => [294913]
            map.insert(307, &[196609]);     // 307 => [196609]
            map.insert(784, &[327681]);     // 784 => [327681]
            map.insert(546, &[393217]);     // 546 => [393217]
            map.insert(14, &[14]);     // 14 => [14]
            map.insert(22, &[22]);     // 22 => [22]
            map.insert(38, &[38]);     // 38 => [38]
            map.insert(70, &[70]);     // 70 => [70]
            map.insert(134, &[134]);     // 134 => [134]
            map.insert(262, &[262]);     // 262 => [262]
            map.insert(208, &[518]);     // 208 => [518]
            map.insert(518, &[1030]);     // 518 => [1030]
            map.insert(234, &[2054]);     // 234 => [2054]
            map.insert(982, &[4102]);     // 982 => [4102]
            map.insert(812, &[8198]);     // 812 => [8198]
            map.insert(346, &[16390]);     // 346 => [16390]
            map.insert(1007, &[32774]);     // 1007 => [32774]
            map.insert(425, &[65542]);     // 425 => [65542]
            map.insert(155, &[131078]);     // 155 => [131078]
            map.insert(696, &[262150]);     // 696 => [262150]
            map.insert(26, &[26]);     // 26 => [26]
            map.insert(42, &[42]);     // 42 => [42]
            map.insert(138, &[138]);     // 138 => [138]
            map.insert(266, &[266]);     // 266 => [266]
            map.insert(522, &[1034]);     // 522 => [1034]
            map.insert(230, &[2058]);     // 230 => [2058]
            map.insert(986, &[4106]);     // 986 => [4106]
            map.insert(800, &[8202]);     // 800 => [8202]
            map.insert(421, &[65546]);     // 421 => [65546]
            map.insert(50, &[50]);     // 50 => [50]
            map.insert(82, &[82]);     // 82 => [82]
            map.insert(146, &[146]);     // 146 => [146]
            map.insert(274, &[274]);     // 274 => [274]
            map.insert(196, &[530]);     // 196 => [530]
            map.insert(530, &[1042]);     // 530 => [1042]
            map.insert(254, &[2066]);     // 254 => [2066]
            map.insert(962, &[4114]);     // 962 => [4114]
            map.insert(824, &[8210]);     // 824 => [8210]
            map.insert(334, &[16402]);     // 334 => [16402]
            map.insert(1019, &[32786]);     // 1019 => [32786]
            map.insert(445, &[65554]);     // 445 => [65554]
            map.insert(143, &[131090]);     // 143 => [131090]
            map.insert(684, &[262162]);     // 684 => [262162]
            map.insert(98, &[98]);     // 98 => [98]
            map.insert(162, &[162]);     // 162 => [162]
            map.insert(290, &[290]);     // 290 => [290]
            map.insert(244, &[546]);     // 244 => [546]
            map.insert(206, &[2082]);     // 206 => [2082]
            map.insert(1010, &[4130]);     // 1010 => [4130]
            map.insert(776, &[8226]);     // 776 => [8226]
            map.insert(382, &[16418]);     // 382 => [16418]
            map.insert(971, &[32802]);     // 971 => [32802]
            map.insert(397, &[65570]);     // 397 => [65570]
            map.insert(578, &[1090]);     // 578 => [1090]
            map.insert(914, &[4162]);     // 914 => [4162]
            map.insert(286, &[16450]);     // 286 => [16450]
            map.insert(764, &[262210]);     // 764 => [262210]
            map.insert(386, &[386]);     // 386 => [386]
            map.insert(84, &[642]);     // 84 => [642]
            map.insert(642, &[1154]);     // 642 => [1154]
            map.insert(110, &[2178]);     // 110 => [2178]
            map.insert(850, &[4226]);     // 850 => [4226]
            map.insert(478, &[16514]);     // 478 => [16514]
            map.insert(301, &[65666]);     // 301 => [65666]
            map.insert(31, &[131202]);     // 31 => [131202]
            map.insert(572, &[262274]);     // 572 => [262274]
            map.insert(468, &[770]);     // 468 => [770]
            map.insert(770, &[1282]);     // 770 => [1282]
            map.insert(722, &[4354]);     // 722 => [4354]
            map.insert(552, &[8450]);     // 552 => [8450]
            map.insert(94, &[16642]);     // 94 => [16642]
            map.insert(747, &[33026]);     // 747 => [33026]
            map.insert(415, &[131330]);     // 415 => [131330]
            map.insert(956, &[262402]);     // 956 => [262402]
            map.insert(724, &[1538]);     // 724 => [1538]
            map.insert(1022, &[8706]);     // 1022 => [8706]
            map.insert(392, &[16898]);     // 392 => [16898]
            map.insert(379, &[66050]);     // 379 => [66050]
            map.insert(618, &[262658]);     // 618 => [262658]
            map.insert(750, &[3074]);     // 750 => [3074]
            map.insert(466, &[5122]);     // 466 => [5122]
            map.insert(296, &[9218]);     // 296 => [9218]
            map.insert(862, &[17410]);     // 862 => [17410]
            map.insert(491, &[33794]);     // 491 => [33794]
            map.insert(941, &[66562]);     // 941 => [66562]
            map.insert(964, &[10242]);     // 964 => [10242]
            map.insert(434, &[18434]);     // 434 => [18434]
            map.insert(115, &[133122]);     // 115 => [133122]
            map.insert(592, &[264194]);     // 592 => [264194]
            map.insert(248, &[12290]);     // 248 => [12290]
            map.insert(654, &[20482]);     // 654 => [20482]
            map.insert(637, &[69634]);     // 637 => [69634]
            map.insert(847, &[135170]);     // 847 => [135170]
            map.insert(364, &[266242]);     // 364 => [266242]
            map.insert(628, &[24578]);     // 628 => [24578]
            map.insert(647, &[73730]);     // 647 => [73730]
            map.insert(949, &[139266]);     // 949 => [139266]
            map.insert(406, &[270338]);     // 406 => [270338]
            map.insert(241, &[81922]);     // 241 => [81922]
            map.insert(451, &[147458]);     // 451 => [147458]
            map.insert(580, &[98306]);     // 580 => [98306]
            map.insert(886, &[163842]);     // 886 => [163842]
            map.insert(304, &[196610]);     // 304 => [196610]
            map.insert(787, &[327682]);     // 787 => [327682]
            map.insert(44, &[44]);     // 44 => [44]
            map.insert(76, &[76]);     // 76 => [76]
            map.insert(268, &[268]);     // 268 => [268]
            map.insert(218, &[524]);     // 218 => [524]
            map.insert(524, &[1036]);     // 524 => [1036]
            map.insert(224, &[2060]);     // 224 => [2060]
            map.insert(988, &[4108]);     // 988 => [4108]
            map.insert(806, &[8204]);     // 806 => [8204]
            map.insert(336, &[16396]);     // 336 => [16396]
            map.insert(997, &[32780]);     // 997 => [32780]
            map.insert(419, &[65548]);     // 419 => [65548]
            map.insert(690, &[262156]);     // 690 => [262156]
            map.insert(52, &[52]);     // 52 => [52]
            map.insert(276, &[276]);     // 276 => [276]
            map.insert(532, &[1044]);     // 532 => [1044]
            map.insert(328, &[16404]);     // 328 => [16404]
            map.insert(443, &[65556]);     // 443 => [65556]
            map.insert(682, &[262164]);     // 682 => [262164]
            map.insert(100, &[100]);     // 100 => [100]
            map.insert(164, &[164]);     // 164 => [164]
            map.insert(292, &[292]);     // 292 => [292]
            map.insert(548, &[1060]);     // 548 => [1060]
            map.insert(200, &[2084]);     // 200 => [2084]
            map.insert(1012, &[4132]);     // 1012 => [4132]
            map.insert(782, &[8228]);     // 782 => [8228]
            map.insert(973, &[32804]);     // 973 => [32804]
            map.insert(185, &[131108]);     // 185 => [131108]
            map.insert(666, &[262180]);     // 666 => [262180]
            map.insert(324, &[324]);     // 324 => [324]
            map.insert(168, &[2116]);     // 168 => [2116]
            map.insert(916, &[4164]);     // 916 => [4164]
            map.insert(878, &[8260]);     // 878 => [8260]
            map.insert(280, &[16452]);     // 280 => [16452]
            map.insert(217, &[131140]);     // 217 => [131140]
            map.insert(762, &[262212]);     // 762 => [262212]
            map.insert(388, &[388]);     // 388 => [388]
            map.insert(104, &[2180]);     // 104 => [2180]
            map.insert(852, &[4228]);     // 852 => [4228]
            map.insert(472, &[16516]);     // 472 => [16516]
            map.insert(877, &[32900]);     // 877 => [32900]
            map.insert(570, &[262276]);     // 570 => [262276]
            map.insert(558, &[8452]);     // 558 => [8452]
            map.insert(88, &[16644]);     // 88 => [16644]
            map.insert(171, &[65796]);     // 171 => [65796]
            map.insert(409, &[131332]);     // 409 => [131332]
            map.insert(954, &[262404]);     // 954 => [262404]
            map.insert(62, &[2564]);     // 62 => [2564]
            map.insert(79, &[131588]);     // 79 => [131588]
            map.insert(620, &[262660]);     // 620 => [262660]
            map.insert(856, &[17412]);     // 856 => [17412]
            map.insert(665, &[132100]);     // 665 => [132100]
            map.insert(186, &[263172]);     // 186 => [263172]
            map.insert(436, &[18436]);     // 436 => [18436]
            map.insert(327, &[67588]);     // 327 => [67588]
            map.insert(117, &[133124]);     // 117 => [133124]
            map.insert(598, &[264196]);     // 598 => [264196]
            map.insert(648, &[20484]);     // 648 => [20484]
            map.insert(61, &[36868]);     // 61 => [36868]
            map.insert(635, &[69636]);     // 635 => [69636]
            map.insert(841, &[135172]);     // 841 => [135172]
            map.insert(362, &[266244]);     // 362 => [266244]
            map.insert(626, &[24580]);     // 626 => [24580]
            map.insert(947, &[139268]);     // 947 => [139268]
            map.insert(400, &[270340]);     // 400 => [270340]
            map.insert(689, &[49156]);     // 689 => [49156]
            map.insert(453, &[147460]);     // 453 => [147460]
            map.insert(998, &[278532]);     // 998 => [278532]
            map.insert(880, &[163844]);     // 880 => [163844]
            map.insert(339, &[294916]);     // 339 => [294916]
            map.insert(310, &[196612]);     // 310 => [196612]
            map.insert(789, &[327684]);     // 789 => [327684]
            map.insert(551, &[393220]);     // 551 => [393220]
            map.insert(536, &[1048]);     // 536 => [1048]
            map.insert(818, &[8216]);     // 818 => [8216]
            map.insert(439, &[65560]);     // 439 => [65560]
            map.insert(678, &[262168]);     // 678 => [262168]
            map.insert(372, &[16424]);     // 372 => [16424]
            map.insert(391, &[65576]);     // 391 => [65576]
            map.insert(181, &[131112]);     // 181 => [131112]
            map.insert(662, &[262184]);     // 662 => [262184]
            map.insert(584, &[1096]);     // 584 => [1096]
            map.insert(920, &[4168]);     // 920 => [4168]
            map.insert(866, &[8264]);     // 866 => [8264]
            map.insert(929, &[32840]);     // 929 => [32840]
            map.insert(487, &[65608]);     // 487 => [65608]
            map.insert(758, &[262216]);     // 758 => [262216]
            map.insert(930, &[8328]);     // 930 => [8328]
            map.insert(865, &[32904]);     // 865 => [32904]
            map.insert(295, &[65672]);     // 295 => [65672]
            map.insert(566, &[262280]);     // 566 => [262280]
            map.insert(484, &[2312]);     // 484 => [2312]
            map.insert(728, &[4360]);     // 728 => [4360]
            map.insert(737, &[33032]);     // 737 => [33032]
            map.insert(167, &[65800]);     // 167 => [65800]
            map.insert(734, &[1544]);     // 734 => [1544]
            map.insert(823, &[33288]);     // 823 => [33288]
            map.insert(369, &[66056]);     // 369 => [66056]
            map.insert(608, &[262664]);     // 608 => [262664]
            map.insert(740, &[3080]);     // 740 => [3080]
            map.insert(481, &[33800]);     // 481 => [33800]
            map.insert(935, &[66568]);     // 935 => [66568]
            map.insert(661, &[132104]);     // 661 => [132104]
            map.insert(182, &[263176]);     // 182 => [263176]
            map.insert(820, &[6152]);     // 820 => [6152]
            map.insert(974, &[10248]);     // 974 => [10248]
            map.insert(440, &[18440]);     // 440 => [18440]
            map.insert(781, &[34824]);     // 781 => [34824]
            map.insert(331, &[67592]);     // 331 => [67592]
            map.insert(121, &[133128]);     // 121 => [133128]
            map.insert(602, &[264200]);     // 602 => [264200]
            map.insert(837, &[135176]);     // 837 => [135176]
            map.insert(358, &[266248]);     // 358 => [266248]
            map.insert(203, &[40968]);     // 203 => [40968]
            map.insert(457, &[147464]);     // 457 => [147464]
            map.insert(590, &[98312]);     // 590 => [98312]
            map.insert(892, &[163848]);     // 892 => [163848]
            map.insert(314, &[196616]);     // 314 => [196616]
            map.insert(793, &[327688]);     // 793 => [327688]
            map.insert(176, &[176]);     // 176 => [176]
            map.insert(560, &[1072]);     // 560 => [1072]
            map.insert(794, &[8240]);     // 794 => [8240]
            map.insert(896, &[4176]);     // 896 => [4176]
            map.insert(890, &[8272]);     // 890 => [8272]
            map.insert(953, &[32848]);     // 953 => [32848]
            map.insert(511, &[65616]);     // 511 => [65616]
            map.insert(656, &[1168]);     // 656 => [1168]
            map.insert(124, &[2192]);     // 124 => [2192]
            map.insert(832, &[4240]);     // 832 => [4240]
            map.insert(460, &[16528]);     // 460 => [16528]
            map.insert(889, &[32912]);     // 889 => [32912]
            map.insert(319, &[65680]);     // 319 => [65680]
            map.insert(454, &[784]);     // 454 => [784]
            map.insert(508, &[2320]);     // 508 => [2320]
            map.insert(704, &[4368]);     // 704 => [4368]
            map.insert(761, &[33040]);     // 761 => [33040]
            map.insert(710, &[1552]);     // 710 => [1552]
            map.insert(790, &[4624]);     // 790 => [4624]
            map.insert(410, &[16912]);     // 410 => [16912]
            map.insert(361, &[66064]);     // 361 => [66064]
            map.insert(91, &[131600]);     // 91 => [131600]
            map.insert(632, &[262672]);     // 632 => [262672]
            map.insert(505, &[33808]);     // 505 => [33808]
            map.insert(416, &[18448]);     // 416 => [18448]
            map.insert(623, &[69648]);     // 623 => [69648]
            map.insert(614, &[24592]);     // 614 => [24592]
            map.insert(677, &[49168]);     // 677 => [49168]
            map.insert(227, &[81936]);     // 227 => [81936]
            map.insert(868, &[163856]);     // 868 => [163856]
            map.insert(563, &[393232]);     // 563 => [393232]
            map.insert(352, &[352]);     // 352 => [352]
            map.insert(944, &[4192]);     // 944 => [4192]
            map.insert(842, &[8288]);     // 842 => [8288]
            map.insert(316, &[16480]);     // 316 => [16480]
            map.insert(905, &[32864]);     // 905 => [32864]
            map.insert(463, &[65632]);     // 463 => [65632]
            map.insert(118, &[672]);     // 118 => [672]
            map.insert(672, &[1184]);     // 672 => [1184]
            map.insert(906, &[8352]);     // 906 => [8352]
            map.insert(271, &[65696]);     // 271 => [65696]
            map.insert(542, &[262304]);     // 542 => [262304]
            map.insert(502, &[800]);     // 502 => [800]
            map.insert(752, &[4384]);     // 752 => [4384]
            map.insert(713, &[33056]);     // 713 => [33056]
            map.insert(926, &[262432]);     // 926 => [262432]
            map.insert(799, &[33312]);     // 799 => [33312]
            map.insert(107, &[131616]);     // 107 => [131616]
            map.insert(716, &[3104]);     // 716 => [3104]
            map.insert(496, &[5152]);     // 496 => [5152]
            map.insert(911, &[66592]);     // 911 => [66592]
            map.insert(796, &[6176]);     // 796 => [6176]
            map.insert(805, &[34848]);     // 805 => [34848]
            map.insert(355, &[67616]);     // 355 => [67616]
            map.insert(607, &[69664]);     // 607 => [69664]
            map.insert(919, &[139296]);     // 919 => [139296]
            map.insert(375, &[294944]);     // 375 => [294944]
            map.insert(817, &[327712]);     // 817 => [327712]
            map.insert(681, &[33088]);     // 681 => [33088]
            map.insert(122, &[2624]);     // 122 => [2624]
            map.insert(838, &[4672]);     // 838 => [4672]
            map.insert(458, &[16960]);     // 458 => [16960]
            map.insert(895, &[33344]);     // 895 => [33344]
            map.insert(313, &[66112]);     // 313 => [66112]
            map.insert(733, &[132160]);     // 733 => [132160]
            map.insert(902, &[10304]);     // 902 => [10304]
            map.insert(709, &[73792]);     // 709 => [73792]
            map.insert(1015, &[139328]);     // 1015 => [139328]
            map.insert(757, &[49216]);     // 757 => [49216]
            map.insert(179, &[81984]);     // 179 => [81984]
            map.insert(279, &[294976]);     // 279 => [294976]
            map.insert(370, &[196672]);     // 370 => [196672]
            map.insert(611, &[393280]);     // 611 => [393280]
            map.insert(47, &[65920]);     // 47 => [65920]
            map.insert(541, &[132224]);     // 541 => [132224]
            map.insert(901, &[34944]);     // 901 => [34944]
            map.insert(565, &[49280]);     // 565 => [49280]
            map.insert(675, &[393344]);     // 675 => [393344]
            map.insert(604, &[17664]);     // 604 => [17664]
            map.insert(925, &[132352]);     // 925 => [132352]
            map.insert(506, &[12544]);     // 506 => [12544]
            map.insert(908, &[20736]);     // 908 => [20736]
            map.insert(589, &[135424]);     // 589 => [135424]
            map.insert(499, &[82176]);     // 499 => [82176]
            map.insert(738, &[278784]);     // 738 => [278784]
            map.insert(587, &[132608]);     // 587 => [132608]
            map.insert(923, &[135680]);     // 923 => [135680]
            map.insert(835, &[68608]);     // 835 => [68608]
            map.insert(625, &[134144]);     // 625 => [134144]
            map.insert(569, &[37888]);     // 569 => [37888]
            map.insert(127, &[70656]);     // 127 => [70656]
            map.insert(707, &[41984]);     // 707 => [41984]
            map.insert(755, &[82944]);     // 755 => [82944]
            map.insert(482, &[279552]);     // 482 => [279552]
            map.insert(855, &[295936]);     // 855 => [295936]
            map.insert(659, &[71680]);     // 659 => [71680]
            map.insert(859, &[141312]);     // 859 => [141312]
            map.insert(601, &[51200]);     // 601 => [51200]
            map.insert(719, &[395264]);     // 719 => [395264]
            map.insert(103, &[143360]);     // 103 => [143360]
            map.insert(357, &[53248]);     // 357 => [53248]
            map.insert(731, &[229376]);     // 731 => [229376]
            map.insert(15, &[15]);     // 15 => [15]
            map.insert(23, &[23]);     // 23 => [23]
            map.insert(39, &[39]);     // 39 => [39]
            map.insert(71, &[71]);     // 71 => [71]
            map.insert(135, &[135]);     // 135 => [135]
            map.insert(263, &[263]);     // 263 => [263]
            map.insert(209, &[519]);     // 209 => [519]
            map.insert(519, &[1031]);     // 519 => [1031]
            map.insert(235, &[2055]);     // 235 => [2055]
            map.insert(983, &[4103]);     // 983 => [4103]
            map.insert(813, &[8199]);     // 813 => [8199]
            map.insert(347, &[16391]);     // 347 => [16391]
            map.insert(1006, &[32775]);     // 1006 => [32775]
            map.insert(424, &[65543]);     // 424 => [65543]
            map.insert(154, &[131079]);     // 154 => [131079]
            map.insert(697, &[262151]);     // 697 => [262151]
            map.insert(27, &[27]);     // 27 => [27]
            map.insert(43, &[43]);     // 43 => [43]
            map.insert(139, &[139]);     // 139 => [139]
            map.insert(267, &[267]);     // 267 => [267]
            map.insert(523, &[1035]);     // 523 => [1035]
            map.insert(231, &[2059]);     // 231 => [2059]
            map.insert(987, &[4107]);     // 987 => [4107]
            map.insert(801, &[8203]);     // 801 => [8203]
            map.insert(420, &[65547]);     // 420 => [65547]
            map.insert(51, &[51]);     // 51 => [51]
            map.insert(83, &[83]);     // 83 => [83]
            map.insert(147, &[147]);     // 147 => [147]
            map.insert(275, &[275]);     // 275 => [275]
            map.insert(197, &[531]);     // 197 => [531]
            map.insert(531, &[1043]);     // 531 => [1043]
            map.insert(255, &[2067]);     // 255 => [2067]
            map.insert(963, &[4115]);     // 963 => [4115]
            map.insert(825, &[8211]);     // 825 => [8211]
            map.insert(335, &[16403]);     // 335 => [16403]
            map.insert(1018, &[32787]);     // 1018 => [32787]
            map.insert(444, &[65555]);     // 444 => [65555]
            map.insert(142, &[131091]);     // 142 => [131091]
            map.insert(685, &[262163]);     // 685 => [262163]
            map.insert(99, &[99]);     // 99 => [99]
            map.insert(163, &[163]);     // 163 => [163]
            map.insert(291, &[291]);     // 291 => [291]
            map.insert(245, &[547]);     // 245 => [547]
            map.insert(207, &[2083]);     // 207 => [2083]
            map.insert(1011, &[4131]);     // 1011 => [4131]
            map.insert(777, &[8227]);     // 777 => [8227]
            map.insert(383, &[16419]);     // 383 => [16419]
            map.insert(970, &[32803]);     // 970 => [32803]
            map.insert(396, &[65571]);     // 396 => [65571]
            map.insert(579, &[1091]);     // 579 => [1091]
            map.insert(915, &[4163]);     // 915 => [4163]
            map.insert(287, &[16451]);     // 287 => [16451]
            map.insert(765, &[262211]);     // 765 => [262211]
            map.insert(387, &[387]);     // 387 => [387]
            map.insert(85, &[643]);     // 85 => [643]
            map.insert(643, &[1155]);     // 643 => [1155]
            map.insert(111, &[2179]);     // 111 => [2179]
            map.insert(851, &[4227]);     // 851 => [4227]
            map.insert(479, &[16515]);     // 479 => [16515]
            map.insert(300, &[65667]);     // 300 => [65667]
            map.insert(30, &[131203]);     // 30 => [131203]
            map.insert(573, &[262275]);     // 573 => [262275]
            map.insert(469, &[771]);     // 469 => [771]
            map.insert(771, &[1283]);     // 771 => [1283]
            map.insert(723, &[4355]);     // 723 => [4355]
            map.insert(553, &[8451]);     // 553 => [8451]
            map.insert(95, &[16643]);     // 95 => [16643]
            map.insert(746, &[33027]);     // 746 => [33027]
            map.insert(414, &[131331]);     // 414 => [131331]
            map.insert(957, &[262403]);     // 957 => [262403]
            map.insert(725, &[1539]);     // 725 => [1539]
            map.insert(1023, &[8707]);     // 1023 => [8707]
            map.insert(393, &[16899]);     // 393 => [16899]
            map.insert(378, &[66051]);     // 378 => [66051]
            map.insert(619, &[262659]);     // 619 => [262659]
            map.insert(751, &[3075]);     // 751 => [3075]
            map.insert(467, &[5123]);     // 467 => [5123]
            map.insert(297, &[9219]);     // 297 => [9219]
            map.insert(863, &[17411]);     // 863 => [17411]
            map.insert(490, &[33795]);     // 490 => [33795]
            map.insert(940, &[66563]);     // 940 => [66563]
            map.insert(965, &[10243]);     // 965 => [10243]
            map.insert(435, &[18435]);     // 435 => [18435]
            map.insert(114, &[133123]);     // 114 => [133123]
            map.insert(593, &[264195]);     // 593 => [264195]
            map.insert(249, &[12291]);     // 249 => [12291]
            map.insert(655, &[20483]);     // 655 => [20483]
            map.insert(636, &[69635]);     // 636 => [69635]
            map.insert(846, &[135171]);     // 846 => [135171]
            map.insert(365, &[266243]);     // 365 => [266243]
            map.insert(629, &[24579]);     // 629 => [24579]
            map.insert(646, &[73731]);     // 646 => [73731]
            map.insert(948, &[139267]);     // 948 => [139267]
            map.insert(407, &[270339]);     // 407 => [270339]
            map.insert(240, &[81923]);     // 240 => [81923]
            map.insert(450, &[147459]);     // 450 => [147459]
            map.insert(581, &[98307]);     // 581 => [98307]
            map.insert(887, &[163843]);     // 887 => [163843]
            map.insert(305, &[196611]);     // 305 => [196611]
            map.insert(786, &[327683]);     // 786 => [327683]
            map.insert(45, &[45]);     // 45 => [45]
            map.insert(77, &[77]);     // 77 => [77]
            map.insert(269, &[269]);     // 269 => [269]
            map.insert(219, &[525]);     // 219 => [525]
            map.insert(525, &[1037]);     // 525 => [1037]
            map.insert(225, &[2061]);     // 225 => [2061]
            map.insert(989, &[4109]);     // 989 => [4109]
            map.insert(807, &[8205]);     // 807 => [8205]
            map.insert(337, &[16397]);     // 337 => [16397]
            map.insert(996, &[32781]);     // 996 => [32781]
            map.insert(418, &[65549]);     // 418 => [65549]
            map.insert(691, &[262157]);     // 691 => [262157]
            map.insert(53, &[53]);     // 53 => [53]
            map.insert(277, &[277]);     // 277 => [277]
            map.insert(533, &[1045]);     // 533 => [1045]
            map.insert(329, &[16405]);     // 329 => [16405]
            map.insert(442, &[65557]);     // 442 => [65557]
            map.insert(683, &[262165]);     // 683 => [262165]
            map.insert(101, &[101]);     // 101 => [101]
            map.insert(165, &[165]);     // 165 => [165]
            map.insert(293, &[293]);     // 293 => [293]
            map.insert(549, &[1061]);     // 549 => [1061]
            map.insert(201, &[2085]);     // 201 => [2085]
            map.insert(1013, &[4133]);     // 1013 => [4133]
            map.insert(783, &[8229]);     // 783 => [8229]
            map.insert(972, &[32805]);     // 972 => [32805]
            map.insert(184, &[131109]);     // 184 => [131109]
            map.insert(667, &[262181]);     // 667 => [262181]
            map.insert(325, &[325]);     // 325 => [325]
            map.insert(169, &[2117]);     // 169 => [2117]
            map.insert(917, &[4165]);     // 917 => [4165]
            map.insert(879, &[8261]);     // 879 => [8261]
            map.insert(281, &[16453]);     // 281 => [16453]
            map.insert(216, &[131141]);     // 216 => [131141]
            map.insert(763, &[262213]);     // 763 => [262213]
            map.insert(389, &[389]);     // 389 => [389]
            map.insert(105, &[2181]);     // 105 => [2181]
            map.insert(853, &[4229]);     // 853 => [4229]
            map.insert(473, &[16517]);     // 473 => [16517]
            map.insert(876, &[32901]);     // 876 => [32901]
            map.insert(571, &[262277]);     // 571 => [262277]
            map.insert(559, &[8453]);     // 559 => [8453]
            map.insert(89, &[16645]);     // 89 => [16645]
            map.insert(170, &[65797]);     // 170 => [65797]
            map.insert(408, &[131333]);     // 408 => [131333]
            map.insert(955, &[262405]);     // 955 => [262405]
            map.insert(63, &[2565]);     // 63 => [2565]
            map.insert(78, &[131589]);     // 78 => [131589]
            map.insert(621, &[262661]);     // 621 => [262661]
            map.insert(857, &[17413]);     // 857 => [17413]
            map.insert(664, &[132101]);     // 664 => [132101]
            map.insert(187, &[263173]);     // 187 => [263173]
            map.insert(437, &[18437]);     // 437 => [18437]
            map.insert(326, &[67589]);     // 326 => [67589]
            map.insert(116, &[133125]);     // 116 => [133125]
            map.insert(599, &[264197]);     // 599 => [264197]
            map.insert(649, &[20485]);     // 649 => [20485]
            map.insert(60, &[36869]);     // 60 => [36869]
            map.insert(634, &[69637]);     // 634 => [69637]
            map.insert(840, &[135173]);     // 840 => [135173]
            map.insert(363, &[266245]);     // 363 => [266245]
            map.insert(627, &[24581]);     // 627 => [24581]
            map.insert(946, &[139269]);     // 946 => [139269]
            map.insert(401, &[270341]);     // 401 => [270341]
            map.insert(688, &[49157]);     // 688 => [49157]
            map.insert(452, &[147461]);     // 452 => [147461]
            map.insert(999, &[278533]);     // 999 => [278533]
            map.insert(881, &[163845]);     // 881 => [163845]
            map.insert(338, &[294917]);     // 338 => [294917]
            map.insert(311, &[196613]);     // 311 => [196613]
            map.insert(788, &[327685]);     // 788 => [327685]
            map.insert(550, &[393221]);     // 550 => [393221]
            map.insert(537, &[1049]);     // 537 => [1049]
            map.insert(819, &[8217]);     // 819 => [8217]
            map.insert(438, &[65561]);     // 438 => [65561]
            map.insert(679, &[262169]);     // 679 => [262169]
            map.insert(373, &[16425]);     // 373 => [16425]
            map.insert(390, &[65577]);     // 390 => [65577]
            map.insert(180, &[131113]);     // 180 => [131113]
            map.insert(663, &[262185]);     // 663 => [262185]
            map.insert(585, &[1097]);     // 585 => [1097]
            map.insert(921, &[4169]);     // 921 => [4169]
            map.insert(867, &[8265]);     // 867 => [8265]
            map.insert(928, &[32841]);     // 928 => [32841]
            map.insert(486, &[65609]);     // 486 => [65609]
            map.insert(759, &[262217]);     // 759 => [262217]
            map.insert(931, &[8329]);     // 931 => [8329]
            map.insert(864, &[32905]);     // 864 => [32905]
            map.insert(294, &[65673]);     // 294 => [65673]
            map.insert(567, &[262281]);     // 567 => [262281]
            map.insert(485, &[2313]);     // 485 => [2313]
            map.insert(729, &[4361]);     // 729 => [4361]
            map.insert(736, &[33033]);     // 736 => [33033]
            map.insert(166, &[65801]);     // 166 => [65801]
            map.insert(735, &[1545]);     // 735 => [1545]
            map.insert(822, &[33289]);     // 822 => [33289]
            map.insert(368, &[66057]);     // 368 => [66057]
            map.insert(609, &[262665]);     // 609 => [262665]
            map.insert(741, &[3081]);     // 741 => [3081]
            map.insert(480, &[33801]);     // 480 => [33801]
            map.insert(934, &[66569]);     // 934 => [66569]
            map.insert(660, &[132105]);     // 660 => [132105]
            map.insert(183, &[263177]);     // 183 => [263177]
            map.insert(821, &[6153]);     // 821 => [6153]
            map.insert(975, &[10249]);     // 975 => [10249]
            map.insert(441, &[18441]);     // 441 => [18441]
            map.insert(780, &[34825]);     // 780 => [34825]
            map.insert(330, &[67593]);     // 330 => [67593]
            map.insert(120, &[133129]);     // 120 => [133129]
            map.insert(603, &[264201]);     // 603 => [264201]
            map.insert(836, &[135177]);     // 836 => [135177]
            map.insert(359, &[266249]);     // 359 => [266249]
            map.insert(202, &[40969]);     // 202 => [40969]
            map.insert(456, &[147465]);     // 456 => [147465]
            map.insert(591, &[98313]);     // 591 => [98313]
            map.insert(893, &[163849]);     // 893 => [163849]
            map.insert(315, &[196617]);     // 315 => [196617]
            map.insert(792, &[327689]);     // 792 => [327689]
            map.insert(177, &[177]);     // 177 => [177]
            map.insert(561, &[1073]);     // 561 => [1073]
            map.insert(795, &[8241]);     // 795 => [8241]
            map.insert(897, &[4177]);     // 897 => [4177]
            map.insert(891, &[8273]);     // 891 => [8273]
            map.insert(952, &[32849]);     // 952 => [32849]
            map.insert(510, &[65617]);     // 510 => [65617]
            map.insert(657, &[1169]);     // 657 => [1169]
            map.insert(125, &[2193]);     // 125 => [2193]
            map.insert(833, &[4241]);     // 833 => [4241]
            map.insert(461, &[16529]);     // 461 => [16529]
            map.insert(888, &[32913]);     // 888 => [32913]
            map.insert(318, &[65681]);     // 318 => [65681]
            map.insert(455, &[785]);     // 455 => [785]
            map.insert(509, &[2321]);     // 509 => [2321]
            map.insert(705, &[4369]);     // 705 => [4369]
            map.insert(760, &[33041]);     // 760 => [33041]
            map.insert(711, &[1553]);     // 711 => [1553]
            map.insert(791, &[4625]);     // 791 => [4625]
            map.insert(411, &[16913]);     // 411 => [16913]
            map.insert(360, &[66065]);     // 360 => [66065]
            map.insert(90, &[131601]);     // 90 => [131601]
            map.insert(633, &[262673]);     // 633 => [262673]
            map.insert(504, &[33809]);     // 504 => [33809]
            map.insert(417, &[18449]);     // 417 => [18449]
            map.insert(622, &[69649]);     // 622 => [69649]
            map.insert(615, &[24593]);     // 615 => [24593]
            map.insert(676, &[49169]);     // 676 => [49169]
            map.insert(226, &[81937]);     // 226 => [81937]
            map.insert(869, &[163857]);     // 869 => [163857]
            map.insert(562, &[393233]);     // 562 => [393233]
            map.insert(353, &[353]);     // 353 => [353]
            map.insert(945, &[4193]);     // 945 => [4193]
            map.insert(843, &[8289]);     // 843 => [8289]
            map.insert(317, &[16481]);     // 317 => [16481]
            map.insert(904, &[32865]);     // 904 => [32865]
            map.insert(462, &[65633]);     // 462 => [65633]
            map.insert(119, &[673]);     // 119 => [673]
            map.insert(673, &[1185]);     // 673 => [1185]
            map.insert(907, &[8353]);     // 907 => [8353]
            map.insert(270, &[65697]);     // 270 => [65697]
            map.insert(543, &[262305]);     // 543 => [262305]
            map.insert(503, &[801]);     // 503 => [801]
            map.insert(753, &[4385]);     // 753 => [4385]
            map.insert(712, &[33057]);     // 712 => [33057]
            map.insert(927, &[262433]);     // 927 => [262433]
            map.insert(798, &[33313]);     // 798 => [33313]
            map.insert(106, &[131617]);     // 106 => [131617]
            map.insert(717, &[3105]);     // 717 => [3105]
            map.insert(497, &[5153]);     // 497 => [5153]
            map.insert(910, &[66593]);     // 910 => [66593]
            map.insert(797, &[6177]);     // 797 => [6177]
            map.insert(804, &[34849]);     // 804 => [34849]
            map.insert(354, &[67617]);     // 354 => [67617]
            map.insert(606, &[69665]);     // 606 => [69665]
            map.insert(918, &[139297]);     // 918 => [139297]
            map.insert(374, &[294945]);     // 374 => [294945]
            map.insert(816, &[327713]);     // 816 => [327713]
            map.insert(680, &[33089]);     // 680 => [33089]
            map.insert(123, &[2625]);     // 123 => [2625]
            map.insert(839, &[4673]);     // 839 => [4673]
            map.insert(459, &[16961]);     // 459 => [16961]
            map.insert(894, &[33345]);     // 894 => [33345]
            map.insert(312, &[66113]);     // 312 => [66113]
            map.insert(732, &[132161]);     // 732 => [132161]
            map.insert(903, &[10305]);     // 903 => [10305]
            map.insert(708, &[73793]);     // 708 => [73793]
            map.insert(1014, &[139329]);     // 1014 => [139329]
            map.insert(756, &[49217]);     // 756 => [49217]
            map.insert(178, &[81985]);     // 178 => [81985]
            map.insert(278, &[294977]);     // 278 => [294977]
            map.insert(371, &[196673]);     // 371 => [196673]
            map.insert(610, &[393281]);     // 610 => [393281]
            map.insert(46, &[65921]);     // 46 => [65921]
            map.insert(540, &[132225]);     // 540 => [132225]
            map.insert(900, &[34945]);     // 900 => [34945]
            map.insert(564, &[49281]);     // 564 => [49281]
            map.insert(674, &[393345]);     // 674 => [393345]
            map.insert(605, &[17665]);     // 605 => [17665]
            map.insert(924, &[132353]);     // 924 => [132353]
            map.insert(507, &[12545]);     // 507 => [12545]
            map.insert(909, &[20737]);     // 909 => [20737]
            map.insert(588, &[135425]);     // 588 => [135425]
            map.insert(498, &[82177]);     // 498 => [82177]
            map.insert(739, &[278785]);     // 739 => [278785]
            map.insert(586, &[132609]);     // 586 => [132609]
            map.insert(922, &[135681]);     // 922 => [135681]
            map.insert(834, &[68609]);     // 834 => [68609]
            map.insert(624, &[134145]);     // 624 => [134145]
            map.insert(568, &[37889]);     // 568 => [37889]
            map.insert(126, &[70657]);     // 126 => [70657]
            map.insert(706, &[41985]);     // 706 => [41985]
            map.insert(754, &[82945]);     // 754 => [82945]
            map.insert(483, &[279553]);     // 483 => [279553]
            map.insert(854, &[295937]);     // 854 => [295937]
            map.insert(658, &[71681]);     // 658 => [71681]
            map.insert(858, &[141313]);     // 858 => [141313]
            map.insert(600, &[51201]);     // 600 => [51201]
            map.insert(718, &[395265]);     // 718 => [395265]
            map.insert(102, &[143361]);     // 102 => [143361]
            map.insert(356, &[53249]);     // 356 => [53249]
            map.insert(730, &[229377]);     // 730 => [229377]
            map.insert(526, &[1038]);     // 526 => [1038]
            map.insert(990, &[4110]);     // 990 => [4110]
            map.insert(54, &[54]);     // 54 => [54]
            map.insert(534, &[1046]);     // 534 => [1046]
            map.insert(282, &[16454]);     // 282 => [16454]
            map.insert(474, &[16518]);     // 474 => [16518]
            map.insert(556, &[8454]);     // 556 => [8454]
            map.insert(596, &[264198]);     // 596 => [264198]
            map.insert(650, &[20486]);     // 650 => [20486]
            map.insert(402, &[270342]);     // 402 => [270342]
            map.insert(882, &[163846]);     // 882 => [163846]
            map.insert(308, &[196614]);     // 308 => [196614]
            map.insert(538, &[1050]);     // 538 => [1050]
            map.insert(742, &[3082]);     // 742 => [3082]
            map.insert(933, &[66570]);     // 933 => [66570]
            map.insert(898, &[4178]);     // 898 => [4178]
            map.insert(612, &[24594]);     // 612 => [24594]
            map.insert(870, &[163858]);     // 870 => [163858]
            map.insert(500, &[802]);     // 500 => [802]
            map.insert(715, &[33058]);     // 715 => [33058]
            map.insert(527, &[1039]);     // 527 => [1039]
            map.insert(991, &[4111]);     // 991 => [4111]
            map.insert(55, &[55]);     // 55 => [55]
            map.insert(535, &[1047]);     // 535 => [1047]
            map.insert(283, &[16455]);     // 283 => [16455]
            map.insert(475, &[16519]);     // 475 => [16519]
            map.insert(557, &[8455]);     // 557 => [8455]
            map.insert(597, &[264199]);     // 597 => [264199]
            map.insert(651, &[20487]);     // 651 => [20487]
            map.insert(403, &[270343]);     // 403 => [270343]
            map.insert(883, &[163847]);     // 883 => [163847]
            map.insert(309, &[196615]);     // 309 => [196615]
            map.insert(539, &[1051]);     // 539 => [1051]
            map.insert(743, &[3083]);     // 743 => [3083]
            map.insert(932, &[66571]);     // 932 => [66571]
            map.insert(899, &[4179]);     // 899 => [4179]
            map.insert(613, &[24595]);     // 613 => [24595]
            map.insert(871, &[163859]);     // 871 => [163859]
            map.insert(501, &[803]);     // 501 => [803]
            map.insert(714, &[33059]);     // 714 => [33059]
            
            SYNDROME_MAP = Box::into_raw(map);
        }
    });
}

impl GuavaCode19_9 {
    fn parity_check_matrix_transposed(&self) -> &BinMatrix {
        init();
        unsafe {
            PARITY_MATRIX_T.as_ref().unwrap()
        }
    }
}

impl BinaryCode for GuavaCode19_9 {
    fn name(&self) -> String {
        "[19, 9] Guava code".to_owned()
    }

    fn length(&self) -> usize {
        19
    }

    fn dimension(&self) -> usize {
        9
    }

    fn generator_matrix(&self) -> &BinMatrix {
        init();
        unsafe {
            GENERATOR_MATRIX.as_ref().unwrap()
        }
    }

    fn parity_check_matrix(&self) -> &BinMatrix {
        init();
        unsafe {
            PARITY_MATRIX.as_ref().unwrap()
        }
    }

    fn decode_to_code(&self, c: &BinVector) -> Result<BinVector, &str> {
        init();
        let map = unsafe {
            SYNDROME_MAP.as_ref().unwrap()
        };
        debug_assert_eq!(c.len(), self.length(), "the length doesn't match the expected length (length of the code)");
        let he = c * self.parity_check_matrix_transposed();
        let mut error = BinVector::with_capacity(19);
        let stor = unsafe { error.get_storage_mut() };
        let errbytes = map[&he.as_u64()];
        debug_assert_eq!(errbytes.len(), 19 / 64 + if 19 % 64 != 0 { 1 } else { 0 });
        stor.clear();
        stor.extend_from_slice(&errbytes[..]);
        unsafe { error.set_len(19) };
        debug_assert_eq!(error.len(), self.length(), "internal: the error vector is of the wrong length");
        let result = c + &error;
        debug_assert_eq!(result.len(), self.length(), "internal: the result vector is of the wrong length");
        debug_assert_eq!((&result * self.parity_check_matrix_transposed()).count_ones(), 0);
        Ok(result)
    }

    fn decode_to_message(&self, c: &BinVector) -> Result<BinVector, &str> {
        
        let mut codeword = self.decode_to_code(c)?;
        codeword.truncate(9);
        Ok(codeword)
        
    }

    fn decode_slice(&self, c: &mut [u64]) {
        init();
        
        debug_assert_eq!(c[19 / 64] & !((1 << 19) - 1), 0, "this message has excess bits");

        let map = unsafe {
            SYNDROME_MAP.as_ref().unwrap()
        };
        let he = &BinMatrix::from_slices(&[&c[..]], self.length()) * self.parity_check_matrix_transposed();
        let error = map[unsafe { &he.get_word_unchecked(0, 0) }];
        c.iter_mut().zip(error.iter().copied()).for_each(|(sample, error)| *sample ^= error as u64);
    }

    
}

#[cfg(test)]
mod tests {
    use super::*;
    use m4ri_rust::friendly::BinVector;
    use crate::oracle::Sample;

    #[test]
    fn size() {
        let code = GuavaCode19_9.generator_matrix();
        assert_eq!(code.ncols(), 19);
        assert_eq!(code.nrows(), 9);
    }

    #[test]
    fn test_decode_sample() {
        let code = GuavaCode19_9;
        for _ in 0..1000 {
            // setup
            let vec = BinVector::random(code.length());
            let mut sample_a = Sample::from_binvector(&vec, false);
            let mut sample_b = Sample::from_binvector(&vec, true);
            
            let decoded_vec = code.decode_to_message(&vec).unwrap();
            println!("decoded_vec: {:?}", decoded_vec);

            // test vectors
            let decoded_vec_sample_a = Sample::from_binvector(&decoded_vec, false);
            let decoded_vec_sample_b = Sample::from_binvector(&decoded_vec, true);

            code.decode_sample(&mut sample_a);
            code.decode_sample(&mut sample_b);
            assert_eq!(sample_a.get_product(), false);
            assert_eq!(sample_b.get_product(), true);
            assert_eq!(sample_a, decoded_vec_sample_a);
            assert_eq!(sample_b, decoded_vec_sample_b);
        }
    }

    #[test]
    fn random_decode_tests() {

        
        {
            let code = GuavaCode19_9;
            let randvec = BinVector::from_bools(&[false, true, false, true, true, false, false, true, false, false, false, true, false, false, false, true, false, false, false]);
            let codeword = BinVector::from_bools(&[true, true, false, true, true, true, false, true, true, false, false, true, false, false, false, true, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode19_9;
            let randvec = BinVector::from_bools(&[false, false, true, false, false, false, true, false, true, false, true, false, false, false, false, false, false, false, false]);
            let codeword = BinVector::from_bools(&[true, false, true, true, false, false, true, false, true, false, true, false, true, false, false, false, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode19_9;
            let randvec = BinVector::from_bools(&[false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, false, true, true]);
            let codeword = BinVector::from_bools(&[true, false, false, true, false, false, false, false, true, false, false, false, false, true, false, false, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode19_9;
            let randvec = BinVector::from_bools(&[true, true, false, false, true, true, false, true, false, true, true, true, true, false, false, true, true, false, false]);
            let codeword = BinVector::from_bools(&[true, true, false, false, true, false, false, true, false, false, true, true, true, false, false, false, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode19_9;
            let randvec = BinVector::from_bools(&[true, false, true, false, true, false, false, false, true, false, false, false, true, false, true, false, false, true, true]);
            let codeword = BinVector::from_bools(&[false, false, false, false, false, false, false, false, true, false, false, false, true, false, true, false, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode19_9;
            let randvec = BinVector::from_bools(&[true, true, false, true, true, true, false, true, false, true, true, false, true, true, false, false, true, true, false]);
            let codeword = BinVector::from_bools(&[true, false, false, false, true, true, false, true, false, true, false, false, true, true, false, false, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode19_9;
            let randvec = BinVector::from_bools(&[true, true, true, false, true, false, true, true, true, false, false, false, false, true, false, true, true, true, true]);
            let codeword = BinVector::from_bools(&[false, true, false, false, true, false, true, true, true, false, true, false, false, true, false, true, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode19_9;
            let randvec = BinVector::from_bools(&[false, true, false, true, true, false, false, true, false, true, true, false, false, true, true, true, true, true, true]);
            let codeword = BinVector::from_bools(&[true, false, false, true, true, false, false, true, true, true, true, false, false, true, false, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode19_9;
            let randvec = BinVector::from_bools(&[false, true, true, true, true, false, false, true, true, true, false, true, false, false, true, true, false, true, false]);
            let codeword = BinVector::from_bools(&[false, true, true, true, true, false, false, true, false, true, false, true, true, false, false, true, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode19_9;
            let randvec = BinVector::from_bools(&[true, false, true, true, false, true, true, false, false, false, true, false, false, true, true, false, true, false, true]);
            let codeword = BinVector::from_bools(&[true, false, true, true, false, false, true, false, false, false, true, false, false, false, true, false, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode19_9;
            let randvec = BinVector::from_bools(&[false, true, false, false, false, false, true, false, true, true, false, true, false, false, true, false, false, false, true]);
            let codeword = BinVector::from_bools(&[false, true, true, false, false, true, true, false, true, true, false, true, false, false, true, false, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode19_9;
            let randvec = BinVector::from_bools(&[false, true, false, true, false, true, true, false, true, false, false, false, false, false, false, true, false, true, false]);
            let codeword = BinVector::from_bools(&[false, true, false, true, false, false, true, true, true, false, false, false, false, false, false, true, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode19_9;
            let randvec = BinVector::from_bools(&[true, true, false, false, false, false, false, true, true, false, true, true, false, true, true, true, false, false, false]);
            let codeword = BinVector::from_bools(&[true, true, false, false, false, true, false, true, false, false, true, true, true, true, true, true, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode19_9;
            let randvec = BinVector::from_bools(&[false, false, false, true, true, false, false, true, false, false, false, true, false, true, true, false, false, false, true]);
            let codeword = BinVector::from_bools(&[true, false, false, true, true, true, false, true, false, false, false, true, false, true, true, false, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode19_9;
            let randvec = BinVector::from_bools(&[true, true, true, true, true, true, false, true, false, false, false, false, false, true, true, true, true, false, true]);
            let codeword = BinVector::from_bools(&[false, true, true, true, false, false, false, true, false, false, true, false, false, true, true, true, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode19_9;
            let randvec = BinVector::from_bools(&[false, false, false, false, true, false, false, false, true, true, false, false, false, false, false, false, false, true, true]);
            let codeword = BinVector::from_bools(&[false, false, true, true, true, false, false, false, true, true, false, false, false, false, false, true, false, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode19_9;
            let randvec = BinVector::from_bools(&[true, false, false, true, true, true, true, true, true, true, false, false, true, true, true, true, false, true, false]);
            let codeword = BinVector::from_bools(&[false, false, false, true, true, true, true, true, true, false, false, false, true, false, true, true, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode19_9;
            let randvec = BinVector::from_bools(&[true, true, true, false, true, false, true, true, true, false, false, false, false, false, false, true, false, false, false]);
            let codeword = BinVector::from_bools(&[true, true, true, false, true, false, true, false, true, false, false, false, false, false, false, true, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode19_9;
            let randvec = BinVector::from_bools(&[true, true, true, false, true, false, false, true, true, true, false, false, false, true, true, true, true, true, true]);
            let codeword = BinVector::from_bools(&[true, false, true, false, true, false, false, false, true, true, false, false, true, true, true, true, true, true, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode19_9;
            let randvec = BinVector::from_bools(&[false, false, true, false, true, true, true, false, false, false, true, false, false, false, false, true, true, true, false]);
            let codeword = BinVector::from_bools(&[false, false, true, false, true, true, true, false, true, false, true, false, false, false, false, true, false, true, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
    }

    #[test]
    fn test_generator_representation() {
        init();
        let generator_matrix = unsafe { GENERATOR_MATRIX.as_ref().unwrap() };
        let first_row = generator_matrix.get_window(0, 0, 1, generator_matrix.ncols());
        let vector = BinVector::from_bools(&[ true, false, false, false, false, false, false, false, false, true, false, true, false, true, false, false, true, false, true ]);
        assert_eq!(vector, first_row.as_vector());
    }

}
