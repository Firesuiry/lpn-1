use std::boxed::Box;
use std::default::Default;
use std::sync::Once;

use fnv::FnvHashMap;

use m4ri_rust::friendly::BinMatrix;
use m4ri_rust::friendly::BinVector;

use crate::codes::BinaryCode;

/// ``[18, 8]`` Guava code
///
/// Best code found from the GUAVA database version 3.15
///
/// Decodes using Syndrome decoding
#[derive(Clone, Serialize)]
pub struct GuavaCode18_8;

static INIT: Once = Once::new();
static mut GENERATOR_MATRIX: *const BinMatrix = 0 as *const BinMatrix;
static mut PARITY_MATRIX: *const BinMatrix = 0 as *const BinMatrix;
static mut PARITY_MATRIX_T: *const BinMatrix = 0 as *const BinMatrix;
static mut SYNDROME_MAP: *const FnvHashMap<u64, &'static [usize; 1]> = 0 as *const FnvHashMap<u64, &'static [usize; 1]>;

fn init() {
    INIT.call_once(|| {
        unsafe {
            let matrix = Box::new(BinMatrix::from_slices(&[
                &[ 30977 ],
                &[ 61954 ],
                &[ 144132 ],
                &[ 157192 ],
                &[ 183312 ],
                &[ 20256 ],
                &[ 40512 ],
                &[ 191360 ],
                
            ], 18));
            GENERATOR_MATRIX = Box::into_raw(matrix);

            let matrix = Box::new(BinMatrix::from_slices(&[
                &[ 160257 ],
                &[ 189442 ],
                &[ 182276 ],
                &[ 57864 ],
                &[ 177680 ],
                &[ 7712 ],
                &[ 151104 ],
                &[ 171136 ],
                &[ 145664 ],
                &[ 65536 ],
                
            ], 18));
            let matrix_t = Box::new(matrix.transposed());
            PARITY_MATRIX = Box::into_raw(matrix);
            PARITY_MATRIX_T = Box::into_raw(matrix_t);

            let mut map = Box::new(FnvHashMap::with_capacity_and_hasher(1024, Default::default()));
            map.insert(0, &[0]);     // 0 => [0]
            map.insert(1, &[1]);     // 1 => [1]
            map.insert(2, &[2]);     // 2 => [2]
            map.insert(4, &[4]);     // 4 => [4]
            map.insert(8, &[8]);     // 8 => [8]
            map.insert(16, &[16]);     // 16 => [16]
            map.insert(32, &[32]);     // 32 => [32]
            map.insert(64, &[64]);     // 64 => [64]
            map.insert(128, &[128]);     // 128 => [128]
            map.insert(256, &[256]);     // 256 => [256]
            map.insert(121, &[512]);     // 121 => [512]
            map.insert(242, &[1024]);     // 242 => [1024]
            map.insert(484, &[2048]);     // 484 => [2048]
            map.insert(433, &[4096]);     // 433 => [4096]
            map.insert(283, &[8192]);     // 283 => [8192]
            map.insert(79, &[16384]);     // 79 => [16384]
            map.insert(158, &[32768]);     // 158 => [32768]
            map.insert(512, &[65536]);     // 512 => [65536]
            map.insert(471, &[131072]);     // 471 => [131072]
            map.insert(3, &[3]);     // 3 => [3]
            map.insert(5, &[5]);     // 5 => [5]
            map.insert(9, &[9]);     // 9 => [9]
            map.insert(17, &[17]);     // 17 => [17]
            map.insert(33, &[33]);     // 33 => [33]
            map.insert(65, &[65]);     // 65 => [65]
            map.insert(129, &[129]);     // 129 => [129]
            map.insert(257, &[257]);     // 257 => [257]
            map.insert(120, &[513]);     // 120 => [513]
            map.insert(243, &[1025]);     // 243 => [1025]
            map.insert(485, &[2049]);     // 485 => [2049]
            map.insert(432, &[4097]);     // 432 => [4097]
            map.insert(282, &[8193]);     // 282 => [8193]
            map.insert(78, &[16385]);     // 78 => [16385]
            map.insert(159, &[32769]);     // 159 => [32769]
            map.insert(513, &[65537]);     // 513 => [65537]
            map.insert(470, &[131073]);     // 470 => [131073]
            map.insert(6, &[6]);     // 6 => [6]
            map.insert(10, &[10]);     // 10 => [10]
            map.insert(18, &[18]);     // 18 => [18]
            map.insert(34, &[34]);     // 34 => [34]
            map.insert(66, &[66]);     // 66 => [66]
            map.insert(130, &[130]);     // 130 => [130]
            map.insert(258, &[258]);     // 258 => [258]
            map.insert(123, &[514]);     // 123 => [514]
            map.insert(240, &[1026]);     // 240 => [1026]
            map.insert(486, &[2050]);     // 486 => [2050]
            map.insert(435, &[4098]);     // 435 => [4098]
            map.insert(281, &[8194]);     // 281 => [8194]
            map.insert(77, &[16386]);     // 77 => [16386]
            map.insert(156, &[32770]);     // 156 => [32770]
            map.insert(514, &[65538]);     // 514 => [65538]
            map.insert(469, &[131074]);     // 469 => [131074]
            map.insert(12, &[12]);     // 12 => [12]
            map.insert(20, &[20]);     // 20 => [20]
            map.insert(36, &[36]);     // 36 => [36]
            map.insert(68, &[68]);     // 68 => [68]
            map.insert(132, &[132]);     // 132 => [132]
            map.insert(260, &[260]);     // 260 => [260]
            map.insert(125, &[516]);     // 125 => [516]
            map.insert(246, &[1028]);     // 246 => [1028]
            map.insert(480, &[2052]);     // 480 => [2052]
            map.insert(437, &[4100]);     // 437 => [4100]
            map.insert(287, &[8196]);     // 287 => [8196]
            map.insert(75, &[16388]);     // 75 => [16388]
            map.insert(154, &[32772]);     // 154 => [32772]
            map.insert(516, &[65540]);     // 516 => [65540]
            map.insert(467, &[131076]);     // 467 => [131076]
            map.insert(24, &[24]);     // 24 => [24]
            map.insert(40, &[40]);     // 40 => [40]
            map.insert(72, &[72]);     // 72 => [72]
            map.insert(136, &[136]);     // 136 => [136]
            map.insert(264, &[264]);     // 264 => [264]
            map.insert(113, &[520]);     // 113 => [520]
            map.insert(250, &[1032]);     // 250 => [1032]
            map.insert(492, &[2056]);     // 492 => [2056]
            map.insert(441, &[4104]);     // 441 => [4104]
            map.insert(275, &[8200]);     // 275 => [8200]
            map.insert(71, &[16392]);     // 71 => [16392]
            map.insert(150, &[32776]);     // 150 => [32776]
            map.insert(520, &[65544]);     // 520 => [65544]
            map.insert(479, &[131080]);     // 479 => [131080]
            map.insert(48, &[48]);     // 48 => [48]
            map.insert(80, &[80]);     // 80 => [80]
            map.insert(144, &[144]);     // 144 => [144]
            map.insert(272, &[272]);     // 272 => [272]
            map.insert(105, &[528]);     // 105 => [528]
            map.insert(226, &[1040]);     // 226 => [1040]
            map.insert(500, &[2064]);     // 500 => [2064]
            map.insert(417, &[4112]);     // 417 => [4112]
            map.insert(267, &[8208]);     // 267 => [8208]
            map.insert(95, &[16400]);     // 95 => [16400]
            map.insert(142, &[32784]);     // 142 => [32784]
            map.insert(528, &[65552]);     // 528 => [65552]
            map.insert(455, &[131088]);     // 455 => [131088]
            map.insert(96, &[96]);     // 96 => [96]
            map.insert(160, &[160]);     // 160 => [160]
            map.insert(288, &[288]);     // 288 => [288]
            map.insert(89, &[544]);     // 89 => [544]
            map.insert(210, &[1056]);     // 210 => [1056]
            map.insert(452, &[2080]);     // 452 => [2080]
            map.insert(401, &[4128]);     // 401 => [4128]
            map.insert(315, &[8224]);     // 315 => [8224]
            map.insert(111, &[16416]);     // 111 => [16416]
            map.insert(190, &[32800]);     // 190 => [32800]
            map.insert(544, &[65568]);     // 544 => [65568]
            map.insert(503, &[131104]);     // 503 => [131104]
            map.insert(192, &[192]);     // 192 => [192]
            map.insert(320, &[320]);     // 320 => [320]
            map.insert(57, &[576]);     // 57 => [576]
            map.insert(178, &[1088]);     // 178 => [1088]
            map.insert(420, &[2112]);     // 420 => [2112]
            map.insert(497, &[4160]);     // 497 => [4160]
            map.insert(347, &[8256]);     // 347 => [8256]
            map.insert(15, &[16448]);     // 15 => [16448]
            map.insert(222, &[32832]);     // 222 => [32832]
            map.insert(576, &[65600]);     // 576 => [65600]
            map.insert(407, &[131136]);     // 407 => [131136]
            map.insert(384, &[384]);     // 384 => [384]
            map.insert(249, &[640]);     // 249 => [640]
            map.insert(114, &[1152]);     // 114 => [1152]
            map.insert(356, &[2176]);     // 356 => [2176]
            map.insert(305, &[4224]);     // 305 => [4224]
            map.insert(411, &[8320]);     // 411 => [8320]
            map.insert(207, &[16512]);     // 207 => [16512]
            map.insert(30, &[32896]);     // 30 => [32896]
            map.insert(640, &[65664]);     // 640 => [65664]
            map.insert(343, &[131200]);     // 343 => [131200]
            map.insert(377, &[768]);     // 377 => [768]
            map.insert(498, &[1280]);     // 498 => [1280]
            map.insert(228, &[2304]);     // 228 => [2304]
            map.insert(177, &[4352]);     // 177 => [4352]
            map.insert(27, &[8448]);     // 27 => [8448]
            map.insert(335, &[16640]);     // 335 => [16640]
            map.insert(414, &[33024]);     // 414 => [33024]
            map.insert(768, &[65792]);     // 768 => [65792]
            map.insert(215, &[131328]);     // 215 => [131328]
            map.insert(139, &[1536]);     // 139 => [1536]
            map.insert(413, &[2560]);     // 413 => [2560]
            map.insert(456, &[4608]);     // 456 => [4608]
            map.insert(354, &[8704]);     // 354 => [8704]
            map.insert(54, &[16896]);     // 54 => [16896]
            map.insert(231, &[33280]);     // 231 => [33280]
            map.insert(633, &[66048]);     // 633 => [66048]
            map.insert(430, &[131584]);     // 430 => [131584]
            map.insert(278, &[3072]);     // 278 => [3072]
            map.insert(323, &[5120]);     // 323 => [5120]
            map.insert(489, &[9216]);     // 489 => [9216]
            map.insert(189, &[17408]);     // 189 => [17408]
            map.insert(108, &[33792]);     // 108 => [33792]
            map.insert(754, &[66560]);     // 754 => [66560]
            map.insert(293, &[132096]);     // 293 => [132096]
            map.insert(85, &[6144]);     // 85 => [6144]
            map.insert(255, &[10240]);     // 255 => [10240]
            map.insert(427, &[18432]);     // 427 => [18432]
            map.insert(378, &[34816]);     // 378 => [34816]
            map.insert(996, &[67584]);     // 996 => [67584]
            map.insert(51, &[133120]);     // 51 => [133120]
            map.insert(170, &[12288]);     // 170 => [12288]
            map.insert(510, &[20480]);     // 510 => [20480]
            map.insert(303, &[36864]);     // 303 => [36864]
            map.insert(945, &[69632]);     // 945 => [69632]
            map.insert(102, &[135168]);     // 102 => [135168]
            map.insert(340, &[24576]);     // 340 => [24576]
            map.insert(389, &[40960]);     // 389 => [40960]
            map.insert(795, &[73728]);     // 795 => [73728]
            map.insert(204, &[139264]);     // 204 => [139264]
            map.insert(209, &[49152]);     // 209 => [49152]
            map.insert(591, &[81920]);     // 591 => [81920]
            map.insert(408, &[147456]);     // 408 => [147456]
            map.insert(670, &[98304]);     // 670 => [98304]
            map.insert(329, &[163840]);     // 329 => [163840]
            map.insert(983, &[196608]);     // 983 => [196608]
            map.insert(7, &[7]);     // 7 => [7]
            map.insert(11, &[11]);     // 11 => [11]
            map.insert(19, &[19]);     // 19 => [19]
            map.insert(35, &[35]);     // 35 => [35]
            map.insert(67, &[67]);     // 67 => [67]
            map.insert(131, &[131]);     // 131 => [131]
            map.insert(259, &[259]);     // 259 => [259]
            map.insert(122, &[515]);     // 122 => [515]
            map.insert(241, &[1027]);     // 241 => [1027]
            map.insert(487, &[2051]);     // 487 => [2051]
            map.insert(434, &[4099]);     // 434 => [4099]
            map.insert(280, &[8195]);     // 280 => [8195]
            map.insert(76, &[16387]);     // 76 => [16387]
            map.insert(157, &[32771]);     // 157 => [32771]
            map.insert(515, &[65539]);     // 515 => [65539]
            map.insert(468, &[131075]);     // 468 => [131075]
            map.insert(13, &[13]);     // 13 => [13]
            map.insert(21, &[21]);     // 21 => [21]
            map.insert(37, &[37]);     // 37 => [37]
            map.insert(69, &[69]);     // 69 => [69]
            map.insert(133, &[133]);     // 133 => [133]
            map.insert(261, &[261]);     // 261 => [261]
            map.insert(124, &[517]);     // 124 => [517]
            map.insert(247, &[1029]);     // 247 => [1029]
            map.insert(481, &[2053]);     // 481 => [2053]
            map.insert(436, &[4101]);     // 436 => [4101]
            map.insert(286, &[8197]);     // 286 => [8197]
            map.insert(74, &[16389]);     // 74 => [16389]
            map.insert(155, &[32773]);     // 155 => [32773]
            map.insert(517, &[65541]);     // 517 => [65541]
            map.insert(466, &[131077]);     // 466 => [131077]
            map.insert(25, &[25]);     // 25 => [25]
            map.insert(41, &[41]);     // 41 => [41]
            map.insert(73, &[73]);     // 73 => [73]
            map.insert(137, &[137]);     // 137 => [137]
            map.insert(265, &[265]);     // 265 => [265]
            map.insert(112, &[521]);     // 112 => [521]
            map.insert(251, &[1033]);     // 251 => [1033]
            map.insert(493, &[2057]);     // 493 => [2057]
            map.insert(440, &[4105]);     // 440 => [4105]
            map.insert(274, &[8201]);     // 274 => [8201]
            map.insert(70, &[16393]);     // 70 => [16393]
            map.insert(151, &[32777]);     // 151 => [32777]
            map.insert(521, &[65545]);     // 521 => [65545]
            map.insert(478, &[131081]);     // 478 => [131081]
            map.insert(49, &[49]);     // 49 => [49]
            map.insert(81, &[81]);     // 81 => [81]
            map.insert(145, &[145]);     // 145 => [145]
            map.insert(273, &[273]);     // 273 => [273]
            map.insert(104, &[529]);     // 104 => [529]
            map.insert(227, &[1041]);     // 227 => [1041]
            map.insert(501, &[2065]);     // 501 => [2065]
            map.insert(416, &[4113]);     // 416 => [4113]
            map.insert(266, &[8209]);     // 266 => [8209]
            map.insert(94, &[16401]);     // 94 => [16401]
            map.insert(143, &[32785]);     // 143 => [32785]
            map.insert(529, &[65553]);     // 529 => [65553]
            map.insert(454, &[131089]);     // 454 => [131089]
            map.insert(97, &[97]);     // 97 => [97]
            map.insert(161, &[161]);     // 161 => [161]
            map.insert(289, &[289]);     // 289 => [289]
            map.insert(88, &[545]);     // 88 => [545]
            map.insert(211, &[1057]);     // 211 => [1057]
            map.insert(453, &[2081]);     // 453 => [2081]
            map.insert(400, &[4129]);     // 400 => [4129]
            map.insert(314, &[8225]);     // 314 => [8225]
            map.insert(110, &[16417]);     // 110 => [16417]
            map.insert(191, &[32801]);     // 191 => [32801]
            map.insert(545, &[65569]);     // 545 => [65569]
            map.insert(502, &[131105]);     // 502 => [131105]
            map.insert(193, &[193]);     // 193 => [193]
            map.insert(321, &[321]);     // 321 => [321]
            map.insert(56, &[577]);     // 56 => [577]
            map.insert(179, &[1089]);     // 179 => [1089]
            map.insert(421, &[2113]);     // 421 => [2113]
            map.insert(496, &[4161]);     // 496 => [4161]
            map.insert(346, &[8257]);     // 346 => [8257]
            map.insert(14, &[16449]);     // 14 => [16449]
            map.insert(223, &[32833]);     // 223 => [32833]
            map.insert(577, &[65601]);     // 577 => [65601]
            map.insert(406, &[131137]);     // 406 => [131137]
            map.insert(385, &[385]);     // 385 => [385]
            map.insert(248, &[641]);     // 248 => [641]
            map.insert(115, &[1153]);     // 115 => [1153]
            map.insert(357, &[2177]);     // 357 => [2177]
            map.insert(304, &[4225]);     // 304 => [4225]
            map.insert(410, &[8321]);     // 410 => [8321]
            map.insert(206, &[16513]);     // 206 => [16513]
            map.insert(31, &[32897]);     // 31 => [32897]
            map.insert(641, &[65665]);     // 641 => [65665]
            map.insert(342, &[131201]);     // 342 => [131201]
            map.insert(376, &[769]);     // 376 => [769]
            map.insert(499, &[1281]);     // 499 => [1281]
            map.insert(229, &[2305]);     // 229 => [2305]
            map.insert(176, &[4353]);     // 176 => [4353]
            map.insert(26, &[8449]);     // 26 => [8449]
            map.insert(334, &[16641]);     // 334 => [16641]
            map.insert(415, &[33025]);     // 415 => [33025]
            map.insert(769, &[65793]);     // 769 => [65793]
            map.insert(214, &[131329]);     // 214 => [131329]
            map.insert(138, &[1537]);     // 138 => [1537]
            map.insert(412, &[2561]);     // 412 => [2561]
            map.insert(457, &[4609]);     // 457 => [4609]
            map.insert(355, &[8705]);     // 355 => [8705]
            map.insert(55, &[16897]);     // 55 => [16897]
            map.insert(230, &[33281]);     // 230 => [33281]
            map.insert(632, &[66049]);     // 632 => [66049]
            map.insert(431, &[131585]);     // 431 => [131585]
            map.insert(279, &[3073]);     // 279 => [3073]
            map.insert(322, &[5121]);     // 322 => [5121]
            map.insert(488, &[9217]);     // 488 => [9217]
            map.insert(188, &[17409]);     // 188 => [17409]
            map.insert(109, &[33793]);     // 109 => [33793]
            map.insert(755, &[66561]);     // 755 => [66561]
            map.insert(292, &[132097]);     // 292 => [132097]
            map.insert(84, &[6145]);     // 84 => [6145]
            map.insert(254, &[10241]);     // 254 => [10241]
            map.insert(426, &[18433]);     // 426 => [18433]
            map.insert(379, &[34817]);     // 379 => [34817]
            map.insert(997, &[67585]);     // 997 => [67585]
            map.insert(50, &[133121]);     // 50 => [133121]
            map.insert(171, &[12289]);     // 171 => [12289]
            map.insert(511, &[20481]);     // 511 => [20481]
            map.insert(302, &[36865]);     // 302 => [36865]
            map.insert(944, &[69633]);     // 944 => [69633]
            map.insert(103, &[135169]);     // 103 => [135169]
            map.insert(341, &[24577]);     // 341 => [24577]
            map.insert(388, &[40961]);     // 388 => [40961]
            map.insert(794, &[73729]);     // 794 => [73729]
            map.insert(205, &[139265]);     // 205 => [139265]
            map.insert(208, &[49153]);     // 208 => [49153]
            map.insert(590, &[81921]);     // 590 => [81921]
            map.insert(409, &[147457]);     // 409 => [147457]
            map.insert(671, &[98305]);     // 671 => [98305]
            map.insert(328, &[163841]);     // 328 => [163841]
            map.insert(982, &[196609]);     // 982 => [196609]
            map.insert(22, &[22]);     // 22 => [22]
            map.insert(38, &[38]);     // 38 => [38]
            map.insert(134, &[134]);     // 134 => [134]
            map.insert(262, &[262]);     // 262 => [262]
            map.insert(127, &[518]);     // 127 => [518]
            map.insert(244, &[1030]);     // 244 => [1030]
            map.insert(482, &[2054]);     // 482 => [2054]
            map.insert(439, &[4102]);     // 439 => [4102]
            map.insert(285, &[8198]);     // 285 => [8198]
            map.insert(152, &[32774]);     // 152 => [32774]
            map.insert(518, &[65542]);     // 518 => [65542]
            map.insert(465, &[131078]);     // 465 => [131078]
            map.insert(42, &[42]);     // 42 => [42]
            map.insert(494, &[2058]);     // 494 => [2058]
            map.insert(443, &[4106]);     // 443 => [4106]
            map.insert(148, &[32778]);     // 148 => [32778]
            map.insert(522, &[65546]);     // 522 => [65546]
            map.insert(477, &[131082]);     // 477 => [131082]
            map.insert(82, &[82]);     // 82 => [82]
            map.insert(146, &[146]);     // 146 => [146]
            map.insert(107, &[530]);     // 107 => [530]
            map.insert(224, &[1042]);     // 224 => [1042]
            map.insert(419, &[4114]);     // 419 => [4114]
            map.insert(93, &[16402]);     // 93 => [16402]
            map.insert(140, &[32786]);     // 140 => [32786]
            map.insert(530, &[65554]);     // 530 => [65554]
            map.insert(98, &[98]);     // 98 => [98]
            map.insert(162, &[162]);     // 162 => [162]
            map.insert(290, &[290]);     // 290 => [290]
            map.insert(91, &[546]);     // 91 => [546]
            map.insert(403, &[4130]);     // 403 => [4130]
            map.insert(313, &[8226]);     // 313 => [8226]
            map.insert(546, &[65570]);     // 546 => [65570]
            map.insert(194, &[194]);     // 194 => [194]
            map.insert(59, &[578]);     // 59 => [578]
            map.insert(422, &[2114]);     // 422 => [2114]
            map.insert(345, &[8258]);     // 345 => [8258]
            map.insert(220, &[32834]);     // 220 => [32834]
            map.insert(578, &[65602]);     // 578 => [65602]
            map.insert(405, &[131138]);     // 405 => [131138]
            map.insert(386, &[386]);     // 386 => [386]
            map.insert(358, &[2178]);     // 358 => [2178]
            map.insert(307, &[4226]);     // 307 => [4226]
            map.insert(28, &[32898]);     // 28 => [32898]
            map.insert(642, &[65666]);     // 642 => [65666]
            map.insert(333, &[16642]);     // 333 => [16642]
            map.insert(770, &[65794]);     // 770 => [65794]
            map.insert(213, &[131330]);     // 213 => [131330]
            map.insert(458, &[4610]);     // 458 => [4610]
            map.insert(352, &[8706]);     // 352 => [8706]
            map.insert(52, &[16898]);     // 52 => [16898]
            map.insert(635, &[66050]);     // 635 => [66050]
            map.insert(428, &[131586]);     // 428 => [131586]
            map.insert(276, &[3074]);     // 276 => [3074]
            map.insert(491, &[9218]);     // 491 => [9218]
            map.insert(752, &[66562]);     // 752 => [66562]
            map.insert(295, &[132098]);     // 295 => [132098]
            map.insert(87, &[6146]);     // 87 => [6146]
            map.insert(253, &[10242]);     // 253 => [10242]
            map.insert(425, &[18434]);     // 425 => [18434]
            map.insert(998, &[67586]);     // 998 => [67586]
            map.insert(168, &[12290]);     // 168 => [12290]
            map.insert(508, &[20482]);     // 508 => [20482]
            map.insert(301, &[36866]);     // 301 => [36866]
            map.insert(947, &[69634]);     // 947 => [69634]
            map.insert(100, &[135170]);     // 100 => [135170]
            map.insert(391, &[40962]);     // 391 => [40962]
            map.insert(793, &[73730]);     // 793 => [73730]
            map.insert(589, &[81922]);     // 589 => [81922]
            map.insert(668, &[98306]);     // 668 => [98306]
            map.insert(331, &[163842]);     // 331 => [163842]
            map.insert(981, &[196610]);     // 981 => [196610]
            map.insert(44, &[44]);     // 44 => [44]
            map.insert(268, &[268]);     // 268 => [268]
            map.insert(117, &[524]);     // 117 => [524]
            map.insert(445, &[4108]);     // 445 => [4108]
            map.insert(524, &[65548]);     // 524 => [65548]
            map.insert(475, &[131084]);     // 475 => [131084]
            map.insert(271, &[8212]);     // 271 => [8212]
            map.insert(532, &[65556]);     // 532 => [65556]
            map.insert(451, &[131092]);     // 451 => [131092]
            map.insert(164, &[164]);     // 164 => [164]
            map.insert(448, &[2084]);     // 448 => [2084]
            map.insert(319, &[8228]);     // 319 => [8228]
            map.insert(186, &[32804]);     // 186 => [32804]
            map.insert(548, &[65572]);     // 548 => [65572]
            map.insert(196, &[196]);     // 196 => [196]
            map.insert(324, &[324]);     // 324 => [324]
            map.insert(61, &[580]);     // 61 => [580]
            map.insert(182, &[1092]);     // 182 => [1092]
            map.insert(351, &[8260]);     // 351 => [8260]
            map.insert(218, &[32836]);     // 218 => [32836]
            map.insert(580, &[65604]);     // 580 => [65604]
            map.insert(118, &[1156]);     // 118 => [1156]
            map.insert(309, &[4228]);     // 309 => [4228]
            map.insert(203, &[16516]);     // 203 => [16516]
            map.insert(644, &[65668]);     // 644 => [65668]
            map.insert(339, &[131204]);     // 339 => [131204]
            map.insert(381, &[772]);     // 381 => [772]
            map.insert(181, &[4356]);     // 181 => [4356]
            map.insert(772, &[65796]);     // 772 => [65796]
            map.insert(460, &[4612]);     // 460 => [4612]
            map.insert(637, &[66052]);     // 637 => [66052]
            map.insert(327, &[5124]);     // 327 => [5124]
            map.insert(185, &[17412]);     // 185 => [17412]
            map.insert(758, &[66564]);     // 758 => [66564]
            map.insert(382, &[34820]);     // 382 => [34820]
            map.insert(992, &[67588]);     // 992 => [67588]
            map.insert(174, &[12292]);     // 174 => [12292]
            map.insert(506, &[20484]);     // 506 => [20484]
            map.insert(299, &[36868]);     // 299 => [36868]
            map.insert(949, &[69636]);     // 949 => [69636]
            map.insert(336, &[24580]);     // 336 => [24580]
            map.insert(799, &[73732]);     // 799 => [73732]
            map.insert(200, &[139268]);     // 200 => [139268]
            map.insert(587, &[81924]);     // 587 => [81924]
            map.insert(666, &[98308]);     // 666 => [98308]
            map.insert(979, &[196612]);     // 979 => [196612]
            map.insert(234, &[1048]);     // 234 => [1048]
            map.insert(536, &[65560]);     // 536 => [65560]
            map.insert(463, &[131096]);     // 463 => [131096]
            map.insert(296, &[296]);     // 296 => [296]
            map.insert(552, &[65576]);     // 552 => [65576]
            map.insert(505, &[4168]);     // 505 => [4168]
            map.insert(584, &[65608]);     // 584 => [65608]
            map.insert(392, &[392]);     // 392 => [392]
            map.insert(364, &[2184]);     // 364 => [2184]
            map.insert(199, &[16520]);     // 199 => [16520]
            map.insert(648, &[65672]);     // 648 => [65672]
            map.insert(369, &[776]);     // 369 => [776]
            map.insert(236, &[2312]);     // 236 => [2312]
            map.insert(776, &[65800]);     // 776 => [65800]
            map.insert(362, &[8712]);     // 362 => [8712]
            map.insert(62, &[16904]);     // 62 => [16904]
            map.insert(239, &[33288]);     // 239 => [33288]
            map.insert(625, &[66056]);     // 625 => [66056]
            map.insert(762, &[66568]);     // 762 => [66568]
            map.insert(370, &[34824]);     // 370 => [34824]
            map.insert(1004, &[67592]);     // 1004 => [67592]
            map.insert(953, &[69640]);     // 953 => [69640]
            map.insert(348, &[24584]);     // 348 => [24584]
            map.insert(397, &[40968]);     // 397 => [40968]
            map.insert(787, &[73736]);     // 787 => [73736]
            map.insert(217, &[49160]);     // 217 => [49160]
            map.insert(583, &[81928]);     // 583 => [81928]
            map.insert(662, &[98312]);     // 662 => [98312]
            map.insert(991, &[196616]);     // 991 => [196616]
            map.insert(560, &[65584]);     // 560 => [65584]
            map.insert(592, &[65616]);     // 592 => [65616]
            map.insert(233, &[656]);     // 233 => [656]
            map.insert(372, &[2192]);     // 372 => [2192]
            map.insert(395, &[8336]);     // 395 => [8336]
            map.insert(656, &[65680]);     // 656 => [65680]
            map.insert(361, &[784]);     // 361 => [784]
            map.insert(398, &[33040]);     // 398 => [33040]
            map.insert(784, &[65808]);     // 784 => [65808]
            map.insert(472, &[4624]);     // 472 => [4624]
            map.insert(617, &[66064]);     // 617 => [66064]
            map.insert(446, &[131600]);     // 446 => [131600]
            map.insert(173, &[17424]);     // 173 => [17424]
            map.insert(738, &[66576]);     // 738 => [66576]
            map.insert(1012, &[67600]);     // 1012 => [67600]
            map.insert(929, &[69648]);     // 929 => [69648]
            map.insert(779, &[73744]);     // 779 => [73744]
            map.insert(607, &[81936]);     // 607 => [81936]
            map.insert(654, &[98320]);     // 654 => [98320]
            map.insert(967, &[196624]);     // 967 => [196624]
            map.insert(47, &[16480]);     // 47 => [16480]
            map.insert(608, &[65632]);     // 608 => [65632]
            map.insert(672, &[65696]);     // 672 => [65696]
            map.insert(375, &[131232]);     // 375 => [131232]
            map.insert(367, &[16672]);     // 367 => [16672]
            map.insert(800, &[65824]);     // 800 => [65824]
            map.insert(601, &[66080]);     // 601 => [66080]
            map.insert(310, &[3104]);     // 310 => [3104]
            map.insert(722, &[66592]);     // 722 => [66592]
            map.insert(964, &[67616]);     // 964 => [67616]
            map.insert(913, &[69664]);     // 913 => [69664]
            map.insert(827, &[73760]);     // 827 => [73760]
            map.insert(623, &[81952]);     // 623 => [81952]
            map.insert(702, &[98336]);     // 702 => [98336]
            map.insert(1015, &[196640]);     // 1015 => [196640]
            map.insert(704, &[65728]);     // 704 => [65728]
            map.insert(832, &[65856]);     // 832 => [65856]
            map.insert(167, &[33344]);     // 167 => [33344]
            map.insert(569, &[66112]);     // 569 => [66112]
            map.insert(690, &[66624]);     // 690 => [66624]
            map.insert(932, &[67648]);     // 932 => [67648]
            map.insert(1009, &[69696]);     // 1009 => [69696]
            map.insert(859, &[73792]);     // 859 => [73792]
            map.insert(527, &[81984]);     // 527 => [81984]
            map.insert(734, &[98368]);     // 734 => [98368]
            map.insert(919, &[196672]);     // 919 => [196672]
            map.insert(896, &[65920]);     // 896 => [65920]
            map.insert(761, &[66176]);     // 761 => [66176]
            map.insert(626, &[66688]);     // 626 => [66688]
            map.insert(868, &[67712]);     // 868 => [67712]
            map.insert(817, &[69760]);     // 817 => [69760]
            map.insert(923, &[73856]);     // 923 => [73856]
            map.insert(719, &[82048]);     // 719 => [82048]
            map.insert(542, &[98432]);     // 542 => [98432]
            map.insert(855, &[196736]);     // 855 => [196736]
            map.insert(889, &[66304]);     // 889 => [66304]
            map.insert(1010, &[66816]);     // 1010 => [66816]
            map.insert(740, &[67840]);     // 740 => [67840]
            map.insert(689, &[69888]);     // 689 => [69888]
            map.insert(539, &[73984]);     // 539 => [73984]
            map.insert(847, &[82176]);     // 847 => [82176]
            map.insert(926, &[98560]);     // 926 => [98560]
            map.insert(727, &[196864]);     // 727 => [196864]
            map.insert(651, &[67072]);     // 651 => [67072]
            map.insert(925, &[68096]);     // 925 => [68096]
            map.insert(968, &[70144]);     // 968 => [70144]
            map.insert(866, &[74240]);     // 866 => [74240]
            map.insert(566, &[82432]);     // 566 => [82432]
            map.insert(743, &[98816]);     // 743 => [98816]
            map.insert(942, &[197120]);     // 942 => [197120]
            map.insert(790, &[68608]);     // 790 => [68608]
            map.insert(835, &[70656]);     // 835 => [70656]
            map.insert(1001, &[74752]);     // 1001 => [74752]
            map.insert(701, &[82944]);     // 701 => [82944]
            map.insert(620, &[99328]);     // 620 => [99328]
            map.insert(805, &[197632]);     // 805 => [197632]
            map.insert(597, &[71680]);     // 597 => [71680]
            map.insert(767, &[75776]);     // 767 => [75776]
            map.insert(939, &[83968]);     // 939 => [83968]
            map.insert(890, &[100352]);     // 890 => [100352]
            map.insert(563, &[198656]);     // 563 => [198656]
            map.insert(682, &[77824]);     // 682 => [77824]
            map.insert(1022, &[86016]);     // 1022 => [86016]
            map.insert(815, &[102400]);     // 815 => [102400]
            map.insert(614, &[200704]);     // 614 => [200704]
            map.insert(852, &[90112]);     // 852 => [90112]
            map.insert(901, &[106496]);     // 901 => [106496]
            map.insert(716, &[204800]);     // 716 => [204800]
            map.insert(721, &[114688]);     // 721 => [114688]
            map.insert(920, &[212992]);     // 920 => [212992]
            map.insert(841, &[229376]);     // 841 => [229376]
            map.insert(23, &[23]);     // 23 => [23]
            map.insert(39, &[39]);     // 39 => [39]
            map.insert(135, &[135]);     // 135 => [135]
            map.insert(263, &[263]);     // 263 => [263]
            map.insert(126, &[519]);     // 126 => [519]
            map.insert(245, &[1031]);     // 245 => [1031]
            map.insert(483, &[2055]);     // 483 => [2055]
            map.insert(438, &[4103]);     // 438 => [4103]
            map.insert(284, &[8199]);     // 284 => [8199]
            map.insert(153, &[32775]);     // 153 => [32775]
            map.insert(519, &[65543]);     // 519 => [65543]
            map.insert(464, &[131079]);     // 464 => [131079]
            map.insert(43, &[43]);     // 43 => [43]
            map.insert(495, &[2059]);     // 495 => [2059]
            map.insert(442, &[4107]);     // 442 => [4107]
            map.insert(149, &[32779]);     // 149 => [32779]
            map.insert(523, &[65547]);     // 523 => [65547]
            map.insert(476, &[131083]);     // 476 => [131083]
            map.insert(83, &[83]);     // 83 => [83]
            map.insert(147, &[147]);     // 147 => [147]
            map.insert(106, &[531]);     // 106 => [531]
            map.insert(225, &[1043]);     // 225 => [1043]
            map.insert(418, &[4115]);     // 418 => [4115]
            map.insert(92, &[16403]);     // 92 => [16403]
            map.insert(141, &[32787]);     // 141 => [32787]
            map.insert(531, &[65555]);     // 531 => [65555]
            map.insert(99, &[99]);     // 99 => [99]
            map.insert(163, &[163]);     // 163 => [163]
            map.insert(291, &[291]);     // 291 => [291]
            map.insert(90, &[547]);     // 90 => [547]
            map.insert(402, &[4131]);     // 402 => [4131]
            map.insert(312, &[8227]);     // 312 => [8227]
            map.insert(547, &[65571]);     // 547 => [65571]
            map.insert(195, &[195]);     // 195 => [195]
            map.insert(58, &[579]);     // 58 => [579]
            map.insert(423, &[2115]);     // 423 => [2115]
            map.insert(344, &[8259]);     // 344 => [8259]
            map.insert(221, &[32835]);     // 221 => [32835]
            map.insert(579, &[65603]);     // 579 => [65603]
            map.insert(404, &[131139]);     // 404 => [131139]
            map.insert(387, &[387]);     // 387 => [387]
            map.insert(359, &[2179]);     // 359 => [2179]
            map.insert(306, &[4227]);     // 306 => [4227]
            map.insert(29, &[32899]);     // 29 => [32899]
            map.insert(643, &[65667]);     // 643 => [65667]
            map.insert(332, &[16643]);     // 332 => [16643]
            map.insert(771, &[65795]);     // 771 => [65795]
            map.insert(212, &[131331]);     // 212 => [131331]
            map.insert(459, &[4611]);     // 459 => [4611]
            map.insert(353, &[8707]);     // 353 => [8707]
            map.insert(53, &[16899]);     // 53 => [16899]
            map.insert(634, &[66051]);     // 634 => [66051]
            map.insert(429, &[131587]);     // 429 => [131587]
            map.insert(277, &[3075]);     // 277 => [3075]
            map.insert(490, &[9219]);     // 490 => [9219]
            map.insert(753, &[66563]);     // 753 => [66563]
            map.insert(294, &[132099]);     // 294 => [132099]
            map.insert(86, &[6147]);     // 86 => [6147]
            map.insert(252, &[10243]);     // 252 => [10243]
            map.insert(424, &[18435]);     // 424 => [18435]
            map.insert(999, &[67587]);     // 999 => [67587]
            map.insert(169, &[12291]);     // 169 => [12291]
            map.insert(509, &[20483]);     // 509 => [20483]
            map.insert(300, &[36867]);     // 300 => [36867]
            map.insert(946, &[69635]);     // 946 => [69635]
            map.insert(101, &[135171]);     // 101 => [135171]
            map.insert(390, &[40963]);     // 390 => [40963]
            map.insert(792, &[73731]);     // 792 => [73731]
            map.insert(588, &[81923]);     // 588 => [81923]
            map.insert(669, &[98307]);     // 669 => [98307]
            map.insert(330, &[163843]);     // 330 => [163843]
            map.insert(980, &[196611]);     // 980 => [196611]
            map.insert(45, &[45]);     // 45 => [45]
            map.insert(269, &[269]);     // 269 => [269]
            map.insert(116, &[525]);     // 116 => [525]
            map.insert(444, &[4109]);     // 444 => [4109]
            map.insert(525, &[65549]);     // 525 => [65549]
            map.insert(474, &[131085]);     // 474 => [131085]
            map.insert(270, &[8213]);     // 270 => [8213]
            map.insert(533, &[65557]);     // 533 => [65557]
            map.insert(450, &[131093]);     // 450 => [131093]
            map.insert(165, &[165]);     // 165 => [165]
            map.insert(449, &[2085]);     // 449 => [2085]
            map.insert(318, &[8229]);     // 318 => [8229]
            map.insert(187, &[32805]);     // 187 => [32805]
            map.insert(549, &[65573]);     // 549 => [65573]
            map.insert(197, &[197]);     // 197 => [197]
            map.insert(325, &[325]);     // 325 => [325]
            map.insert(60, &[581]);     // 60 => [581]
            map.insert(183, &[1093]);     // 183 => [1093]
            map.insert(350, &[8261]);     // 350 => [8261]
            map.insert(219, &[32837]);     // 219 => [32837]
            map.insert(581, &[65605]);     // 581 => [65605]
            map.insert(119, &[1157]);     // 119 => [1157]
            map.insert(308, &[4229]);     // 308 => [4229]
            map.insert(202, &[16517]);     // 202 => [16517]
            map.insert(645, &[65669]);     // 645 => [65669]
            map.insert(338, &[131205]);     // 338 => [131205]
            map.insert(380, &[773]);     // 380 => [773]
            map.insert(180, &[4357]);     // 180 => [4357]
            map.insert(773, &[65797]);     // 773 => [65797]
            map.insert(461, &[4613]);     // 461 => [4613]
            map.insert(636, &[66053]);     // 636 => [66053]
            map.insert(326, &[5125]);     // 326 => [5125]
            map.insert(184, &[17413]);     // 184 => [17413]
            map.insert(759, &[66565]);     // 759 => [66565]
            map.insert(383, &[34821]);     // 383 => [34821]
            map.insert(993, &[67589]);     // 993 => [67589]
            map.insert(175, &[12293]);     // 175 => [12293]
            map.insert(507, &[20485]);     // 507 => [20485]
            map.insert(298, &[36869]);     // 298 => [36869]
            map.insert(948, &[69637]);     // 948 => [69637]
            map.insert(337, &[24581]);     // 337 => [24581]
            map.insert(798, &[73733]);     // 798 => [73733]
            map.insert(201, &[139269]);     // 201 => [139269]
            map.insert(586, &[81925]);     // 586 => [81925]
            map.insert(667, &[98309]);     // 667 => [98309]
            map.insert(978, &[196613]);     // 978 => [196613]
            map.insert(235, &[1049]);     // 235 => [1049]
            map.insert(537, &[65561]);     // 537 => [65561]
            map.insert(462, &[131097]);     // 462 => [131097]
            map.insert(297, &[297]);     // 297 => [297]
            map.insert(553, &[65577]);     // 553 => [65577]
            map.insert(504, &[4169]);     // 504 => [4169]
            map.insert(585, &[65609]);     // 585 => [65609]
            map.insert(393, &[393]);     // 393 => [393]
            map.insert(365, &[2185]);     // 365 => [2185]
            map.insert(198, &[16521]);     // 198 => [16521]
            map.insert(649, &[65673]);     // 649 => [65673]
            map.insert(368, &[777]);     // 368 => [777]
            map.insert(237, &[2313]);     // 237 => [2313]
            map.insert(777, &[65801]);     // 777 => [65801]
            map.insert(363, &[8713]);     // 363 => [8713]
            map.insert(63, &[16905]);     // 63 => [16905]
            map.insert(238, &[33289]);     // 238 => [33289]
            map.insert(624, &[66057]);     // 624 => [66057]
            map.insert(763, &[66569]);     // 763 => [66569]
            map.insert(371, &[34825]);     // 371 => [34825]
            map.insert(1005, &[67593]);     // 1005 => [67593]
            map.insert(952, &[69641]);     // 952 => [69641]
            map.insert(349, &[24585]);     // 349 => [24585]
            map.insert(396, &[40969]);     // 396 => [40969]
            map.insert(786, &[73737]);     // 786 => [73737]
            map.insert(216, &[49161]);     // 216 => [49161]
            map.insert(582, &[81929]);     // 582 => [81929]
            map.insert(663, &[98313]);     // 663 => [98313]
            map.insert(990, &[196617]);     // 990 => [196617]
            map.insert(561, &[65585]);     // 561 => [65585]
            map.insert(593, &[65617]);     // 593 => [65617]
            map.insert(232, &[657]);     // 232 => [657]
            map.insert(373, &[2193]);     // 373 => [2193]
            map.insert(394, &[8337]);     // 394 => [8337]
            map.insert(657, &[65681]);     // 657 => [65681]
            map.insert(360, &[785]);     // 360 => [785]
            map.insert(399, &[33041]);     // 399 => [33041]
            map.insert(785, &[65809]);     // 785 => [65809]
            map.insert(473, &[4625]);     // 473 => [4625]
            map.insert(616, &[66065]);     // 616 => [66065]
            map.insert(447, &[131601]);     // 447 => [131601]
            map.insert(172, &[17425]);     // 172 => [17425]
            map.insert(739, &[66577]);     // 739 => [66577]
            map.insert(1013, &[67601]);     // 1013 => [67601]
            map.insert(928, &[69649]);     // 928 => [69649]
            map.insert(778, &[73745]);     // 778 => [73745]
            map.insert(606, &[81937]);     // 606 => [81937]
            map.insert(655, &[98321]);     // 655 => [98321]
            map.insert(966, &[196625]);     // 966 => [196625]
            map.insert(46, &[16481]);     // 46 => [16481]
            map.insert(609, &[65633]);     // 609 => [65633]
            map.insert(673, &[65697]);     // 673 => [65697]
            map.insert(374, &[131233]);     // 374 => [131233]
            map.insert(366, &[16673]);     // 366 => [16673]
            map.insert(801, &[65825]);     // 801 => [65825]
            map.insert(600, &[66081]);     // 600 => [66081]
            map.insert(311, &[3105]);     // 311 => [3105]
            map.insert(723, &[66593]);     // 723 => [66593]
            map.insert(965, &[67617]);     // 965 => [67617]
            map.insert(912, &[69665]);     // 912 => [69665]
            map.insert(826, &[73761]);     // 826 => [73761]
            map.insert(622, &[81953]);     // 622 => [81953]
            map.insert(703, &[98337]);     // 703 => [98337]
            map.insert(1014, &[196641]);     // 1014 => [196641]
            map.insert(705, &[65729]);     // 705 => [65729]
            map.insert(833, &[65857]);     // 833 => [65857]
            map.insert(166, &[33345]);     // 166 => [33345]
            map.insert(568, &[66113]);     // 568 => [66113]
            map.insert(691, &[66625]);     // 691 => [66625]
            map.insert(933, &[67649]);     // 933 => [67649]
            map.insert(1008, &[69697]);     // 1008 => [69697]
            map.insert(858, &[73793]);     // 858 => [73793]
            map.insert(526, &[81985]);     // 526 => [81985]
            map.insert(735, &[98369]);     // 735 => [98369]
            map.insert(918, &[196673]);     // 918 => [196673]
            map.insert(897, &[65921]);     // 897 => [65921]
            map.insert(760, &[66177]);     // 760 => [66177]
            map.insert(627, &[66689]);     // 627 => [66689]
            map.insert(869, &[67713]);     // 869 => [67713]
            map.insert(816, &[69761]);     // 816 => [69761]
            map.insert(922, &[73857]);     // 922 => [73857]
            map.insert(718, &[82049]);     // 718 => [82049]
            map.insert(543, &[98433]);     // 543 => [98433]
            map.insert(854, &[196737]);     // 854 => [196737]
            map.insert(888, &[66305]);     // 888 => [66305]
            map.insert(1011, &[66817]);     // 1011 => [66817]
            map.insert(741, &[67841]);     // 741 => [67841]
            map.insert(688, &[69889]);     // 688 => [69889]
            map.insert(538, &[73985]);     // 538 => [73985]
            map.insert(846, &[82177]);     // 846 => [82177]
            map.insert(927, &[98561]);     // 927 => [98561]
            map.insert(726, &[196865]);     // 726 => [196865]
            map.insert(650, &[67073]);     // 650 => [67073]
            map.insert(924, &[68097]);     // 924 => [68097]
            map.insert(969, &[70145]);     // 969 => [70145]
            map.insert(867, &[74241]);     // 867 => [74241]
            map.insert(567, &[82433]);     // 567 => [82433]
            map.insert(742, &[98817]);     // 742 => [98817]
            map.insert(943, &[197121]);     // 943 => [197121]
            map.insert(791, &[68609]);     // 791 => [68609]
            map.insert(834, &[70657]);     // 834 => [70657]
            map.insert(1000, &[74753]);     // 1000 => [74753]
            map.insert(700, &[82945]);     // 700 => [82945]
            map.insert(621, &[99329]);     // 621 => [99329]
            map.insert(804, &[197633]);     // 804 => [197633]
            map.insert(596, &[71681]);     // 596 => [71681]
            map.insert(766, &[75777]);     // 766 => [75777]
            map.insert(938, &[83969]);     // 938 => [83969]
            map.insert(891, &[100353]);     // 891 => [100353]
            map.insert(562, &[198657]);     // 562 => [198657]
            map.insert(683, &[77825]);     // 683 => [77825]
            map.insert(1023, &[86017]);     // 1023 => [86017]
            map.insert(814, &[102401]);     // 814 => [102401]
            map.insert(615, &[200705]);     // 615 => [200705]
            map.insert(853, &[90113]);     // 853 => [90113]
            map.insert(900, &[106497]);     // 900 => [106497]
            map.insert(717, &[204801]);     // 717 => [204801]
            map.insert(720, &[114689]);     // 720 => [114689]
            map.insert(921, &[212993]);     // 921 => [212993]
            map.insert(840, &[229377]);     // 840 => [229377]
            map.insert(534, &[65558]);     // 534 => [65558]
            map.insert(317, &[8230]);     // 317 => [8230]
            map.insert(550, &[65574]);     // 550 => [65574]
            map.insert(646, &[65670]);     // 646 => [65670]
            map.insert(774, &[65798]);     // 774 => [65798]
            map.insert(639, &[66054]);     // 639 => [66054]
            map.insert(756, &[66566]);     // 756 => [66566]
            map.insert(994, &[67590]);     // 994 => [67590]
            map.insert(951, &[69638]);     // 951 => [69638]
            map.insert(797, &[73734]);     // 797 => [73734]
            map.insert(664, &[98310]);     // 664 => [98310]
            map.insert(977, &[196614]);     // 977 => [196614]
            map.insert(554, &[65578]);     // 554 => [65578]
            map.insert(1006, &[67594]);     // 1006 => [67594]
            map.insert(955, &[69642]);     // 955 => [69642]
            map.insert(660, &[98314]);     // 660 => [98314]
            map.insert(989, &[196618]);     // 989 => [196618]
            map.insert(594, &[65618]);     // 594 => [65618]
            map.insert(658, &[65682]);     // 658 => [65682]
            map.insert(619, &[66066]);     // 619 => [66066]
            map.insert(736, &[66578]);     // 736 => [66578]
            map.insert(931, &[69650]);     // 931 => [69650]
            map.insert(605, &[81938]);     // 605 => [81938]
            map.insert(652, &[98322]);     // 652 => [98322]
            map.insert(610, &[65634]);     // 610 => [65634]
            map.insert(674, &[65698]);     // 674 => [65698]
            map.insert(802, &[65826]);     // 802 => [65826]
            map.insert(603, &[66082]);     // 603 => [66082]
            map.insert(915, &[69666]);     // 915 => [69666]
            map.insert(825, &[73762]);     // 825 => [73762]
            map.insert(706, &[65730]);     // 706 => [65730]
            map.insert(571, &[66114]);     // 571 => [66114]
            map.insert(934, &[67650]);     // 934 => [67650]
            map.insert(857, &[73794]);     // 857 => [73794]
            map.insert(732, &[98370]);     // 732 => [98370]
            map.insert(917, &[196674]);     // 917 => [196674]
            map.insert(898, &[65922]);     // 898 => [65922]
            map.insert(870, &[67714]);     // 870 => [67714]
            map.insert(819, &[69762]);     // 819 => [69762]
            map.insert(540, &[98434]);     // 540 => [98434]
            map.insert(845, &[82178]);     // 845 => [82178]
            map.insert(725, &[196866]);     // 725 => [196866]
            map.insert(970, &[70146]);     // 970 => [70146]
            map.insert(864, &[74242]);     // 864 => [74242]
            map.insert(564, &[82434]);     // 564 => [82434]
            map.insert(940, &[197122]);     // 940 => [197122]
            map.insert(788, &[68610]);     // 788 => [68610]
            map.insert(1003, &[74754]);     // 1003 => [74754]
            map.insert(807, &[197634]);     // 807 => [197634]
            map.insert(599, &[71682]);     // 599 => [71682]
            map.insert(765, &[75778]);     // 765 => [75778]
            map.insert(937, &[83970]);     // 937 => [83970]
            map.insert(680, &[77826]);     // 680 => [77826]
            map.insert(1020, &[86018]);     // 1020 => [86018]
            map.insert(813, &[102402]);     // 813 => [102402]
            map.insert(612, &[200706]);     // 612 => [200706]
            map.insert(903, &[106498]);     // 903 => [106498]
            map.insert(843, &[229378]);     // 843 => [229378]
            map.insert(556, &[65580]);     // 556 => [65580]
            map.insert(780, &[65804]);     // 780 => [65804]
            map.insert(629, &[66060]);     // 629 => [66060]
            map.insert(957, &[69644]);     // 957 => [69644]
            map.insert(987, &[196620]);     // 987 => [196620]
            map.insert(783, &[73748]);     // 783 => [73748]
            map.insert(963, &[196628]);     // 963 => [196628]
            map.insert(676, &[65700]);     // 676 => [65700]
            map.insert(960, &[67620]);     // 960 => [67620]
            map.insert(831, &[73764]);     // 831 => [73764]
            map.insert(698, &[98340]);     // 698 => [98340]
            map.insert(708, &[65732]);     // 708 => [65732]
            map.insert(836, &[65860]);     // 836 => [65860]
            map.insert(573, &[66116]);     // 573 => [66116]
            map.insert(694, &[66628]);     // 694 => [66628]
            map.insert(863, &[73796]);     // 863 => [73796]
            map.insert(730, &[98372]);     // 730 => [98372]
            map.insert(630, &[66692]);     // 630 => [66692]
            map.insert(821, &[69764]);     // 821 => [69764]
            map.insert(715, &[82052]);     // 715 => [82052]
            map.insert(851, &[196740]);     // 851 => [196740]
            map.insert(893, &[66308]);     // 893 => [66308]
            map.insert(693, &[69892]);     // 693 => [69892]
            map.insert(972, &[70148]);     // 972 => [70148]
            map.insert(839, &[70660]);     // 839 => [70660]
            map.insert(697, &[82948]);     // 697 => [82948]
            map.insert(894, &[100356]);     // 894 => [100356]
            map.insert(686, &[77828]);     // 686 => [77828]
            map.insert(1018, &[86020]);     // 1018 => [86020]
            map.insert(811, &[102404]);     // 811 => [102404]
            map.insert(848, &[90116]);     // 848 => [90116]
            map.insert(712, &[204804]);     // 712 => [204804]
            map.insert(746, &[66584]);     // 746 => [66584]
            map.insert(975, &[196632]);     // 975 => [196632]
            map.insert(808, &[65832]);     // 808 => [65832]
            map.insert(1017, &[69704]);     // 1017 => [69704]
            map.insert(904, &[65928]);     // 904 => [65928]
            map.insert(876, &[67720]);     // 876 => [67720]
            map.insert(711, &[82056]);     // 711 => [82056]
            map.insert(881, &[66312]);     // 881 => [66312]
            map.insert(748, &[67848]);     // 748 => [67848]
            map.insert(874, &[74248]);     // 874 => [74248]
            map.insert(574, &[82440]);     // 574 => [82440]
            map.insert(751, &[98824]);     // 751 => [98824]
            map.insert(882, &[100360]);     // 882 => [100360]
            map.insert(860, &[90120]);     // 860 => [90120]
            map.insert(909, &[106504]);     // 909 => [106504]
            map.insert(729, &[114696]);     // 729 => [114696]
            map.insert(745, &[66192]);     // 745 => [66192]
            map.insert(884, &[67728]);     // 884 => [67728]
            map.insert(907, &[73872]);     // 907 => [73872]
            map.insert(873, &[66320]);     // 873 => [66320]
            map.insert(910, &[98576]);     // 910 => [98576]
            map.insert(984, &[70160]);     // 984 => [70160]
            map.insert(958, &[197136]);     // 958 => [197136]
            map.insert(685, &[82960]);     // 685 => [82960]
            map.insert(559, &[82016]);     // 559 => [82016]
            map.insert(887, &[196768]);     // 887 => [196768]
            map.insert(879, &[82208]);     // 879 => [82208]
            map.insert(822, &[68640]);     // 822 => [68640]
            map.insert(679, &[98880]);     // 679 => [98880]
            map.insert(535, &[65559]);     // 535 => [65559]
            map.insert(316, &[8231]);     // 316 => [8231]
            map.insert(551, &[65575]);     // 551 => [65575]
            map.insert(647, &[65671]);     // 647 => [65671]
            map.insert(775, &[65799]);     // 775 => [65799]
            map.insert(638, &[66055]);     // 638 => [66055]
            map.insert(757, &[66567]);     // 757 => [66567]
            map.insert(995, &[67591]);     // 995 => [67591]
            map.insert(950, &[69639]);     // 950 => [69639]
            map.insert(796, &[73735]);     // 796 => [73735]
            map.insert(665, &[98311]);     // 665 => [98311]
            map.insert(976, &[196615]);     // 976 => [196615]
            map.insert(555, &[65579]);     // 555 => [65579]
            map.insert(1007, &[67595]);     // 1007 => [67595]
            map.insert(954, &[69643]);     // 954 => [69643]
            map.insert(661, &[98315]);     // 661 => [98315]
            map.insert(988, &[196619]);     // 988 => [196619]
            map.insert(595, &[65619]);     // 595 => [65619]
            map.insert(659, &[65683]);     // 659 => [65683]
            map.insert(618, &[66067]);     // 618 => [66067]
            map.insert(737, &[66579]);     // 737 => [66579]
            map.insert(930, &[69651]);     // 930 => [69651]
            map.insert(604, &[81939]);     // 604 => [81939]
            map.insert(653, &[98323]);     // 653 => [98323]
            map.insert(611, &[65635]);     // 611 => [65635]
            map.insert(675, &[65699]);     // 675 => [65699]
            map.insert(803, &[65827]);     // 803 => [65827]
            map.insert(602, &[66083]);     // 602 => [66083]
            map.insert(914, &[69667]);     // 914 => [69667]
            map.insert(824, &[73763]);     // 824 => [73763]
            map.insert(707, &[65731]);     // 707 => [65731]
            map.insert(570, &[66115]);     // 570 => [66115]
            map.insert(935, &[67651]);     // 935 => [67651]
            map.insert(856, &[73795]);     // 856 => [73795]
            map.insert(733, &[98371]);     // 733 => [98371]
            map.insert(916, &[196675]);     // 916 => [196675]
            map.insert(899, &[65923]);     // 899 => [65923]
            map.insert(871, &[67715]);     // 871 => [67715]
            map.insert(818, &[69763]);     // 818 => [69763]
            map.insert(541, &[98435]);     // 541 => [98435]
            map.insert(844, &[82179]);     // 844 => [82179]
            map.insert(724, &[196867]);     // 724 => [196867]
            map.insert(971, &[70147]);     // 971 => [70147]
            map.insert(865, &[74243]);     // 865 => [74243]
            map.insert(565, &[82435]);     // 565 => [82435]
            map.insert(941, &[197123]);     // 941 => [197123]
            map.insert(789, &[68611]);     // 789 => [68611]
            map.insert(1002, &[74755]);     // 1002 => [74755]
            map.insert(806, &[197635]);     // 806 => [197635]
            map.insert(598, &[71683]);     // 598 => [71683]
            map.insert(764, &[75779]);     // 764 => [75779]
            map.insert(936, &[83971]);     // 936 => [83971]
            map.insert(681, &[77827]);     // 681 => [77827]
            map.insert(1021, &[86019]);     // 1021 => [86019]
            map.insert(812, &[102403]);     // 812 => [102403]
            map.insert(613, &[200707]);     // 613 => [200707]
            map.insert(902, &[106499]);     // 902 => [106499]
            map.insert(842, &[229379]);     // 842 => [229379]
            map.insert(557, &[65581]);     // 557 => [65581]
            map.insert(781, &[65805]);     // 781 => [65805]
            map.insert(628, &[66061]);     // 628 => [66061]
            map.insert(956, &[69645]);     // 956 => [69645]
            map.insert(986, &[196621]);     // 986 => [196621]
            map.insert(782, &[73749]);     // 782 => [73749]
            map.insert(962, &[196629]);     // 962 => [196629]
            map.insert(677, &[65701]);     // 677 => [65701]
            map.insert(961, &[67621]);     // 961 => [67621]
            map.insert(830, &[73765]);     // 830 => [73765]
            map.insert(699, &[98341]);     // 699 => [98341]
            map.insert(709, &[65733]);     // 709 => [65733]
            map.insert(837, &[65861]);     // 837 => [65861]
            map.insert(572, &[66117]);     // 572 => [66117]
            map.insert(695, &[66629]);     // 695 => [66629]
            map.insert(862, &[73797]);     // 862 => [73797]
            map.insert(731, &[98373]);     // 731 => [98373]
            map.insert(631, &[66693]);     // 631 => [66693]
            map.insert(820, &[69765]);     // 820 => [69765]
            map.insert(714, &[82053]);     // 714 => [82053]
            map.insert(850, &[196741]);     // 850 => [196741]
            map.insert(892, &[66309]);     // 892 => [66309]
            map.insert(692, &[69893]);     // 692 => [69893]
            map.insert(973, &[70149]);     // 973 => [70149]
            map.insert(838, &[70661]);     // 838 => [70661]
            map.insert(696, &[82949]);     // 696 => [82949]
            map.insert(895, &[100357]);     // 895 => [100357]
            map.insert(687, &[77829]);     // 687 => [77829]
            map.insert(1019, &[86021]);     // 1019 => [86021]
            map.insert(810, &[102405]);     // 810 => [102405]
            map.insert(849, &[90117]);     // 849 => [90117]
            map.insert(713, &[204805]);     // 713 => [204805]
            map.insert(747, &[66585]);     // 747 => [66585]
            map.insert(974, &[196633]);     // 974 => [196633]
            map.insert(809, &[65833]);     // 809 => [65833]
            map.insert(1016, &[69705]);     // 1016 => [69705]
            map.insert(905, &[65929]);     // 905 => [65929]
            map.insert(877, &[67721]);     // 877 => [67721]
            map.insert(710, &[82057]);     // 710 => [82057]
            map.insert(880, &[66313]);     // 880 => [66313]
            map.insert(749, &[67849]);     // 749 => [67849]
            map.insert(875, &[74249]);     // 875 => [74249]
            map.insert(575, &[82441]);     // 575 => [82441]
            map.insert(750, &[98825]);     // 750 => [98825]
            map.insert(883, &[100361]);     // 883 => [100361]
            map.insert(861, &[90121]);     // 861 => [90121]
            map.insert(908, &[106505]);     // 908 => [106505]
            map.insert(728, &[114697]);     // 728 => [114697]
            map.insert(744, &[66193]);     // 744 => [66193]
            map.insert(885, &[67729]);     // 885 => [67729]
            map.insert(906, &[73873]);     // 906 => [73873]
            map.insert(872, &[66321]);     // 872 => [66321]
            map.insert(911, &[98577]);     // 911 => [98577]
            map.insert(985, &[70161]);     // 985 => [70161]
            map.insert(959, &[197137]);     // 959 => [197137]
            map.insert(684, &[82961]);     // 684 => [82961]
            map.insert(558, &[82017]);     // 558 => [82017]
            map.insert(886, &[196769]);     // 886 => [196769]
            map.insert(878, &[82209]);     // 878 => [82209]
            map.insert(823, &[68641]);     // 823 => [68641]
            map.insert(678, &[98881]);     // 678 => [98881]
            map.insert(829, &[73766]);     // 829 => [73766]
            map.insert(828, &[73767]);     // 828 => [73767]
            
            SYNDROME_MAP = Box::into_raw(map);
        }
    });
}

impl GuavaCode18_8 {
    fn parity_check_matrix_transposed(&self) -> &BinMatrix {
        init();
        unsafe {
            PARITY_MATRIX_T.as_ref().unwrap()
        }
    }
}

impl BinaryCode for GuavaCode18_8 {
    fn name(&self) -> String {
        "[18, 8] Guava code".to_owned()
    }

    fn length(&self) -> usize {
        18
    }

    fn dimension(&self) -> usize {
        8
    }

    fn generator_matrix(&self) -> &BinMatrix {
        init();
        unsafe {
            GENERATOR_MATRIX.as_ref().unwrap()
        }
    }

    fn parity_check_matrix(&self) -> &BinMatrix {
        init();
        unsafe {
            PARITY_MATRIX.as_ref().unwrap()
        }
    }

    fn decode_to_code(&self, c: &BinVector) -> Result<BinVector, &str> {
        init();
        let map = unsafe {
            SYNDROME_MAP.as_ref().unwrap()
        };
        debug_assert_eq!(c.len(), self.length(), "the length doesn't match the expected length (length of the code)");
        let he = c * self.parity_check_matrix_transposed();
        let mut error = BinVector::with_capacity(18);
        let stor = unsafe { error.get_storage_mut() };
        let errbytes = map[&he.as_u64()];
        debug_assert_eq!(errbytes.len(), 18 / 64 + if 18 % 64 != 0 { 1 } else { 0 });
        stor.clear();
        stor.extend_from_slice(&errbytes[..]);
        unsafe { error.set_len(18) };
        debug_assert_eq!(error.len(), self.length(), "internal: the error vector is of the wrong length");
        let result = c + &error;
        debug_assert_eq!(result.len(), self.length(), "internal: the result vector is of the wrong length");
        debug_assert_eq!((&result * self.parity_check_matrix_transposed()).count_ones(), 0);
        Ok(result)
    }

    fn decode_to_message(&self, c: &BinVector) -> Result<BinVector, &str> {
        
        let mut codeword = self.decode_to_code(c)?;
        codeword.truncate(8);
        Ok(codeword)
        
    }

    fn decode_slice(&self, c: &mut [u64]) {
        init();
        
        debug_assert_eq!(c[18 / 64] & !((1 << 18) - 1), 0, "this message has excess bits");

        let map = unsafe {
            SYNDROME_MAP.as_ref().unwrap()
        };
        let he = &BinMatrix::from_slices(&[&c[..]], self.length()) * self.parity_check_matrix_transposed();
        let error = map[unsafe { &he.get_word_unchecked(0, 0) }];
        c.iter_mut().zip(error.iter().copied()).for_each(|(sample, error)| *sample ^= error as u64);
    }

    
}

#[cfg(test)]
mod tests {
    use super::*;
    use m4ri_rust::friendly::BinVector;
    use crate::oracle::Sample;

    #[test]
    fn size() {
        let code = GuavaCode18_8.generator_matrix();
        assert_eq!(code.ncols(), 18);
        assert_eq!(code.nrows(), 8);
    }

    #[test]
    fn test_decode_sample() {
        let code = GuavaCode18_8;
        for _ in 0..1000 {
            // setup
            let vec = BinVector::random(code.length());
            let mut sample_a = Sample::from_binvector(&vec, false);
            let mut sample_b = Sample::from_binvector(&vec, true);
            
            let decoded_vec = code.decode_to_message(&vec).unwrap();
            println!("decoded_vec: {:?}", decoded_vec);

            // test vectors
            let decoded_vec_sample_a = Sample::from_binvector(&decoded_vec, false);
            let decoded_vec_sample_b = Sample::from_binvector(&decoded_vec, true);

            code.decode_sample(&mut sample_a);
            code.decode_sample(&mut sample_b);
            assert_eq!(sample_a.get_product(), false);
            assert_eq!(sample_b.get_product(), true);
            assert_eq!(sample_a, decoded_vec_sample_a);
            assert_eq!(sample_b, decoded_vec_sample_b);
        }
    }

    #[test]
    fn random_decode_tests() {

        
        {
            let code = GuavaCode18_8;
            let randvec = BinVector::from_bools(&[false, true, true, false, true, true, false, false, true, false, false, false, true, true, false, true, false, false]);
            let codeword = BinVector::from_bools(&[false, false, true, false, true, true, false, false, false, false, false, false, true, true, false, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode18_8;
            let randvec = BinVector::from_bools(&[false, false, true, true, true, false, true, false, true, false, false, true, false, true, false, true, false, true]);
            let codeword = BinVector::from_bools(&[false, false, true, false, false, false, true, false, true, false, true, true, false, true, false, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode18_8;
            let randvec = BinVector::from_bools(&[true, false, false, false, false, true, false, true, true, false, false, true, true, true, false, true, true, false]);
            let codeword = BinVector::from_bools(&[true, false, false, true, false, true, false, true, true, true, false, true, true, true, false, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode18_8;
            let randvec = BinVector::from_bools(&[true, false, false, true, false, true, false, true, true, true, true, false, true, false, true, false, false, true]);
            let codeword = BinVector::from_bools(&[true, false, false, true, true, true, false, true, true, true, true, false, true, true, true, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode18_8;
            let randvec = BinVector::from_bools(&[false, true, true, false, true, true, false, true, false, true, false, true, false, true, false, false, false, false]);
            let codeword = BinVector::from_bools(&[false, true, true, false, false, false, false, true, false, true, false, true, false, true, false, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode18_8;
            let randvec = BinVector::from_bools(&[false, true, true, false, false, false, true, true, false, true, false, false, false, true, true, true, true, false]);
            let codeword = BinVector::from_bools(&[true, true, true, false, true, false, true, false, false, true, false, true, false, true, true, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode18_8;
            let randvec = BinVector::from_bools(&[false, true, false, false, false, true, true, true, false, true, false, true, true, true, false, false, false, false]);
            let codeword = BinVector::from_bools(&[false, false, false, false, false, true, true, true, false, true, false, true, true, true, false, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode18_8;
            let randvec = BinVector::from_bools(&[true, false, false, false, false, false, true, true, false, false, false, true, true, true, false, true, true, true]);
            let codeword = BinVector::from_bools(&[false, false, false, true, false, false, true, false, false, false, false, true, true, true, true, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode18_8;
            let randvec = BinVector::from_bools(&[true, false, true, true, false, true, true, false, false, true, false, true, false, true, true, true, true, false]);
            let codeword = BinVector::from_bools(&[false, true, true, true, false, true, false, false, false, false, false, true, false, true, true, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode18_8;
            let randvec = BinVector::from_bools(&[false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, true, true, false]);
            let codeword = BinVector::from_bools(&[true, false, false, false, true, true, true, true, true, true, true, true, false, false, false, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode18_8;
            let randvec = BinVector::from_bools(&[false, false, true, true, true, false, false, false, false, true, true, true, false, false, false, true, false, true]);
            let codeword = BinVector::from_bools(&[true, true, true, true, true, false, true, false, false, false, true, true, false, false, false, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode18_8;
            let randvec = BinVector::from_bools(&[false, false, true, false, true, false, false, true, true, true, false, false, false, false, false, true, false, true]);
            let codeword = BinVector::from_bools(&[false, false, false, false, true, true, false, false, true, true, false, false, false, false, false, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode18_8;
            let randvec = BinVector::from_bools(&[true, false, true, true, true, true, true, false, true, false, false, true, true, true, true, false, true, false]);
            let codeword = BinVector::from_bools(&[false, false, false, true, true, true, true, false, true, true, false, true, true, true, true, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode18_8;
            let randvec = BinVector::from_bools(&[false, false, false, true, true, false, false, true, false, false, false, true, false, false, true, true, true, true]);
            let codeword = BinVector::from_bools(&[true, true, false, true, true, false, false, true, false, true, false, true, false, false, true, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode18_8;
            let randvec = BinVector::from_bools(&[false, false, true, true, false, true, true, true, true, false, false, false, true, true, true, true, false, true]);
            let codeword = BinVector::from_bools(&[false, false, true, true, false, true, false, true, true, false, false, false, true, true, true, true, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode18_8;
            let randvec = BinVector::from_bools(&[true, true, false, true, false, false, false, false, false, true, false, true, false, true, false, true, false, false]);
            let codeword = BinVector::from_bools(&[false, false, false, true, true, false, false, false, false, true, false, true, false, true, false, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode18_8;
            let randvec = BinVector::from_bools(&[true, false, true, false, false, false, false, false, false, true, true, false, false, false, false, false, true, false]);
            let codeword = BinVector::from_bools(&[true, false, true, false, true, false, false, false, false, true, true, false, false, false, false, true, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode18_8;
            let randvec = BinVector::from_bools(&[true, true, false, false, true, true, false, false, false, true, false, false, false, false, false, false, true, false]);
            let codeword = BinVector::from_bools(&[false, true, true, false, true, true, false, false, false, true, false, false, false, false, true, false, false, false]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode18_8;
            let randvec = BinVector::from_bools(&[true, true, true, true, true, false, false, true, false, false, true, true, false, true, false, false, true, true]);
            let codeword = BinVector::from_bools(&[false, true, false, true, true, false, true, true, true, false, true, true, false, true, false, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
        {
            let code = GuavaCode18_8;
            let randvec = BinVector::from_bools(&[true, true, false, true, false, true, true, false, true, false, false, false, true, true, true, false, false, true]);
            let codeword = BinVector::from_bools(&[true, true, false, true, false, false, true, false, true, true, false, false, true, true, true, false, false, true]);
            assert_eq!(code.decode_to_code(&randvec), Ok(codeword));
        }
        
    }

    #[test]
    fn test_generator_representation() {
        init();
        let generator_matrix = unsafe { GENERATOR_MATRIX.as_ref().unwrap() };
        let first_row = generator_matrix.get_window(0, 0, 1, generator_matrix.ncols());
        let vector = BinVector::from_bools(&[ true, false, false, false, false, false, false, false, true, false, false, true, true, true, true, false, false, false ]);
        assert_eq!(vector, first_row.as_vector());
    }

}
