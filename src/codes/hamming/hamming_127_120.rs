use codes::BinaryCode;
use std::default::Default;
use m4ri_rust::friendly::BinMatrix;
use m4ri_rust::friendly::BinVector;

use fnv::FnvHashMap;


pub struct HammingCode127_120;



lazy_static! {
    static ref GENERATOR_MATRIX: BinMatrix = BinMatrix::new(vec![
      BinVector::from_bools(&[true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true]),
      BinVector::from_bools(&[false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true]),
      BinVector::from_bools(&[false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false]),
      BinVector::from_bools(&[false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, true]),
      BinVector::from_bools(&[false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, false]),
      BinVector::from_bools(&[false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, true, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, true, false, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, true, true, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false, false, true, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false, true, false, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false, true, true, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, false, true, true, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, false, false, true, false, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, false, false, true, true, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, true, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, true, false, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, true, true, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, true, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, true, false, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, true, true, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false, false, true, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false, true, false, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false, true, true, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, false, true, true, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, false, false, true, false, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, false, false, true, true, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, true, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, true, false, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, true, true, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, true, true, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, true, false, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, true, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, false, false, true, true, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, false, false, true, false, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, false, true, true, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false, true, true, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false, true, false, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false, false, true, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, true, true, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, true, false, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, true, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, true, true, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, true, false, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, true, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, false, false, true, true, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, false, false, true, false, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, false, true, true, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, false, false, false, true, false, true, true, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, true, false, false, false, true, false, true, false, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, true, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, true, true, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, true, false, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, false, false, false, false, false, true, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, true, true, false]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, true, false, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, false, true, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true]),

    ]);
    static ref PARITY_MATRIX: BinMatrix = BinMatrix::new(vec![
      BinVector::from_bools(&[true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true]),
      BinVector::from_bools(&[false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true]),
      BinVector::from_bools(&[false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true]),
      BinVector::from_bools(&[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true]),

    ]);

    /// Map from He to e
    static ref SYNDROME_MAP: FnvHashMap<usize, [bool; 127]> = {
        let mut map = FnvHashMap::with_capacity_and_hasher(128, Default::default());
        map.insert(0, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 0 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(1, [true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 1 => (1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(2, [false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 2 => (0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(3, [false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 3 => (0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(4, [false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 4 => (0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(5, [false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 5 => (0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(6, [false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 6 => (0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(7, [false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 7 => (0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(8, [false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 8 => (0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(9, [false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 9 => (0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(10, [false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 10 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(11, [false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 11 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(12, [false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 12 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(13, [false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 13 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(14, [false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 14 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(15, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 15 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(16, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 16 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(17, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 17 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(18, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 18 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(19, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 19 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(20, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 20 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(21, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 21 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(22, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 22 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(23, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 23 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(24, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 24 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(25, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 25 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(26, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 26 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(27, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 27 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(28, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 28 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(29, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 29 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(30, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 30 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(31, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 31 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(32, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 32 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(33, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 33 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(34, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 34 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(35, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 35 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(36, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 36 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(37, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 37 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(38, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 38 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(39, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 39 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(40, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 40 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(41, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 41 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(42, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 42 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(43, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 43 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(44, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 44 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(45, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 45 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(46, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 46 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(47, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 47 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(48, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 48 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(49, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 49 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(50, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 50 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(51, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 51 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(52, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 52 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(53, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 53 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(54, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 54 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(55, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 55 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(56, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 56 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(57, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 57 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(58, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 58 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(59, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 59 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(60, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 60 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(61, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 61 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(62, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 62 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(63, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 63 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(64, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 64 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(65, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 65 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(66, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 66 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(67, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 67 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(68, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 68 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(69, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 69 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(70, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 70 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(71, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 71 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(72, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 72 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(73, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 73 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(74, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 74 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(75, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 75 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(76, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 76 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(77, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 77 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(78, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 78 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(79, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 79 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(80, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 80 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(81, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 81 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(82, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 82 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(83, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 83 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(84, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 84 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(85, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 85 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(86, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 86 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(87, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 87 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(88, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 88 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(89, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 89 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(90, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 90 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(91, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 91 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(92, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 92 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(93, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 93 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(94, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 94 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(95, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 95 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(96, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 96 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(97, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 97 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(98, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 98 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(99, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 99 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(100, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 100 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(101, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 101 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(102, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 102 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(103, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 103 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(104, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 104 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(105, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 105 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(106, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 106 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(107, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 107 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(108, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 108 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(109, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 109 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(110, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 110 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(111, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 111 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(112, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 112 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(113, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 113 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(114, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false]); // 114 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(115, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false]); // 115 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(116, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false]); // 116 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(117, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false]); // 117 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(118, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false]); // 118 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(119, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false]); // 119 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0)
        map.insert(120, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false]); // 120 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0)
        map.insert(121, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false]); // 121 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0)
        map.insert(122, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false]); // 122 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0)
        map.insert(123, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false]); // 123 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0)
        map.insert(124, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false]); // 124 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0)
        map.insert(125, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false]); // 125 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0)
        map.insert(126, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false]); // 126 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0)
        map.insert(127, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true]); // 127 => (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)
        
        map
    };
}



impl BinaryCode for HammingCode127_120 {
    fn length() -> usize {
        127
    }

    fn dimension() -> usize {
        120
    }

    fn generator_matrix(&self) -> &'static BinMatrix {
        &GENERATOR_MATRIX
    }

    fn parity_check_matrix(&self) -> &'static BinMatrix {
        &PARITY_MATRIX
    }

    fn decode_to_code(&self, c: BinVector) -> BinVector {
        debug_assert_eq!(c.len(), Self::length());
        let he = self.parity_check_matrix() * &c;
        let error = BinVector::from_bools(&SYNDROME_MAP[&(he.as_u32() as usize)]);
        c + error
    }

    fn decode_to_message(&self, c: BinVector) -> BinVector {
        let mut codeword = self.decode_to_code(c);
        
        let mut new_codeword = BinVector::with_capacity(120);
        
        new_codeword.push(codeword[0]);
        
        new_codeword.push(codeword[1]);
        
        new_codeword.push(codeword[2]);
        
        new_codeword.push(codeword[3]);
        
        new_codeword.push(codeword[4]);
        
        new_codeword.push(codeword[5]);
        
        new_codeword.push(codeword[6]);
        
        new_codeword.push(codeword[7]);
        
        new_codeword.push(codeword[8]);
        
        new_codeword.push(codeword[9]);
        
        new_codeword.push(codeword[10]);
        
        new_codeword.push(codeword[11]);
        
        new_codeword.push(codeword[12]);
        
        new_codeword.push(codeword[13]);
        
        new_codeword.push(codeword[14]);
        
        new_codeword.push(codeword[15]);
        
        new_codeword.push(codeword[16]);
        
        new_codeword.push(codeword[17]);
        
        new_codeword.push(codeword[18]);
        
        new_codeword.push(codeword[19]);
        
        new_codeword.push(codeword[20]);
        
        new_codeword.push(codeword[21]);
        
        new_codeword.push(codeword[22]);
        
        new_codeword.push(codeword[23]);
        
        new_codeword.push(codeword[24]);
        
        new_codeword.push(codeword[25]);
        
        new_codeword.push(codeword[26]);
        
        new_codeword.push(codeword[27]);
        
        new_codeword.push(codeword[28]);
        
        new_codeword.push(codeword[29]);
        
        new_codeword.push(codeword[30]);
        
        new_codeword.push(codeword[31]);
        
        new_codeword.push(codeword[32]);
        
        new_codeword.push(codeword[33]);
        
        new_codeword.push(codeword[34]);
        
        new_codeword.push(codeword[35]);
        
        new_codeword.push(codeword[36]);
        
        new_codeword.push(codeword[37]);
        
        new_codeword.push(codeword[38]);
        
        new_codeword.push(codeword[39]);
        
        new_codeword.push(codeword[40]);
        
        new_codeword.push(codeword[41]);
        
        new_codeword.push(codeword[42]);
        
        new_codeword.push(codeword[43]);
        
        new_codeword.push(codeword[44]);
        
        new_codeword.push(codeword[45]);
        
        new_codeword.push(codeword[46]);
        
        new_codeword.push(codeword[47]);
        
        new_codeword.push(codeword[48]);
        
        new_codeword.push(codeword[49]);
        
        new_codeword.push(codeword[50]);
        
        new_codeword.push(codeword[51]);
        
        new_codeword.push(codeword[52]);
        
        new_codeword.push(codeword[53]);
        
        new_codeword.push(codeword[54]);
        
        new_codeword.push(codeword[55]);
        
        new_codeword.push(codeword[56]);
        
        new_codeword.push(codeword[57]);
        
        new_codeword.push(codeword[58]);
        
        new_codeword.push(codeword[59]);
        
        new_codeword.push(codeword[60]);
        
        new_codeword.push(codeword[61]);
        
        new_codeword.push(codeword[62]);
        
        new_codeword.push(codeword[63]);
        
        new_codeword.push(codeword[64]);
        
        new_codeword.push(codeword[65]);
        
        new_codeword.push(codeword[66]);
        
        new_codeword.push(codeword[67]);
        
        new_codeword.push(codeword[68]);
        
        new_codeword.push(codeword[69]);
        
        new_codeword.push(codeword[70]);
        
        new_codeword.push(codeword[71]);
        
        new_codeword.push(codeword[72]);
        
        new_codeword.push(codeword[73]);
        
        new_codeword.push(codeword[74]);
        
        new_codeword.push(codeword[75]);
        
        new_codeword.push(codeword[76]);
        
        new_codeword.push(codeword[77]);
        
        new_codeword.push(codeword[78]);
        
        new_codeword.push(codeword[79]);
        
        new_codeword.push(codeword[80]);
        
        new_codeword.push(codeword[81]);
        
        new_codeword.push(codeword[82]);
        
        new_codeword.push(codeword[83]);
        
        new_codeword.push(codeword[84]);
        
        new_codeword.push(codeword[85]);
        
        new_codeword.push(codeword[86]);
        
        new_codeword.push(codeword[87]);
        
        new_codeword.push(codeword[88]);
        
        new_codeword.push(codeword[89]);
        
        new_codeword.push(codeword[90]);
        
        new_codeword.push(codeword[91]);
        
        new_codeword.push(codeword[92]);
        
        new_codeword.push(codeword[93]);
        
        new_codeword.push(codeword[95]);
        
        new_codeword.push(codeword[96]);
        
        new_codeword.push(codeword[97]);
        
        new_codeword.push(codeword[98]);
        
        new_codeword.push(codeword[99]);
        
        new_codeword.push(codeword[100]);
        
        new_codeword.push(codeword[101]);
        
        new_codeword.push(codeword[102]);
        
        new_codeword.push(codeword[103]);
        
        new_codeword.push(codeword[104]);
        
        new_codeword.push(codeword[105]);
        
        new_codeword.push(codeword[106]);
        
        new_codeword.push(codeword[107]);
        
        new_codeword.push(codeword[108]);
        
        new_codeword.push(codeword[109]);
        
        new_codeword.push(codeword[111]);
        
        new_codeword.push(codeword[112]);
        
        new_codeword.push(codeword[113]);
        
        new_codeword.push(codeword[114]);
        
        new_codeword.push(codeword[115]);
        
        new_codeword.push(codeword[116]);
        
        new_codeword.push(codeword[117]);
        
        new_codeword.push(codeword[119]);
        
        new_codeword.push(codeword[120]);
        
        new_codeword.push(codeword[121]);
        
        new_codeword.push(codeword[123]);
        
        new_codeword
        
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use m4ri_rust::friendly::BinVector;

    #[test]
    fn size() {
        let code = HammingCode127_120.generator_matrix();
        assert_eq!(code.ncols(), 127);
        assert_eq!(code.nrows(), 120);
    }

    #[test]
    fn decode() {
        let code = HammingCode127_120;

        let codeword = code.decode_to_message(BinVector::from_elem(127, true));
        assert_eq!(codeword, BinVector::from_elem(120, true));

        let mut vec = BinVector::from_elem(127, true);
        vec.set(0, false);
        let codeword = code.decode_to_message(vec);
        assert_eq!(codeword, BinVector::from_elem(120, true));

        let vec = code.decode_to_code(BinVector::from_elem(127, false));
        assert_eq!(vec, BinVector::from_elem(127, false));
    }

    #[test]
    fn encode_decode_tests() {
        let code = HammingCode127_120;

        
        {
            let m = BinVector::from_bools(&[false, false, true, false, true, true, false, false, false, false, false, false, false, false, false, false, false, true, true, false, false, false, false, true, false, true, true, true, true, true, true, true, false, false, true, false, true, true, false, true, false, true, true, true, false, true, true, true, true, false, true, false, false, true, true, true, true, true, true, false, false, false, true, false, false, true, true, true, true, false, true, false, true, true, true, true, false, false, true, true, true, false, true, true, false, true, true, true, true, false, true, true, true, true, true, true, false, false, true, true, true, false, true, false, true, true, false, false, false, true, false, false, false, false, false, false, false, true, true, false]);
            let encoded = BinVector::from_bools(&[false, false, true, false, true, true, false, false, false, false, false, false, false, false, false, false, false, true, true, false, false, false, false, true, false, true, true, true, true, true, true, true, false, false, true, false, true, true, false, true, false, true, true, true, false, true, true, true, true, false, true, false, false, true, true, true, true, true, true, false, false, false, true, false, false, true, true, true, true, false, true, false, true, true, true, true, false, false, true, true, true, false, true, true, false, true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, false, true, false, true, true, false, false, false, true, true, false, false, false, false, false, false, true, false, true, true, true, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, true, true, false, false, false, false, false, false, false, false, false, false, false, true, true, false, false, false, false, true, false, true, true, true, true, true, true, true, false, false, true, false, true, true, false, true, false, true, true, true, false, true, true, true, true, false, true, false, false, true, true, true, true, true, true, false, false, false, true, false, false, true, true, true, true, false, true, false, true, true, true, true, false, false, true, true, true, false, true, true, false, true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, false, true, false, true, true, false, false, false, true, true, false, false, true, false, false, false, true, false, true, true, true, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, true, true, false, false, true, true, true, false, false, false, false, true, false, true, false, false, true, true, true, true, true, true, false, false, true, true, true, true, false, false, false, true, false, true, true, true, true, true, false, true, false, false, true, true, true, false, true, false, true, true, false, true, true, false, false, false, false, true, true, false, true, false, false, true, false, false, false, false, false, true, false, true, false, false, true, false, true, true, false, true, false, true, false, true, true, false, false, true, true, false, false, true, true, false, false, true, false, true, false, true, false, false, true, true, false, true, false, true, false, false, true, true, true, false, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, false, true, true, false, false, true, true, true, false, false, false, false, true, false, true, false, false, true, true, true, true, true, true, false, false, true, true, true, true, false, false, false, true, false, true, true, true, true, true, false, true, false, false, true, true, true, false, true, false, true, true, false, true, true, false, false, false, false, true, true, false, true, false, false, true, false, false, false, false, false, true, false, true, false, false, true, false, true, true, false, true, false, true, false, true, true, false, false, true, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, true, false, false, true, false, true, false, false, true, true, false, true, false, true, false, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, true, true, false, false, true, true, true, false, false, false, false, true, false, true, false, false, true, true, true, true, true, true, false, false, true, true, true, true, false, false, false, true, false, true, true, true, true, true, false, true, false, false, true, true, true, false, true, false, true, true, false, true, true, false, false, false, false, true, true, false, true, false, false, true, false, false, false, false, false, false, false, true, false, false, true, false, true, true, false, true, false, true, false, true, true, false, false, true, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, true, false, false, true, false, true, false, false, true, true, false, true, false, true, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, false, true, true, true, true, false, true, true, true, false, true, false, false, false, true, true, false, false, true, true, false, true, true, true, false, true, true, true, true, true, true, false, true, false, false, false, false, false, false, true, true, false, false, true, true, true, false, false, false, true, true, true, false, false, false, false, true, false, true, false, false, true, true, false, true, false, true, false, true, true, false, false, true, false, true, true, true, true, true, true, true, false, false, false, true, false, true, false, true, false, true, false, false, true, false, false, true, true, false, false, false, false, true, true, true, false, false, false, true, false, false, true, true, false, true, true]);
            let encoded = BinVector::from_bools(&[true, true, true, true, false, true, true, true, true, false, true, true, true, false, true, false, false, false, true, true, false, false, true, true, false, true, true, true, false, true, true, true, true, true, true, false, true, false, false, false, false, false, false, true, true, false, false, true, true, true, false, false, false, true, true, true, false, false, false, false, true, false, true, false, false, true, true, false, true, false, true, false, true, true, false, false, true, false, true, true, true, true, true, true, true, false, false, false, true, false, true, false, true, false, false, true, false, false, true, false, false, true, true, false, false, false, false, true, true, true, false, false, false, false, true, false, false, true, true, true, false, true, true, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, true, true, true, true, true, false, true, true, true, false, true, false, false, false, true, true, false, false, true, true, false, true, true, true, false, true, true, true, true, true, true, false, true, false, false, false, false, false, false, true, true, false, false, true, true, true, false, false, false, true, true, true, false, false, false, false, true, false, true, false, false, true, true, false, true, false, true, false, true, true, false, false, true, false, true, true, true, true, true, true, true, false, false, false, true, false, true, false, true, false, false, true, false, false, true, false, false, true, true, false, false, false, false, true, true, true, false, false, false, false, true, false, false, true, true, true, false, true, true, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, true, true, true, false, false, false, false, true, false, true, true, true, true, false, true, true, true, false, false, true, false, true, false, true, true, false, true, false, false, true, false, true, false, false, false, true, false, true, false, true, true, false, true, true, true, false, false, true, true, false, false, true, false, false, false, false, false, false, true, true, false, false, false, false, false, false, true, true, true, true, false, false, true, true, true, true, false, false, true, false, true, false, false, false, false, true, false, false, true, true, false, false, false, true, true, true, false, true, false, true, false, true]);
            let encoded = BinVector::from_bools(&[false, false, false, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, true, true, true, false, false, false, false, true, false, true, true, true, true, false, true, true, true, false, false, true, false, true, false, true, true, false, true, false, false, true, false, true, false, false, false, true, false, true, false, true, true, false, true, true, true, false, false, true, true, false, false, true, false, false, false, false, false, false, true, true, false, false, false, false, false, false, true, true, true, true, false, false, true, true, true, true, false, false, false, true, false, true, false, false, false, false, true, false, false, true, true, false, false, false, false, true, true, true, false, true, false, false, true, false, false, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, true, true, true, false, false, false, false, true, false, true, true, true, true, false, true, true, true, false, false, true, false, true, false, true, true, false, true, false, false, true, false, true, false, false, false, true, false, true, false, true, true, false, true, true, true, false, false, true, true, false, false, true, false, false, false, false, false, false, true, true, false, false, false, false, false, false, true, true, true, true, false, false, true, true, true, true, false, false, true, true, false, true, false, false, false, false, true, false, false, true, true, false, false, false, false, true, true, true, false, true, false, false, true, false, false, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, true, true, true, false, true, false, false, false, true, false, false, false, false, false, false, false, false, false, true, false, true, true, false, true, false, true, false, true, false, false, true, true, true, false, false, false, false, false, false, false, true, false, false, true, true, false, false, true, true, true, true, false, true, false, true, true, true, false, true, false, true, true, true, false, false, true, true, false, false, true, true, true, false, true, true, false, false, true, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, false, true, true, false, true, false, true, true, true, true, false, true, false, true, true, true, false, false, true, true, true, false]);
            let encoded = BinVector::from_bools(&[false, true, false, true, true, true, true, false, true, false, false, false, true, false, false, false, false, false, false, false, false, false, true, false, true, true, false, true, false, true, false, true, false, false, true, true, true, false, false, false, false, false, false, false, true, false, false, true, true, false, false, true, true, true, true, false, true, false, true, true, true, false, true, false, true, true, true, false, false, true, true, false, false, true, true, true, false, true, true, false, false, true, false, false, false, false, false, true, true, true, true, true, true, true, false, true, true, true, true, false, true, true, false, true, false, true, true, true, true, false, true, true, false, true, true, true, false, false, false, true, true, true, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, true, true, true, false, true, false, false, false, true, false, false, false, false, false, false, false, false, false, true, false, true, true, false, true, false, true, false, true, false, false, true, true, true, false, false, true, false, false, false, false, true, false, false, true, true, false, false, true, true, true, true, false, true, false, true, true, true, false, true, false, true, true, true, false, false, true, true, false, false, true, true, true, false, true, true, false, false, true, false, false, false, false, false, true, true, true, true, true, true, true, false, true, true, true, true, false, true, true, false, true, false, true, true, true, true, false, true, true, false, true, true, true, false, false, false, true, true, true, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, false, true, false, false, false, true, false, false, false, false, false, true, false, false, false, true, true, false, false, false, true, false, false, false, false, true, false, true, true, true, false, true, false, true, false, true, true, false, true, true, false, true, false, false, true, false, false, true, true, false, true, true, true, true, true, false, true, true, false, true, true, false, true, false, false, true, false, false, false, false, true, true, true, false, true, true, true, false, false, false, false, true, true, false, true, false, true, true, false, false, true, false, false, false, false, true, false, true, false, false, false, true, false, true, true, false, false, true, true, false, true, false, false, true, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, true, false, true, false, false, false, true, false, false, false, false, false, true, false, false, false, true, true, false, false, false, true, false, false, false, false, true, false, true, true, true, false, true, false, true, false, true, true, false, true, true, false, true, false, false, true, false, false, true, true, false, true, true, true, true, true, false, true, true, false, true, true, false, true, false, false, true, false, false, false, false, true, true, true, false, true, true, true, false, false, false, false, true, true, false, true, false, true, true, false, false, true, true, false, false, false, false, true, false, true, false, false, false, true, false, true, true, true, false, false, true, true, false, true, false, false, false, true, false, true, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, false, true, false, false, false, true, false, false, false, false, false, true, false, false, false, true, true, false, false, false, true, false, false, false, true, true, false, true, true, true, false, true, false, true, false, true, true, false, true, true, false, true, false, false, true, false, false, true, true, false, true, true, true, true, true, false, true, true, false, true, true, false, true, false, false, true, false, false, false, false, true, true, true, false, true, true, true, false, false, false, false, true, true, false, true, false, true, true, false, false, true, true, false, false, false, false, true, false, true, false, false, false, true, false, true, true, true, false, false, true, true, false, true, false, false, false, true, false, true, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, true, true, false, true, false, false, false, true, false, true, false, true, true, true, true, false, true, true, false, true, false, true, true, true, true, true, false, true, false, true, false, true, true, false, true, false, false, true, true, true, true, false, false, false, true, false, false, true, true, false, false, true, false, true, true, true, true, false, true, false, false, true, false, false, false, false, false, true, false, false, false, false, false, false, false, false, true, false, false, false, false, true, true, false, true, true, false, false, true, false, false, true, false, false, false, true, false, false, false, true, true, false, false, false, false, false, false, true, true, true, false, false, true, false, true, true]);
            let encoded = BinVector::from_bools(&[false, false, true, true, true, true, false, true, false, false, false, true, false, true, false, true, true, true, true, false, true, true, false, true, false, true, true, true, true, true, false, true, false, true, false, true, true, false, true, false, false, true, true, true, true, false, false, false, true, false, false, true, true, false, false, true, false, true, true, true, true, false, true, false, false, true, false, false, false, false, false, true, false, false, false, false, false, false, false, false, true, false, false, false, false, true, true, false, true, true, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, true, false, false, false, false, true, false, false, true, true, true, false, false, false, true, false, true, false, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, true, true, false, true, false, false, false, true, false, true, false, true, true, true, true, false, true, true, false, true, false, true, true, true, true, true, false, true, false, true, false, true, true, false, true, false, false, true, true, true, true, false, false, false, true, false, false, true, true, false, false, true, false, true, true, true, true, false, true, false, false, true, false, false, false, false, false, true, false, false, false, false, false, false, false, false, true, false, false, false, false, true, true, false, true, true, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, true, false, false, false, false, true, false, false, true, true, true, false, false, false, true, true, true, false, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, true, true, true, true, false, true, false, false, false, false, false, false, true, true, false, false, true, false, true, true, true, true, false, false, true, true, true, true, true, false, false, true, true, false, false, false, false, true, false, false, true, true, true, false, true, false, true, true, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, true, true, true, false, false, true, false, true, false, false, false, true, true, false, true, true, false, false, true, true, true, false, false, true, false, true, true, true, true, false, false, true, true, false, false, false, false, true, true, true, false, true, false, true, true, false, false, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, false, true, true, true, true, false, true, false, false, false, false, false, false, true, true, false, false, true, false, true, true, true, true, false, false, true, true, true, true, true, false, false, true, true, false, false, false, false, true, false, false, true, true, true, false, true, false, true, true, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, true, true, true, false, false, true, false, true, false, false, false, true, true, false, true, true, false, false, true, true, true, false, false, false, true, false, true, true, true, true, false, false, true, true, false, false, false, false, true, true, true, true, false, true, false, true, true, false, false, false, false, false, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, true, true, true, true, false, true, false, false, false, false, false, false, true, true, false, false, true, false, true, true, true, true, false, false, true, true, true, true, true, false, false, true, true, false, false, false, false, true, false, false, true, true, true, false, true, false, true, true, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, true, true, true, false, false, true, false, true, false, false, false, true, true, false, true, true, false, false, true, true, true, false, false, false, true, false, true, true, true, true, false, false, true, true, false, false, false, false, true, true, true, true, false, true, true, true, true, false, false, false, false, false, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, true, false, false, false, false, true, true, true, true, false, true, true, true, true, false, false, true, true, false, true, false, true, false, true, false, true, true, false, true, true, true, false, false, true, false, true, true, false, true, false, false, true, true, false, true, true, true, false, true, false, false, true, true, true, true, false, false, false, true, false, true, false, true, false, true, false, true, true, false, true, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, true, false, true, true, true, true, true, false, false, true, false, false, true, true, false, false, true, true, true, false, true, true, true, true, true, false]);
            let encoded = BinVector::from_bools(&[false, false, true, true, true, false, false, false, false, true, true, true, true, false, true, true, true, true, false, false, true, true, false, true, false, true, false, true, false, true, true, false, true, true, true, false, false, true, false, true, true, false, true, false, false, true, true, false, true, true, true, false, true, false, false, true, true, true, true, false, false, false, true, false, true, false, true, false, true, false, true, true, false, true, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, true, true, false, true, true, true, true, true, false, false, true, false, false, true, true, false, false, false, true, true, true, false, true, true, true, true, true, true, true, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, true, false, false, false, false, true, true, true, true, false, true, true, true, true, false, false, true, true, false, true, false, true, false, true, false, true, true, false, true, true, true, false, true, true, false, true, true, false, true, false, false, true, true, false, true, true, true, false, true, false, false, true, true, true, true, false, false, false, true, false, true, false, true, false, true, false, true, true, false, true, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, true, true, false, true, true, true, true, true, false, false, true, false, false, true, true, false, false, false, true, true, true, false, true, true, true, true, true, true, true, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, false, true, false, false, true, false, false, false, false, false, true, false, true, true, true, true, false, false, false, true, false, false, true, false, false, false, false, true, false, false, false, false, true, true, false, true, true, true, false, true, false, true, true, true, false, false, false, false, true, true, false, true, false, false, false, true, true, true, false, true, true, true, true, true, false, false, true, true, true, true, false, false, true, false, false, true, false, true, false, true, false, true, false, true, true, true, false, true, true, false, false, true, false, true, false, true, true, true, false, true, false, true, true, false, true, false, false, true, false, true, false, true, true, true, true, true]);
            let encoded = BinVector::from_bools(&[true, false, true, true, false, true, false, false, true, false, false, false, false, false, true, false, true, true, true, true, false, false, false, true, false, false, true, false, false, false, false, true, false, false, false, false, true, true, false, true, true, true, false, true, false, true, true, true, false, false, false, false, true, true, false, true, false, false, false, true, true, true, false, true, true, true, true, true, false, false, true, true, true, true, false, false, true, false, false, true, false, true, false, true, false, true, false, true, true, true, false, true, true, false, true, false, true, false, true, false, true, true, true, false, true, false, true, true, false, true, false, false, false, true, false, true, false, true, false, true, true, true, false, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, false, true, false, false, false, false, false, false, false, false, true, false, true, true, true, true, false, false, false, true, false, false, true, false, false, false, false, true, false, false, false, false, true, true, false, true, true, true, false, true, false, true, true, true, false, false, false, false, true, true, false, true, false, false, false, true, true, true, false, true, true, true, true, true, false, false, true, true, true, true, false, false, true, false, false, true, false, true, false, true, false, true, false, true, true, true, false, true, true, false, true, false, true, false, true, false, true, true, true, false, true, false, true, true, false, true, false, false, false, true, false, true, false, true, false, true, true, true, false, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, false, false, false, true, true, false, true, false, true, true, false, false, true, false, false, false, true, false, true, true, true, true, false, true, false, true, false, false, false, true, true, false, true, false, true, false, false, false, false, true, false, true, true, false, true, false, false, true, true, false, false, false, true, true, true, true, true, false, false, false, true, true, false, true, false, false, true, false, true, false, true, false, false, true, true, false, true, false, true, true, true, true, false, true, true, true, false, false, false, true, true, false, false, true, true, false, false, true, false, false, true, true, true, true, true, false, false, false, false, true, false, true, true, true, false]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, false, false, false, true, true, false, true, false, true, true, false, false, true, false, false, false, true, false, true, true, true, true, false, true, false, true, false, false, false, true, true, false, true, false, true, false, false, false, false, true, false, true, true, false, true, false, false, true, true, false, false, false, true, true, true, true, true, false, false, false, true, true, false, true, false, false, true, false, true, false, true, false, false, true, true, false, true, false, true, true, true, true, false, true, true, true, false, false, false, true, true, true, false, false, true, true, false, false, true, false, false, true, true, true, true, true, true, false, false, false, false, true, false, false, true, true, true, false, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, true, false, false, false, true, true, false, true, false, true, true, false, false, true, false, false, false, true, false, true, true, true, true, false, true, false, true, false, false, false, true, true, false, true, false, true, false, false, false, false, true, false, true, true, false, true, false, false, true, true, false, false, false, true, true, true, true, true, false, false, false, true, true, false, true, false, false, true, false, true, false, true, false, false, true, true, false, true, false, true, true, true, true, false, true, true, true, false, false, false, true, true, true, false, false, true, true, false, false, true, false, false, true, true, true, true, true, true, false, false, true, false, true, false, false, true, true, true, false, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, false, true, true, false, true, true, false, false, false, false, true, true, false, true, true, true, false, true, true, true, false, true, true, false, true, false, false, true, true, true, true, false, true, true, false, true, false, true, false, true, true, true, false, true, false, true, false, false, false, true, false, false, true, true, true, true, false, false, false, true, false, false, false, false, false, true, true, false, false, false, false, false, true, true, false, true, false, true, true, true, false, false, false, true, true, true, true, false, true, false, false, false, false, true, true, true, false, false, false, true, false, false, false, false, true, false, false, false, true, true, true, true, true, true, true, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, false, true, true, false, true, true, false, false, false, false, true, true, false, true, true, true, false, true, true, true, false, true, true, false, true, false, false, true, true, true, true, false, true, true, false, true, false, true, false, true, true, true, false, true, false, true, false, false, false, true, false, false, true, true, true, true, false, false, false, true, false, false, false, false, false, true, true, false, false, false, false, false, true, true, false, true, false, true, true, true, false, false, false, true, true, true, true, false, true, false, false, false, false, false, true, true, true, false, false, false, true, false, false, false, false, true, true, false, false, false, true, true, true, true, false, true, true, true, false, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, true, true, false, true, true, false, false, false, false, true, true, false, true, true, true, false, true, true, true, false, true, true, false, true, false, false, true, true, true, true, false, true, true, false, true, false, true, false, true, true, true, false, true, false, true, false, false, false, true, false, false, true, true, true, true, false, false, false, true, false, false, false, false, false, true, true, false, false, false, false, false, true, true, false, true, false, true, true, true, false, false, false, true, true, true, true, false, true, false, false, false, false, false, true, true, true, false, false, false, true, false, false, false, false, true, true, false, false, false, true, true, true, true, false, true, true, true, false, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, true, true, true, false, true, false, true, false, true, false, true, true, true, true, false, true, false, false, false, false, true, true, false, true, false, false, true, false, true, true, true, false, false, true, true, true, false, true, true, false, false, false, false, false, false, true, false, false, true, false, true, true, false, false, false, false, false, true, true, false, false, false, false, true, false, false, false, false, true, false, false, true, false, false, true, false, false, false, false, false, true, false, true, true, true, false, false, true, true, true, true, true, true, false, false, true, false, false, false, true, false, true, true, false, true, false, false, false, true, true, true, false, true, false, true, true]);
            let encoded = BinVector::from_bools(&[false, false, true, true, true, true, true, false, true, false, true, false, true, false, true, true, true, true, false, true, false, false, false, false, true, true, false, true, false, false, true, false, true, true, true, false, false, true, true, true, false, true, true, false, false, false, false, false, false, true, false, false, true, false, true, true, false, false, false, false, false, true, true, false, false, false, false, true, false, false, false, false, true, false, false, true, false, false, true, false, false, false, false, false, true, false, true, true, true, false, false, true, true, true, true, true, true, true, false, false, true, false, false, false, true, false, true, true, false, true, false, false, false, false, true, true, true, false, false, true, false, true, false, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, true, true, true, false, true, false, true, false, true, false, true, true, true, true, false, true, false, false, false, false, true, true, false, true, false, false, true, false, true, true, true, false, false, true, true, true, false, true, true, false, false, false, false, false, false, true, false, false, true, false, true, true, false, false, false, false, false, true, true, false, false, false, false, true, false, false, false, false, true, false, false, true, false, false, true, false, false, false, false, false, true, false, true, true, true, false, false, true, true, true, true, true, true, true, false, false, true, false, false, false, false, false, true, true, false, true, false, false, false, false, true, true, true, false, false, true, false, true, false, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, false, true, true, false, true, false, false, false, true, false, false, true, false, true, true, false, false, false, true, true, true, true, false, true, true, true, true, false, false, true, false, false, true, false, true, true, true, false, false, true, false, false, false, true, false, false, true, true, false, false, false, true, false, true, true, false, true, true, true, true, false, false, false, false, false, false, true, true, true, false, true, false, true, false, false, true, true, false, true, false, false, false, true, true, false, true, true, false, true, true, false, false, false, false, false, false, true, true, true, true, false, true, true, true, true, true, true, false, true, true, false, true, false, false, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, true, false, true, true, false, true, false, false, false, true, false, false, true, false, true, true, false, false, false, true, true, true, true, false, true, true, true, true, false, false, true, false, false, true, false, true, true, true, false, false, true, false, false, false, true, false, false, true, true, false, false, false, true, false, true, true, false, true, true, true, true, false, false, false, false, false, false, true, true, true, false, true, false, true, false, false, true, true, false, true, false, false, false, true, true, false, true, true, false, true, true, false, false, false, false, false, false, false, true, true, true, true, false, true, true, true, true, false, true, true, false, true, true, false, true, true, false, false, false, false, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, false, true, true, false, true, false, false, false, true, false, false, true, false, true, true, false, false, false, true, true, true, true, false, true, true, true, true, false, false, true, false, false, true, false, true, true, true, false, false, true, false, false, false, true, false, false, true, true, false, false, false, true, false, true, true, false, true, true, true, true, false, false, false, false, false, false, true, true, false, false, true, false, true, false, false, true, true, false, true, false, false, false, true, true, false, true, true, false, true, true, false, false, false, false, false, false, false, true, true, true, true, false, true, true, true, true, false, true, true, false, true, true, false, true, true, false, false, false, false, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, false, false, false, true, true, true, true, false, false, false, true, true, false, true, true, false, true, true, true, false, true, false, true, false, false, true, false, true, true, false, false, false, false, true, true, false, true, true, true, false, true, true, false, false, true, false, false, false, false, false, false, true, true, false, false, true, false, false, false, false, false, true, false, true, false, true, false, false, true, true, true, false, false, false, true, true, true, false, false, true, false, true, true, false, false, false, true, false, false, true, false, true, false, true, true, true, true, false, false, true, false, false, true, true, true, true, false, true, true, false, true, true, false, true, true, false]);
            let encoded = BinVector::from_bools(&[true, true, true, false, false, false, false, true, true, true, true, false, false, false, true, true, false, true, true, false, true, true, true, false, true, false, true, false, false, true, false, true, true, false, false, false, false, true, true, false, true, true, true, false, true, true, false, false, true, false, false, false, false, false, false, true, true, false, false, true, false, false, false, false, false, true, false, true, false, true, false, false, true, true, true, false, false, false, true, true, true, false, false, true, false, true, true, false, false, false, true, false, false, true, true, false, true, false, true, true, true, true, false, false, true, false, false, true, true, true, true, true, false, true, true, false, true, true, false, false, true, true, true, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, false, false, false, true, true, true, true, false, false, false, true, true, false, true, true, false, true, true, true, false, true, false, true, false, false, true, false, true, true, false, false, false, false, true, true, false, true, true, true, false, true, true, false, false, true, false, false, false, false, false, false, true, false, false, false, true, false, false, false, false, false, true, false, true, false, true, false, false, true, true, true, false, false, false, true, true, true, false, false, true, false, true, true, false, false, false, true, false, false, true, true, false, true, false, true, true, true, true, false, false, true, false, false, true, true, true, true, true, false, true, true, false, true, true, false, false, true, true, true, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, true, false, true, false, false, false, false, true, false, true, false, false, true, false, false, true, true, true, false, false, false, true, true, true, false, true, true, false, false, true, false, false, false, false, true, true, true, false, false, true, true, false, true, true, true, true, false, false, false, false, false, false, true, true, false, false, false, true, true, true, true, true, false, false, false, false, true, true, false, false, true, true, false, false, true, false, true, false, false, true, true, false, true, true, false, false, true, false, false, true, false, true, false, false, true, true, true, true, true, false, false, false, true, false, true, false, false, false, false, false, true, true, true, false, false, true]);
            let encoded = BinVector::from_bools(&[true, false, false, true, true, false, true, false, false, false, false, true, false, true, false, false, true, false, false, true, true, true, false, false, false, true, true, true, false, true, true, false, false, true, false, false, false, false, true, true, true, false, false, true, true, false, true, true, true, true, false, false, false, false, false, false, true, true, false, false, false, true, true, true, true, true, false, false, false, false, true, true, false, false, true, true, false, false, true, false, true, false, false, true, true, false, true, true, false, false, true, false, false, true, true, false, true, false, false, true, true, true, true, true, false, false, false, true, false, true, false, false, false, false, false, false, true, true, true, true, false, false, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, true, false, true, false, true, false, false, true, false, true, false, false, true, false, false, true, true, true, false, false, false, true, true, true, false, true, true, false, false, true, false, false, false, false, true, true, true, false, false, true, true, false, true, true, true, true, false, false, false, false, false, false, true, true, false, false, false, true, true, true, true, true, false, false, false, false, true, true, false, false, true, true, false, false, true, false, true, false, false, true, true, false, true, true, false, false, true, false, false, true, true, false, true, false, false, true, true, true, true, true, false, false, false, true, false, true, false, false, false, false, false, false, true, true, true, true, false, false, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, false, true, true, true, false, true, false, true, false, false, true, false, false, true, false, false, true, true, true, false, true, false, true, false, true, true, true, false, false, true, true, true, false, true, false, false, true, false, true, true, true, false, true, true, true, false, true, false, false, false, false, true, false, true, false, false, false, false, true, true, true, false, true, true, false, false, false, true, true, true, false, false, false, true, true, true, false, false, true, false, false, false, true, true, true, false, true, true, true, true, false, true, true, true, true, false, true, true, true, true, false, true, false, true, false, true, false, false, true, false, false, true, true, false, false, false]);
            let encoded = BinVector::from_bools(&[true, true, true, true, false, true, true, true, false, true, false, true, false, false, true, false, false, true, false, false, true, true, true, false, true, false, true, false, true, true, true, false, false, true, true, true, false, true, false, false, true, false, true, true, true, false, true, true, true, false, true, false, false, false, false, true, false, true, false, false, false, false, true, true, true, false, true, true, false, false, false, true, true, true, false, false, false, true, true, true, false, false, true, false, false, false, true, true, true, false, true, true, true, true, true, false, true, true, true, true, false, true, true, true, true, false, true, false, true, false, false, true, false, false, true, false, false, true, true, true, false, false, true, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, false, false, true, true, false, true, false, true, false, false, true, false, false, true, false, false, true, true, true, false, true, false, true, false, true, true, true, false, false, true, true, true, false, true, false, false, true, false, true, true, true, false, true, true, true, false, true, false, false, false, false, true, false, true, false, false, false, false, true, true, true, false, true, true, false, false, false, true, true, true, false, false, false, true, true, true, false, false, true, false, false, false, true, true, true, false, true, true, true, true, true, false, true, true, true, true, false, true, true, true, true, false, true, false, true, false, false, true, false, false, true, false, false, true, true, true, false, false, true, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, true, true, false, false, false, true, true, true, true, true, true, false, true, false, false, true, false, true, false, false, false, true, true, true, true, true, false, true, true, true, false, true, true, true, false, true, true, true, false, false, true, true, true, true, false, false, false, false, false, false, true, false, false, true, true, false, true, true, true, true, false, true, false, false, false, false, false, false, false, true, true, false, false, true, false, true, false, true, true, false, true, true, true, false, true, true, false, false, false, true, false, true, false, false, true, true, false, false, true, true, false, true, true, true, false, true, true, false, true, true, true, false, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, true, true, false, false, false, true, true, true, true, true, true, false, true, false, false, true, false, true, false, false, false, true, true, true, true, true, false, true, true, true, false, true, true, true, false, true, true, true, false, false, true, true, true, true, false, false, false, false, false, false, true, false, false, true, true, false, true, true, true, true, false, true, false, false, false, false, false, false, false, true, true, false, false, true, false, true, false, true, true, false, true, true, true, false, true, true, false, false, false, false, true, false, true, false, false, true, true, false, false, true, true, false, true, true, true, true, false, true, true, false, true, true, true, true, false, true, false, false, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, true, true, true, false, false, false, true, true, true, true, true, true, false, true, false, false, true, false, true, false, false, false, true, true, true, true, true, false, true, true, true, false, true, true, true, false, true, true, true, false, false, true, true, true, true, false, false, false, false, false, false, true, false, false, true, true, false, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, false, false, true, false, true, false, true, true, false, true, true, true, false, true, true, false, false, false, false, true, false, true, false, false, true, true, false, false, true, true, false, true, true, true, true, false, true, true, false, true, true, true, true, false, true, false, false, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, true, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, true, false, true, false, false, false, true, false, true, false, true, false, true, true, true, false, false, true, false, false, false, false, true, false, true, true, true, false, true, true, false, false, false, false, true, false, false, true, true, true, true, true, false, false, false, true, false, true, false, false, false, true, true, false, true, true, true, false, true, false, true, true, false, false, false, true, true, true, false, true, true, true, false, false, false, true, false, true, false, true, true, true, true, false, true, true, true, true, false, false, true, true, true, true, true, true, false, false, false, false]);
            let encoded = BinVector::from_bools(&[true, true, false, true, true, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, true, false, true, false, false, false, true, false, true, false, true, false, true, true, true, false, false, true, false, false, false, false, true, false, true, true, true, false, true, true, false, false, false, false, true, false, false, true, true, true, true, true, false, false, false, true, false, true, false, false, false, true, true, false, true, true, true, false, true, false, true, true, false, false, false, true, true, true, false, true, true, true, false, false, false, false, true, false, true, false, true, true, true, true, false, true, true, true, true, false, false, false, true, true, true, true, true, true, true, false, false, false, true, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, true, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, true, false, true, false, false, false, true, false, true, false, true, false, true, true, true, false, false, true, false, false, false, false, true, false, true, true, true, false, true, true, false, false, false, false, true, false, false, true, true, true, true, true, false, false, false, true, false, true, false, false, false, true, true, false, true, true, true, false, true, false, true, true, false, false, false, true, true, true, false, true, true, true, false, false, false, false, true, false, true, false, true, true, true, true, false, true, true, true, true, false, false, false, true, true, true, true, true, true, true, false, false, false, true, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, false, false, false, true, true, false, false, false, false, false, true, true, false, true, true, true, false, false, true, true, false, false, false, true, false, true, true, false, false, true, true, true, true, true, true, false, false, false, true, true, true, false, false, false, false, true, true, true, false, true, true, false, true, true, false, false, true, true, false, true, false, true, true, true, true, true, true, true, true, true, true, false, false, false, true, false, false, false, true, false, true, true, true, false, false, false, true, false, true, false, true, true, true, false, false, false, true, false, true, false, true, false, true, false, false, true, false, false, false, true, false, true, true, false, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, true, false, false, false, true, true, false, false, false, false, false, true, true, false, true, true, true, false, false, true, true, false, false, false, true, false, true, true, false, false, true, true, true, true, true, true, false, false, false, true, true, true, false, false, false, false, true, true, true, false, true, true, false, true, true, false, false, true, true, false, true, false, true, true, true, true, true, true, true, true, true, true, false, false, false, true, false, false, false, true, false, true, true, true, false, false, false, true, false, true, false, false, true, true, true, false, false, false, true, false, true, false, true, false, true, false, false, true, true, false, false, false, true, false, true, false, true, false, true, true, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, false, false, false, true, true, false, false, false, false, false, true, true, false, true, true, true, false, false, true, true, false, false, false, true, false, true, true, false, false, true, true, true, true, true, true, false, false, false, true, true, true, false, false, false, false, true, true, true, false, true, true, false, true, true, false, false, true, true, false, true, false, true, true, true, true, false, true, true, true, true, true, false, false, false, true, false, false, false, true, false, true, true, true, false, false, false, true, false, true, false, false, true, true, true, false, false, false, true, false, true, false, true, false, true, false, false, true, true, false, false, false, true, false, true, false, true, false, true, true, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, false, true, true, false, true, false, false, false, true, false, true, true, true, true, false, true, false, false, true, true, false, true, true, false, false, true, false, true, true, false, true, false, false, true, true, true, false, false, true, true, true, true, false, true, true, false, false, false, true, true, true, true, true, false, false, false, false, true, false, false, false, false, false, true, false, false, false, false, false, false, true, false, false, true, false, true, true, true, false, true, false, false, true, false, true, false, true, false, false, true, false, true, true, true, true, false, false, true, false, true, false, true, true, false, true, true, false, false, false, false, false, true, false, true, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, false, true, true, false, true, false, false, false, true, false, true, true, true, true, false, true, false, false, true, true, false, true, true, false, false, true, false, true, true, false, true, false, false, true, true, true, false, false, true, true, true, true, false, true, true, false, false, false, true, true, true, true, true, false, false, false, false, true, false, false, false, false, false, true, false, false, false, false, false, false, true, false, false, true, false, true, true, true, false, true, false, false, true, false, true, false, true, false, false, false, true, false, true, true, true, true, false, false, true, false, true, false, true, true, false, false, true, true, false, false, false, false, false, false, true, false, true, false, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, false, true, true, false, true, false, false, false, true, false, true, true, true, true, false, true, false, false, true, true, false, true, true, false, false, true, false, true, true, false, true, false, false, true, true, true, false, false, true, true, true, false, false, true, true, false, false, false, true, true, true, true, true, false, false, false, false, true, false, false, false, false, false, true, false, false, false, false, false, false, true, false, false, true, false, true, true, true, false, true, false, false, true, false, true, false, true, false, false, false, true, false, true, true, true, true, false, false, true, false, true, false, true, true, false, false, true, true, false, false, false, false, false, false, true, false, true, false, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, true, false, true, true, false, true, false, false, true, true, true, false, false, false, false, true, false, false, false, true, false, true, false, true, true, true, false, false, false, true, true, true, true, false, true, false, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, false, true, false, false, true, false, false, true, false, true, false, true, true, false, true, true, false, true, false, false, false, true, false, true, false, true, false, false, false, true, true, true, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, true, true]);
            let encoded = BinVector::from_bools(&[true, true, false, false, true, false, true, true, false, true, false, false, true, true, true, false, false, false, false, true, false, false, false, true, false, true, false, true, true, true, false, false, false, true, true, true, true, false, true, false, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, false, true, false, false, true, false, false, true, false, true, false, true, true, false, true, true, false, true, false, false, false, true, false, true, false, true, false, false, false, true, true, true, false, false, false, true, false, false, false, false, false, false, false, false, true, false, false, false, true, true, true, false, true, false, false, true, false, true, false, false, false, false, true, true, false, true, false, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, true, false, true, true, false, true, false, false, true, true, true, false, false, false, false, true, false, false, false, true, false, true, false, true, true, true, false, false, false, true, true, true, true, false, true, false, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, false, false, false, false, true, false, false, true, false, true, false, true, true, false, true, true, false, true, false, false, false, true, false, true, false, true, false, false, false, true, true, true, false, false, false, true, false, false, false, false, false, false, false, false, true, false, false, false, true, true, true, false, true, false, false, true, false, true, false, false, false, false, true, true, false, true, false, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, true, true, false, true, false, false, false, true, false, true, true, false, false, false, true, true, false, false, false, false, true, true, true, true, true, false, false, true, true, true, true, true, true, true, false, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, true, true, false, true, false, false, false, false, true, true, false, true, false, false, false, false, false, true, true, false, true, false, false, false, true, false, true, true, true, true, false, false, true, false, true, true, false, false, true, true, true, false, true, false, false, false, false, false, true, true, true, true, false, true, true, false, true]);
            let encoded = BinVector::from_bools(&[true, true, false, true, true, true, false, true, false, false, false, true, false, true, true, false, false, false, true, true, false, false, false, false, true, true, true, true, true, false, false, true, true, true, true, true, true, true, false, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, true, true, false, true, false, false, false, false, true, true, false, true, false, false, false, false, false, true, true, false, true, false, false, false, true, false, true, true, true, true, false, false, false, true, false, true, true, false, false, true, true, true, false, true, false, false, false, false, false, false, true, true, true, true, false, true, true, true, false, false, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, true, true, false, true, false, false, false, true, false, false, true, false, false, false, true, true, false, false, false, false, true, true, true, true, true, false, false, true, true, true, true, true, true, true, false, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, true, true, false, true, false, false, false, false, true, true, false, true, false, false, false, false, false, true, true, false, true, false, false, false, true, false, true, true, true, true, false, false, false, true, false, true, true, false, false, true, true, true, false, true, false, false, false, false, false, false, true, true, true, true, false, true, true, true, false, false, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, true, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, false, true, false, true, true, false, true, true, false, true, false, false, false, true, true, false, true, false, false, false, true, false, false, false, false, true, true, true, true, false, true, true, true, true, true, false, true, true, false, false, true, true, true, false, true, true, false, false, true, false, false, false, true, true, true, false, false, true, true, false, true, false, true, true, false, false, true, false, false, false, false, true, true, false, true, false, true, true, true, false, false, true, false, true, false, false, false, false, false, false, false, false, false, true, true, false, false, true, true]);
            let encoded = BinVector::from_bools(&[false, true, false, true, true, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, false, true, false, true, true, false, true, true, false, true, false, false, false, true, true, false, true, false, false, false, true, false, false, false, false, true, true, true, true, false, true, true, true, true, true, false, true, true, false, false, true, true, true, false, true, true, false, false, true, false, false, false, true, true, true, false, false, true, true, false, true, false, true, true, false, false, true, false, false, false, false, true, true, false, false, true, false, true, true, true, false, false, true, false, true, false, false, false, false, true, false, false, false, false, false, true, true, false, false, false, true, false, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, true, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, false, true, false, true, true, false, true, true, false, true, false, false, false, true, true, false, true, false, false, false, true, false, false, false, false, true, true, true, true, false, true, true, true, true, true, false, true, true, false, false, true, true, true, false, true, true, false, false, true, false, false, false, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, false, false, false, true, true, false, false, true, false, true, true, true, false, false, true, false, true, false, false, false, false, true, false, false, false, false, false, true, true, false, false, false, true, false, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, true, false, true, true, true, true, true, true, true, false, true, false, false, false, false, true, true, true, false, true, false, true, true, false, true, false, false, false, true, false, false, true, true, true, false, true, true, true, false, false, true, true, true, true, true, true, true, true, false, true, true, false, true, false, true, false, true, false, false, true, true, false, true, false, false, true, false, true, true, false, false, true, false, false, false, false, true, false, false, false, true, false, true, false, true, true, true, false, true, true, false, false, false, true, true, false, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[true, true, false, true, true, false, true, true, true, true, true, true, true, false, true, false, false, false, false, true, true, true, false, true, false, true, true, false, true, false, false, false, true, false, false, true, true, true, false, true, true, true, false, false, true, true, true, true, true, true, true, true, false, true, true, false, true, false, true, false, true, false, false, true, true, false, true, false, false, true, false, true, true, false, false, true, false, false, false, false, true, false, false, false, true, false, true, false, true, true, true, false, true, true, true, false, false, false, true, true, false, false, false, true, true, true, true, false, false, true, true, true, false, true, false, true, false, false, false, false, true, false, true, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, true, false, true, true, true, true, true, true, true, false, true, false, false, false, false, true, true, true, false, true, false, false, true, false, true, false, false, false, true, false, false, true, true, true, false, true, true, true, false, false, true, true, true, true, true, true, true, true, false, true, true, false, true, false, true, false, true, false, false, true, true, false, true, false, false, true, false, true, true, false, false, true, false, false, false, false, true, false, false, false, true, false, true, false, true, true, true, false, true, true, true, false, false, false, true, true, false, false, false, true, true, true, true, false, false, true, true, true, false, true, false, true, false, false, false, false, true, false, true, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, false, true, true, false, true, false, true, true, true, false, true, true, true, false, true, false, false, false, false, true, true, true, false, true, false, false, false, true, false, true, false, true, true, true, false, false, false, true, true, true, true, true, true, false, false, true, false, true, false, false, true, false, false, false, false, true, true, true, true, false, false, true, true, true, false, true, false, false, true, true, false, true, true, false, false, false, false, true, true, false, false, true, false, false, false, true, true, false, true, false, true, true, true, true, false, true, false, true, true, true, false, true, false, false, true, false, false, true, false, false, true, false, false, false, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, true, false, true, true, false, true, false, true, true, true, false, true, true, true, false, true, false, false, false, false, true, true, true, false, true, false, false, false, true, false, true, false, true, true, true, false, false, false, true, true, true, true, true, true, false, false, true, false, true, false, false, true, false, false, false, false, true, true, true, true, false, false, true, true, true, false, true, false, false, true, true, false, true, true, false, false, false, false, true, true, false, false, true, false, false, false, true, true, false, true, false, false, true, true, true, true, false, true, false, true, true, true, false, true, false, false, true, false, false, false, true, false, false, true, false, false, false, false, false, false, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, false, true, true, false, true, false, true, true, true, false, true, true, true, false, true, false, false, false, false, true, true, true, false, true, false, false, false, true, false, true, false, true, true, true, false, false, false, true, true, true, true, true, true, false, false, true, false, true, false, false, true, false, false, false, false, true, true, true, true, false, false, true, true, true, false, true, false, false, true, true, false, false, true, false, false, false, false, true, true, false, false, true, false, false, false, true, true, false, true, false, false, true, true, true, true, false, true, false, true, true, true, false, true, false, false, true, false, false, false, true, false, false, true, false, false, false, false, false, false, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, false, true, false, true, true, false, true, true, false, true, false, false, true, false, true, false, false, false, false, true, false, true, false, true, false, false, false, false, true, false, false, false, false, true, true, false, true, false, true, false, true, false, true, false, false, false, false, false, true, true, false, false, true, true, false, true, false, false, false, false, true, true, false, true, true, true, false, true, false, false, true, true, true, false, false, false, false, true, true, true, false, false, false, false, false, false, false, false, true, false, true, true, false, true, true, false, false, false, true, false, false, true, false, false, true, true, true, false, true, false, false, false, false, true, true, false]);
            let encoded = BinVector::from_bools(&[true, true, true, false, false, true, false, true, true, false, true, true, false, true, false, false, true, false, true, false, false, false, false, true, false, true, false, true, false, false, false, false, true, false, false, false, false, true, true, false, true, false, true, false, true, false, true, false, false, false, false, false, true, true, false, false, true, true, false, true, false, false, false, false, true, true, false, true, true, true, false, true, false, false, true, true, true, false, false, false, false, true, true, true, false, false, false, false, false, false, false, false, true, false, true, true, true, false, true, true, false, false, false, true, false, false, true, false, false, true, false, true, true, false, true, false, false, false, false, false, true, true, true, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, false, true, false, true, true, false, true, true, false, true, false, false, true, false, true, false, false, false, false, true, false, true, false, true, false, true, false, false, true, false, false, false, false, true, true, false, true, false, true, false, true, false, true, false, false, false, false, false, true, true, false, false, true, true, false, true, false, false, false, false, true, true, false, true, true, true, false, true, false, false, true, true, true, false, false, false, false, true, true, true, false, false, false, false, false, false, false, false, true, false, true, true, true, false, true, true, false, false, false, true, false, false, true, false, false, true, false, true, true, false, true, false, false, false, false, false, true, true, true, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, false, false, false, false, false, true, false, false, false, true, false, true, true, false, false, true, true, false, false, true, true, true, true, false, true, true, false, true, false, true, true, false, true, true, false, true, true, true, false, true, true, true, false, true, false, true, true, true, false, false, true, true, false, true, false, true, false, true, false, false, false, false, false, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, false, false, false, false, false, true, false, false, true, false, true, true, false, true, false, true, true, false, false, false, false, true, false, true, true, false, false, false, false, true, true, true, false, false, false]);
            let encoded = BinVector::from_bools(&[false, true, true, false, false, false, false, false, false, true, false, false, false, true, false, true, true, false, false, true, true, false, false, true, true, true, true, false, true, true, false, true, false, true, true, false, true, true, false, true, true, true, false, true, true, true, false, true, false, true, true, true, false, false, true, true, false, true, false, true, false, true, false, false, false, false, false, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, false, false, false, false, false, true, false, false, true, false, false, true, true, false, true, false, true, true, false, false, false, false, true, false, true, true, true, false, false, false, false, true, true, true, true, false, false, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, false, false, false, true, false, true, false, false, false, true, false, true, true, false, false, true, true, false, false, true, true, true, true, false, true, true, false, true, false, true, true, false, true, true, false, true, true, true, false, true, true, true, false, true, false, true, true, true, false, false, true, true, false, true, false, true, false, true, false, false, false, false, false, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, false, false, false, false, false, true, false, false, true, false, false, true, true, false, true, false, true, true, false, false, false, false, true, false, true, true, true, false, false, false, false, true, true, true, true, false, false, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, false, false, true, true, false, true, false, true, false, true, false, true, false, false, false, false, false, true, true, false, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, true, true, false, true, false, false, true, true, true, true, false, false, false, true, true, true, true, true, true, false, true, false, false, true, false, true, false, true, true, true, false, false, true, false, true, true, false, true, true, false, false, true, false, true, false, false, true, true, true, false, true, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, false, false, true, true, true]);
            let encoded = BinVector::from_bools(&[false, false, true, false, false, false, true, true, false, true, false, true, false, true, false, true, false, false, false, false, false, true, true, false, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, true, true, false, true, false, false, true, true, true, true, false, false, false, true, true, true, true, true, true, false, true, false, false, true, false, true, false, true, true, true, false, false, true, false, true, true, false, true, true, false, false, true, false, true, false, true, false, true, true, true, false, true, false, true, false, true, false, true, false, true, true, false, false, false, true, false, true, false, false, true, false, true, true, false, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, false, false, true, true, false, true, false, true, false, true, false, true, false, false, false, false, false, true, true, false, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, true, true, false, true, false, false, true, true, true, true, false, false, false, true, true, true, true, true, true, false, true, false, false, true, false, true, false, false, true, true, false, false, true, false, true, true, false, true, true, false, false, true, false, true, false, true, false, true, true, true, false, true, false, true, false, true, false, true, false, true, true, false, false, false, true, false, true, false, false, true, false, true, true, false, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, false, true, true, true, true, true, false, true, false, true, false, false, false, false, false, true, true, true, true, true, true, false, true, true, true, false, false, false, true, false, true, true, true, false, true, true, false, true, false, false, true, false, true, false, true, true, true, true, false, false, true, true, true, true, false, true, false, true, true, false, true, false, false, false, true, true, false, false, true, false, false, false, false, false, false, false, true, true, true, true, true, true, false, false, true, true, false, false, false, false, false, false, true, false, true, false, false, false, true, true, false, false, false, false, false, true, true, false, true, false, true, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, false, true, true, true, true, true, false, true, false, true, false, false, false, false, false, true, true, true, true, true, true, false, true, true, true, false, false, false, true, false, true, true, true, false, true, true, false, true, false, false, true, false, true, false, true, true, true, true, false, false, true, true, true, true, false, true, false, true, true, false, true, false, false, false, true, true, false, false, true, false, false, false, false, false, false, false, true, true, true, true, true, true, false, false, true, true, false, false, false, false, false, false, false, true, false, true, false, false, false, true, true, false, false, false, false, true, false, true, true, false, true, false, true, false, false, true, false, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, false, true, true, true, true, true, false, true, false, true, false, false, false, false, false, true, true, true, true, true, true, false, true, true, true, false, false, false, true, false, true, true, true, false, true, true, false, true, false, false, true, false, true, false, true, true, true, true, false, false, true, true, true, true, false, true, false, true, true, false, true, false, false, false, true, true, false, false, true, false, false, false, false, false, true, false, true, true, true, true, true, true, false, false, true, true, false, false, false, false, false, false, false, true, false, true, false, false, false, true, true, false, false, false, false, true, false, true, true, false, true, false, true, false, false, true, false, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, true, false, true, false, true, true, true, false, true, false, false, false, true, true, false, false, false, false, true, true, false, false, true, false, true, false, true, true, true, false, true, true, true, true, false, true, true, true, false, true, false, true, false, false, false, false, false, false, true, false, true, true, false, false, true, true, true, true, true, false, false, false, false, true, true, false, true, false, true, false, true, true, true, true, true, true, true, true, false, false, true, true, true, false, false, true, true, false, false, true, true, false, false, false, true, true, true, false, true, false, false, true, false, true, false, true, true, true, false, true, false, false, true, false, true, true]);
            let encoded = BinVector::from_bools(&[true, false, false, false, true, false, true, false, true, true, true, false, true, false, false, false, true, true, false, false, false, false, true, true, false, false, true, false, true, false, true, true, true, false, true, true, true, true, false, true, true, true, false, true, false, true, false, false, false, false, false, false, true, false, true, true, false, false, true, true, true, true, true, false, false, false, false, true, true, false, true, false, true, false, true, true, true, true, true, true, true, true, false, false, true, true, true, false, false, true, true, false, false, true, true, true, false, false, false, true, true, true, false, true, false, false, true, false, true, false, true, true, true, true, false, true, false, false, false, true, false, true, false, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, true, false, true, false, true, true, true, false, true, false, false, false, true, true, false, false, false, false, true, true, false, false, true, false, true, false, true, true, true, false, true, true, true, true, false, true, true, true, false, true, false, true, false, false, false, false, false, false, true, false, true, true, false, false, true, true, true, true, true, false, false, false, false, true, true, false, true, false, true, false, true, true, true, true, false, true, true, true, false, false, true, true, true, false, false, true, true, false, false, true, true, true, false, false, false, true, true, true, false, true, false, false, true, false, true, false, true, true, true, true, false, true, false, false, false, true, false, true, false, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, false, false, false, false, true, false, true, false, true, false, true, false, true, false, false, false, true, false, true, true, false, false, true, false, false, true, true, false, false, true, true, true, true, true, true, false, true, false, true, false, false, true, false, false, true, false, false, true, false, true, false, false, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, false, true, false, true, true, true, false, false, true, false, true, false, false, true, true, false, false, true, true, true, true, true, false, true, false, false, false, true, true, false, false, true, true, true, true, false, true, false, false, true, false, true, false, true, true, false]);
            let encoded = BinVector::from_bools(&[false, true, false, false, false, false, false, false, true, false, true, false, true, false, true, false, true, false, false, false, true, false, true, true, false, false, true, false, false, true, true, false, false, true, true, true, true, true, true, false, true, false, true, false, false, true, false, false, true, false, false, true, false, true, false, false, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, false, true, false, true, true, true, false, false, true, false, true, false, false, true, true, false, false, true, true, true, true, true, true, false, true, false, false, false, true, true, false, false, true, true, true, true, false, false, true, false, false, true, false, true, false, false, true, true, false, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, false, false, false, false, true, false, true, false, true, false, true, false, false, false, false, false, true, false, true, true, false, false, true, false, false, true, true, false, false, true, true, true, true, true, true, false, true, false, true, false, false, true, false, false, true, false, false, true, false, true, false, false, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, false, true, false, true, true, true, false, false, true, false, true, false, false, true, true, false, false, true, true, true, true, true, true, false, true, false, false, false, true, true, false, false, true, true, true, true, false, false, true, false, false, true, false, true, false, false, true, true, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, true, false, true, false, false, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, true, true, true, true, true, false, true, true, false, true, false, true, true, true, true, true, true, true, false, true, false, true, false, true, false, false, false, false, false, true, false, true, false, true, true, true, true, false, true, true, true, false, true, false, false, false, true, false, false, true, true, true, false, true, false, false, true, true, true, true, false, true, true, true, true, false, true, false, true, true, false, false, false, true, true, true, false, false, false, false, true, true, false, false, false, false, false, true, true, true, true, false, true, false, false, false]);
            let encoded = BinVector::from_bools(&[false, false, false, false, true, false, true, false, false, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, true, true, true, true, true, false, true, true, false, true, false, true, true, true, true, true, true, true, false, true, false, true, false, true, false, false, false, false, false, true, false, true, false, true, true, true, true, false, true, true, true, false, true, false, false, false, true, false, false, true, true, true, false, true, false, false, true, true, true, true, false, true, true, true, true, false, true, false, true, true, false, false, false, false, true, true, true, false, false, false, false, true, true, false, false, false, true, false, false, true, true, true, true, false, true, true, false, false, false, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, false, false, true, false, false, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, true, true, true, true, true, false, true, true, false, true, false, true, true, true, true, true, true, true, false, true, false, true, false, true, false, false, false, false, false, true, false, true, false, true, true, true, true, false, true, true, true, false, true, false, false, false, true, false, false, true, true, true, false, true, false, false, true, true, true, true, false, true, true, true, true, false, true, false, true, true, false, false, false, false, true, true, true, false, false, false, false, true, true, false, false, false, true, false, false, true, true, true, true, false, true, true, false, false, false, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, false, false, false, true, false, true, true, true, true, false, true, true, true, false, true, true, false, false, true, false, false, false, true, false, false, true, false, false, false, true, true, false, true, true, true, false, true, false, false, true, true, true, false, false, false, false, true, true, false, false, false, true, false, false, true, false, false, false, false, false, false, true, true, true, false, false, true, true, true, false, false, true, true, true, false, true, false, true, false, false, false, false, false, true, false, false, true, false, true, false, false, false, true, true, true, false, false, false, false, false, true, true, false, false, true, true, true, true, false, true, true, false, true, true, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, true, false, false, false, true, false, true, true, true, true, false, true, true, true, false, true, true, false, false, true, false, false, false, true, false, false, true, false, false, false, true, true, false, true, true, true, false, true, false, false, true, true, true, false, false, false, false, true, true, false, false, false, true, false, false, true, false, false, false, false, false, false, true, true, true, false, false, true, true, true, false, false, true, true, true, false, true, false, true, false, false, false, false, false, true, false, false, true, false, true, false, true, false, false, true, true, true, false, false, false, false, false, true, true, false, false, true, false, true, true, true, false, true, true, false, false, true, true, false, true, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, false, false, false, true, false, true, true, true, true, false, true, true, true, false, true, true, false, false, true, false, false, false, true, false, false, true, false, false, false, true, true, false, true, true, true, false, true, false, false, true, true, true, false, false, false, false, true, true, false, false, false, true, false, false, true, false, false, false, true, false, false, true, true, true, false, false, true, true, true, false, false, true, true, true, false, true, false, true, false, false, false, false, false, true, false, false, true, false, true, false, true, false, false, true, true, true, false, false, false, false, false, true, true, false, false, true, false, true, true, true, false, true, true, false, false, true, true, false, true, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, true, true, false, true, false, true, false, true, false, true, true, false, true, false, true, true, true, false, false, false, true, true, true, true, true, false, true, true, true, true, true, false, true, true, true, false, false, true, true, false, false, true, true, true, true, false, false, true, true, false, false, false, true, true, true, false, false, false, false, true, false, false, false, false, false, true, false, false, false, false, false, true, true, true, true, false, true, true, false, true, false, true, true, true, true, true, false, false, true, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false, false, false, false, true]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, true, true, false, true, false, true, false, true, false, true, true, false, true, false, true, true, true, false, false, false, true, true, true, true, true, false, true, true, true, true, true, false, true, true, true, false, false, true, true, false, false, true, true, true, true, false, false, true, true, false, false, false, true, true, true, false, false, false, false, true, false, false, false, false, false, true, false, false, false, false, false, true, true, true, true, false, true, true, false, true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, true, false, true, false, false, false, true, false, false, false, true, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, true, true, false, true, false, true, false, true, false, true, true, false, true, false, true, true, true, false, false, false, true, true, true, true, true, false, true, true, true, false, true, false, true, true, true, false, false, true, true, false, false, true, true, true, true, false, false, true, true, false, false, false, true, true, true, false, false, false, false, true, false, false, false, false, false, true, false, false, false, false, false, true, true, true, true, false, true, true, false, true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, true, false, true, false, false, false, true, false, false, false, true, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, false, true, false, true, false, true, true, false, true, true, false, true, false, false, false, true, true, true, true, true, true, true, false, false, true, false, false, false, false, false, true, true, false, false, true, true, true, false, true, true, true, true, true, false, false, false, true, false, false, false, true, true, true, false, false, true, false, true, true, false, true, false, false, false, false, true, true, true, false, true, true, false, true, true, false, false, true, false, true, false, true, true, false, true, false, false, true, true, false, true, true, true, false, false, false, true, false, true, true, true, true, true, false, true, true, true, true, false, false, false, true, true, false, true, false, true]);
            let encoded = BinVector::from_bools(&[true, true, true, true, false, true, false, true, false, true, true, false, true, true, false, true, false, false, false, true, true, true, true, true, true, true, false, false, true, false, false, false, false, false, true, true, false, false, true, true, true, false, true, true, true, true, true, false, false, false, true, false, false, false, true, true, true, false, false, true, false, true, true, false, true, false, false, false, false, true, true, true, false, true, true, false, true, true, false, false, true, false, true, false, true, true, false, true, false, false, true, true, false, true, true, true, true, false, false, false, true, false, true, true, true, true, true, false, true, true, false, true, true, false, false, false, true, true, false, false, true, false, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, false, true, false, true, false, true, true, false, true, true, false, true, false, true, false, true, true, true, true, true, true, true, false, false, true, false, false, false, false, false, true, true, false, false, true, true, true, false, true, true, true, true, true, false, false, false, true, false, false, false, true, true, true, false, false, true, false, true, true, false, true, false, false, false, false, true, true, true, false, true, true, false, true, true, false, false, true, false, true, false, true, true, false, true, false, false, true, true, false, true, true, true, true, false, false, false, true, false, true, true, true, true, true, false, true, true, false, true, true, false, false, false, true, true, false, false, true, false, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, false, true, true, false, false, false, false, true, true, false, true, false, false, true, true, false, true, true, false, true, false, true, true, false, true, true, false, true, true, false, true, false, false, false, false, false, false, true, true, true, false, true, true, false, true, true, true, false, false, false, true, true, true, false, true, true, true, true, true, true, true, false, true, true, false, true, false, true, false, false, true, false, false, false, false, false, true, false, false, true, true, false, false, false, true, false, false, true, true, false, false, false, true, true, true, false, false, true, false, false, true, false, false, false, true, false, false, false, true, true, true, false, false, false, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, false, true, true, false, false, false, false, true, true, false, true, false, false, true, true, false, true, true, false, true, false, true, true, false, true, true, false, true, true, false, true, false, false, false, false, false, false, true, true, true, false, true, true, false, true, true, true, false, false, false, true, true, true, false, true, true, true, true, true, true, true, false, true, true, false, true, false, true, false, false, true, false, false, false, false, false, true, false, false, true, true, false, false, false, true, false, false, true, true, false, false, false, false, true, true, true, false, false, true, false, false, true, false, false, false, true, true, false, false, false, true, true, true, false, true, false, false, true, true, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, false, true, true, true, false, false, false, true, true, false, true, false, false, true, true, false, true, true, false, true, false, true, true, false, true, true, false, true, true, false, true, false, false, false, false, false, false, true, true, true, false, true, true, false, true, true, true, false, false, false, true, true, true, false, true, true, true, true, true, true, true, false, true, true, false, true, false, true, false, false, true, false, false, false, false, false, true, false, false, true, true, false, false, false, true, false, false, true, true, false, false, false, false, true, true, true, false, false, true, false, false, true, false, false, false, true, true, false, false, false, true, true, true, false, true, false, false, true, true, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, false, false, false, true, true, true, false, false, true, false, false, false, false, false, true, true, false, false, true, false, false, false, false, true, false, true, false, false, true, false, false, false, false, true, false, false, false, false, false, false, true, true, true, true, false, false, true, true, true, false, true, true, true, false, true, false, true, true, false, true, true, true, false, false, true, true, false, false, false, false, true, true, false, false, false, true, true, true, true, true, false, false, true, true, false, true, false, false, true, false, true, true, false, true, false, true, true, false, true, false, true, true, false, false, false, false, false, true, false, true, false, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, true, true, false, false, false, false, true, true, true, false, false, true, false, false, false, false, false, true, true, false, false, true, false, false, false, false, true, false, true, false, false, true, false, false, false, false, true, false, false, false, false, false, false, true, true, true, true, false, false, true, true, true, false, true, true, true, false, true, false, true, true, false, true, true, true, false, false, true, true, false, false, false, false, true, true, false, false, false, true, true, true, true, true, false, false, true, true, false, true, false, false, true, false, true, true, true, false, true, false, true, true, false, true, false, true, true, false, false, false, false, false, false, true, false, true, false, false, false, false, true, false, false, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, false, false, false, true, true, true, false, false, true, false, false, false, false, false, true, true, true, false, true, false, false, false, false, true, false, true, false, false, true, false, false, false, false, true, false, false, false, false, false, false, true, true, true, true, false, false, true, true, true, false, true, true, true, false, true, false, true, true, false, true, true, true, false, false, true, true, false, false, false, false, true, true, false, false, false, true, true, true, true, true, false, false, true, true, false, true, false, false, true, false, true, true, true, false, true, false, true, true, false, true, false, true, true, false, false, false, false, false, false, true, false, true, false, false, false, false, true, false, false, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, false, true, false, true, true, true, false, true, true, false, true, false, true, false, false, false, false, false, false, false, true, false, true, true, false, false, false, true, true, false, false, true, false, true, true, true, true, false, true, false, false, false, false, true, true, false, false, false, false, true, false, false, false, false, false, false, true, true, false, false, false, true, true, true, false, false, false, true, false, false, true, false, true, false, true, false, false, false, true, false, false, false, false, true, false, false, true, false, false, false, false, false, false, true, false, false, false, true, true, true, false, true, true, true, false, false, false, true, false, false, true, false, false, false, false, true]);
            let encoded = BinVector::from_bools(&[true, true, true, true, false, true, false, true, true, true, false, true, true, false, true, false, true, false, false, false, false, false, false, false, true, false, true, true, false, false, false, true, true, false, false, true, false, true, true, true, true, false, true, false, false, false, false, true, true, false, false, false, false, true, false, false, false, false, false, false, true, true, false, false, false, true, true, true, false, false, false, true, false, false, true, false, true, false, true, false, false, false, true, false, false, false, false, true, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, true, true, false, true, true, true, false, true, false, false, true, false, false, true, false, false, false, false, false, false, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, false, true, false, true, true, true, false, true, true, false, true, false, true, false, false, false, false, false, false, false, true, false, true, true, false, false, false, true, true, false, false, true, false, true, true, true, true, false, true, false, false, false, false, true, true, false, false, false, false, true, false, false, false, false, false, false, true, true, false, false, false, true, true, true, false, false, false, true, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, true, true, false, true, true, true, false, true, false, false, true, false, false, true, false, false, false, false, false, false, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, true, true, true, true, true, true, true, true, true, false, false, false, true, true, true, false, false, false, false, true, true, false, true, false, false, false, true, false, true, true, false, false, false, false, true, false, false, true, false, true, false, true, false, false, true, true, false, false, false, false, false, true, true, false, true, false, false, false, false, true, false, false, true, false, true, false, false, false, true, true, false, false, true, true, false, true, true, true, true, true, true, false, false, false, true, true, false, true, true, false, false, false, true, true, false, false, false, false, false, true, false, true, true, false, false, true, false, true, false, false, false, false, true, true, false, true]);
            let encoded = BinVector::from_bools(&[true, false, false, false, true, true, true, true, true, true, true, true, true, false, false, false, true, true, true, false, false, false, false, true, true, false, true, false, false, false, true, false, true, true, false, false, false, false, true, false, false, true, false, true, false, true, false, false, true, true, false, false, false, false, false, true, true, false, true, false, false, false, false, true, false, false, true, false, true, false, false, false, true, true, false, false, true, true, false, true, true, true, true, true, true, false, false, false, true, true, false, true, true, false, false, false, false, true, true, false, false, false, false, false, true, false, true, true, false, false, false, true, false, true, false, false, false, false, true, true, true, false, true, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, true, true, true, true, true, true, true, true, true, false, false, false, true, true, true, false, false, false, false, true, true, false, true, false, false, false, true, false, true, true, false, false, false, false, true, false, false, true, false, true, false, true, false, false, true, true, false, false, false, false, false, true, true, false, true, false, false, false, false, true, false, false, true, false, true, false, false, false, true, true, false, false, true, true, false, true, true, true, true, true, true, false, false, true, true, true, false, true, true, false, false, false, false, true, true, false, false, false, false, false, true, false, true, true, false, false, false, true, false, true, false, false, false, false, true, true, true, false, true, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, false, false, true, true, false, true, true, false, false, true, false, true, false, false, true, false, false, true, true, true, true, true, false, true, true, false, true, false, false, false, false, true, false, true, true, true, true, true, true, false, false, false, false, false, true, false, true, true, true, true, false, true, false, true, true, true, false, true, true, false, false, false, true, false, true, false, false, true, false, false, false, true, false, false, false, true, false, false, true, false, true, true, false, false, false, false, false, true, false, false, false, true, false, true, true, false, false, false, true, false, true, false, false, true, true, false, true, true, false, true, true, true, true, true, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, true, false, false, true, true, false, true, true, false, false, true, false, true, false, false, true, false, false, true, true, true, true, true, false, true, true, false, true, false, false, false, false, true, false, true, true, true, true, true, true, false, false, false, false, false, true, false, true, true, true, true, false, true, false, true, true, true, false, true, true, false, false, false, true, false, true, false, false, true, false, false, false, true, false, false, false, true, false, false, true, false, true, true, false, false, false, false, false, true, false, false, true, false, true, false, true, true, false, false, false, true, false, true, false, false, true, true, false, false, true, true, false, true, true, true, false, true, true, true, false, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, false, false, true, true, false, true, true, false, false, true, false, true, false, false, true, false, false, true, true, true, true, true, false, true, true, false, true, false, false, false, false, true, false, true, true, true, true, true, true, false, false, false, false, false, true, false, false, true, true, true, false, true, false, true, true, true, false, true, true, false, false, false, true, false, true, false, false, true, false, false, false, true, false, false, false, true, false, false, true, false, true, true, false, false, false, false, false, true, false, false, true, false, true, false, true, true, false, false, false, true, false, true, false, false, true, true, false, false, true, true, false, true, true, true, false, true, true, true, false, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, true, false, true, false, false, false, true, true, false, false, false, false, true, false, false, true, false, true, true, true, true, false, false, true, false, true, true, true, true, false, false, false, true, true, false, false, false, true, true, false, true, true, false, true, true, true, true, true, false, false, true, true, true, false, false, true, true, true, true, false, true, false, false, true, true, true, false, true, true, true, false, false, true, false, true, true, false, false, false, false, true, true, true, true, true, true, false, false, true, true, false, true, true, true, false, true, false, false, true, false, true, false, false, false, true, false, true, false, true, true, false, true, true, false, false, true]);
            let encoded = BinVector::from_bools(&[true, true, false, false, true, false, true, false, false, false, true, true, false, false, false, false, true, false, false, true, false, true, true, true, true, false, false, true, false, true, true, true, true, false, false, false, true, true, false, false, false, true, true, false, true, true, false, true, true, true, true, true, false, false, true, true, true, false, false, true, true, true, true, false, true, false, false, true, true, true, false, true, true, true, false, false, true, false, true, true, false, false, false, false, true, true, true, true, true, true, false, false, true, true, false, false, true, true, true, false, true, false, false, true, false, true, false, false, false, true, true, false, true, false, true, true, false, true, true, true, false, false, true, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, true, false, true, false, false, false, true, true, false, false, false, false, true, false, false, true, false, true, true, true, true, false, false, true, false, true, true, true, true, false, false, false, true, true, false, false, false, true, true, false, true, true, false, true, false, true, true, true, false, false, true, true, true, false, false, true, true, true, true, false, true, false, false, true, true, true, false, true, true, true, false, false, true, false, true, true, false, false, false, false, true, true, true, true, true, true, false, false, true, true, false, false, true, true, true, false, true, false, false, true, false, true, false, false, false, true, true, false, true, false, true, true, false, true, true, true, false, false, true, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, false, true, false, true, false, true, false, true, false, true, true, true, false, true, false, false, true, false, true, false, false, false, true, true, true, false, false, true, true, false, false, true, false, false, true, true, true, true, false, false, true, false, false, true, false, false, true, true, true, false, false, false, false, true, true, false, true, false, true, false, true, true, false, true, false, true, true, false, false, false, false, true, true, true, true, false, false, false, false, false, true, true, false, false, true, true, false, false, true, true, true, true, false, true, true, false, true, true, true, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, false, true, false, true, false, true, false, true, false, true, true, true, false, true, false, false, true, false, true, false, false, false, true, true, true, false, false, true, true, false, false, true, false, false, true, true, true, true, false, false, true, false, false, true, false, false, true, true, true, false, false, false, false, true, true, false, true, false, true, false, true, true, false, true, false, true, true, false, false, false, false, true, true, true, true, false, false, false, false, false, true, true, false, false, true, true, false, false, true, false, true, true, true, false, true, true, false, true, true, true, true, true, true, true, false, false, true, false, true, false, true, false, false, true, false, false, true, true, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, false, true, false, true, false, true, false, true, false, true, true, true, false, true, false, false, true, false, true, false, false, false, true, true, true, false, false, true, true, false, false, true, false, false, true, true, true, true, false, false, true, false, false, true, false, false, true, true, true, false, false, false, false, true, true, false, true, false, true, false, true, true, false, true, false, true, true, false, false, false, false, true, true, true, true, false, false, false, false, false, true, true, false, false, true, true, false, false, true, false, true, true, true, false, true, true, false, true, true, true, true, true, true, false, false, false, true, false, true, false, true, false, false, true, false, false, true, true, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, false, false, true, false, false, true, true, false, false, true, true, true, false, false, false, false, true, true, false, true, false, false, false, false, true, true, true, true, true, false, false, true, true, false, false, true, true, false, true, true, true, true, false, true, false, true, true, false, false, true, true, true, false, true, true, false, true, true, false, true, false, false, true, false, false, false, true, false, true, true, true, true, false, false, true, true, true, false, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, false, false, true, false, false, false, true, true, true, false, false, true, false, true, true, false, true, false, false, false, false, false]);
            let encoded = BinVector::from_bools(&[false, false, true, true, false, false, true, false, false, true, true, false, false, true, true, true, false, false, false, false, true, true, false, true, false, false, false, false, true, true, true, true, true, false, false, true, true, false, false, true, true, false, true, true, true, true, false, true, false, true, true, false, false, true, true, true, false, true, true, false, true, true, false, true, false, false, true, false, false, false, true, false, true, true, true, true, false, false, true, true, true, false, false, true, false, false, false, false, true, false, false, true, false, false, true, false, true, true, true, false, false, true, false, false, false, true, true, true, false, false, false, true, false, true, true, false, true, false, true, false, false, false, false, false, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, false, false, true, false, false, true, true, false, false, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, true, false, false, true, true, false, false, true, true, false, true, true, true, true, false, true, false, true, true, false, false, true, true, true, false, true, true, false, true, true, false, true, false, false, true, false, false, false, true, false, true, true, true, true, false, false, true, true, true, false, false, true, false, false, false, false, true, false, false, true, false, false, true, false, true, true, true, false, false, true, false, false, false, true, true, true, false, false, false, true, false, true, true, false, true, false, true, false, false, false, false, false, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, true, true, true, true, true, false, false, true, false, false, true, false, false, true, true, true, true, true, false, true, false, true, true, true, true, false, false, true, false, true, true, true, true, true, true, true, true, true, false, true, true, false, false, true, false, true, true, false, true, true, true, false, false, true, false, true, true, true, false, true, true, false, true, false, false, true, true, false, false, true, true, false, false, false, false, true, false, true, false, false, false, false, true, true, false, true, true, true, true, true, true, false, true, true, true, true, false, true, true, true, true, false, false, true, false, false, false, false, false, false, false, false, true, true, false, true]);
            let encoded = BinVector::from_bools(&[false, false, false, true, true, true, true, true, true, false, false, true, false, false, true, false, false, true, true, true, true, true, false, true, false, true, true, true, true, false, false, true, false, true, true, true, true, true, true, true, true, true, false, true, true, false, false, true, false, true, true, false, true, true, true, false, false, true, false, true, true, true, false, true, true, false, true, false, false, true, true, false, false, true, true, false, false, false, false, true, false, true, false, false, false, false, true, true, false, true, true, true, true, true, false, true, false, true, true, true, true, false, true, true, true, true, false, false, true, false, true, false, false, false, false, false, false, false, false, true, true, false, true, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, true, true, true, true, true, false, false, true, false, false, true, false, false, true, true, true, true, true, false, true, false, true, true, true, true, false, false, true, false, true, true, true, true, true, true, true, true, true, false, true, true, false, false, true, false, true, true, false, true, true, true, false, false, true, false, true, true, true, false, true, true, false, true, false, false, true, true, false, false, true, true, false, false, false, false, true, false, true, false, false, false, false, true, true, false, true, true, true, true, true, false, false, false, true, true, true, true, false, true, true, true, true, false, false, true, false, true, false, false, false, false, false, false, false, false, true, true, false, true, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, true, true, true, false, false, true, false, true, true, true, true, true, true, true, false, true, true, true, false, true, true, true, true, false, true, true, false, false, true, false, false, true, true, false, false, true, true, true, false, false, false, false, false, true, true, true, false, true, true, true, false, false, true, false, true, true, true, true, true, false, false, true, true, false, false, true, true, true, true, true, false, false, false, false, false, true, true, true, false, true, false, true, true, true, false, true, false, false, true, true, true, false, false, true, true, true, true, false, true, true, true, true, false, true, false, true, true, false, false, false, false, false, true, true, false, true]);
            let encoded = BinVector::from_bools(&[true, true, true, true, true, true, true, false, false, true, false, true, true, true, true, true, true, true, false, true, true, true, false, true, true, true, true, false, true, true, false, false, true, false, false, true, true, false, false, true, true, true, false, false, false, false, false, true, true, true, false, true, true, true, false, false, true, false, true, true, true, true, true, false, false, true, true, false, false, true, true, true, true, true, false, false, false, false, false, true, true, true, false, true, false, true, true, true, false, true, false, false, true, true, true, true, false, false, true, true, true, true, false, true, true, true, true, false, true, false, true, true, true, false, false, false, false, false, true, true, true, false, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, true, true, true, false, false, true, false, true, true, true, true, true, true, true, false, true, true, true, false, true, true, true, true, false, true, true, false, false, true, false, false, true, true, false, false, true, true, true, false, false, false, false, false, true, true, true, false, true, true, true, false, false, true, false, true, true, true, true, true, false, false, true, true, false, false, true, true, true, true, true, false, false, false, false, false, true, true, true, false, true, false, true, true, true, false, true, false, false, true, true, true, true, false, false, true, true, true, true, false, true, true, true, true, false, true, false, true, true, true, false, false, false, false, false, true, true, true, false, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, false, true, true, false, false, true, false, true, true, false, true, true, true, false, true, true, false, true, false, false, false, false, true, false, true, true, true, true, true, false, false, false, false, true, true, true, true, true, true, true, true, false, true, true, true, false, true, false, true, false, true, false, false, false, true, false, true, false, true, true, false, false, false, false, true, false, false, true, true, true, true, true, true, true, false, false, true, true, true, false, true, true, false, false, false, false, true, false, true, false, false, false, false, true, true, true, true, true, false, false, true, false, true, false, false, false, false, true, true, false, true, false, true, true, false, true]);
            let encoded = BinVector::from_bools(&[false, false, false, true, false, true, true, false, false, true, false, true, true, false, true, true, true, false, true, true, false, true, false, false, false, false, true, false, true, true, true, true, true, false, false, false, false, true, true, true, true, true, true, true, true, false, true, true, true, false, true, false, true, false, true, false, false, false, true, false, true, false, true, true, false, false, false, false, true, false, false, true, true, true, true, true, true, true, false, false, true, true, true, false, true, true, false, false, false, false, true, false, true, false, true, false, false, false, true, true, true, true, true, false, false, true, false, true, false, false, true, false, false, true, true, false, true, false, true, true, true, false, true, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, false, true, true, false, false, true, false, true, true, false, true, true, true, false, true, true, false, true, false, false, false, false, true, false, true, true, true, true, true, false, false, false, false, false, true, true, true, true, true, true, true, false, true, true, true, false, true, false, true, false, true, false, false, false, true, false, true, false, true, true, false, false, false, false, true, false, false, true, true, true, true, true, true, true, false, false, true, true, true, false, true, true, false, false, false, false, true, false, true, false, true, false, false, false, true, true, true, true, true, false, false, true, false, true, false, false, true, false, false, true, true, false, true, false, true, true, true, false, true, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, true, true, true, false, false, false, false, false, false, false, true, true, false, true, true, false, false, false, true, true, true, false, false, false, true, true, true, false, true, false, true, true, true, false, false, true, true, false, false, false, false, true, false, false, true, false, false, false, false, false, true, true, false, true, false, false, false, false, false, true, true, true, false, false, false, false, false, true, true, false, false, false, false, false, true, false, false, false, true, false, false, true, true, true, false, true, true, false, true, true, true, false, false, false, true, true, false, false, true, true, false, true, true, false, true, true, true, false, true, true, false, true, false, true, true, true]);
            let encoded = BinVector::from_bools(&[true, false, false, false, true, true, true, false, false, false, false, false, false, false, true, true, false, true, true, false, false, false, true, true, true, false, false, false, true, true, true, false, true, false, true, true, true, false, false, true, true, false, false, false, false, true, false, false, true, false, false, false, false, false, true, true, false, true, false, false, false, false, false, true, true, true, false, false, false, false, false, true, true, false, false, false, false, false, true, false, false, false, true, false, false, true, true, true, false, true, true, false, true, true, true, true, false, false, false, true, true, false, false, true, true, false, true, true, false, true, true, true, true, false, true, true, false, true, true, false, true, true, false, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, true, true, true, false, false, false, false, false, false, false, true, true, false, true, true, false, false, false, true, true, true, false, false, false, true, true, true, false, true, false, true, true, true, false, false, true, true, false, false, false, false, true, false, false, true, false, false, false, false, false, true, true, false, true, false, false, false, false, false, true, true, true, false, false, false, false, false, true, true, false, false, false, false, false, true, false, false, false, true, false, false, true, true, true, false, true, true, true, true, true, true, true, false, false, false, true, true, false, false, true, true, false, true, true, false, true, true, true, true, false, true, true, false, true, true, false, true, true, false, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, true, false, false, false, true, true, true, false, true, false, true, true, true, true, false, false, true, false, false, true, true, false, true, false, true, false, false, true, false, true, false, true, false, false, false, false, true, false, true, false, false, false, true, true, false, true, true, true, false, false, false, true, true, true, false, true, true, false, false, true, true, true, true, true, true, true, true, true, true, true, false, true, false, true, true, true, true, true, false, false, true, false, true, false, false, false, true, false, true, true, false, false, true, false, true, false, false, false, true, true, false, false, false, false, false, false, false, true, false, false, false, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, false, true, false, false, false, true, true, true, false, true, false, true, true, true, true, false, false, true, false, false, true, true, false, true, false, true, false, false, true, false, true, false, true, false, false, false, false, true, false, true, false, false, false, true, true, false, true, true, true, false, false, false, true, true, true, false, true, true, false, false, true, true, true, true, true, true, true, true, true, true, true, false, true, false, true, true, true, true, true, false, false, true, false, true, false, false, false, true, false, true, true, true, false, false, true, false, true, false, false, false, true, true, false, false, false, false, false, true, false, false, true, false, false, false, false, true, false, true, false, false, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, true, false, false, false, true, true, true, false, true, false, true, true, true, true, false, false, true, false, false, true, true, false, true, false, true, false, false, true, false, true, false, true, false, false, false, false, true, false, true, false, false, false, true, true, false, true, true, true, false, false, false, true, true, true, false, true, false, false, false, true, true, true, true, true, true, true, true, true, true, true, false, true, false, true, true, true, true, true, false, false, true, false, true, false, false, false, true, false, true, true, true, false, false, true, false, true, false, false, false, true, true, false, false, false, false, false, true, false, false, true, false, false, false, false, true, false, true, false, false, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, true, true, true, false, true, true, true, true, true, false, false, true, false, false, false, true, true, true, false, true, true, true, true, false, false, false, false, false, true, true, false, false, true, false, true, true, false, true, false, true, true, false, false, true, true, true, false, true, true, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, true, true, true, false, true, false, false, false, false, true, true, true, false, false, false, true, true, false, false, true, false, true, false, false, true, true, false, true, false, false, false, false, true, false, false, true, true, false, false, true, true, true, true, true, false, true, true, false, false, false, false, false]);
            let encoded = BinVector::from_bools(&[false, false, false, false, true, true, true, false, true, true, true, true, true, false, false, true, false, false, false, true, true, true, false, true, true, true, true, false, false, false, false, false, true, true, false, false, true, false, true, true, false, true, false, true, true, false, false, true, true, true, false, true, true, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, true, true, true, false, true, false, false, false, false, true, true, true, false, false, false, true, true, false, false, true, false, true, false, false, true, true, false, false, true, false, false, false, false, true, false, false, true, true, false, false, true, true, true, true, true, true, false, true, true, false, true, false, false, false, false, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, true, true, true, false, true, true, true, true, true, false, false, true, false, false, false, true, true, true, false, true, true, true, true, false, false, false, false, false, true, true, false, false, true, false, true, true, false, true, false, true, true, false, false, true, true, true, false, true, true, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, true, true, false, false, true, false, false, false, false, true, true, true, false, false, false, true, true, false, false, true, false, true, false, false, true, true, false, false, true, false, false, false, false, true, false, false, true, true, false, false, true, true, true, true, true, true, false, true, true, false, true, false, false, false, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, false, false, true, true, false, true, true, false, true, false, false, true, false, false, false, false, false, true, false, false, true, true, true, true, false, true, false, true, false, true, true, false, false, false, false, false, false, true, true, false, false, false, false, false, false, true, true, true, true, true, false, true, false, false, false, false, true, false, true, false, false, false, true, false, false, false, true, true, false, false, false, true, false, false, false, true, true, false, false, false, false, true, false, true, true, false, false, true, true, false, true, false, true, true, true, false, false, true, false, false, true, false, true, false, true, true, true, true, false, true, false, false, true, false, false, false]);
            let encoded = BinVector::from_bools(&[true, true, true, false, false, false, true, true, false, true, true, false, true, false, false, true, false, false, false, false, false, true, false, false, true, true, true, true, false, true, false, true, false, true, true, false, false, false, false, false, false, true, true, false, false, false, false, false, false, true, true, true, true, true, false, true, false, false, false, false, true, false, true, false, false, false, true, false, false, false, true, true, false, false, false, true, false, false, false, true, true, false, false, false, false, true, false, true, true, false, false, true, true, false, false, true, false, true, true, true, false, false, true, false, false, true, false, true, false, true, true, true, true, true, false, true, false, false, false, true, false, false, false, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, false, false, true, true, false, true, true, false, true, false, false, true, false, false, false, false, false, true, false, false, true, true, true, true, false, true, false, true, false, true, true, false, false, false, false, false, false, true, true, false, false, false, false, false, false, true, true, true, true, true, false, true, false, false, false, false, true, false, true, false, false, false, true, false, false, false, true, true, false, false, false, true, false, false, false, true, true, false, false, false, false, true, false, true, true, false, false, true, true, false, false, true, false, true, true, true, false, false, true, false, false, true, false, true, false, false, true, true, true, true, false, true, false, false, false, true, false, false, false, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, false, true, true, false, false, false, true, true, false, false, true, true, true, false, false, false, false, true, false, false, false, false, true, true, true, true, true, true, true, false, true, true, false, false, false, true, true, true, true, false, true, true, false, true, true, false, false, false, true, false, false, false, false, false, false, true, false, true, false, false, false, true, true, true, false, true, false, false, false, true, true, false, false, true, false, true, false, false, true, true, false, false, false, true, false, false, true, true, false, true, false, false, false, false, false, false, false, false, false, true, true, true, true, false, true, true, false, true, true, false, false, true, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, false, true, true, false, false, false, true, true, false, false, true, true, true, false, false, false, false, true, false, false, false, false, true, true, true, true, true, true, true, false, true, true, false, false, false, true, true, true, true, false, true, true, false, true, true, false, false, false, true, false, false, false, false, false, false, true, false, true, false, false, false, true, true, true, false, true, false, false, false, true, true, false, false, true, false, true, false, false, true, true, false, false, false, true, false, false, true, true, false, true, true, false, false, false, false, false, false, false, false, false, true, true, true, true, false, true, true, true, false, true, true, false, false, true, true, true, false, false, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, false, true, true, false, false, false, true, true, false, false, true, true, true, false, false, false, false, true, false, false, false, false, true, true, true, true, true, true, true, false, true, true, false, false, false, true, true, true, true, false, true, true, false, true, true, false, false, false, true, false, false, false, false, false, false, true, false, true, false, false, false, true, true, true, false, true, false, false, false, true, true, false, false, true, false, true, false, false, true, true, false, false, false, true, false, false, true, true, false, true, true, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, false, true, true, false, false, true, true, true, false, false, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, true, false, false, false, false, false, true, false, false, true, true, true, false, false, false, false, false, false, false, false, true, true, true, true, false, false, false, true, true, true, true, true, true, false, true, true, true, false, false, false, false, true, false, true, true, false, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, true, true, false, false, true, true, false, false, true, false, true, false, true, true, false, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, true, false, true, true, false, true, false, false, true, false, false, true, true, false, true, false, true, false]);
            let encoded = BinVector::from_bools(&[true, false, true, false, true, false, false, false, false, false, true, false, false, true, true, true, false, false, false, false, false, false, false, false, true, true, true, true, false, false, false, true, true, true, true, true, true, false, true, true, true, false, false, false, false, true, false, true, true, false, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, true, true, false, false, true, true, false, false, true, false, true, false, true, true, false, false, false, false, false, false, true, false, true, true, false, false, false, false, false, false, false, false, true, false, true, true, false, true, false, false, false, true, false, false, true, true, false, true, true, false, true, false, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, true, false, false, false, false, false, true, false, false, true, true, true, false, false, false, false, false, false, false, false, true, true, true, true, false, false, false, true, true, true, true, true, true, false, true, true, true, false, false, false, false, true, false, true, true, false, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, true, true, false, false, true, true, false, false, true, false, true, false, true, true, false, false, false, false, false, false, true, false, true, true, false, false, false, false, false, false, false, false, true, false, true, true, false, true, false, false, false, true, false, false, true, false, false, true, true, false, true, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, true, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, false, true, true, false, false, true, true, true, true, false, false, true, true, true, true, true, false, true, true, false, true, true, true, false, false, true, false, true, true, true, false, true, false, false, false, true, true, false, false, false, false, true, false, false, false, false, false, false, true, true, false, true, false, true, true, true, false, true, false, true, false, false, false, false, false, false, true, true, false, false, false, false, false, true, true, true, false, false, false, false, true, true, true, true, true, false, false, true, false, true, false, true, false, false, true, false, false, true, true]);
            let encoded = BinVector::from_bools(&[false, true, false, false, true, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, false, true, true, false, false, true, true, true, true, false, false, true, true, true, true, true, false, true, true, false, true, true, true, false, false, true, false, true, true, true, false, true, false, false, false, true, true, false, false, false, false, true, false, false, false, false, false, false, true, true, false, true, false, true, true, true, false, true, false, true, false, false, false, false, false, false, true, true, false, false, false, false, false, false, true, true, true, false, false, false, false, true, true, true, true, true, false, false, true, true, false, true, false, true, false, false, true, false, false, false, true, true, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, true, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, false, true, true, false, false, true, true, true, true, false, false, true, true, true, true, true, false, true, true, false, true, true, true, false, false, true, false, true, true, true, false, true, false, false, false, true, true, false, false, false, false, true, false, false, false, false, false, false, true, true, false, true, false, true, true, true, false, true, false, false, false, false, false, false, false, false, true, true, false, false, false, false, false, false, true, true, true, false, false, false, false, true, true, true, true, true, false, false, true, true, false, true, false, true, false, false, true, false, false, false, true, true, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, false, false, false, false, false, true, false, true, true, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, false, true, false, false, true, false, false, true, false, true, true, true, true, true, true, true, true, false, true, true, false, false, true, false, false, false, false, false, true, true, true, false, true, true, true, false, false, false, true, true, true, false, false, false, true, true, true, false, false, false, false, true, true, true, true, false, false, false, true, false, true, true, true, true, false, false, true, false, true, true, false, false, false, false, true, false, true, false, true, false, true, false, true, true, false, true, false, true, false, true]);
            let encoded = BinVector::from_bools(&[true, false, false, true, false, false, false, false, false, true, false, true, true, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, false, true, false, false, true, false, false, true, false, true, true, true, true, true, true, true, true, false, true, true, false, false, true, false, false, false, false, false, true, true, true, false, true, true, true, false, false, false, true, true, true, false, false, false, true, true, true, false, false, false, false, true, true, true, true, false, false, false, true, false, true, true, true, true, true, false, false, true, false, true, true, false, false, false, false, true, false, true, false, true, false, false, true, false, true, true, false, true, false, false, true, false, true, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, false, false, false, false, false, true, false, true, true, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, false, true, false, false, true, false, false, true, false, true, true, true, true, true, true, true, true, false, true, true, false, false, true, true, false, false, false, false, true, true, true, false, true, true, true, false, false, false, true, true, true, false, false, false, true, true, true, false, false, false, false, true, true, true, true, false, false, false, true, false, true, true, true, true, true, false, false, true, false, true, true, false, false, false, false, true, false, true, false, true, false, false, true, false, true, true, false, true, false, false, true, false, true, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, false, true, true, false, true, false, false, true, false, true, false, true, true, false, false, false, false, true, false, false, true, true, true, true, true, true, true, false, false, false, true, false, false, true, false, false, false, true, true, true, false, false, true, true, false, false, true, false, true, true, true, false, true, false, true, true, true, false, false, false, true, false, true, true, true, true, true, true, false, true, false, false, false, true, true, true, true, true, true, false, false, false, false, false, true, true, false, true, true, false, false, false, true, true, true, false, true, false, true, false, true, false, false, true, true, true, false, true, true, false, false, false, true, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, false, true, false, true, true, false, true, false, false, true, false, true, false, true, true, false, false, false, false, true, false, false, true, true, true, true, true, true, true, false, false, false, true, false, false, true, false, false, false, true, true, true, false, false, true, true, false, false, true, false, true, true, true, false, true, false, true, true, true, false, false, false, true, false, true, true, true, true, true, true, false, true, false, false, false, true, true, true, true, true, true, false, false, false, false, false, true, true, false, true, true, false, true, false, false, true, true, true, false, true, false, true, false, true, false, false, true, true, true, true, false, true, true, false, false, false, true, true, true, false, true, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, false, true, true, false, true, false, false, true, false, true, false, true, true, false, false, false, false, true, false, false, true, false, true, true, true, true, true, false, false, false, true, false, false, true, false, false, false, true, true, true, false, false, true, true, false, false, true, false, true, true, true, false, true, false, true, true, true, false, false, false, true, false, true, true, true, true, true, true, false, true, false, false, false, true, true, true, true, true, true, false, false, false, false, false, true, true, false, true, true, false, true, false, false, true, true, true, false, true, false, true, false, true, false, false, true, true, true, true, false, true, true, false, false, false, true, true, true, false, true, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, true, true, true, false, true, true, true, false, false, false, false, false, true, true, false, false, false, false, false, true, false, true, false, true, true, true, false, false, false, true, false, false, false, false, false, false, true, true, false, false, false, false, true, false, false, true, true, false, true, true, false, false, true, true, false, true, false, false, false, true, false, true, true, false, false, true, false, true, false, false, false, false, false, true, true, false, false, true, false, false, true, true, false, false, false, true, false, false, true, true, false, false, true, false, false, false, true, true, true, false, false, true, true, true, true, false, true, true, false, false, false, false, false, true, false, true]);
            let encoded = BinVector::from_bools(&[true, true, false, false, true, true, true, false, true, true, true, false, false, false, false, false, true, true, false, false, false, false, false, true, false, true, false, true, true, true, false, false, false, true, false, false, false, false, false, false, true, true, false, false, false, false, true, false, false, true, true, false, true, true, false, false, true, true, false, true, false, false, false, true, false, true, true, false, false, true, false, true, false, false, false, false, false, true, true, false, false, true, false, false, true, true, false, false, false, true, false, false, true, true, false, false, false, true, false, false, false, true, true, true, false, false, true, true, true, true, true, false, true, true, false, false, false, false, false, false, true, false, false, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, true, true, true, false, true, true, true, false, false, false, false, false, true, true, false, false, false, false, false, true, false, true, false, true, true, true, false, false, false, true, false, false, false, false, false, false, true, true, false, false, false, false, true, true, false, true, true, false, true, true, false, false, true, true, false, true, false, false, false, true, false, true, true, false, false, true, false, true, false, false, false, false, false, true, true, false, false, true, false, false, true, true, false, false, false, true, false, false, true, true, false, false, false, true, false, false, false, true, true, true, false, false, true, true, true, true, true, false, true, true, false, false, false, false, false, false, true, false, false, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, false, true, false, true, false, false, true, true, false, true, true, false, false, true, true, false, false, false, true, false, true, true, true, false, false, false, false, true, false, false, false, true, false, false, true, true, false, false, true, false, true, true, false, true, true, true, false, false, true, false, false, false, false, true, true, false, true, false, true, true, false, true, false, true, false, false, false, false, false, true, true, false, true, false, false, true, true, true, false, true, true, false, true, false, true, true, false, true, true, false, false, true, true, false, false, true, true, true, true, false, true, true, false, true, false, false, true, true, false, true, true, true, true, false, true, true]);
            let encoded = BinVector::from_bools(&[false, false, false, false, false, true, false, true, false, false, true, true, false, true, true, false, false, true, true, false, false, false, true, false, true, true, true, false, false, false, false, true, false, false, false, true, false, false, true, true, false, false, true, false, true, true, false, true, true, true, false, false, true, false, false, false, false, true, true, false, true, false, true, true, false, true, false, true, false, false, false, false, false, true, true, false, true, false, false, true, true, true, false, true, true, false, true, false, true, true, false, true, true, false, true, false, true, true, false, false, true, true, true, true, false, true, true, false, true, false, true, false, true, true, false, true, true, true, true, true, false, true, false, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, false, true, false, true, false, false, true, true, false, true, true, false, false, true, true, false, false, false, true, false, true, true, true, false, false, false, false, true, false, false, false, true, false, false, true, true, false, false, true, false, true, true, false, true, true, true, false, false, true, false, false, false, false, true, true, false, true, false, true, true, false, true, false, true, false, false, false, false, false, true, true, false, true, false, false, true, true, true, false, true, true, false, true, false, true, true, false, true, true, false, true, false, true, true, false, false, true, true, true, true, false, true, false, false, true, false, true, false, true, true, false, true, true, true, true, true, false, true, false, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, true, false, false, false, false, true, true, true, true, true, true, true, false, true, false, false, true, false, false, true, false, false, true, true, true, false, true, false, false, true, false, true, true, false, false, true, true, true, true, false, false, false, true, true, true, false, true, false, true, true, false, true, true, true, false, true, true, false, true, false, true, true, false, false, false, false, true, false, false, true, false, false, true, true, true, true, false, true, false, false, false, true, false, false, true, true, true, false, false, false, false, true, false, false, false, false, true, false, true, true, true, true, false, false, false, false, true, false, false, true, true, true, true, false, true, false]);
            let encoded = BinVector::from_bools(&[false, true, false, true, true, false, false, false, false, true, true, true, true, true, true, true, false, true, false, false, true, false, false, true, false, false, true, true, true, false, true, false, false, true, false, true, true, false, false, true, true, true, true, false, false, false, true, true, true, false, true, false, true, true, false, true, true, true, false, true, true, false, true, false, true, true, false, false, false, false, true, false, false, true, false, false, true, true, true, true, false, true, false, false, false, true, false, false, true, true, true, false, false, false, false, false, true, false, false, false, false, true, false, true, true, true, true, false, false, false, false, false, true, false, false, true, true, true, false, true, false, true, false, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, true, false, false, false, false, true, true, true, true, true, true, true, false, true, false, false, true, false, false, true, false, false, true, true, true, false, true, false, false, true, false, true, true, false, false, true, true, true, true, false, false, false, true, true, true, false, true, false, true, true, false, true, true, true, false, true, true, false, true, false, true, true, false, false, false, false, true, false, false, true, false, false, true, true, false, true, false, true, false, false, false, true, false, false, true, true, true, false, false, false, false, false, true, false, false, false, false, true, false, true, true, true, true, false, false, false, false, false, true, false, false, true, true, true, false, true, false, true, false, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, true, false, true, false, false, false, false, true, true, true, false, false, true, true, false, false, true, false, false, false, false, true, true, false, true, false, false, true, false, true, true, true, true, false, false, false, true, true, true, false, false, true, false, true, true, true, false, false, true, true, true, true, true, true, true, false, false, false, false, true, false, false, false, false, false, true, false, false, false, true, false, true, false, true, false, true, false, true, true, true, true, false, false, false, true, false, false, false, false, true, false, false, true, true, false, true, false, false, true, true, false, true, true, false, true, false, false, true, false, false, false, false, true, true, true, true]);
            let encoded = BinVector::from_bools(&[true, false, false, true, true, false, true, false, false, false, false, true, true, true, false, false, true, true, false, false, true, false, false, false, false, true, true, false, true, false, false, true, false, true, true, true, true, false, false, false, true, true, true, false, false, true, false, true, true, true, false, false, true, true, true, true, true, true, true, false, false, false, false, true, false, false, false, false, false, true, false, false, false, true, false, true, false, true, false, true, false, true, true, true, true, false, false, false, true, false, false, false, false, true, true, false, false, true, true, false, true, false, false, true, true, false, true, true, false, true, true, false, false, true, false, false, false, false, true, true, true, true, true, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, true, false, true, true, false, false, false, true, true, true, false, false, true, true, false, false, true, false, false, false, false, true, true, false, true, false, false, true, false, true, true, true, true, false, false, false, true, true, true, false, false, true, false, true, true, true, false, false, true, true, true, true, true, true, true, false, false, false, false, true, false, false, false, false, false, true, false, false, false, true, false, true, false, true, false, true, false, true, true, true, true, false, false, false, true, false, false, false, false, true, true, false, false, true, true, false, true, false, false, true, true, false, true, true, false, true, true, false, false, true, false, false, false, false, true, true, true, true, true, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, true, false, true, false, false, false, false, false, false, false, true, true, true, false, true, false, true, true, true, true, false, false, false, false, true, true, false, true, true, true, true, false, true, false, false, false, false, false, false, false, true, false, false, false, false, true, true, false, false, false, false, false, true, true, true, true, true, false, true, false, false, false, true, false, false, true, true, true, true, false, false, true, true, true, true, false, false, false, false, true, false, false, false, true, true, true, false, true, true, true, true, false, true, true, false, false, false, true, true, true, true, true, true, false, false, false, false, false, true, true, false, false, true, true, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, true, false, true, false, false, false, false, false, false, false, true, true, true, false, true, false, true, true, true, true, false, false, false, false, true, true, false, true, true, true, true, false, true, false, false, false, false, false, false, false, true, false, false, false, false, true, true, false, false, false, false, false, true, true, true, true, true, false, true, false, false, false, true, false, false, true, true, true, true, false, false, true, true, true, true, false, false, false, false, true, false, false, false, true, true, true, false, true, true, true, false, true, false, true, true, false, false, false, true, true, true, true, true, true, false, false, true, false, false, false, true, true, false, false, true, true, true, false, true, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, true, false, true, false, false, false, false, false, true, false, true, true, true, false, true, false, true, true, true, true, false, false, false, false, true, true, false, true, true, true, true, false, true, false, false, false, false, false, false, false, true, false, false, false, false, true, true, false, false, false, false, false, true, true, true, true, true, false, true, false, false, false, true, false, false, true, true, true, true, false, false, true, true, true, true, false, false, false, false, true, false, false, false, true, true, true, false, true, true, true, false, true, false, true, true, false, false, false, true, true, true, true, true, true, false, false, true, false, false, false, true, true, false, false, true, true, true, false, true, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, true, true, true, true, false, false, true, true, true, false, false, true, false, false, false, true, true, true, true, true, false, true, false, false, true, true, false, true, false, false, true, false, false, false, true, true, true, true, false, true, false, true, false, true, true, true, true, false, true, false, true, true, true, false, true, false, false, true, false, false, false, true, false, true, true, true, true, false, true, false, true, true, true, false, true, false, true, false, false, false, false, false, true, false, true, false, false, false, false, true, false, false, true, false, true, false, true, true, false, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, true, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, true, true, true, true, false, false, true, true, true, false, false, true, false, false, false, true, true, true, true, true, false, true, false, false, true, true, false, true, false, false, true, false, false, false, true, true, true, true, false, true, false, true, false, true, true, true, true, false, true, false, true, true, true, false, true, false, false, true, false, false, false, true, false, true, true, true, true, false, true, false, true, true, true, false, true, false, false, true, false, false, false, false, false, true, false, true, false, false, false, false, true, false, false, false, true, false, true, false, true, true, true, false, false, false, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, true, true, true, true, false, false, true, true, true, false, false, true, false, false, false, true, true, true, true, true, false, true, false, false, true, true, false, true, false, false, true, false, false, false, true, true, true, false, false, true, false, true, false, true, true, true, true, false, true, false, true, true, true, false, true, false, false, true, false, false, false, true, false, true, true, true, true, false, true, false, true, true, true, false, true, false, false, true, false, false, false, false, false, true, false, true, false, false, false, false, true, false, false, false, true, false, true, false, true, true, true, false, false, false, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, false, true, false, true, true, false, false, true, true, true, false, true, false, true, true, true, true, false, true, false, true, true, true, false, false, true, true, true, false, true, false, false, false, false, true, false, false, false, false, false, true, false, true, false, false, true, true, false, true, true, true, true, false, false, false, false, true, true, true, true, true, true, false, false, true, true, false, false, true, true, false, true, false, true, true, true, true, true, false, true, false, true, false, false, true, false, false, true, false, true, true, false, false, true, false, true, true, false, true, false, false, true, false, false, false, false, true, false, true, false, true, true, true, true, false, true]);
            let encoded = BinVector::from_bools(&[true, true, false, true, false, true, false, true, true, false, false, true, true, true, false, true, false, true, true, true, true, false, true, false, true, true, true, false, false, true, true, true, false, true, false, false, false, false, true, false, false, false, false, false, true, false, true, false, false, true, true, false, true, true, true, true, false, false, false, false, true, true, true, true, true, true, false, false, true, true, false, false, true, true, false, true, false, true, true, true, true, true, false, true, false, true, false, false, true, false, false, true, false, true, false, true, false, false, true, false, true, true, false, true, false, false, true, false, false, false, false, false, true, false, true, false, true, true, false, true, true, false, false, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, false, true, false, true, true, false, false, true, true, true, false, true, false, true, true, true, true, false, true, false, true, true, true, false, false, true, true, true, false, true, false, false, false, false, true, false, false, false, false, true, true, false, true, false, false, true, true, false, true, true, true, true, false, false, false, false, true, true, true, true, true, true, false, false, true, true, false, false, true, true, false, true, false, true, true, true, true, true, false, true, false, true, false, false, true, false, false, true, false, true, false, true, false, false, true, false, true, true, false, true, false, false, true, false, false, false, false, false, true, false, true, false, true, true, false, true, true, false, false, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, true, false, true, true, true, false, false, true, false, false, true, false, true, true, true, false, true, false, false, false, true, false, false, false, false, true, false, true, true, false, false, false, true, true, true, false, true, false, false, false, true, true, true, false, false, true, false, true, true, true, true, false, true, false, true, false, true, true, false, true, true, true, false, false, false, false, true, true, true, true, true, false, false, true, true, true, false, false, true, false, false, false, false, false, false, false, false, false, true, true, true, false, false, true, false, true, true, false, false, false, true, true, false, true, true, false, true, true, false, true, true, true, false, false, false, false]);
            let encoded = BinVector::from_bools(&[true, false, false, true, true, false, true, true, true, false, false, true, false, false, true, false, true, true, true, false, true, false, false, false, true, false, false, false, false, true, false, true, true, false, false, false, true, true, true, false, true, false, false, false, true, true, true, false, false, true, false, true, true, true, true, false, true, false, true, false, true, true, false, true, true, true, false, false, false, false, true, true, true, true, true, false, false, true, true, true, false, false, true, false, false, false, false, false, false, false, false, false, true, true, false, true, false, false, true, false, true, true, false, false, false, true, true, false, true, true, true, false, true, true, false, true, true, true, true, false, false, false, false, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, true, false, true, true, true, false, false, true, false, false, true, false, true, true, true, false, true, false, false, false, true, false, false, false, false, true, false, true, true, false, false, false, true, true, true, false, true, false, false, false, true, true, true, false, false, true, false, true, true, true, true, false, true, false, true, false, true, true, false, true, true, true, false, false, false, false, true, true, true, true, true, false, false, true, true, true, false, false, true, false, false, false, false, false, false, false, false, false, true, true, false, true, false, false, true, false, true, true, false, true, false, true, true, false, true, true, true, false, true, true, false, true, true, true, true, false, false, false, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, false, true, true, true, true, false, false, true, true, true, false, false, true, false, false, true, true, false, false, true, true, true, true, true, true, true, false, true, false, true, true, true, false, true, false, true, false, true, true, true, false, false, false, false, false, false, true, true, true, true, false, true, true, false, true, true, true, true, false, true, true, true, true, true, false, false, false, true, false, true, false, false, true, true, false, true, false, false, true, true, true, false, true, false, false, true, true, true, true, true, false, false, false, true, false, true, false, false, false, true, true, false, false, true, true, true, false, true, false, true, true, true, false, false, true, false]);
            let encoded = BinVector::from_bools(&[false, false, false, false, false, true, true, true, true, false, false, true, true, true, false, false, true, false, false, true, true, false, false, true, true, true, true, true, true, true, false, true, false, true, true, true, false, true, false, true, false, true, true, true, false, false, false, false, false, false, true, true, true, true, false, true, true, false, true, true, true, true, false, true, true, true, true, true, false, false, false, true, false, true, false, false, true, true, false, true, false, false, true, true, true, false, true, false, false, true, true, true, true, true, false, false, false, false, true, false, true, false, false, false, true, true, false, false, true, true, true, true, false, true, false, true, true, true, true, false, false, true, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, false, true, true, true, true, false, false, true, true, true, false, false, true, false, false, true, true, false, false, true, true, true, true, true, true, true, false, true, false, true, true, true, false, true, false, true, false, true, true, true, false, false, false, false, false, false, true, true, true, true, false, true, true, false, true, true, true, true, false, true, true, true, true, true, false, false, true, true, false, true, false, false, true, true, false, true, false, false, true, true, true, false, true, false, false, true, true, true, true, true, false, false, false, false, true, false, true, false, false, false, true, true, false, false, true, true, true, true, false, true, false, true, true, true, true, false, false, true, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, false, true, false, false, true, true, false, false, false, true, false, false, true, true, false, true, true, true, false, true, true, false, true, true, true, true, false, true, false, true, true, false, true, true, true, false, false, true, false, false, false, true, true, false, false, false, true, true, true, false, true, true, true, true, false, false, false, true, false, false, false, true, true, false, false, true, true, false, true, false, false, false, true, false, false, true, false, true, true, false, true, false, true, false, false, true, false, true, true, true, false, false, false, true, false, true, true, false, true, false, true, false, false, true, true, false, true, true, true, true, false, false, true, false, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, false, true, false, false, true, true, false, false, false, true, false, false, true, true, false, true, true, true, false, true, true, false, true, true, true, true, false, true, false, true, true, false, true, true, true, false, false, true, false, false, false, true, true, false, false, false, true, true, true, false, true, true, true, true, false, false, false, true, false, false, false, true, true, false, false, true, true, false, true, false, false, false, true, false, false, true, false, true, true, false, true, false, true, false, false, true, false, true, true, true, false, false, false, false, true, false, true, true, false, true, false, true, false, false, true, true, false, false, true, true, true, true, false, false, false, true, false, true, false, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, false, true, false, false, true, true, false, false, false, true, false, false, true, true, false, true, true, true, false, true, true, false, true, true, true, true, false, true, false, true, true, false, true, true, true, false, false, true, false, false, false, true, true, false, false, false, true, true, true, false, true, true, true, true, false, false, false, true, false, false, false, true, true, false, false, true, true, false, true, false, false, false, true, false, false, true, false, true, true, false, true, false, true, true, false, true, false, true, true, true, false, false, false, false, true, false, true, true, false, true, false, true, false, false, true, true, false, false, true, true, true, true, false, false, false, true, false, true, false, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, false, true, true, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, true, true, true, false, true, false, false, true, false, true, false, true, false, false, true, true, false, true, true, false, true, true, true, false, false, true, false, false, false, true, false, true, false, false, true, false, true, true, false, false, true, true, true, true, true, false, false, true, true, true, false, true, false, true, true, true, false, true, false, false, false, true, false, true, true, false, true, true, true, true, true, false, true, false, true, false, true, true, true, false, true, false, false, true, false, false, false, true, true, true, true, true, false, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, true, false, true, true, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, true, true, true, false, true, false, false, true, false, true, false, true, false, false, true, true, false, true, true, false, true, true, true, false, false, true, false, false, false, true, false, true, false, false, true, false, true, true, false, false, true, true, true, true, true, false, false, true, true, true, false, true, false, true, true, true, false, true, false, false, false, true, false, true, true, false, true, true, true, true, true, true, false, true, false, true, false, true, true, true, false, true, false, false, true, false, false, false, false, true, true, true, true, false, true, false, true, false, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, false, true, true, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, true, true, true, false, true, false, false, true, false, true, false, true, false, false, true, true, false, true, true, false, true, true, true, false, false, true, false, false, false, true, false, true, false, false, true, false, true, true, false, false, false, true, true, true, true, false, false, true, true, true, false, true, false, true, true, true, false, true, false, false, false, true, false, true, true, false, true, true, true, true, true, true, false, true, false, true, false, true, true, true, false, true, false, false, true, false, false, false, false, true, true, true, true, false, true, false, true, false, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, false, false, true, false, false, false, false, true, true, true, true, false, false, false, true, false, false, true, false, true, false, true, true, true, false, false, true, false, true, true, true, true, false, true, false, false, false, false, false, true, false, false, true, false, false, false, true, true, true, false, false, true, true, true, false, true, false, false, false, false, true, true, true, false, true, false, false, false, true, true, false, false, true, false, false, true, false, false, false, false, false, false, true, false, true, false, true, true, true, false, false, false, false, false, false, false, true, false, true, false, true, true, false, true, false, true, true, false, false, true, false, true, true, false, true, false]);
            let encoded = BinVector::from_bools(&[true, false, false, false, false, false, true, false, false, false, false, true, true, true, true, false, false, false, true, false, false, true, false, true, false, true, true, true, false, false, true, false, true, true, true, true, false, true, false, false, false, false, false, true, false, false, true, false, false, false, true, true, true, false, false, true, true, true, false, true, false, false, false, false, true, true, true, false, true, false, false, false, true, true, false, false, true, false, false, true, false, false, false, false, false, false, true, false, true, false, true, true, true, false, true, false, false, false, false, false, false, true, false, true, false, true, true, false, true, false, false, true, true, false, false, true, false, true, false, true, false, true, false, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, false, false, true, false, false, false, false, true, true, true, true, false, false, false, true, false, false, true, false, true, false, true, true, true, false, false, true, false, true, true, true, true, false, true, false, false, false, false, false, true, false, false, true, false, false, false, true, true, true, false, false, true, true, true, false, true, false, false, false, false, true, true, true, false, true, false, false, false, true, true, false, false, true, false, false, true, false, true, false, false, false, false, true, false, true, false, true, true, true, false, true, false, false, false, false, false, false, true, false, true, false, true, true, false, true, false, false, true, true, false, false, true, false, true, false, true, false, true, false, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, false, true, true, false, false, false, false, false, false, true, true, true, true, false, false, true, false, false, true, true, true, false, true, true, false, false, true, false, true, false, false, true, true, true, false, false, true, true, true, false, true, false, false, false, false, true, true, true, true, true, false, true, true, false, false, true, true, true, false, true, false, false, true, false, true, false, true, false, true, true, true, false, true, false, false, true, true, false, false, true, false, false, false, false, false, false, false, false, false, true, false, false, true, false, true, true, true, true, true, true, true, false, false, true, true, true, false, true, false, false, false, true, true, false, true, true]);
            let encoded = BinVector::from_bools(&[true, false, true, true, false, true, true, false, false, false, false, false, false, true, true, true, true, false, false, true, false, false, true, true, true, false, true, true, false, false, true, false, true, false, false, true, true, true, false, false, true, true, true, false, true, false, false, false, false, true, true, true, true, true, false, true, true, false, false, true, true, true, false, true, false, false, true, false, true, false, true, false, true, true, true, false, true, false, false, true, true, false, false, true, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false, true, true, true, true, true, true, true, false, false, true, true, true, true, false, true, false, false, false, true, true, true, false, true, false, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, false, true, true, false, false, false, false, false, false, true, true, true, true, false, false, true, false, false, true, true, true, false, true, true, false, false, true, false, true, false, false, true, true, true, false, false, true, true, true, false, true, false, false, true, false, true, true, true, true, true, false, true, true, false, false, true, true, true, false, true, false, false, true, false, true, false, true, false, true, true, true, false, true, false, false, true, true, false, false, true, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false, true, true, true, true, true, true, true, false, false, true, true, true, true, false, true, false, false, false, true, true, true, false, true, false, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, true, false, false, false, false, true, false, false, true, false, true, true, true, true, false, true, false, false, false, false, true, true, false, true, false, false, false, false, true, true, false, true, true, true, true, false, true, false, false, true, true, true, true, true, true, false, true, true, true, false, false, true, true, true, true, true, true, true, true, false, true, false, false, false, false, false, true, true, true, true, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, true, true, false, false, true, false, true, false, true, false, true, false, true, false, true, true, true, true, false, false, false, false, true, true, false, true, false, true, true, true, false]);
            let encoded = BinVector::from_bools(&[true, true, true, true, true, false, false, false, false, true, false, false, true, false, true, true, true, true, false, true, false, false, false, false, true, true, false, true, false, false, false, false, true, true, false, true, true, true, true, false, true, false, false, true, true, true, true, true, true, false, true, true, true, false, false, true, true, true, true, true, true, true, true, false, true, false, false, false, false, false, true, true, true, true, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, true, true, false, false, true, true, false, true, false, true, false, true, false, true, false, true, true, true, true, false, false, false, false, false, true, true, false, true, false, true, true, true, true, false, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, true, false, false, false, false, true, false, false, true, false, true, true, true, true, false, true, false, false, false, false, true, true, false, true, false, false, false, false, true, true, false, true, true, true, true, false, true, false, false, true, true, true, true, true, true, false, true, true, true, false, false, true, true, true, true, true, true, true, true, false, true, false, false, false, false, false, true, true, true, true, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, true, true, false, false, true, true, false, true, false, true, false, true, false, true, false, true, true, true, true, false, false, false, false, false, true, true, false, true, false, true, true, true, true, false, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, true, true, true, true, true, false, true, false, true, false, true, true, true, true, true, true, true, false, true, true, true, true, false, true, true, true, true, false, true, false, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, false, true, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, true, true, true, true, true, true, false, true, false, true, false, true, true, false, true, true, true, false, true, false, true, false, false, true, false, false, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, true, true, false, true, true, true, false]);
            let encoded = BinVector::from_bools(&[false, false, true, true, true, true, true, true, true, false, true, false, true, false, true, true, true, true, true, true, true, false, true, true, true, true, false, true, true, true, true, false, true, false, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, false, true, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, true, true, true, true, true, true, false, true, false, true, false, true, true, false, true, true, true, false, true, false, true, false, false, true, false, false, false, false, true, true, false, true, false, true, false, true, false, true, false, true, false, false, true, true, false, true, true, false, true, true, true, true, false, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, true, true, true, true, true, false, true, false, true, false, true, true, true, true, true, true, true, false, true, true, true, false, false, true, true, true, true, false, true, false, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, false, true, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, true, true, true, true, true, true, false, true, false, true, false, true, true, false, true, true, true, false, true, false, true, false, false, true, false, false, false, false, true, true, false, true, false, true, false, true, false, true, false, true, false, false, true, true, false, true, true, false, true, true, true, true, false, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, false, true, true, true, false, false, true, false, false, false, false, false, true, false, false, true, false, true, false, true, true, false, false, true, true, false, true, false, false, false, false, false, true, false, false, true, true, false, true, true, true, false, false, true, true, false, true, true, true, false, true, true, true, true, false, false, true, true, true, false, false, true, true, true, false, true, false, true, true, true, false, false, false, false, true, true, true, true, true, true, false, true, false, false, false, true, true, false, true, false, true, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, true, false, true, false, true, true, false, false, false, true]);
            let encoded = BinVector::from_bools(&[false, false, false, false, false, true, true, true, false, false, true, false, false, false, false, false, true, false, false, true, false, true, false, true, true, false, false, true, true, false, true, false, false, false, false, false, true, false, false, true, true, false, true, true, true, false, false, true, true, false, true, true, true, false, true, true, true, true, false, false, true, true, true, false, false, true, true, true, false, true, false, true, true, true, false, false, false, false, true, true, true, true, true, true, false, true, false, false, false, true, true, false, true, false, true, true, false, true, false, false, false, true, false, false, false, true, false, false, false, false, false, true, true, false, true, false, true, true, false, false, false, false, true, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, false, true, true, true, false, false, true, false, false, false, false, false, true, false, false, true, false, true, false, true, true, false, false, true, true, false, true, false, false, false, false, false, true, false, false, true, true, false, true, true, true, false, false, true, true, false, true, true, true, false, true, true, true, true, false, false, true, true, true, false, false, true, true, true, false, true, false, true, true, true, false, false, false, false, true, true, true, false, true, true, false, true, false, false, false, true, true, false, true, false, true, true, false, true, false, false, false, true, false, false, false, true, false, false, false, false, false, true, true, false, true, false, true, true, false, false, false, false, true, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, true, false, true, false, false, true, false, true, true, true, false, false, true, true, false, true, false, false, true, true, true, true, true, false, false, true, false, false, true, true, true, false, false, false, true, true, true, false, true, false, true, true, true, true, false, false, false, true, false, true, true, false, false, true, false, true, false, true, true, false, false, false, true, true, false, true, false, false, false, true, true, false, false, false, false, true, false, true, true, true, true, true, false, true, false, false, false, false, false, true, false, true, false, false, false, true, true, true, false, true, true, true, false, false, true, false, true, true, false, true, true, false, true, true, true, false]);
            let encoded = BinVector::from_bools(&[true, true, true, false, true, false, true, false, false, true, false, true, true, true, false, false, true, true, false, true, false, false, true, true, true, true, true, false, false, true, false, false, true, true, true, false, false, false, true, true, true, false, true, false, true, true, true, true, false, false, false, true, false, true, true, false, false, true, false, true, false, true, true, false, false, false, true, true, false, true, false, false, false, true, true, false, false, false, false, true, false, true, true, true, true, true, false, true, false, false, false, false, false, true, true, false, true, false, false, false, true, true, true, false, true, true, true, false, false, true, false, false, true, true, false, true, true, false, false, true, true, true, false, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, true, false, true, false, false, true, false, true, true, true, false, false, true, true, false, true, false, false, true, true, true, true, true, false, false, true, false, false, true, true, true, false, false, false, true, true, true, false, true, false, true, true, true, true, false, false, false, true, false, true, true, false, false, true, false, true, false, true, true, false, false, false, true, true, false, true, false, false, false, true, true, false, false, false, false, true, false, true, true, true, true, true, false, true, false, false, false, false, false, true, false, false, true, false, false, false, true, true, true, false, true, true, true, false, false, true, false, false, true, true, false, true, true, false, false, true, true, true, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, true, false, false, true, false, false, true, false, false, true, true, false, false, true, false, false, true, false, true, false, true, false, false, true, true, false, true, false, false, false, true, false, false, true, false, true, false, true, true, true, true, true, false, true, false, true, false, false, true, true, true, false, false, false, true, false, false, false, true, true, true, false, true, true, true, false, true, true, true, true, false, false, true, false, true, true, false, true, true, true, true, false, true, false, false, false, false, true, false, true, true, false, false, true, true, true, false, false, true, true, true, false, true, true, true, true, true, true, true, false, true, true, true, false, false, true]);
            let encoded = BinVector::from_bools(&[true, true, false, false, true, false, false, true, false, false, true, false, false, true, true, false, false, true, false, false, true, false, true, false, true, false, false, true, true, false, true, false, false, false, true, false, false, true, false, true, false, true, true, true, true, true, false, true, false, true, false, false, true, true, true, false, false, false, true, false, false, false, true, true, true, false, true, true, true, false, true, true, true, true, false, false, true, false, true, true, false, true, true, true, true, false, true, false, false, false, false, true, false, true, false, true, false, false, true, true, true, false, false, true, true, true, false, true, true, true, true, true, true, true, true, false, true, true, false, true, false, false, true, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, true, false, false, true, false, false, true, false, false, true, true, false, false, true, false, false, true, false, true, false, true, false, false, true, true, false, true, false, false, false, true, false, false, true, false, true, false, true, true, true, true, true, false, true, false, true, false, false, true, true, true, false, false, false, true, false, false, false, true, true, true, false, true, true, true, false, true, true, true, true, false, false, true, false, true, true, false, true, true, false, true, false, true, false, false, false, false, true, false, true, false, true, false, false, true, true, true, false, false, true, true, true, false, true, true, true, true, true, true, true, true, false, true, true, false, true, false, false, true, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, false, true, true, true, false, true, false, false, false, true, false, false, true, false, true, false, true, false, true, true, false, false, false, false, true, false, false, true, true, true, false, false, true, true, true, true, false, false, true, true, false, false, false, true, true, true, false, false, true, true, false, true, false, true, false, true, false, false, false, false, false, true, true, true, true, true, false, true, false, false, false, false, true, true, true, true, true, true, true, false, true, true, false, false, false, false, true, true, true, false, false, false, false, true, false, false, false, true, true, false, false, true, true, false, false, true, false, false, false, false, true, false, false, false, false, false]);
            let encoded = BinVector::from_bools(&[true, false, false, true, false, true, true, true, false, true, false, false, false, true, false, false, true, false, true, false, true, false, true, true, false, false, false, false, true, false, false, true, true, true, false, false, true, true, true, true, false, false, true, true, false, false, false, true, true, true, false, false, true, true, false, true, false, true, false, true, false, false, false, false, false, true, true, true, true, true, false, true, false, false, false, false, true, true, true, true, true, true, true, false, true, true, false, false, false, false, true, true, true, false, true, false, false, false, true, false, false, false, true, true, false, false, true, true, false, false, false, true, false, false, false, false, true, false, false, false, false, false, false, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, false, true, true, true, false, true, false, false, false, true, false, false, true, false, true, false, true, false, true, true, false, false, false, false, true, false, false, true, true, true, false, false, true, false, true, true, false, false, true, true, false, false, false, true, true, true, false, false, true, true, false, true, false, true, false, true, false, false, false, false, false, true, true, true, true, true, false, true, false, false, false, false, true, true, true, true, true, true, true, false, true, true, false, false, false, false, true, true, true, false, true, false, false, false, true, false, false, false, true, true, false, false, true, true, false, false, false, true, false, false, false, false, true, false, false, false, false, false, false, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, true, false, true, false, false, true, false, true, true, true, false, false, false, false, true, false, false, true, false, false, false, false, true, true, false, true, false, true, true, false, true, true, false, false, true, true, false, true, false, true, false, false, true, false, true, true, true, true, true, false, false, false, true, false, true, false, false, false, false, false, false, true, false, false, true, false, true, true, false, true, false, true, true, true, true, true, true, true, true, true, false, true, true, false, false, true, true, true, false, false, true, true, true, false, true, false, true, false, true, false, true, true, true, true, false, true, true, false, true, true, true, true, false, false, false, false]);
            let encoded = BinVector::from_bools(&[true, true, true, false, true, false, true, false, false, true, false, true, true, true, false, false, false, false, true, false, false, true, false, false, false, false, true, true, false, true, false, true, true, false, true, true, false, false, true, true, false, true, false, true, false, false, true, false, true, true, true, true, true, false, false, false, true, false, true, false, false, false, false, false, false, true, false, false, true, false, true, true, false, true, false, true, true, true, true, true, true, true, true, true, false, true, true, false, false, true, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, true, true, true, true, false, true, true, true, false, true, true, true, true, false, false, false, false, false, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, true, false, true, false, false, true, false, true, true, true, false, false, false, true, true, false, false, true, false, false, false, false, true, true, false, true, false, true, true, false, true, true, false, false, true, true, false, true, false, true, false, false, true, false, true, true, true, true, true, false, false, false, true, false, true, false, false, false, false, false, false, true, false, false, true, false, true, true, false, true, false, true, true, true, true, true, true, true, true, true, false, true, true, false, false, true, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, true, true, true, true, false, true, true, true, false, true, true, true, true, false, false, false, false, false, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, true, true, true, true, true, true, true, true, true, false, false, false, true, true, true, false, false, true, true, false, true, true, true, false, false, true, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, true, true, false, true, true, false, false, false, true, true, true, false, true, true, true, true, true, false, true, true, true, true, false, false, true, false, false, true, false, false, false, true, true, true, true, true, false, true, false, false, true, true, true, true, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, false, true, false, false, true, true, false, false, true, true, true, true, true, true, true, true]);
            let encoded = BinVector::from_bools(&[false, false, false, false, true, true, true, true, true, true, true, true, true, false, false, false, true, true, true, false, false, true, true, false, true, true, true, false, false, true, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, true, true, false, true, true, false, false, false, true, true, true, false, true, true, true, true, true, false, true, true, true, true, false, false, true, false, false, true, false, false, false, true, true, true, true, true, false, true, false, false, true, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, false, true, false, false, true, true, true, false, false, true, true, true, true, true, true, true, true, true, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, true, true, true, true, true, true, true, true, true, false, false, false, true, true, true, false, false, true, true, false, true, true, true, false, false, true, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, true, true, false, true, true, false, false, false, true, true, true, false, true, true, true, true, true, false, true, true, true, true, false, false, true, false, false, true, false, false, false, true, true, true, true, true, false, true, false, false, true, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, false, false, true, true, true, false, false, true, true, true, true, true, true, true, true, true, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, false, true, false, false, true, true, true, false, true, true, true, false, false, false, false, true, false, true, false, false, false, true, true, false, true, true, false, true, false, true, true, true, false, true, true, false, true, false, true, true, true, false, true, false, false, false, true, false, true, true, true, true, true, true, false, false, false, true, true, false, false, true, true, true, false, false, false, true, true, false, true, false, true, false, true, true, false, false, true, false, false, true, false, true, true, false, false, true, false, true, true, false, true, true, false, false, true, true, false, false, false, true, true, false, true, false, false, false, false, false, false, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[false, false, false, true, false, true, false, false, true, true, true, false, true, true, true, false, false, false, false, true, false, true, false, false, false, true, true, false, true, true, false, true, false, true, true, true, false, true, true, false, true, false, true, true, true, false, true, false, false, false, true, false, true, true, true, true, true, true, false, false, false, true, true, false, false, true, true, true, false, false, false, true, true, false, true, false, true, false, true, true, false, false, true, false, false, true, false, true, true, false, false, true, false, true, true, true, false, true, true, false, false, true, true, false, false, false, true, true, false, true, true, false, false, false, false, false, false, true, false, true, true, false, true, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, false, true, false, false, true, true, true, false, true, true, true, false, false, false, false, true, false, true, false, false, false, true, true, false, true, true, false, true, false, true, true, true, false, true, true, false, true, false, true, true, true, false, true, false, false, false, true, false, true, true, true, true, true, true, false, false, false, true, true, false, false, true, true, true, false, false, false, true, true, false, true, true, true, false, true, true, false, false, true, false, false, true, false, true, true, false, false, true, false, true, true, true, false, true, true, false, false, true, true, false, false, false, true, true, false, true, true, false, false, false, false, false, false, true, false, true, true, false, true, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, true, false, true, true, false, false, true, true, true, false, true, true, true, false, true, false, false, true, true, false, false, true, false, false, true, false, false, true, true, true, false, true, true, true, true, false, true, true, true, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, false, true, true, false, false, false, true, false, false, false, false, false, true, true, true, true, true, true, true, true, false, false, true, true, false, true, true, false, true, true, true, true, false, true, true, true, false, false, false, true, true, false, true, true, true, true, true, false, true, true, true, true, true, true, true, false, true, false, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, true, false, true, true, false, false, true, true, true, false, true, true, true, false, true, false, false, true, true, false, false, true, false, false, true, false, false, true, true, true, false, true, true, true, true, false, true, true, true, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, false, true, true, false, false, false, true, false, false, false, false, false, true, true, true, true, true, true, true, true, false, false, true, true, false, true, true, false, true, true, true, true, false, true, true, true, true, false, false, false, true, true, false, true, true, true, true, true, false, true, false, true, true, true, true, true, true, false, false, true, false, false, true, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, true, false, true, true, false, false, true, true, true, false, true, true, false, false, true, false, false, true, true, false, false, true, false, false, true, false, false, true, true, true, false, true, true, true, true, false, true, true, true, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, false, true, true, false, false, false, true, false, false, false, false, false, true, true, true, true, true, true, true, true, false, false, true, true, false, true, true, false, true, true, true, true, false, true, true, true, true, false, false, false, true, true, false, true, true, true, true, true, false, true, false, true, true, true, true, true, true, false, false, true, false, false, true, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, true, false, false, false, false, true, true, false, true, false, true, false, false, true, true, false, false, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, false, true, true, false, false, true, false, false, false, true, false, true, true, false, false, false, true, true, false, false, false, true, false, true, false, false, true, true, true, true, true, true, false, false, true, true, true, false, true, true, false, false, false, false, false, true, true, false, false, false, false, true, true, false, true, false, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, true, false, true, true, true, false, false, true, true, false, false, false, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, true, false, false, false, false, true, true, false, true, false, true, false, false, true, true, false, false, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, false, true, true, false, false, true, false, false, false, true, false, true, true, false, false, false, true, true, false, false, false, true, false, true, false, false, true, true, true, true, true, true, false, false, true, true, true, false, true, true, false, false, false, false, false, true, true, false, false, false, false, true, true, false, true, false, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, true, false, true, true, true, true, false, false, true, true, true, false, false, false, true, false, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, true, false, false, false, false, true, true, false, true, false, true, false, false, true, true, false, false, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, false, true, true, false, false, true, false, false, false, true, false, true, true, false, false, false, true, true, false, false, false, true, false, true, false, false, true, true, true, true, true, true, false, false, true, true, false, false, true, true, false, false, false, false, false, true, true, false, false, false, false, true, true, false, true, false, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, true, false, true, true, true, true, false, false, true, true, true, false, false, false, true, false, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, true, false, true, false, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, true, true, true, false, true, true, true, true, false, false, true, true, false, false, true, true, true, true, false, true, false, true, true, true, false, false, false, true, false, false, true, true, true, false, true, true, true, true, true, true, true, false, false, true, true, false, false, false, true, false, true, true, true, false, false, false, false, true, true, true, false, false, true, true, false, true, false, true, false, false, true, true, true, false, true, true, false, true, false, false, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, true, true]);
            let encoded = BinVector::from_bools(&[false, true, false, true, true, false, true, false, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, true, true, true, false, true, true, true, true, false, false, true, true, false, false, true, true, true, true, false, true, false, true, true, true, false, false, false, true, false, false, true, true, true, false, true, true, true, true, true, true, true, false, false, true, true, false, false, false, true, false, true, true, true, false, false, false, false, true, true, true, false, false, true, true, false, true, false, true, false, false, true, true, true, true, false, true, true, false, true, false, false, false, false, true, false, true, false, true, true, false, true, true, false, false, true, false, false, true, true, false, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, true, false, true, false, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, true, true, true, false, true, true, true, true, false, false, true, true, false, false, true, true, true, true, false, true, false, true, true, true, false, false, false, true, false, false, true, true, true, false, true, true, true, true, true, true, true, false, false, true, true, false, false, false, true, false, true, true, true, false, false, false, false, true, true, true, false, false, true, true, false, true, false, true, false, false, true, true, true, true, false, true, true, false, true, false, false, false, false, true, false, true, false, true, true, false, true, true, true, false, true, false, false, true, true, false, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, true, true, true, true, true, true, false, false, true, false, false, false, true, false, true, true, true, true, false, true, true, true, true, false, false, false, true, false, false, true, false, true, true, true, false, false, false, false, true, false, false, true, false, true, false, false, false, true, true, false, false, true, false, true, false, true, false, true, true, true, false, false, false, true, true, false, false, true, false, false, true, false, true, true, false, true, false, false, true, false, false, false, false, true, false, true, true, true, false, true, false, true, false, false, false, false, true, true, true, true, false, false, false, true, false, false, true, false, false, true, false, false, false, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, true, false, true, true, true, true, true, true, false, false, true, false, false, false, true, false, true, true, true, true, false, true, true, true, true, false, false, false, true, false, false, true, false, true, true, true, false, false, false, false, true, false, false, true, false, true, false, false, false, true, true, false, false, true, false, true, false, true, false, true, true, true, false, false, false, true, true, false, false, true, false, false, true, false, true, true, false, true, false, false, true, false, false, false, false, true, false, true, true, true, false, true, false, false, true, false, false, false, false, true, true, true, true, false, false, false, true, false, true, false, true, false, false, true, false, false, false, false, true, false, false, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, true, true, true, true, true, true, false, true, true, false, false, false, true, false, true, true, true, true, false, true, true, true, true, false, false, false, true, false, false, true, false, true, true, true, false, false, false, false, true, false, false, true, false, true, false, false, false, true, true, false, false, true, false, true, false, true, false, true, true, true, false, false, false, true, true, false, false, true, false, false, true, false, true, true, false, true, false, false, true, false, false, false, false, true, false, true, true, true, false, true, false, false, true, false, false, false, false, true, true, true, true, false, false, false, true, false, true, false, true, false, false, true, false, false, false, false, true, false, false, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, false, true, false, true, false, false, false, true, true, false, false, true, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false, false, true, false, true, false, false, false, true, false, true, false, false, true, true, false, false, false, true, false, true, true, true, true, false, false, false, false, true, true, false, false, false, false, false, true, true, false, false, true, true, true, false, true, true, false, false, false, true, false, false, true, false, true, true, true, false, true, false, false, false, false, false, false, true, false, true, true, false, false, false, false, false, true, true, false, true, true, true, false, false, true, false, false, true, false, true, false, true, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, false, true, false, true, false, false, false, true, true, false, false, true, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false, false, true, false, true, false, false, false, true, false, true, false, false, true, true, false, false, false, true, false, true, true, true, true, false, false, false, false, true, true, false, false, false, false, false, true, true, false, false, true, true, true, false, true, true, false, false, false, true, false, false, true, false, true, true, true, false, true, false, false, false, false, false, false, false, true, false, true, true, false, false, false, false, false, true, true, false, true, true, true, false, false, false, true, false, false, true, false, true, true, false, true, false, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, false, true, false, true, false, false, false, true, true, false, false, true, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false, false, true, false, true, false, false, false, true, false, true, false, false, true, true, false, false, false, true, false, true, true, true, true, false, false, false, false, true, true, false, false, false, false, false, true, true, false, false, true, true, true, false, true, false, false, false, false, true, false, false, true, false, true, true, true, false, true, false, false, false, false, false, false, false, true, false, true, true, false, false, false, false, false, true, true, false, true, true, true, false, false, false, true, false, false, true, false, true, true, false, true, false, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, true, false, true, true, false, true, false, true, false, true, false, true, true, false, true, false, true, false, false, true, true, true, true, false, true, false, false, false, true, true, true, false, true, false, true, false, false, false, false, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, false, true, true, false, true, false, true, true, true, true, true, true, true, true, true, true, false, false, true, false, false, true, false, true, false, false, true, true, true, false, false, true, false, false, true, false, true, true, false, false, true, false, true, false, true, false, true, false, false, false, false, false, false, true, false, true, false, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, false, true, true, false, true, true, false, true, false, true, false, true, false, true, true, false, true, false, true, false, false, true, true, true, true, false, true, false, false, false, true, true, true, false, true, false, true, false, false, false, false, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, false, true, true, false, true, false, true, true, true, true, true, true, true, true, true, true, false, false, true, false, false, true, false, true, false, false, true, true, true, false, false, true, false, false, true, false, false, true, true, false, false, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, true, false, true, false, true, true, false, false, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, true, false, true, true, false, true, false, true, false, true, false, true, true, false, true, false, true, false, false, true, true, true, true, false, true, false, false, false, true, true, true, false, true, false, true, false, false, false, false, true, true, true, true, false, true, true, true, false, true, true, true, true, true, true, false, true, true, false, true, false, true, true, true, true, true, true, true, true, true, true, false, false, true, false, false, true, false, true, false, false, true, true, true, false, false, true, false, false, true, false, false, true, true, false, false, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, true, false, true, false, true, true, false, false, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, true, true, true, true, true, false, false, true, false, false, false, true, false, false, true, true, true, false, true, true, false, true, false, false, true, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, true, false, true, true, false, true, false, false, true, false, true, false, true, true, false, true, false, false, true, false, false, false, false, true, true, true, true, true, false, false, true, true, true, false, true, true, true, true, true, true, false, false, false, false, true, false, true, true, true, true, false, false, false, false, false, true, false, true, true, false, true, false, true, false, true, true, true, false, false, true, false, false, true, false, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, true, true, true, true, true, true, false, false, true, false, false, false, true, false, false, true, true, true, false, true, true, false, true, false, false, true, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, true, false, true, true, false, true, false, false, true, false, true, false, true, true, false, true, false, false, true, false, false, false, false, true, true, true, true, true, false, false, true, true, true, false, true, true, true, true, true, true, false, false, false, false, true, false, true, true, true, true, true, false, false, false, false, false, true, false, true, true, false, true, false, true, false, true, true, true, true, false, false, true, false, false, true, true, false, true, false, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, true, true, true, true, true, false, false, true, false, false, false, true, false, false, true, true, true, false, true, true, false, true, false, false, true, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, true, false, true, true, false, true, false, false, true, false, true, false, true, true, false, true, false, false, true, false, false, false, false, true, true, true, true, true, false, false, true, true, true, false, true, true, false, true, true, true, false, false, false, false, true, false, true, true, true, true, true, false, false, false, false, false, true, false, true, true, false, true, false, true, false, true, true, true, true, false, false, true, false, false, true, true, false, true, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, false, true, false, false, false, false, false, false, false, true, true, true, false, false, true, false, false, false, false, true, false, false, true, true, false, true, false, true, false, true, true, true, false, true, true, false, false, false, false, false, true, false, true, false, false, true, false, true, false, false, true, false, false, false, false, true, true, true, false, true, true, false, false, false, false, true, true, true, false, true, true, false, false, false, false, false, false, false, false, false, true, false, true, true, true, true, true, true, true, true, false, true, true, true, false, true, false, false, true, true, true, false, true, false, true, false, false, true, false, true, false, true, false, true, true, false]);
            let encoded = BinVector::from_bools(&[true, false, true, true, false, true, false, false, false, false, false, false, false, true, true, true, false, false, true, false, false, false, false, true, false, false, true, true, false, true, false, true, false, true, true, true, false, true, true, false, false, false, false, false, true, false, true, false, false, true, false, true, false, false, true, false, false, false, false, true, true, true, false, true, true, false, false, false, false, true, true, true, false, true, true, false, false, false, false, false, false, false, false, false, true, false, true, true, true, true, true, true, true, true, false, false, true, true, true, false, true, false, false, true, true, true, false, true, false, true, false, false, false, true, false, true, false, true, false, false, true, true, false, false, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, false, true, false, false, false, false, false, false, true, true, true, true, false, false, true, false, false, false, false, true, false, false, true, true, false, true, false, true, false, true, true, true, false, true, true, false, false, false, false, false, true, false, true, false, false, true, false, true, false, false, true, false, false, false, false, true, true, true, false, true, true, false, false, false, false, true, true, true, false, true, true, false, false, false, false, false, false, false, false, false, true, false, true, true, true, true, true, true, true, true, false, false, true, true, true, false, true, false, false, true, true, true, false, true, false, true, false, false, false, true, false, true, false, true, false, false, true, true, false, false, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, false, false, true, false, true, false, true, true, false, false, true, true, true, false, true, false, true, true, false, false, true, false, false, false, false, false, false, true, true, false, false, false, false, false, true, true, true, false, false, true, false, true, false, true, false, false, true, false, true, true, true, false, true, true, true, true, false, false, false, false, true, false, false, false, true, true, false, false, true, true, true, true, true, true, true, true, true, false, false, true, false, true, false, false, false, false, false, false, false, false, true, false, true, false, false, true, true, true, false, true, true, true, false, false, true, true, false, false, true, true, false, false, true, false, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, false, false, false, true, false, true, false, true, true, false, false, true, true, true, false, true, false, true, true, false, false, true, false, false, false, false, false, false, true, true, false, false, false, false, false, true, true, true, false, false, true, false, true, false, true, false, false, true, false, true, true, true, false, true, true, true, true, false, false, false, false, true, false, false, false, true, true, false, false, true, true, true, true, true, true, true, true, true, false, false, true, false, true, false, false, false, false, false, false, false, false, false, true, false, true, false, false, true, true, true, false, true, true, true, false, false, true, false, true, false, false, true, true, false, false, false, true, false, true, true, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, false, false, true, false, true, false, true, true, true, false, true, true, true, false, true, false, true, true, false, false, true, false, false, false, false, false, false, true, true, false, false, false, false, false, true, true, true, false, false, true, false, true, false, true, false, false, true, false, true, true, true, false, true, true, true, true, false, false, false, false, true, false, false, false, true, true, false, false, true, true, true, true, true, true, true, true, true, false, false, true, false, true, false, false, false, false, false, false, false, false, false, true, false, true, false, false, true, true, true, false, true, true, true, false, false, true, false, true, false, false, true, true, false, false, false, true, false, true, true, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, false, false, true, false, true, false, false, false, true, true, false, false, true, true, true, false, true, true, true, true, false, true, true, true, false, false, false, false, false, false, true, false, true, false, false, false, true, false, true, false, true, false, true, false, true, true, false, false, false, false, true, true, false, true, false, true, true, true, false, false, true, true, false, true, true, false, true, false, false, false, true, false, true, false, false, true, false, true, false, false, false, false, false, false, true, false, false, false, false, true, true, false, false, true, true, true, true, true, false, false, false, true, true, false, true, false, false, true, false, true, true, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, false, false, false, false, true, false, true, false, false, false, true, true, false, false, true, true, true, false, true, true, true, true, false, true, true, true, false, false, false, false, false, false, true, false, true, false, false, false, true, false, true, false, true, false, true, false, true, true, false, false, false, false, true, true, false, true, false, true, true, true, false, false, true, true, false, true, true, false, true, false, false, false, true, false, true, false, false, true, false, true, false, false, false, false, false, false, true, false, false, false, false, true, true, true, false, false, true, true, true, true, true, false, false, false, true, true, false, true, false, false, false, true, false, true, true, true, true, true, true, false, false, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, false, false, true, false, true, false, false, false, true, true, false, false, true, true, true, false, true, true, true, true, false, true, true, true, false, false, false, false, false, false, true, false, true, false, false, false, true, false, true, false, true, false, true, false, true, false, false, false, false, false, true, true, false, true, false, true, true, true, false, false, true, true, false, true, true, false, true, false, false, false, true, false, true, false, false, true, false, true, false, false, false, false, false, false, true, false, false, false, false, true, true, true, false, false, true, true, true, true, true, false, false, false, true, true, false, true, false, false, false, true, false, true, true, true, true, true, true, false, false, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, false, true, true, true, false, true, false, true, true, true, false, true, true, false, true, false, false, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, false, false, false, true, true, true, true, true, true, true, false, true, false, true, true, true, true, true, true, true, true, false, false, false, false, false, false, true, true, false, false, true, true, false, false, true, false, true, true, false, false, false, false, false, true, false, false, true, true, true, true, false, false, true, true, false, true, true, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, true, false, true, false, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, true, false, true, true, true, false, true, false, true, true, true, false, true, true, false, true, false, false, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, false, false, false, true, true, true, true, true, true, true, false, true, false, true, true, true, true, true, true, true, true, false, false, false, false, false, false, true, true, false, false, true, true, false, false, true, false, true, true, false, false, false, false, false, true, false, false, true, true, true, true, false, false, true, true, false, false, true, true, true, false, false, true, false, true, false, true, false, true, false, true, true, false, true, false, true, true, true, false, true, true, false, false, false, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, false, true, true, true, false, true, false, true, true, true, false, true, true, false, true, false, false, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, false, false, false, true, true, true, true, true, true, true, false, true, false, true, true, true, true, true, true, true, true, false, false, false, false, false, false, true, true, false, false, true, true, false, false, true, false, true, true, false, false, false, false, false, true, false, false, true, true, true, true, false, false, true, true, false, false, true, true, true, false, false, true, false, true, false, true, false, true, false, true, true, true, true, false, true, true, true, false, true, true, false, false, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, false, true, true, true, true, true, true, false, false, false, false, false, true, false, false, false, true, true, true, true, true, true, true, true, true, true, true, false, true, true, false, false, false, false, true, true, true, false, false, false, true, true, true, true, true, false, false, false, false, false, true, false, false, true, true, true, false, true, false, true, false, false, false, false, false, false, true, false, false, true, false, false, true, true, false, true, true, true, true, false, true, true, true, false, true, true, false, true, false, true, true, false, false, true, true, true, true, false, true, true, true, true, true, false, false, true, true, false, false, true, true, true, false, false, true, true]);
            let encoded = BinVector::from_bools(&[true, false, false, false, false, true, true, true, true, true, true, false, false, false, false, false, true, false, false, false, true, true, true, true, true, true, true, true, true, true, true, false, true, true, false, false, false, false, true, true, true, false, false, false, true, true, true, true, true, false, false, false, false, false, true, false, false, true, true, true, false, true, false, true, false, false, false, false, false, false, true, false, false, true, false, false, true, true, false, true, true, true, true, false, true, true, true, false, true, true, false, true, false, true, true, true, false, false, true, true, true, true, false, true, true, true, true, true, false, false, false, true, true, false, false, true, true, true, false, false, false, true, true, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, false, true, true, true, true, true, true, false, false, false, false, false, true, false, false, false, true, true, true, true, true, true, true, true, true, true, true, false, true, true, false, false, false, false, true, true, true, false, false, false, true, true, true, true, true, false, false, false, false, false, true, false, false, true, true, true, false, true, false, true, false, false, false, false, false, false, true, false, false, true, false, false, true, true, false, true, true, true, true, true, true, true, true, false, true, true, false, true, false, true, true, true, false, false, true, true, true, true, false, true, true, true, true, true, false, false, false, true, true, false, false, true, true, true, false, false, false, true, true, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, true, true, true, true, true, false, true, false, false, true, false, true, false, false, false, true, true, false, true, true, true, false, true, false, false, true, false, false, false, true, false, true, false, false, true, false, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, false, false, true, true, false, true, true, false, false, false, false, false, true, false, true, true, true, false, true, true, false, false, false, false, true, true, false, false, false, true, false, true, true, false, false, false, true, true, true, true, true, true, false, false, true, true, false, false, true, true, true, false, true, false, false, true, false, false, false, true, false, true, true, false]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, true, true, true, true, true, false, true, false, false, true, false, true, false, false, false, true, true, false, true, true, true, false, true, false, false, true, false, false, false, true, false, true, false, false, true, false, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, false, false, true, true, false, true, true, false, false, false, false, false, true, false, true, true, true, false, true, true, false, false, false, false, true, true, false, false, false, true, false, true, true, false, false, false, true, true, false, true, true, true, true, false, false, true, true, false, false, true, true, true, false, true, true, false, false, true, false, false, false, true, true, false, true, true, false, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, true, true, true, true, true, false, true, false, false, true, false, true, false, false, false, true, true, false, true, true, true, false, true, false, false, true, false, false, false, true, false, true, false, false, true, false, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, false, false, true, true, false, true, true, false, false, false, false, false, true, false, true, true, true, false, true, true, false, false, true, false, true, true, false, false, false, true, false, true, true, false, false, false, true, true, false, true, true, true, true, false, false, true, true, false, false, true, true, true, false, true, true, false, false, true, false, false, false, true, true, false, true, true, false, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, false, true, true, false, false, false, true, true, true, true, false, false, true, false, false, true, true, true, false, false, true, true, true, false, false, false, false, false, true, false, false, false, false, true, false, false, false, true, true, true, true, true, false, false, true, true, true, true, true, true, false, true, true, true, true, false, true, false, false, false, true, false, true, true, true, true, true, true, false, true, true, true, false, false, false, true, true, true, true, false, true, false, false, true, false, false, false, false, true, false, false, false, false, true, true, false, true, false, false, true, false, true, true, false, false, true, false, false, true, true, true, true, true, true, true, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, false, true, true, false, false, false, true, true, true, true, false, false, true, false, false, true, true, true, false, false, true, true, true, false, false, false, false, false, true, false, false, false, false, true, false, false, false, true, true, true, true, true, false, false, true, true, true, true, true, true, false, true, true, true, true, false, true, false, false, false, true, false, true, true, true, true, true, true, false, true, true, true, false, false, false, true, true, true, true, false, true, false, false, true, false, false, false, false, true, false, true, false, false, false, true, true, false, true, false, false, true, false, true, true, false, false, false, true, false, false, true, true, true, true, false, true, true, true, false, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, false, true, true, false, false, false, true, true, true, true, false, false, true, false, false, true, true, false, false, false, true, true, true, false, false, false, false, false, true, false, false, false, false, true, false, false, false, true, true, true, true, true, false, false, true, true, true, true, true, true, false, true, true, true, true, false, true, false, false, false, true, false, true, true, true, true, true, true, false, true, true, true, false, false, false, true, true, true, true, false, true, false, false, true, false, false, false, false, true, false, true, false, false, false, true, true, false, true, false, false, true, false, true, true, false, false, false, true, false, false, true, true, true, true, false, true, true, true, false, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, true, false, false, true, true, true, false, true, false, false, false, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, true, false, false, false, true, true, false, true, true, false, true, false, false, false, false, true, false, false, true, true, true, true, false, true, false, false, false, false, false, true, true, false, false, false, false, false, true, false, false, true, true, true, true, false, false, false, false, true, false, false, false, true, true, false, false, false, true, false, false, true, false, false, false, false, true, false, true, false, false, true, true, false, true, true, false, false, true, true, true, false, true, true, true, false, false, false, true, false, true, true]);
            let encoded = BinVector::from_bools(&[false, false, false, true, true, false, false, true, true, true, false, true, false, false, false, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, true, false, false, false, true, true, false, true, true, false, true, false, false, false, false, true, false, false, true, true, true, true, false, true, false, false, false, false, false, true, true, false, false, false, false, false, true, false, false, true, true, true, true, false, false, false, false, true, false, false, false, true, true, false, false, false, true, false, false, true, false, false, false, false, true, true, false, true, false, false, true, true, false, true, true, false, false, true, true, true, true, false, true, true, true, false, false, false, false, true, false, true, true, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, true, false, false, true, true, true, false, true, false, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, true, false, false, false, true, true, false, true, true, false, true, false, false, false, false, true, false, false, true, true, true, true, false, true, false, false, false, false, false, true, true, false, false, false, false, false, true, false, false, true, true, true, true, false, false, false, false, true, false, false, false, true, true, false, false, false, true, false, false, true, false, false, false, false, true, true, false, true, false, false, true, true, false, true, true, false, false, true, true, true, true, false, true, true, true, false, false, false, false, true, false, true, true, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, false, true, false, true, true, true, true, true, true, false, true, false, true, true, true, false, true, true, true, false, false, false, false, false, true, false, true, false, false, true, true, true, true, true, false, false, true, true, true, false, true, true, false, false, true, true, false, false, false, false, false, true, true, true, true, false, true, true, true, false, true, false, false, true, true, true, false, false, true, true, false, true, true, true, false, true, true, false, false, false, false, false, false, true, false, true, true, true, false, false, false, true, true, true, true, false, false, false, false, true, false, false, true, false, true, true, true, false, false, false, false, true, true, true, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, true, false, true, false, true, true, true, true, true, true, false, true, false, true, true, true, false, true, true, true, false, false, false, false, false, true, false, true, false, false, true, true, true, true, true, false, false, true, true, true, false, true, true, false, false, true, true, false, false, false, false, false, true, true, true, true, false, true, true, true, false, true, false, false, true, true, true, false, false, true, true, false, true, true, true, false, true, true, false, false, false, false, false, false, true, false, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, false, false, true, false, true, true, true, true, false, false, false, false, true, false, true, true, true, true, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, false, true, false, true, true, true, true, true, true, false, true, false, true, true, true, false, true, true, true, false, false, false, false, false, true, false, true, false, false, true, true, true, true, true, false, false, true, true, true, false, true, true, false, false, true, true, false, false, false, false, false, true, true, true, true, false, true, true, true, false, true, false, false, true, true, true, false, false, true, true, false, true, true, true, false, true, true, false, false, false, false, false, false, true, false, true, true, true, true, false, false, false, true, true, true, true, false, false, false, false, true, false, false, true, false, true, true, true, true, false, false, false, false, true, false, true, true, true, true, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, false, true, true, false, false, true, true, true, false, true, true, true, false, false, false, false, false, true, false, true, true, true, true, false, true, true, false, false, false, false, false, true, true, true, true, true, false, false, true, true, true, false, false, true, true, true, false, true, false, true, true, false, true, false, false, true, false, true, false, false, false, true, false, false, true, true, false, false, false, true, false, false, false, false, true, false, false, true, false, true, false, false, true, true, false, true, false, false, true, false, false, true, true, true, true, false, false, true, false, false, false, false, false, false, false, false, false, true, false, true, false, false, true, false, false, false]);
            let encoded = BinVector::from_bools(&[true, false, false, false, false, true, true, false, false, true, true, true, false, true, true, true, false, false, false, false, false, true, false, true, true, true, true, false, true, true, false, false, false, false, false, true, true, true, true, true, false, false, true, true, true, false, false, true, true, true, false, true, false, true, true, false, true, false, false, true, false, true, false, false, false, true, false, false, true, true, false, false, false, true, false, false, false, false, true, false, false, true, false, true, false, false, true, true, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, false, false, false, false, false, false, false, true, false, false, true, false, true, false, false, true, true, false, false, true, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, false, true, true, false, false, true, true, true, false, true, true, true, false, false, false, false, false, true, false, true, true, true, true, false, true, true, false, false, false, false, false, true, true, true, true, true, false, false, true, true, true, false, false, true, true, true, false, false, false, true, true, false, true, false, false, true, false, true, false, false, false, true, false, false, true, true, false, false, false, true, false, false, false, false, true, false, false, true, false, true, false, false, true, true, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, false, false, false, false, false, false, false, true, false, false, true, false, true, false, false, true, true, false, false, true, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, false, true, true, true, true, true, false, false, false, false, false, true, false, true, true, false, true, true, false, false, true, false, false, true, true, true, true, true, true, true, false, false, true, true, true, false, false, true, false, false, true, false, true, true, false, false, true, true, false, true, false, false, true, false, false, true, false, false, true, false, false, false, false, true, false, true, false, false, true, false, true, false, true, false, true, true, true, false, true, true, true, false, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, true, false, true, false, false, true, false, false, true, false, false, true, false, false, false, true, false, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, false, true, true, true, true, true, false, false, false, false, false, true, false, true, true, false, true, true, false, false, true, false, false, true, true, true, true, true, true, true, false, false, true, true, true, false, false, true, false, false, true, false, true, true, false, false, true, true, false, true, false, false, true, false, false, true, false, false, true, false, false, false, false, true, false, true, false, false, true, false, true, false, true, false, true, true, true, false, true, true, true, false, false, false, false, false, false, true, false, true, true, false, false, false, false, false, false, false, false, true, false, true, false, false, true, false, false, false, true, false, false, true, false, false, true, false, true, false, false, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, true, true, true, true, true, false, false, false, false, false, true, false, true, true, false, true, true, false, false, true, false, false, true, true, true, true, true, true, true, false, false, true, true, true, false, false, true, false, false, true, false, true, true, false, false, true, true, false, true, false, false, true, false, false, true, false, false, true, false, false, false, false, true, false, true, false, false, true, false, true, false, true, false, true, true, true, false, true, true, true, false, false, false, false, false, false, true, false, true, true, false, false, false, false, false, false, false, false, true, false, true, false, false, true, false, false, false, true, false, false, true, false, false, true, false, true, false, false, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, false, true, false, true, false, true, false, true, true, false, true, true, false, true, false, true, false, true, false, false, true, false, true, false, false, false, false, false, true, true, false, false, false, true, false, true, true, true, true, true, true, false, true, true, true, true, true, true, false, true, false, false, false, false, false, true, false, false, false, true, false, false, true, false, true, false, false, false, true, false, false, true, false, true, false, false, true, true, false, false, false, false, false, false, true, true, false, false, true, true, false, true, false, false, false, false, true, false, false, true, true, false, true, false, false, false, false, false, true, false, true, false, true, true, true, false]);
            let encoded = BinVector::from_bools(&[false, true, false, true, false, true, false, true, false, true, false, true, true, false, true, true, false, true, false, true, false, true, false, false, true, false, true, false, false, false, false, false, true, true, false, false, false, true, false, true, true, true, true, true, true, false, true, true, true, true, true, true, false, true, false, false, false, false, false, true, false, false, false, true, false, false, true, false, true, false, false, false, true, false, false, true, false, true, false, false, true, true, false, false, false, false, false, false, true, true, false, false, true, true, true, false, true, false, false, false, false, true, false, false, true, true, false, true, false, false, false, false, false, false, true, false, true, false, false, true, true, true, false, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, false, true, false, true, false, true, false, true, true, false, true, true, false, true, false, true, false, true, false, false, true, false, true, false, false, false, false, false, true, true, false, false, false, true, false, true, true, true, true, true, true, false, true, true, true, true, true, true, false, true, false, false, false, false, false, true, false, false, false, true, false, false, true, false, true, false, false, false, true, false, false, true, false, true, false, false, true, true, false, false, false, false, false, false, true, true, false, false, true, true, true, false, true, false, false, false, false, true, false, false, true, true, false, false, false, false, false, false, false, false, true, false, true, false, false, true, true, true, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, true, true, false, false, false, false, false, true, true, true, false, true, true, true, true, false, true, false, false, false, false, true, false, false, true, false, true, false, true, true, false, true, true, false, true, false, true, true, true, false, true, true, true, true, true, true, true, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, false, true, true, true, true, true, false, false, true, true, true, true, false, true, true, false, true, false, false, false, true, true, false, true, true, true, false, true, false, true, false, true, false, true, true, false, true, false, true, true, true, true, true, false, false, true, true, true, false, false, false, false, true, true]);
            let encoded = BinVector::from_bools(&[false, true, false, false, true, true, false, false, false, false, false, true, true, true, false, true, true, true, true, false, true, false, false, false, false, true, false, false, true, false, true, false, true, true, false, true, true, false, true, false, true, true, true, false, true, true, true, true, true, true, true, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, false, true, true, true, true, true, false, false, true, true, true, true, false, true, true, false, true, false, false, false, true, true, false, true, true, true, false, true, true, false, true, false, true, false, true, true, false, true, false, true, true, true, true, true, true, false, false, true, true, true, false, false, false, false, false, true, true, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, true, true, false, false, false, false, false, true, true, true, false, true, true, true, true, false, true, false, false, false, false, true, false, false, true, false, true, false, true, true, false, true, true, false, true, false, true, true, true, false, true, true, true, true, true, true, true, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, false, true, true, true, true, true, false, false, true, true, true, true, false, true, true, false, true, false, false, false, true, true, false, false, true, true, false, true, true, false, true, false, true, false, true, true, false, true, false, true, true, true, true, true, true, false, false, true, true, true, false, false, false, false, false, true, true, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, false, true, true, false, true, false, false, true, false, true, false, false, true, false, true, false, true, true, false, true, true, true, true, false, false, true, true, true, true, false, false, true, true, false, false, true, false, true, true, true, true, false, true, true, false, true, true, true, true, true, true, true, true, true, false, false, true, false, true, false, true, true, false, false, false, true, false, false, false, true, false, true, true, false, true, true, true, false, true, false, true, true, false, true, false, false, true, false, true, true, true, false, false, false, false, false, false, true, false, false, false, false, false, true, true, false, false, true, false, true, true, true, false, false, true, false]);
            let encoded = BinVector::from_bools(&[true, true, true, false, false, true, true, false, true, false, false, true, false, true, false, false, true, false, true, false, true, true, false, true, true, true, true, false, false, true, true, true, true, false, false, true, true, false, false, true, false, true, true, true, true, false, true, true, false, true, true, true, true, true, true, true, true, true, false, false, true, false, true, false, true, true, false, false, false, true, false, false, false, true, false, true, true, false, true, true, true, false, true, false, true, true, false, true, false, false, true, false, true, true, false, true, false, false, false, false, false, false, true, false, false, false, false, false, true, true, true, false, false, true, false, true, true, true, false, false, false, true, false, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, false, true, true, false, true, false, false, false, false, true, false, false, true, false, true, false, true, true, false, true, true, true, true, false, false, true, true, true, true, false, false, true, true, false, false, true, false, true, true, true, true, false, true, true, false, true, true, true, true, true, true, true, true, true, false, false, true, false, true, false, true, true, false, false, false, true, false, false, false, true, false, true, true, false, true, true, true, false, true, false, true, true, false, true, false, false, true, false, true, true, false, true, false, false, false, false, false, false, true, false, false, false, false, false, true, true, true, false, false, true, false, true, true, true, false, false, false, true, false, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, true, false, false, true, false, false, true, true, false, false, true, false, true, false, false, true, true, false, false, true, false, true, true, true, true, true, false, true, false, false, false, false, false, false, false, true, true, true, false, true, true, false, false, false, false, false, false, true, false, true, true, false, true, true, true, true, false, false, false, false, false, true, true, false, true, false, false, false, true, false, false, true, true, false, true, true, true, false, true, false, true, false, false, true, true, true, false, false, false, true, false, false, false, true, false, true, false, true, true, false, false, true, false, true, false, true, true, true, false, false, false, true, true, true, false, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, true, false, false, true, false, false, true, true, false, false, true, false, true, false, false, true, true, false, false, true, false, true, true, true, true, true, false, true, false, false, false, false, false, false, false, true, true, true, false, true, true, false, false, false, false, false, false, true, false, true, true, false, true, true, true, true, false, false, false, false, false, true, true, false, true, false, false, false, true, false, false, true, true, false, true, true, true, false, true, false, true, false, false, true, true, true, false, false, false, true, false, false, false, false, true, false, true, false, true, true, false, false, true, false, true, false, true, true, true, true, false, false, false, true, true, true, true, false, true, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, true, false, false, true, false, false, true, true, false, false, true, false, true, false, false, true, true, true, false, true, false, true, true, true, true, true, false, true, false, false, false, false, false, false, false, true, true, true, false, true, true, false, false, false, false, false, false, true, false, true, true, false, true, true, true, true, false, false, false, false, false, true, true, false, true, false, false, false, true, false, false, true, true, false, true, true, true, false, true, false, true, false, false, true, true, true, false, false, false, true, false, false, false, false, true, false, true, false, true, true, false, false, true, false, true, false, true, true, true, true, false, false, false, true, true, true, true, false, true, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, false, false, true, true, true, false, false, false, false, true, false, false, false, false, true, true, false, true, false, true, false, false, true, true, false, true, true, true, true, false, false, false, false, false, true, true, false, false, true, false, true, false, true, true, false, true, false, true, true, true, true, true, false, false, false, true, true, true, false, true, false, true, true, false, true, false, false, true, true, true, false, false, true, false, true, true, false, true, true, true, false, true, false, true, true, false, false, false, true, true, false, false, true, true, true, true, false, true, true, true, true, true, true, false, true, false, true, true, true, true, false, true, true, false, true, false]);
            let encoded = BinVector::from_bools(&[true, true, true, true, false, false, true, true, true, false, false, false, false, true, false, false, false, false, true, true, false, true, false, true, false, false, true, true, false, true, true, true, true, false, false, false, false, false, true, true, false, false, true, false, true, false, true, true, false, true, false, true, true, true, true, true, false, false, false, true, true, true, false, true, false, true, true, false, true, false, false, true, true, true, false, false, true, false, true, true, false, true, true, true, false, true, false, true, true, false, false, false, true, true, true, false, false, true, true, true, true, false, true, true, true, true, true, true, false, true, false, false, true, true, true, true, false, true, true, true, false, true, false, false, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, false, false, true, true, true, false, false, false, false, true, false, false, false, false, true, true, false, true, false, true, false, false, true, true, false, true, true, true, true, false, false, false, false, false, true, true, false, false, true, false, true, false, true, true, false, true, false, true, true, true, true, true, false, false, false, true, true, true, false, true, false, true, true, false, true, false, false, true, true, true, false, false, true, false, true, true, false, true, true, true, false, true, false, true, true, false, false, false, true, true, true, false, false, true, true, true, true, false, true, true, true, true, true, true, false, true, false, false, true, true, true, true, false, true, true, true, false, true, false, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, true, false, false, true, false, false, false, true, true, true, false, true, false, false, true, false, false, false, true, false, false, false, false, true, true, true, false, true, false, true, true, false, true, false, false, true, true, true, true, false, true, true, true, true, true, false, true, true, true, false, true, true, true, true, false, true, true, false, true, true, false, false, true, true, false, true, true, false, true, false, false, false, false, false, false, true, true, true, false, false, false, true, true, true, false, true, false, true, false, false, true, true, true, false, true, true, false, false, false, true, false, false, false, true, false, true, false, false, false, true, true, true, false, false, false, false]);
            let encoded = BinVector::from_bools(&[true, true, true, true, true, false, false, true, false, false, false, true, true, true, false, true, false, false, true, false, false, false, true, false, false, false, false, true, true, true, false, true, false, true, true, false, true, false, false, true, true, true, true, false, true, true, true, true, true, false, true, true, true, false, true, true, true, true, false, true, true, false, true, true, false, false, true, true, false, true, true, false, true, false, false, false, false, false, false, true, true, true, false, false, false, true, true, true, false, true, false, true, false, false, true, true, true, true, false, true, true, false, false, false, true, false, false, false, true, false, true, true, false, false, false, true, true, true, true, false, false, false, false, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, true, false, false, true, false, false, false, true, true, true, false, true, false, false, true, false, false, false, true, false, false, false, false, true, true, true, false, true, false, true, true, false, true, false, false, true, true, true, true, false, true, true, true, true, true, false, true, true, true, false, true, true, true, true, false, true, true, false, true, true, false, false, true, true, false, true, true, false, true, false, false, false, true, false, false, true, true, true, false, false, false, true, true, true, false, true, false, true, false, false, true, true, true, true, false, true, true, false, false, false, true, false, false, false, true, false, true, true, false, false, false, true, true, true, true, false, false, false, false, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, false, true, true, true, false, true, false, false, false, false, false, false, true, true, true, false, true, false, true, false, true, false, true, true, true, false, false, false, false, false, true, true, false, true, false, false, true, false, false, false, false, true, false, true, true, true, true, false, false, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, true, true, false, false, true, true, true, false, true, false, true, false, true, true, true, false, true, false, false, true, false, false, true, true, true, true, false, true, true, false, true, true, true, false, true, false, true, true, true, false, false, false, true, false, true, false, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, false, true, true, true, false, true, false, false, false, false, false, false, true, true, true, false, true, false, true, false, true, false, true, true, true, false, false, false, false, false, true, true, false, true, false, false, true, false, false, false, false, true, false, true, true, true, true, false, false, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, true, true, false, false, true, true, true, false, true, false, true, false, true, true, true, false, true, false, false, true, false, false, true, true, true, true, true, false, true, true, false, true, true, true, false, true, false, true, true, true, false, false, false, false, true, false, true, false, true, false, true, true, false, false, false, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, false, true, true, true, false, true, false, false, false, false, false, false, true, true, true, false, true, false, true, false, true, false, true, true, true, false, false, false, false, false, true, true, false, true, false, false, true, false, false, false, false, true, false, true, false, true, true, false, false, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, true, true, false, false, true, true, true, false, true, false, true, false, true, true, true, false, true, false, false, true, false, false, true, true, true, true, true, false, true, true, false, true, true, true, false, true, false, true, true, true, false, false, false, false, true, false, true, false, true, false, true, true, false, false, false, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, false, false, false, true, true, false, true, false, true, false, true, true, true, false, true, false, true, true, true, false, false, true, false, false, false, false, false, true, false, true, false, true, true, true, false, false, true, true, false, true, false, true, false, true, true, true, true, true, true, true, true, true, false, false, true, false, false, true, false, true, false, false, true, false, true, false, false, false, false, true, true, false, true, true, true, false, false, true, false, true, false, true, false, true, false, true, false, true, true, true, false, false, true, false, false, false, true, true, true, true, false, true, true, true, false, false, false, false, false, true, false, true, true, false, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, false, false, false, false, true, true, false, true, false, true, false, true, true, true, false, true, false, true, true, true, false, false, true, false, false, false, false, false, true, false, true, false, true, true, true, false, false, true, true, false, true, false, true, false, true, true, true, true, true, true, true, true, true, false, false, true, false, false, true, false, true, false, false, true, false, true, false, false, false, false, true, true, false, true, true, true, false, false, true, false, true, false, true, false, true, false, true, false, true, true, true, false, false, false, true, false, false, false, true, true, true, true, false, true, true, true, false, false, false, false, false, false, true, false, true, false, true, false, true, false, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, false, false, false, true, true, false, true, false, true, false, true, true, true, false, true, false, true, true, true, false, false, true, false, false, false, false, false, true, false, true, false, true, true, true, false, false, true, true, false, true, false, true, false, true, true, true, true, true, true, true, true, true, false, false, true, false, false, true, false, true, false, false, true, false, true, false, false, false, false, true, true, false, true, true, true, false, false, true, false, true, false, true, false, true, false, true, false, true, true, true, false, false, false, true, false, false, false, true, true, true, true, false, true, true, true, false, false, false, true, false, false, true, false, true, false, true, false, true, false, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, false, true, false, false, true, true, true, false, true, true, false, true, true, true, true, false, false, true, false, false, false, true, true, true, false, true, true, false, false, false, false, true, true, false, true, true, false, true, true, false, true, false, false, false, true, false, false, false, false, false, false, false, false, true, false, false, true, false, false, true, false, false, true, false, true, false, false, false, false, false, true, true, true, true, false, true, true, false, true, false, true, true, true, true, false, true, true, false, true, false, true, true, true, true, false, true, false, false, false, true, true, false, true, false, false, false, false, false, true, true, true, true, true, false, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, true, false, true, false, false, true, true, true, false, true, true, false, true, true, true, true, false, false, true, false, false, false, true, true, true, false, true, true, false, false, false, false, true, true, false, true, true, false, true, true, false, true, false, false, false, true, false, false, false, false, false, false, false, false, true, false, false, true, false, false, true, false, false, true, false, true, false, false, false, false, false, true, true, true, true, false, true, true, false, true, false, true, true, true, true, false, true, true, false, true, false, true, true, true, true, true, false, true, false, false, false, true, true, false, true, false, false, false, false, false, false, true, true, true, true, false, true, false, false, false, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, false, true, false, false, true, true, true, false, true, true, false, true, true, true, true, false, false, true, false, false, true, true, true, true, false, true, true, false, false, false, false, true, true, false, true, true, false, true, true, false, true, false, false, false, true, false, false, false, false, false, false, false, false, true, false, false, true, false, false, true, false, false, true, false, true, false, false, false, false, false, true, true, true, true, false, true, true, false, true, false, true, true, true, true, false, true, true, false, true, false, true, true, true, true, true, false, true, false, false, false, true, true, false, true, false, false, false, false, false, false, true, true, true, true, false, true, false, false, false, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, false, false, true, false, false, true, true, false, false, false, false, false, false, false, false, true, false, false, true, true, false, false, true, false, true, false, false, false, true, false, false, true, true, false, true, true, true, true, true, false, true, true, true, false, false, true, true, true, false, true, true, true, true, true, false, true, false, false, true, true, true, true, true, true, false, false, false, true, true, false, false, true, false, true, true, false, false, true, false, true, true, true, false, true, true, false, false, false, true, true, false, true, false, true, true, false, true, false, true, false, false, false, true, false, false, true, true, true, true, false, false, true, true, true, false]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, false, false, true, false, false, true, true, false, false, false, false, false, false, false, false, true, false, false, true, true, false, false, true, false, true, false, false, false, true, false, false, true, true, false, true, true, true, true, true, false, true, true, true, false, false, true, true, true, false, true, true, true, true, true, false, true, false, false, true, true, true, true, true, true, false, false, false, true, true, false, false, true, false, true, true, false, false, true, false, true, true, true, false, true, true, false, false, false, true, false, true, false, true, false, true, true, false, true, false, true, false, false, false, true, false, false, false, true, true, true, true, false, false, true, true, true, true, false, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, false, false, true, false, false, true, true, false, false, false, false, false, false, false, false, true, false, false, true, true, false, false, true, false, true, false, false, false, true, false, false, true, true, false, true, true, true, true, true, false, true, true, true, false, false, true, true, true, false, true, true, true, true, true, false, true, false, false, true, true, true, true, true, true, false, false, false, true, true, false, false, true, false, true, true, false, false, true, false, true, true, true, false, false, true, false, false, false, true, false, true, false, true, false, true, true, false, true, false, true, false, false, false, true, false, false, false, true, true, true, true, false, false, true, true, true, true, false, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, false, false, false, false, false, true, false, true, false, false, false, true, false, true, false, true, true, true, false, true, false, false, false, true, true, true, false, true, false, false, true, true, false, true, true, false, false, false, true, true, false, true, true, true, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, true, true, true, true, false, false, false, false, false, true, false, false, false, false, true, false, true, false, false, true, true, false, false, false, false, false, false, true, false, true, false, false, true, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, true, false, true, false]);
            let encoded = BinVector::from_bools(&[true, true, true, false, false, false, false, false, false, true, false, true, false, false, false, true, false, true, false, true, true, true, false, true, false, false, false, true, true, true, false, true, false, false, true, true, false, true, true, false, false, false, true, true, false, true, true, true, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, true, true, true, true, false, false, false, false, false, true, false, false, false, false, true, false, true, false, false, true, true, false, false, false, false, false, false, false, true, false, true, false, false, true, false, false, false, false, false, false, true, true, true, true, true, true, false, false, false, false, false, true, false, true, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, false, false, false, false, false, true, false, true, false, false, false, true, false, true, false, true, true, true, false, true, false, false, false, true, true, true, false, true, false, false, true, true, false, true, true, false, false, false, true, true, false, true, true, true, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false, true, true, false, true, true, true, true, false, false, false, false, false, true, false, false, false, false, true, false, true, false, false, true, true, false, false, false, false, false, false, false, true, false, true, false, false, true, false, false, false, false, false, false, true, true, true, true, true, true, false, false, false, false, false, true, false, true, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, false, true, true, true, false, true, false, true, false, false, true, false, true, true, true, true, false, true, true, true, false, false, false, false, false, false, true, true, false, false, false, true, false, true, true, false, false, false, true, true, false, false, false, true, false, true, false, false, false, true, true, true, true, true, false, false, false, false, true, false, true, true, true, false, false, true, true, true, true, true, false, true, true, false, false, false, true, false, false, true, false, false, true, false, false, true, true, false, true, false, true, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, true, false, false, false, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, false, false, false, true, true, true, false, true, false, true, false, false, true, false, true, true, true, true, false, true, true, true, false, false, false, false, false, false, true, true, false, false, false, true, false, true, true, false, false, false, true, true, false, false, false, true, false, true, false, false, false, true, true, true, true, true, false, false, false, false, true, false, true, true, true, false, false, true, true, true, true, true, false, true, true, false, false, false, true, false, false, true, false, false, true, false, false, true, true, false, true, false, false, true, false, false, false, true, false, false, false, false, false, false, false, true, false, false, true, false, true, false, false, true, false, false, false, false, true, false, true, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, false, true, true, true, false, true, false, true, false, false, true, false, true, true, true, true, false, true, true, true, false, false, false, false, false, false, true, true, false, false, false, true, false, true, true, false, false, false, true, true, false, false, false, true, false, true, false, false, false, true, true, true, true, true, false, false, false, false, true, false, true, true, true, false, false, true, true, true, true, true, false, true, true, false, false, false, true, false, false, true, false, false, true, true, false, true, true, false, true, false, false, true, false, false, false, true, false, false, false, false, false, false, false, true, false, false, true, false, true, false, false, true, false, false, false, false, true, false, true, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, false, false, true, false, false, true, false, true, true, false, true, true, true, true, true, false, true, false, false, true, true, false, false, true, true, true, true, true, true, false, true, true, false, true, true, true, true, false, true, false, true, false, false, true, false, true, true, true, false, false, true, true, true, false, true, false, false, false, false, true, false, false, true, false, true, false, false, true, true, true, true, true, false, false, true, false, false, true, false, false, false, false, true, false, false, true, false, false, true, false, true, true, true, false, true, false, true, false, false, true, false, false, false, false, true, true, true, false, true, false, false, true, false, true, true, false]);
            let encoded = BinVector::from_bools(&[false, false, true, true, false, false, true, false, false, true, false, true, true, false, true, true, true, true, true, false, true, false, false, true, true, false, false, true, true, true, true, true, true, false, true, true, false, true, true, true, true, false, true, false, true, false, false, true, false, true, true, true, false, false, true, true, true, false, true, false, false, false, false, true, false, false, true, false, true, false, false, true, true, true, true, true, false, false, true, false, false, true, false, false, false, false, true, false, false, true, false, false, true, false, true, true, true, true, false, true, false, true, false, false, true, false, false, false, false, true, true, true, true, false, true, false, false, true, true, false, true, true, true, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, false, false, true, false, false, true, false, true, true, false, true, true, true, true, true, false, true, false, false, true, true, false, false, true, true, true, true, true, true, false, true, true, false, true, true, true, true, false, true, false, true, false, false, true, false, true, true, true, false, false, true, true, true, false, true, false, false, false, false, true, false, false, true, false, true, false, false, true, true, true, true, true, false, false, true, false, false, true, false, false, false, false, true, false, false, true, false, false, true, false, true, true, true, true, false, true, false, true, false, false, true, false, false, false, false, true, true, true, true, true, true, false, false, true, true, false, true, true, true, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, true, false, true, true, true, false, true, true, false, true, false, false, true, false, true, true, false, true, true, false, true, false, false, true, true, true, false, true, false, true, true, true, false, true, false, true, true, true, true, true, true, false, true, false, false, false, true, false, false, false, true, false, false, true, true, true, false, false, true, false, true, false, true, true, false, false, true, false, false, true, true, false, false, true, false, false, true, false, true, true, true, true, false, true, true, true, true, false, false, true, false, true, true, true, false, true, true, true, true, false, true, false, false, true, false, true, false, true, false, true, true, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, true, false, true, true, true, false, true, true, false, true, false, false, true, false, true, true, false, true, true, false, true, false, false, true, true, true, false, true, false, true, true, true, false, true, false, true, true, true, true, true, true, false, true, false, false, false, true, false, false, false, true, false, false, true, true, true, false, false, true, false, true, false, true, true, false, false, true, false, false, true, true, false, false, true, false, false, true, false, true, true, true, true, false, true, true, true, true, false, false, false, true, false, true, true, true, false, true, true, true, true, false, true, false, false, true, true, false, true, false, true, false, true, true, false, false, true, false, true, false, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, true, false, true, true, true, false, true, true, false, true, false, false, true, false, true, true, false, true, true, false, true, false, false, true, true, true, false, true, false, true, true, true, false, true, false, true, true, true, true, true, true, false, true, false, false, false, true, false, false, false, true, false, false, true, true, true, false, false, true, false, true, false, true, true, false, false, true, false, false, true, true, false, false, true, false, false, true, false, true, false, true, true, false, true, true, true, true, false, false, false, true, false, true, true, true, false, true, true, true, true, false, true, false, false, true, true, false, true, false, true, false, true, true, false, false, true, false, true, false, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, true, false, false, false, true, false, false, true, true, true, true, false, false, true, true, true, true, false, true, true, true, false, false, true, true, false, true, true, true, false, true, false, false, false, false, true, true, true, false, true, false, true, true, true, false, true, false, true, true, false, true, false, true, true, true, false, true, true, false, true, true, true, true, false, true, true, false, true, true, true, false, false, false, false, true, true, false, false, true, true, false, true, false, true, false, false, true, false, true, true, true, true, false, false, false, true, true, true, false, false, false, true, false, true, true, false, true, false, false, true, true, true, true, true, true, true]);
            let encoded = BinVector::from_bools(&[false, false, true, false, true, false, false, false, true, false, false, true, true, true, true, false, false, true, true, true, true, false, true, true, true, false, false, true, true, false, true, true, true, false, true, false, false, false, false, true, true, true, false, true, false, true, true, true, false, true, false, true, true, false, true, false, true, true, true, false, true, true, false, true, true, true, true, false, true, true, false, true, true, true, false, false, false, false, true, true, false, false, true, true, false, true, false, true, false, false, true, false, true, true, true, true, true, false, false, false, true, true, true, false, false, false, true, false, true, true, false, false, true, false, false, true, true, true, false, true, true, true, true, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, true, false, false, false, true, false, false, true, true, true, true, false, false, true, true, true, true, false, true, true, true, false, false, true, true, false, true, true, true, false, true, false, false, false, false, true, true, true, false, true, false, true, true, true, false, true, false, true, true, false, true, false, true, true, true, false, true, true, false, true, true, true, true, false, true, true, false, true, true, true, false, false, false, false, true, true, false, false, true, true, false, true, false, true, false, false, true, false, true, true, true, true, true, false, false, false, true, true, false, false, false, false, true, false, true, true, false, false, true, false, false, true, true, true, false, true, true, true, true, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, true, true, true, true, false, true, true, false, true, false, false, true, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, true, false, false, true, true, false, false, false, true, false, true, true, false, true, true, false, true, true, true, false, false, true, false, false, false, false, false, true, true, true, false, false, true, true, true, false, false, false, false, true, false, true, true, false, false, true, true, false, true, false, false, false, false, true, true, true, false, true, true, true, false, false, true, true, true, false, false, true, true, true, true, true, false, true, true, true, false, false, false, false, true, false, true, false, true]);
            let encoded = BinVector::from_bools(&[true, true, false, true, true, true, true, true, false, true, true, false, true, false, false, true, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, true, false, false, true, true, false, false, false, true, false, true, true, false, true, true, false, true, true, true, false, false, true, false, false, false, false, false, true, true, true, false, false, true, true, true, false, false, false, false, true, false, true, true, false, false, true, true, false, true, false, false, false, false, true, true, true, false, true, true, false, true, false, false, true, true, true, false, false, true, true, true, true, true, false, true, false, true, true, false, false, false, false, true, false, false, true, false, true, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, true, true, true, true, false, true, false, false, true, false, false, true, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, true, false, false, true, true, false, false, false, true, false, true, true, false, true, true, false, true, true, true, false, false, true, false, false, false, false, false, true, true, true, false, false, true, true, true, false, false, false, false, true, false, true, true, false, false, true, true, false, true, false, false, false, false, true, true, true, false, true, true, false, true, false, false, true, true, true, false, false, true, true, true, true, true, false, true, false, true, true, false, false, false, false, true, false, false, true, false, true, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, false, false, true, false, true, false, true, false, false, true, false, false, false, false, true, false, false, false, false, false, true, false, true, true, true, true, true, false, true, false, true, false, false, true, false, true, false, true, true, true, false, true, true, false, false, true, true, true, false, false, true, true, true, false, true, false, false, true, false, true, false, true, false, true, false, false, true, true, true, true, false, true, false, false, false, true, false, true, true, true, false, false, false, true, false, false, false, false, true, false, true, false, false, false, false, true, false, false, false, false, false, false, true, false, true, false, false, true, true, true, true, false, false, true, false, true]);
            let encoded = BinVector::from_bools(&[true, true, false, false, false, false, true, false, true, false, true, false, false, true, false, false, false, false, true, false, false, false, false, false, true, false, true, true, true, true, true, false, true, false, true, false, false, true, false, true, false, true, true, true, false, true, true, false, false, true, true, true, false, false, true, true, true, false, true, false, false, true, false, true, false, true, false, true, false, false, true, true, true, true, false, true, false, false, false, true, false, true, true, true, false, false, false, true, false, false, false, false, true, false, true, true, false, false, false, false, true, false, false, false, false, false, false, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, false, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, false, false, true, false, true, false, true, false, false, true, false, false, false, false, true, false, false, false, false, false, true, false, true, true, true, true, true, false, true, false, true, false, false, true, false, true, false, true, true, true, false, true, true, false, false, true, true, true, false, false, true, true, true, false, true, false, false, true, false, true, false, true, false, true, false, false, true, true, true, true, false, true, false, false, false, true, false, true, true, true, false, false, false, true, false, false, false, false, true, false, true, true, false, false, false, false, true, false, false, false, false, false, false, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, false, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, true, false, false, true, false, true, false, true, false, false, true, true, false, true, true, true, true, false, true, false, false, false, false, true, false, false, true, true, false, true, true, false, false, false, true, true, false, false, false, false, false, false, false, false, true, false, true, false, true, false, true, true, false, true, true, false, false, true, true, true, false, true, true, false, true, true, false, true, false, true, false, false, false, false, false, false, false, true, false, false, true, true, true, true, true, true, true, false, false, true, true, true, true, false, true, true, false, true, true, true, true, true, false, true, false, true, true, false, true, false, true, true, false, true, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, true, false, false, true, false, true, false, true, false, false, true, true, false, true, true, true, true, false, true, false, false, false, false, true, false, false, true, true, false, true, true, false, false, false, true, true, false, false, false, false, false, false, false, false, true, false, true, false, true, false, true, true, false, true, true, false, false, true, true, true, false, true, true, false, true, true, false, true, false, true, false, false, false, false, false, false, false, true, false, false, true, true, true, true, true, true, true, false, false, true, false, true, true, true, false, true, true, false, true, true, true, true, true, false, true, false, true, true, true, false, true, false, true, true, false, false, true, true, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, true, false, false, true, false, true, false, true, false, false, true, true, false, true, true, true, true, false, true, false, false, false, false, true, false, false, true, true, false, true, true, false, false, false, true, true, false, false, false, false, false, false, false, false, true, false, true, false, true, false, true, true, false, true, true, false, false, true, true, true, false, true, false, false, true, true, false, true, false, true, false, false, false, false, false, false, false, true, false, false, true, true, true, true, true, true, true, false, false, true, false, true, true, true, false, true, true, false, true, true, true, true, true, false, true, false, true, true, true, false, true, false, true, true, false, false, true, true, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, true, false, false, true, true, false, true, false, false, true, true, false, false, false, false, false, true, false, false, true, false, false, true, true, false, true, false, false, false, false, false, false, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, true, true, true, false, false, false, true, false, false, true, false, false, true, false, true, false, false, false, false, true, false, false, true, true, true, false, false, false, false, false, true, true, true, false, false, false, false, true, true, true, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, false, true, true, false, false, true, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, true, false, false, true, true, false, true, false, false, true, true, false, false, false, false, false, true, false, false, true, false, false, true, true, false, true, false, false, false, false, false, false, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, true, true, true, false, false, false, true, false, false, true, false, false, true, false, true, false, false, false, false, true, false, false, true, true, true, false, false, false, false, false, true, true, true, false, false, false, false, true, true, true, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, false, true, true, false, false, false, true, false, true, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, true, true, false, false, true, true, false, true, false, false, true, true, false, false, false, false, false, true, false, false, true, false, false, true, true, false, true, false, false, false, false, false, false, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, true, true, true, false, false, false, true, false, false, true, false, false, true, false, true, false, false, false, false, true, false, false, true, true, true, false, false, false, false, false, true, true, true, false, false, false, false, true, true, true, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, false, true, true, false, false, false, true, false, true, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, true, true, false, false, true, false, true, true, true, true, false, false, true, false, false, true, true, false, true, true, false, false, false, false, true, false, true, true, false, false, true, true, true, false, true, true, false, false, false, true, false, false, false, false, true, false, true, false, true, true, true, false, false, false, true, false, true, false, false, true, false, false, true, true, false, true, false, true, false, true, false, false, true, false, true, true, false, true, false, true, false, false, false, true, true, true, true, false, false, false, false, false, true, true, false, true, false, false, true, false, true, true, false, false, true, true, true, true, true, true, false, false, false, false, false, true]);
            let encoded = BinVector::from_bools(&[false, false, false, true, true, true, false, false, true, false, true, true, true, true, false, false, true, false, false, true, true, false, true, true, false, false, false, false, true, false, true, true, false, false, true, true, true, false, true, true, false, false, false, true, false, false, false, false, true, false, true, false, true, true, true, false, false, false, true, false, true, false, false, true, false, false, true, true, false, true, false, true, false, true, false, false, true, false, true, true, false, true, false, true, false, false, false, true, true, true, true, false, false, false, true, false, false, true, true, false, true, false, false, true, false, true, true, false, false, true, true, true, true, true, true, true, false, false, true, false, false, false, false, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, true, true, false, false, true, false, true, true, true, true, false, false, true, false, false, true, true, false, true, true, false, false, false, false, true, false, true, true, false, false, true, true, true, false, true, true, false, false, false, true, false, false, false, false, true, false, true, false, true, true, true, false, false, false, true, false, true, false, false, true, false, false, true, true, false, true, false, true, false, true, false, false, true, false, true, true, false, true, false, true, false, false, false, true, true, true, true, false, false, false, true, true, false, true, true, false, true, false, false, true, false, true, true, false, false, true, true, true, true, true, true, true, false, false, true, false, false, false, false, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, true, false, false, false, false, true, true, false, false, true, false, true, false, true, true, false, true, false, false, false, true, true, true, false, false, false, false, false, false, true, false, false, true, false, false, true, true, false, false, false, true, false, false, true, true, true, false, true, false, false, true, true, false, true, false, false, false, false, false, true, false, true, false, false, true, true, false, true, true, true, false, false, false, true, true, false, true, false, true, true, true, true, true, false, true, true, false, true, true, false, false, false, true, false, true, true, true, false, false, false, false, true, false, false, false, true, false, false, false, false, false, true, false, true, false, true]);
            let encoded = BinVector::from_bools(&[true, true, false, false, true, false, false, false, false, true, true, false, false, true, false, true, false, true, true, false, true, false, false, false, true, true, true, false, false, false, false, false, false, true, false, false, true, false, false, true, true, false, false, false, true, false, false, true, true, true, false, true, false, false, true, true, false, true, false, false, false, false, false, true, false, true, false, false, true, true, false, true, true, true, false, false, false, true, true, false, true, false, true, true, true, true, true, false, true, true, false, true, true, false, true, false, false, true, false, true, true, true, false, false, false, false, true, false, false, false, false, true, false, false, false, false, false, true, true, false, true, false, false, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, true, false, false, false, false, true, true, false, false, true, false, true, false, true, true, false, true, false, false, false, true, true, true, false, false, false, false, false, false, true, false, false, true, false, false, true, true, false, false, true, true, false, false, true, true, true, false, true, false, false, true, true, false, true, false, false, false, false, false, true, false, true, false, false, true, true, false, true, true, true, false, false, false, true, true, false, true, false, true, true, true, true, true, false, true, true, false, true, true, false, true, false, false, true, false, true, true, true, false, false, false, false, true, false, false, false, false, true, false, false, false, false, false, true, true, false, true, false, false, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, true, true, true, true, false, false, false, false, true, true, true, true, true, true, false, true, false, false, false, false, true, false, true, false, true, true, true, false, false, true, false, false, false, true, true, false, true, true, false, true, true, false, false, true, false, false, true, false, true, true, true, false, false, true, true, false, true, false, true, false, true, false, false, true, false, false, true, true, false, false, true, false, true, false, false, false, false, true, true, true, true, true, false, false, true, false, false, false, false, false, true, false, true, false, true, false, false, true, true, true, false, false, true, true, false, false, false, false, true, true, false, false, false, false, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, true, true, true, true, false, false, false, false, true, true, true, true, true, true, false, true, false, false, false, false, true, false, true, false, true, true, true, false, false, true, false, false, false, true, true, false, true, true, false, true, true, false, false, true, false, false, true, false, true, true, true, false, false, true, true, false, true, false, true, false, true, false, false, true, false, false, true, true, false, false, true, false, true, false, false, false, false, true, true, true, true, true, false, false, true, false, false, false, false, false, false, true, false, true, false, true, false, false, true, true, true, false, false, true, true, false, false, false, false, false, true, true, false, false, true, false, false, true, true, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, true, true, true, true, false, false, false, false, true, true, true, true, true, true, false, true, false, false, false, false, true, false, true, false, true, true, true, false, false, true, false, false, false, true, true, false, true, true, false, true, true, false, false, true, false, false, true, false, true, true, true, false, false, true, true, false, true, false, true, false, true, false, false, true, false, false, true, true, false, false, true, false, true, false, false, false, false, true, true, true, true, true, false, false, true, false, false, false, false, true, false, true, false, true, false, true, false, false, true, true, true, false, false, true, true, false, false, false, false, false, true, true, false, false, true, false, false, true, true, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, false, false, true, true, true, false, false, true, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, true, false, true, false, false, true, false, false, true, true, true, false, true, true, true, true, false, false, false, true, false, false, true, false, true, false, true, true, true, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, false, false, false, true, true, false, true, true, true, false, true, true, true, true, false, false, false, true, false, false, false, false, false, true, true, true, true, false, false, false, true, true, true, true, false, true, false, false, false, false, true, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[false, false, true, false, false, false, true, true, true, false, false, true, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, true, false, true, false, false, true, false, false, true, true, true, false, true, true, true, true, false, false, false, true, false, false, true, false, true, false, true, true, true, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, false, false, false, true, true, false, true, true, true, false, true, true, true, true, false, false, false, true, false, false, false, false, false, false, true, true, true, true, false, false, false, true, true, true, true, false, false, true, false, false, false, false, true, true, true, true, true, false, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, false, false, true, true, true, false, false, true, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, true, false, true, false, false, true, false, false, true, true, true, false, true, true, true, true, false, false, false, true, false, false, true, false, true, false, true, true, true, true, false, true, false, false, false, true, true, false, false, true, false, true, false, true, false, false, false, false, false, true, true, false, true, true, true, false, true, true, true, true, false, false, false, true, false, false, false, false, false, false, true, true, true, true, false, false, false, true, true, true, true, false, false, true, false, false, false, false, true, true, true, true, true, false, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, true, false, false, true, true, false, true, false, false, false, false, true, true, true, false, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, true, false, false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, true, false, true, false, false, true, true, false, false, false, false, true, false, true, false, true, true, true, true, true, true, false, true, false, true, false, false, true, false, false, false, true, true, true, false, false, false, false, false, false, true, true, true, true, true, true, true, false, false, true, false, false, false, false, false, false, true, false, true, true, false, false, false, true, true, false]);
            let encoded = BinVector::from_bools(&[false, false, true, true, true, false, false, true, true, false, true, false, false, false, false, true, true, true, false, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, true, false, false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, true, false, true, false, false, true, true, false, false, false, false, true, false, true, false, true, true, true, true, true, true, false, true, false, true, false, false, true, false, false, false, true, true, true, false, false, false, false, false, false, true, true, true, true, true, true, true, true, false, false, true, false, false, false, false, false, false, false, true, false, true, true, false, false, false, false, true, true, false, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, true, false, false, true, true, false, true, false, false, false, false, true, true, true, false, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, true, false, false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, true, false, true, false, false, true, true, false, false, false, false, true, false, true, false, true, true, true, true, true, true, false, true, false, true, false, false, true, false, false, false, true, true, true, false, false, false, false, false, false, true, true, true, true, true, true, true, true, false, false, true, false, false, false, false, false, false, false, true, false, true, true, true, false, false, false, true, true, false, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, false, false, false, true, false, true, false, true, false, true, false, false, false, false, true, false, true, false, true, true, true, false, true, true, true, true, true, false, true, true, false, false, false, false, true, true, true, true, false, false, false, true, false, false, false, false, false, true, true, false, false, true, true, false, true, true, false, false, false, false, false, false, true, false, true, false, false, false, false, true, true, true, true, true, false, false, false, false, true, true, false, true, false, false, false, false, false, true, false, false, true, false, false, false, false, true, false, false, true, true, false, true, true, true, true, true, false, false, true, true, false, false, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, false, false, false, true, false, true, false, true, false, true, false, false, false, false, true, false, true, false, true, true, true, false, true, true, true, true, true, false, true, true, false, false, false, false, true, true, true, true, false, false, false, true, false, false, false, false, false, true, true, false, false, true, true, false, true, true, false, false, false, false, false, false, true, false, true, false, false, false, false, true, true, true, true, true, false, false, false, false, true, true, false, true, false, false, false, false, false, true, false, true, false, true, false, false, false, false, true, false, false, true, true, false, true, true, true, true, true, true, false, false, true, true, false, true, false, true, false, true, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, false, false, false, true, false, true, false, true, false, true, false, false, false, false, true, false, true, false, true, true, true, false, true, true, true, true, true, false, true, true, false, false, false, false, true, true, true, true, false, false, false, true, false, false, false, false, false, true, true, false, false, true, true, false, true, true, false, false, false, false, false, false, true, false, true, false, false, false, false, true, true, true, true, true, false, false, false, false, true, true, false, true, false, false, false, false, false, true, false, true, false, true, false, false, false, true, true, false, false, true, true, false, true, true, true, true, true, true, false, false, true, true, false, true, false, true, false, true, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, true, true, true, false, false, true, true, false, true, false, false, true, false, true, false, true, false, false, false, false, false, true, true, false, true, false, false, true, true, false, true, false, false, false, false, false, false, false, true, true, true, false, true, false, false, false, false, true, false, true, false, true, false, false, true, true, true, false, true, false, false, true, true, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, false, true, false, false, false, true, false, true, true, true, false, true, true, false, false, false, false, false, true, false, false, false, false, true, false, true, false, false, false, true, true, false, false, true, true, false]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, true, true, true, false, false, true, true, false, true, false, false, true, false, true, false, true, false, false, false, false, false, true, true, false, true, false, false, true, true, false, true, false, false, false, false, false, false, false, true, true, true, false, true, false, false, false, false, true, false, true, false, true, false, false, true, true, true, false, true, false, false, true, true, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, false, true, false, false, false, true, false, true, true, true, true, false, true, true, false, false, false, false, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, false, true, false, true, true, false, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, true, true, true, true, false, false, true, true, false, true, false, false, true, false, true, false, true, false, false, false, false, false, true, true, false, true, false, false, true, true, false, true, false, false, false, false, false, false, false, true, true, true, false, true, false, false, false, false, true, false, true, false, true, true, false, true, true, true, false, true, false, false, true, true, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, false, true, false, false, false, true, false, true, true, true, true, false, true, true, false, false, false, false, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, false, true, false, true, true, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, false, false, false, false, true, true, false, true, true, true, false, true, false, true, true, false, false, false, false, true, false, true, true, false, true, false, true, true, true, false, true, true, false, false, true, false, true, false, false, true, false, true, false, false, true, true, true, false, true, false, false, true, false, true, true, true, true, true, true, true, false, true, false, false, false, true, true, true, false, true, true, true, false, true, false, false, true, false, true, false, false, false, true, true, false, false, false, true, false, false, false, false, false, false, true, false, false, true, true, true, true, false, false, true, true, false, false, true, true, true, false, true, true, false, false, false]);
            let encoded = BinVector::from_bools(&[true, false, false, false, false, false, false, false, true, true, false, true, true, true, false, true, false, true, true, false, false, false, false, true, false, true, true, false, true, false, true, true, true, false, true, true, false, false, true, false, true, false, false, true, false, true, false, false, true, true, true, false, true, false, false, true, false, true, true, true, true, true, true, true, false, true, false, false, false, true, true, true, false, true, true, true, false, true, false, false, true, false, true, false, false, false, true, true, false, false, false, true, false, false, true, false, false, false, false, true, false, false, true, true, true, true, false, false, true, true, true, false, false, true, true, true, false, true, true, true, false, false, false, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, false, false, false, false, true, true, false, false, true, true, false, true, false, true, true, false, false, false, false, true, false, true, true, false, true, false, true, true, true, false, true, true, false, false, true, false, true, false, false, true, false, true, false, false, true, true, true, false, true, false, false, true, false, true, true, true, true, true, true, true, false, true, false, false, false, true, true, true, false, true, true, true, false, true, false, false, true, false, true, false, false, false, true, true, false, false, false, true, false, false, true, false, false, false, false, true, false, false, true, true, true, true, false, false, true, true, true, false, false, true, true, true, false, true, true, true, false, false, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, false, true, true, false, true, true, true, false, true, true, false, true, true, false, true, false, true, true, true, true, false, false, false, true, true, false, false, true, true, false, true, true, true, true, false, true, true, true, true, false, false, true, false, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, false, true, false, false, false, false, true, false, true, true, false, true, false, false, true, false, false, true, true, false, false, true, true, false, true, false, true, false, false, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, true, false, true, false, true, false, true, false, false, false, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, true, false, true, true, false, true, true, true, false, true, true, false, true, true, false, true, false, true, true, true, true, false, false, false, true, true, false, false, true, true, false, true, true, true, true, false, true, true, true, true, false, false, true, false, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, false, true, false, false, false, false, true, false, true, true, false, true, false, false, true, false, false, true, true, false, false, true, true, false, true, false, true, false, false, true, false, true, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, true, true, false, true, false, true, false, true, false, false, false, false, false, true, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, false, true, true, false, true, true, true, false, true, true, false, true, true, false, true, false, true, true, true, true, false, false, false, true, true, false, false, true, true, false, true, true, true, true, false, true, true, true, true, false, false, true, false, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, false, true, false, false, false, false, true, false, true, true, false, true, false, true, true, false, false, true, true, false, false, true, true, false, true, false, true, false, false, true, false, true, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, true, true, false, true, false, true, false, true, false, false, false, false, false, true, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, true, true, false, true, false, true, false, true, true, false, true, false, false, false, false, true, false, false, false, false, true, false, true, true, false, true, true, false, false, false, true, false, false, true, true, true, true, false, true, true, false, false, false, true, true, false, true, true, false, false, false, true, false, true, true, true, true, false, false, true, true, false, true, true, true, false, false, true, true, false, true, false, false, true, false, true, true, true, true, false, true, true, true, false, false, true, true, false, true, true, true, true, false, true, true, false, true, false, true, true, true, false, false, true, true, true, false, false, false, false, false, true, false, true, true, false]);
            let encoded = BinVector::from_bools(&[false, false, false, true, true, true, false, true, false, true, false, true, true, false, true, false, false, false, false, true, false, false, false, false, true, false, true, true, false, true, true, false, false, false, true, false, false, true, true, true, true, false, true, true, false, false, false, true, true, false, true, true, false, false, false, true, false, true, true, true, true, false, false, true, true, false, true, true, true, false, false, true, true, false, true, false, false, true, false, true, true, true, true, false, true, true, true, false, false, true, true, false, true, true, false, true, true, false, true, true, false, true, false, true, true, true, false, false, true, true, false, true, false, false, false, false, false, true, false, false, true, true, true, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, true, true, false, true, false, true, false, true, true, false, true, false, false, false, false, true, false, false, false, false, true, false, true, true, false, true, true, false, false, false, true, false, false, true, true, false, true, false, true, true, false, false, false, true, true, false, true, true, false, false, false, true, false, true, true, true, true, false, false, true, true, false, true, true, true, false, false, true, true, false, true, false, false, true, false, true, true, true, true, false, true, true, true, false, false, true, true, false, true, true, false, true, true, false, true, true, false, true, false, true, true, true, false, false, true, true, false, true, false, false, false, false, false, true, false, false, true, true, true, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, true, true, false, true, false, true, false, false, true, true, false, false, true, true, false, false, false, true, false, true, false, false, false, false, true, false, false, true, false, true, false, true, false, true, true, false, true, true, true, false, false, true, false, false, false, true, false, false, false, true, true, false, true, false, false, true, true, false, true, false, false, true, false, false, false, false, true, false, true, true, false, false, true, false, false, true, true, false, false, false, true, true, false, false, false, true, true, true, true, true, true, false, true, true, true, false, false, true, true, true, false, true, true, false, true, true, true, true, true, false, true, false, false, false, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, true, true, true, false, true, false, true, false, false, true, true, false, false, true, true, false, false, false, true, false, true, false, false, false, false, true, false, false, true, false, true, false, true, false, true, true, false, true, true, true, false, false, true, false, false, false, true, false, false, false, true, true, false, true, false, false, true, true, false, true, false, false, true, false, false, false, false, true, false, true, true, false, false, true, false, false, true, true, false, false, false, true, true, false, false, false, true, true, true, true, true, false, true, false, true, true, true, false, false, true, true, true, false, true, true, false, true, true, true, true, true, true, false, true, false, false, false, false, true, false, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, true, true, false, true, false, true, false, false, true, true, false, false, true, true, false, false, false, true, false, true, false, false, false, false, true, false, false, true, false, true, false, true, false, true, true, false, true, true, true, false, false, true, false, false, false, true, false, false, false, true, true, false, true, false, false, true, true, false, true, false, false, true, false, false, false, false, true, false, true, true, false, false, true, false, false, true, true, false, false, false, true, true, false, false, false, true, true, true, true, true, false, true, false, true, true, true, false, true, true, true, true, false, true, true, false, true, true, true, true, true, true, false, true, false, false, false, false, true, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, true, false, true, true, true, false, false, true, false, false, false, true, true, false, true, false, false, true, true, false, true, false, false, false, true, false, true, true, false, true, true, true, true, true, false, true, true, false, false, true, false, false, true, false, false, false, false, false, false, true, false, true, false, true, false, true, false, false, true, true, false, true, false, true, true, true, false, false, false, true, true, false, false, true, true, true, true, true, false, false, true, false, true, true, true, true, false, true, true, false, true, true, true, true, false, false, false, false, true, true, false, false, true, true, true, true, false, true, false, true, false, false, false, true, false, true]);
            let encoded = BinVector::from_bools(&[false, false, true, false, true, false, true, true, true, false, false, true, false, false, false, true, true, false, true, false, false, true, true, false, true, false, false, false, true, false, true, true, false, true, true, true, true, true, false, true, true, false, false, true, false, false, true, false, false, false, false, false, false, true, false, true, false, true, false, true, false, false, true, true, false, true, false, true, true, true, false, false, false, true, true, false, false, true, true, true, true, true, false, false, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, false, false, false, true, true, false, false, true, true, true, true, true, false, true, false, true, false, false, true, false, true, false, false, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, true, false, true, true, true, false, false, true, false, false, false, true, true, false, true, false, false, true, true, false, true, false, false, false, true, false, true, true, false, false, true, true, true, true, false, true, true, false, false, true, false, false, true, false, false, false, false, false, false, true, false, true, false, true, false, true, false, false, true, true, false, true, false, true, true, true, false, false, false, true, true, false, false, true, true, true, true, true, false, false, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, false, false, false, true, true, false, false, true, true, true, true, true, false, true, false, true, false, false, true, false, true, false, false, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, false, false, true, false, true, true, false, false, false, false, true, false, true, false, false, true, true, false, false, true, true, false, true, false, false, true, false, false, false, false, true, false, true, false, false, false, true, false, true, true, true, false, false, true, false, true, false, false, true, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, true, false, true, false, false, true, false, true, true, true, true, false, true, false, false, false, false, true, false, true, false, true, true, false, false, false, true, false, true, true, true, true, false, true, true, false, true, true, false, true, true, true, false, true, true, true, false, true, true, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, false, false, true, false, true, true, false, false, false, false, true, false, true, false, false, true, true, false, false, true, true, false, true, false, false, true, false, false, false, false, true, false, true, false, false, false, true, false, true, true, true, false, false, true, false, true, false, false, true, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, true, false, true, false, false, true, false, true, true, true, true, false, true, false, false, false, false, true, false, true, false, true, true, false, true, false, false, true, false, true, true, true, true, false, true, true, false, true, true, false, true, true, true, true, false, true, true, true, false, false, true, true, false, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, false, false, true, false, true, true, false, false, false, false, true, false, true, false, false, true, true, false, false, true, true, false, true, false, false, true, false, true, false, false, true, false, true, false, false, false, true, false, true, true, true, false, false, true, false, true, false, false, true, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, true, false, true, false, false, true, false, true, true, true, true, false, true, false, false, false, false, true, false, true, false, true, true, false, true, false, false, true, false, true, true, true, true, false, true, true, false, true, true, false, true, true, true, true, false, true, true, true, false, false, true, true, false, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, false, true, false, false, false, true, true, false, true, true, true, true, true, true, false, true, false, true, false, true, false, true, false, true, false, false, false, false, false, false, true, true, true, true, false, true, true, true, true, true, false, true, false, true, true, true, false, false, true, true, false, false, false, true, true, false, true, false, true, false, false, true, false, false, true, true, true, false, true, false, true, true, false, false, false, true, false, false, true, false, true, true, false, true, false, true, true, true, true, false, true, true, false, true, false, false, true, false, true, false, false, true, false, false, true, true, false, false, true, true, false, true, true, false, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, false, false, true, false, false, false, true, true, false, true, true, true, true, true, true, false, true, false, true, false, true, false, true, false, true, false, false, false, false, false, false, true, true, true, true, false, true, true, true, true, true, false, true, false, true, true, true, false, false, true, true, false, false, false, true, true, false, true, false, true, false, false, true, false, false, true, true, true, false, true, false, true, true, false, false, false, true, false, false, true, false, true, true, false, true, false, true, true, true, true, false, true, true, true, false, true, false, false, true, false, true, false, false, true, false, false, true, true, true, false, false, true, true, false, true, false, true, false, false, false, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, false, true, false, false, false, true, true, false, true, true, true, true, true, true, false, true, false, true, false, true, false, true, false, true, false, false, false, false, false, false, true, true, true, true, false, true, true, true, true, true, false, true, false, true, true, true, false, false, true, true, false, false, false, true, true, false, true, false, true, false, false, true, false, false, true, true, true, false, true, false, true, true, false, false, false, true, false, false, true, false, true, true, false, true, false, true, true, true, true, false, true, true, true, false, true, false, false, true, false, true, false, false, true, true, false, true, true, true, false, false, true, true, false, true, false, true, false, false, false, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, false, false, false, true, true, true, true, false, false, false, false, false, true, false, false, true, false, true, false, false, true, true, false, false, false, true, false, true, false, true, true, true, true, false, false, true, false, true, true, true, true, false, true, true, false, true, true, true, false, true, true, true, true, false, false, false, false, true, false, false, true, false, true, true, true, true, false, true, false, false, true, false, true, false, true, true, true, false, false, true, true, false, true, false, false, true, false, true, true, true, true, true, false, false, true, true, true, false, false, false, true, false, false, false, true, true, false, false, false, false, true, true, true, false, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, false, false, false, false, true, true, true, true, false, false, false, false, false, true, false, false, true, false, true, false, false, true, true, false, false, false, true, false, true, false, true, true, true, true, false, false, true, false, true, true, true, true, false, true, true, false, true, true, true, false, true, true, true, true, false, false, false, false, true, false, false, true, false, true, true, true, true, false, true, false, false, true, false, true, false, true, true, true, false, false, true, true, false, true, false, false, true, false, true, true, true, false, true, true, false, false, true, true, true, false, false, false, true, false, false, false, true, true, true, false, false, false, false, true, true, false, true, false, true, true, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, false, false, false, true, true, true, true, false, false, false, false, false, true, false, false, true, false, true, false, false, true, true, false, false, false, true, false, true, false, true, true, true, true, false, false, true, false, true, true, true, true, false, true, true, false, true, true, true, false, true, true, true, true, false, false, false, false, true, false, false, true, false, true, true, true, true, false, true, false, false, true, false, true, false, true, true, true, false, false, true, true, false, true, false, false, true, false, true, true, true, false, true, true, false, false, true, true, true, false, false, false, true, false, false, false, true, true, true, false, true, false, false, true, true, false, true, false, true, true, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, true, false, true, true, true, false, false, true, true, true, true, false, false, true, false, true, false, true, false, true, false, true, false, false, true, true, true, false, false, false, false, false, true, true, false, true, false, false, true, true, false, false, false, false, false, true, true, false, true, true, true, false, true, false, true, false, false, false, false, true, true, false, true, true, true, false, true, false, false, false, true, false, true, true, false, true, true, false, true, false, true, false, false, true, true, false, true, false, true, false, true, true, false, false, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, false, true, true, true, true, true, false]);
            let encoded = BinVector::from_bools(&[false, false, true, true, true, false, true, true, true, false, false, true, true, true, true, false, false, true, false, true, false, true, false, true, false, true, false, false, true, true, true, false, false, false, false, false, true, true, false, true, false, false, true, true, false, false, false, false, false, true, true, false, true, true, true, false, true, false, true, false, false, false, false, true, true, false, true, true, true, false, true, false, false, false, true, false, true, true, false, true, true, false, true, false, true, false, false, true, true, false, true, false, true, false, true, true, true, false, false, true, true, false, false, false, false, false, false, false, true, true, false, true, true, true, true, false, true, true, false, true, true, true, true, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, true, false, true, true, true, false, false, true, true, true, true, false, false, true, false, true, false, true, false, true, false, true, false, false, true, true, true, false, false, false, false, false, true, true, false, true, false, false, true, true, false, false, false, false, false, true, true, false, true, true, true, false, true, false, true, false, false, false, false, true, true, false, true, true, true, false, true, false, false, false, true, false, true, true, false, true, true, false, true, false, true, false, false, true, true, false, true, false, true, false, true, true, true, false, false, false, true, false, false, false, false, false, false, false, true, true, false, true, true, true, true, false, true, true, false, true, true, true, true, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, false, false, true, true, true, false, false, true, true, true, false, true, false, true, false, true, false, true, true, false, false, false, true, true, false, false, true, true, false, true, false, false, true, true, false, false, false, true, false, false, true, true, true, false, true, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, false, true, false, false, true, false, false, true, false, false, true, true, true, true, false, true, true, true, true, true, false, true, false, false, true, false, false, false, true, true, false, true, false, false, false, false, true, false, true, true, false, true, false, true, true, false, false, true, true, false, true, false, true, true, true, true]);
            let encoded = BinVector::from_bools(&[true, true, true, true, false, false, true, true, true, false, false, true, true, true, false, true, false, true, false, true, false, true, true, false, false, false, true, true, false, false, true, true, false, true, false, false, true, true, false, false, false, true, false, false, true, true, true, false, true, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, false, true, false, false, true, false, false, true, false, false, true, true, true, true, false, true, true, true, true, true, false, true, false, false, true, false, false, false, true, true, true, false, true, false, false, false, false, true, false, true, true, false, true, false, true, true, true, false, false, true, true, false, true, false, true, true, true, true, false, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, false, false, true, true, true, false, false, true, true, true, false, true, false, true, false, true, false, true, true, false, false, false, true, true, false, false, true, true, false, true, false, false, true, true, false, false, false, true, false, false, true, true, true, false, true, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, false, true, false, false, true, false, false, true, false, false, true, true, true, true, false, true, true, true, true, false, false, true, false, false, true, false, false, false, true, true, true, false, true, false, false, false, false, true, false, true, true, false, true, false, true, true, true, false, false, true, true, false, true, false, true, true, true, true, false, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, true, false, true, false, false, true, false, false, false, true, true, false, true, true, true, true, true, true, false, false, true, false, false, false, true, true, false, true, true, true, false, false, true, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, true, false, true, true, true, false, false, true, false, true, true, false, true, false, true, true, false, true, true, true, true, true, false, false, false, false, true, true, true, false, false, true, false, false, false, true, true, false, true, true, false, true, false, true, false, false, false, false, false, false, false, false, true, true, true, false, true, false, false, false, true, false, false, false, true, false, false, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, true, false, true, false, false, true, false, false, false, true, true, false, true, true, true, true, true, true, false, false, true, false, false, false, true, true, false, true, true, true, false, false, true, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, true, false, true, true, true, false, false, true, false, true, true, false, true, false, true, true, false, true, true, true, true, true, false, false, false, false, true, true, true, false, false, true, false, false, false, true, true, false, true, true, false, true, false, false, true, false, false, false, false, false, false, false, false, true, true, true, false, true, false, false, false, false, true, false, false, false, true, true, false, false, false, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, true, false, true, false, false, true, false, false, false, true, true, false, true, true, true, true, true, true, false, false, true, true, false, false, true, true, false, true, true, true, false, false, true, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, true, false, true, true, true, false, false, true, false, true, true, false, true, false, true, true, false, true, true, true, true, true, false, false, false, false, true, true, true, false, false, true, false, false, false, true, true, false, true, true, false, true, false, false, true, false, false, false, false, false, false, false, false, true, true, true, false, true, false, false, false, false, true, false, false, false, true, true, false, false, false, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, true, false, true, false, false, true, false, true, false, true, true, true, false, true, true, false, true, true, true, true, true, true, false, false, true, false, false, false, true, true, true, false, false, true, true, true, false, true, false, true, true, false, true, true, true, false, false, true, false, true, false, false, true, true, true, true, true, true, true, true, false, false, true, false, false, true, true, true, true, false, true, false, true, true, false, false, true, false, false, true, false, true, false, false, true, false, false, true, true, false, true, true, false, true, false, false, true, true, true, false, true, false, false, false, false, true, false, false, false, true, false, false, false, false, false]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, true, false, true, false, false, true, false, true, false, true, true, true, false, true, true, false, true, true, true, true, true, true, false, false, true, false, false, false, true, true, true, false, false, true, true, true, false, true, false, true, true, false, true, true, true, false, false, true, false, true, false, false, true, true, true, true, true, true, true, true, false, false, true, false, false, true, true, true, true, false, true, false, true, true, false, false, true, false, false, true, false, true, false, false, true, false, false, true, true, false, false, true, true, false, true, false, false, true, true, true, false, true, false, false, false, true, false, true, false, false, false, true, false, true, false, false, false, false, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, true, false, true, false, false, true, false, true, false, true, true, true, false, true, true, false, true, true, true, true, true, true, false, false, true, false, false, false, true, true, true, false, false, true, true, true, false, true, false, true, true, false, true, true, true, false, false, true, false, true, false, false, true, true, true, true, true, true, true, false, false, false, true, false, false, true, true, true, true, false, true, false, true, true, false, false, true, false, false, true, false, true, false, false, true, false, false, true, true, false, false, true, true, false, true, false, false, true, true, true, false, true, false, false, false, true, false, true, false, false, false, true, false, true, false, false, false, false, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, true, true, false, false, true, true, true, false, false, false, false, true, true, false, false, true, false, true, true, false, false, true, false, true, true, true, false, true, false, false, true, true, true, true, false, true, false, true, true, true, true, true, true, false, false, true, false, true, false, true, false, false, false, false, false, true, false, true, true, true, false, false, true, false, true, true, true, true, true, true, true, false, false, false, false, true, true, false, false, true, false, true, true, false, false, false, true, false, false, false, false, false, true, true, false, true, true, false, true, true, false, true, true, true, true, true, true, true, true, true, true, false, false, true, false, true]);
            let encoded = BinVector::from_bools(&[false, false, true, false, true, true, false, false, true, true, true, false, false, false, false, true, true, false, false, true, false, true, true, false, false, true, false, true, true, true, false, true, false, false, true, true, true, true, false, true, false, true, true, true, true, true, true, false, false, true, false, true, false, true, false, false, false, false, false, true, false, true, true, true, false, false, true, false, true, true, true, true, true, true, true, false, false, false, false, true, true, false, false, true, false, true, true, false, false, false, true, false, false, false, true, false, false, true, true, false, true, true, false, true, true, false, true, true, true, true, false, true, true, true, true, true, true, false, true, false, true, false, true, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, true, true, false, false, true, true, true, false, false, false, false, true, true, false, false, true, false, true, true, false, false, true, false, true, true, true, false, true, false, false, true, true, true, true, false, true, false, true, true, true, true, true, true, false, false, true, false, true, false, true, false, false, false, false, false, true, false, true, true, true, false, false, true, false, true, true, true, true, true, true, true, false, false, false, false, true, true, false, false, true, false, true, true, false, false, false, true, false, false, false, true, false, false, false, true, false, true, true, false, true, true, false, true, true, true, true, false, true, true, true, true, true, true, false, true, false, true, false, true, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, true, true, true, true, true, false, true, false, true, false, true, false, true, true, true, true, false, false, false, true, false, false, false, false, true, true, false, false, false, true, true, true, true, false, true, false, true, true, true, false, false, false, true, true, false, true, true, false, true, false, false, false, true, false, false, true, true, true, true, true, true, false, false, true, true, false, true, false, true, true, false, true, false, false, false, true, false, false, false, false, false, true, true, false, false, false, false, false, false, true, true, false, true, false, true, false, false, false, true, false, true, false, false, true, false, true, true, false, true, true, false, false, true, false, false, true]);
            let encoded = BinVector::from_bools(&[false, true, true, false, true, true, true, true, true, false, true, false, true, false, true, false, true, true, true, true, false, false, false, true, false, false, false, false, true, true, false, false, false, true, true, true, true, false, true, false, true, true, true, false, false, false, true, true, false, true, true, false, true, false, false, false, true, false, false, true, true, true, true, true, true, false, false, true, true, false, true, false, true, true, false, true, false, false, false, true, false, false, false, false, false, true, true, false, false, false, false, false, false, true, false, true, false, true, false, true, false, false, false, true, false, true, false, false, true, false, false, true, true, false, true, true, false, false, false, true, false, false, false, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, true, false, true, true, true, false, true, false, true, false, true, false, true, true, true, true, false, false, false, true, false, false, false, false, true, true, false, false, false, true, true, true, true, false, true, false, true, true, true, false, false, false, true, true, false, true, true, false, true, false, false, false, true, false, false, true, true, true, true, true, true, false, false, true, true, false, true, false, true, true, false, true, false, false, false, true, false, false, false, false, false, true, true, false, false, false, false, false, false, true, false, true, false, true, false, true, false, false, false, true, false, true, false, false, true, false, false, true, true, false, true, true, false, false, false, true, false, false, false, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, false, false, true, false, true, false, true, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, true, true, false, false, true, false, true, true, true, true, true, true, false, false, false, true, true, false, false, true, true, true, false, true, false, false, true, false, false, false, false, false, true, true, true, false, false, false, true, true, true, false, false, false, true, false, false, false, false, true, true, true, true, true, true, false, true, false, false, true, true, true, false, false, false, true, false, true, true, true, true, true, true, false, false, false, true, false, false, true, false, false, true, false, false, false, true, true, true]);
            let encoded = BinVector::from_bools(&[false, true, true, false, false, false, true, false, true, false, true, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, true, true, false, false, true, false, true, true, true, true, true, true, false, false, false, true, true, false, false, true, true, true, false, true, false, false, true, false, false, false, false, false, true, true, true, false, false, false, true, true, true, false, false, false, true, false, false, false, false, true, true, true, true, true, true, false, true, false, false, true, true, true, false, true, false, false, true, false, true, true, true, true, true, true, false, false, false, true, false, false, false, true, false, false, true, false, false, true, false, true, true, true, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, false, false, true, false, true, false, true, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, true, true, false, false, true, false, true, true, true, true, true, true, false, false, false, true, true, false, false, true, true, true, false, true, false, false, true, false, false, false, false, false, true, true, true, false, false, false, true, true, true, false, false, false, true, false, false, false, false, true, true, false, true, true, true, false, true, false, false, true, true, true, false, true, false, false, true, false, true, true, true, true, true, true, false, false, false, true, false, false, false, true, false, false, true, false, false, true, false, true, true, true, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, true, false, false, false, true, true, true, false, true, false, true, true, false, false, false, false, false, false, false, false, false, true, false, true, false, true, true, false, false, false, true, true, true, false, false, false, true, false, false, false, true, true, false, false, false, false, true, true, true, false, false, false, false, true, false, true, true, true, true, false, true, false, false, false, false, true, true, true, false, true, false, false, false, true, true, true, true, false, false, false, true, true, true, true, true, true, false, true, false, false, false, true, true, false, true, false, true, true, false, true, true, true, true, true, false, true, false, false, false, false, true, true, false, false, true, true]);
            let encoded = BinVector::from_bools(&[false, false, true, true, true, false, false, false, true, true, true, false, true, false, true, true, false, false, false, false, false, false, false, false, false, true, false, true, false, true, true, false, false, false, true, true, true, false, false, false, true, false, false, false, true, true, false, false, false, false, true, true, true, false, false, false, false, true, false, true, true, true, true, false, true, false, false, false, false, true, true, true, false, true, false, false, false, true, true, true, true, false, false, false, true, true, true, true, true, true, false, true, false, false, false, false, true, true, false, true, false, true, true, false, true, true, true, true, true, false, false, true, false, false, false, false, true, true, true, false, false, true, false, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, true, false, false, false, true, true, true, false, true, false, true, true, false, false, false, false, false, false, false, false, false, true, false, true, false, true, true, false, false, false, true, true, true, false, false, false, true, false, false, false, true, true, false, false, false, false, true, true, true, false, false, false, false, true, false, true, true, true, true, false, true, false, false, false, false, true, true, true, false, true, false, false, false, true, true, true, true, false, false, false, true, true, true, true, true, true, false, true, false, false, false, false, true, true, false, true, false, true, true, false, true, true, true, true, true, false, false, true, false, false, false, false, true, true, true, false, false, true, false, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, false, true, true, true, true, true, true, true, false, true, true, true, false, true, true, false, true, true, true, false, false, true, true, true, false, false, true, false, false, false, false, true, false, false, true, false, false, false, false, false, true, true, false, true, false, false, true, true, true, false, false, true, true, true, false, true, false, true, true, false, false, false, false, true, true, true, false, true, false, true, false, false, false, true, false, false, true, false, false, false, false, false, true, true, false, true, false, false, true, false, true, false, false, true, false, false, false, false, true, true, false, false, false, false, false, false, false, false, true, false, true, true, false, false, false, false]);
            let encoded = BinVector::from_bools(&[true, false, true, true, false, true, true, true, true, true, true, true, false, true, true, true, false, true, true, false, true, true, true, false, false, true, true, true, false, false, true, false, false, false, false, true, false, false, true, false, false, false, false, false, true, true, false, true, false, false, true, true, true, false, false, true, true, true, false, true, false, true, true, false, false, false, false, true, true, true, false, true, false, true, false, false, false, true, false, false, true, false, false, false, false, false, true, true, false, true, false, false, true, false, true, true, false, false, true, false, false, false, false, true, true, false, false, false, false, false, false, false, false, false, true, false, true, true, true, false, false, false, false, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, false, true, true, true, true, true, true, true, false, true, true, true, false, true, true, false, true, true, false, false, false, true, true, true, false, false, true, false, false, false, false, true, false, false, true, false, false, false, false, false, true, true, false, true, false, false, true, true, true, false, false, true, true, true, false, true, false, true, true, false, false, false, false, true, true, true, false, true, false, true, false, false, false, true, false, false, true, false, false, false, false, false, true, true, false, true, false, false, true, false, true, true, false, false, true, false, false, false, false, true, true, false, false, false, false, false, false, false, false, false, true, false, true, true, true, false, false, false, false, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, false, false, true, true, true, true, false, false, true, true, false, true, false, true, true, true, true, false, true, true, true, true, true, true, true, true, true, false, true, false, false, false, false, false, false, true, false, true, true, true, true, false, false, true, true, true, false, false, false, false, true, false, true, true, true, false, true, false, false, false, true, true, true, true, false, true, false, true, false, false, false, true, true, false, false, false, true, false, true, false, true, true, true, false, true, false, false, false, true, false, false, true, true, true, true, false, true, false, false, true, false, true, false, true, true, true, false, false, false, false, false, true, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, true, false, false, true, true, true, true, false, false, true, true, false, true, false, true, true, true, true, false, true, true, true, true, true, true, true, true, true, false, true, false, false, false, false, false, false, true, false, true, true, true, true, false, false, true, true, true, false, false, false, false, true, false, true, true, true, false, true, false, false, false, true, true, true, true, false, true, false, true, false, false, false, true, true, false, false, false, true, false, true, false, true, true, true, false, true, false, false, false, true, false, true, false, true, true, true, true, false, true, false, false, true, false, true, false, true, true, true, true, false, false, false, false, false, true, true, false, true, false, true, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, false, false, true, true, true, true, false, false, true, true, false, true, false, true, true, true, true, false, true, true, true, true, true, true, true, true, true, false, true, false, false, false, false, false, false, true, false, true, true, true, true, false, false, true, true, true, false, false, false, false, true, false, true, true, true, false, true, false, true, false, true, true, true, true, false, true, false, true, false, false, false, true, true, false, false, false, true, false, true, false, true, true, true, false, true, false, false, false, true, false, true, false, true, true, true, true, false, true, false, false, true, false, true, false, true, true, true, true, false, false, false, false, false, true, true, false, true, false, true, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, true, true, false, true, false, true, false, false, false, true, true, true, true, true, true, true, false, false, true, true, false, false, true, false, false, false, false, false, true, false, false, true, true, true, true, true, true, false, false, true, true, true, false, true, false, false, true, true, true, true, true, false, false, true, false, true, false, false, true, true, false, true, false, true, true, true, false, false, true, true, false, true, true, true, true, true, true, false, false, false, true, false, true, false, true, true, true, true, true, false, false, false, true, false, false, false, false, true, true, true, true, true, true, true, true, false, true, false, true, true, false, false, true, false, false, true]);
            let encoded = BinVector::from_bools(&[false, false, false, false, true, true, false, true, false, true, false, false, false, true, true, true, true, true, true, true, false, false, true, true, false, false, true, false, false, false, false, false, true, false, false, true, true, true, true, true, true, false, false, true, true, true, false, true, false, false, true, true, true, true, true, false, false, true, false, true, false, false, true, true, false, true, false, true, true, true, false, false, true, true, false, true, true, true, true, true, true, false, false, false, true, false, true, false, true, true, true, true, true, false, true, false, false, true, false, false, false, false, true, true, true, true, true, true, true, true, true, false, true, false, true, true, false, false, false, true, false, false, false, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, true, true, false, false, false, true, false, false, false, true, true, true, true, true, true, true, false, false, true, true, false, false, true, false, false, false, false, false, true, false, false, true, true, true, true, true, true, false, false, true, true, true, false, true, false, false, true, true, true, true, true, false, false, true, false, true, false, false, true, true, false, true, false, true, true, true, false, false, true, true, false, true, true, true, true, true, true, false, false, false, true, false, true, false, true, true, true, true, true, false, true, false, false, true, false, false, false, false, true, true, true, true, true, true, true, true, true, false, true, false, true, true, false, false, false, true, false, false, false, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, false, true, false, false, false, true, false, true, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false, false, true, true, true, true, true, false, false, false, false, true, true, false, true, false, false, false, false, false, true, false, true, true, false, true, false, false, true, true, false, false, false, false, true, true, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, true, true, false, false, false, true, false, false, false, false, false, true, false, true, false, false, false, false, false, true, true, true, false, false, true, true, true, false, false, false, false, true, true, true]);
            let encoded = BinVector::from_bools(&[true, false, false, false, false, true, false, false, false, true, false, true, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false, false, true, true, true, true, true, false, false, false, false, true, true, false, true, false, false, false, false, false, true, false, true, true, false, true, false, false, true, true, false, false, false, false, true, true, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, false, true, false, true, false, false, false, false, false, true, true, true, false, false, false, true, true, true, false, false, false, true, false, true, true, false, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, false, true, false, false, false, true, false, true, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false, false, true, true, true, true, true, false, false, false, false, true, true, false, true, false, false, false, false, false, true, false, true, true, false, true, false, false, true, true, false, false, false, false, true, true, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, false, true, false, true, false, false, false, false, false, true, true, false, false, false, false, true, true, true, false, false, false, true, false, true, true, false, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, false, true, true, true, true, false, true, true, true, true, false, true, true, true, false, true, true, true, false, false, true, false, true, true, false, false, true, false, false, false, false, true, true, true, true, false, false, false, false, true, false, false, false, false, false, false, false, false, true, true, true, true, false, true, false, true, false, false, true, true, false, false, true, false, true, true, true, false, true, true, true, false, false, false, false, false, true, true, false, false, false, false, false, false, true, false, true, true, false, true, true, true, false, true, true, true, false, false, false, true, false, false, true, false, false, true, false, false, true, true, false, true, false, false, true, true]);
            let encoded = BinVector::from_bools(&[true, false, false, false, false, true, true, true, true, false, true, true, true, true, false, true, true, true, false, true, true, true, false, false, true, false, true, true, false, false, true, false, false, false, false, true, true, true, true, false, false, false, false, true, false, false, false, false, false, false, false, false, true, true, true, true, false, true, false, true, false, false, true, true, false, false, true, false, true, true, true, false, true, true, true, false, false, false, false, false, true, true, false, false, false, false, false, false, true, false, true, true, false, true, false, true, true, false, true, true, true, false, false, false, true, false, false, true, false, false, false, true, false, false, true, true, false, true, true, false, false, true, false, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, false, true, true, true, true, false, true, true, true, true, false, true, true, true, false, true, true, true, false, false, true, false, true, true, false, false, true, false, false, false, false, true, true, true, true, false, false, false, false, true, false, false, false, false, false, false, false, false, true, true, true, true, false, true, false, true, false, false, true, true, false, false, true, false, true, true, true, false, true, true, true, false, false, false, false, false, true, true, false, false, false, false, false, false, true, false, false, true, false, true, false, true, true, false, true, true, true, false, false, false, true, false, false, true, false, false, false, true, false, false, true, true, false, true, true, false, false, true, false, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, false, false, true, false, false, false, true, true, true, true, false, true, false, false, true, false, true, true, true, true, false, true, false, false, true, true, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false, true, false, true, true, false, false, false, false, false, false, true, false, true, false, true, true, true, true, true, false, true, false, false, false, true, false, false, false, true, true, false, false, true, false, false, false, false, true, true, false, true, true, true, false, true, false, true, true, false, true, true, true, false, true, false, false, true, false, false, false, true, false, false, false, false, false, false, true, false, false, true, true, true, true, true]);
            let encoded = BinVector::from_bools(&[true, true, false, false, false, false, true, false, false, false, true, true, true, true, false, true, false, false, true, false, true, true, true, true, false, true, false, false, true, true, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false, true, false, true, true, false, false, false, false, false, false, true, false, true, false, true, true, true, true, true, false, true, false, false, false, true, false, false, false, true, true, false, false, true, false, false, false, false, true, true, false, true, true, true, false, true, false, true, true, false, true, true, true, true, false, true, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, true, true, true, true, true, false, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, false, false, true, false, false, false, true, true, true, true, false, true, false, false, true, false, true, true, true, true, false, true, false, false, true, true, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false, true, false, true, true, false, false, false, false, false, false, true, false, true, false, true, true, true, true, true, false, true, false, false, false, true, false, false, false, true, true, false, false, true, false, false, false, false, true, true, false, true, true, true, false, true, false, true, true, false, true, true, true, true, false, true, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, true, true, true, true, true, false, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, false, true, true, false, true, false, true, true, true, true, true, false, false, false, false, false, true, false, false, true, true, true, false, false, false, false, false, true, false, false, false, false, false, false, true, true, true, false, true, true, false, true, true, true, true, true, false, true, false, true, false, false, true, false, false, false, true, true, false, true, false, false, true, false, true, false, false, true, false, false, false, true, false, false, true, false, false, false, true, false, false, true, false, false, true, true, false, false, false, true, false, false, true, true, true, false, true, false, false, true, false, true, true, false, true, false, true, true, false, true, false, false, true, true, true]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, false, true, true, false, true, false, true, true, true, true, true, false, false, false, false, false, true, false, false, true, true, true, false, false, false, false, false, true, false, false, false, false, false, false, true, true, true, false, true, true, false, true, true, true, true, true, false, true, false, true, false, false, true, false, false, false, true, true, false, true, false, false, true, false, true, false, false, true, false, false, false, true, false, false, true, false, false, false, true, false, false, true, false, false, true, true, false, false, false, false, true, false, false, true, true, true, false, true, false, false, true, false, true, true, false, true, true, false, true, true, false, true, false, true, false, true, true, false, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, true, false, true, true, false, true, false, true, true, true, true, true, false, false, false, false, false, true, false, false, true, true, true, false, false, false, false, false, true, false, false, true, false, false, false, true, true, true, false, true, true, false, true, true, true, true, true, false, true, false, true, false, false, true, false, false, false, true, true, false, true, false, false, true, false, true, false, false, true, false, false, false, true, false, false, true, false, false, false, true, false, false, true, false, false, true, true, false, false, false, false, true, false, false, true, true, true, false, true, false, false, true, false, true, true, false, true, true, false, true, true, false, true, false, true, false, true, true, false, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, false, false, false, true, true, false, true, true, false, true, true, false, false, true, true, false, true, false, true, false, true, true, false, false, false, false, false, false, true, false, true, false, false, false, true, false, true, false, false, false, false, true, true, true, false, true, true, false, true, true, false, true, false, true, true, true, false, false, false, false, false, false, false, true, true, true, false, false, true, true, true, false, true, true, true, false, false, false, true, false, true, false, true, true, false, true, true, false, true, false, true, false, false, false, true, false, false, true, false, true, false, false, true, true, false, true, true, true, false, false, false, true, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, true, false, false, false, true, true, false, true, true, false, true, true, false, false, true, true, false, true, false, true, false, true, true, false, false, false, false, false, false, true, false, true, false, false, false, true, false, true, false, false, false, false, true, true, true, false, true, true, false, true, true, false, true, false, true, true, true, false, false, false, false, false, false, false, true, true, true, false, false, true, true, true, false, true, true, true, false, false, false, true, false, true, false, true, true, false, true, true, false, true, false, true, true, false, false, false, true, false, false, true, false, true, false, false, true, true, false, false, true, true, true, false, false, false, true, false, false, true, false, true, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, false, false, false, true, true, false, true, true, false, true, true, false, false, true, true, false, true, false, true, false, true, true, false, false, false, false, false, false, true, false, true, false, false, false, true, false, true, false, false, false, false, true, true, true, false, true, true, false, true, true, false, true, false, true, true, true, false, false, false, false, false, false, false, true, true, true, false, false, true, true, true, false, true, true, true, false, false, false, true, false, true, false, true, true, false, true, true, false, true, false, true, true, false, false, false, true, false, false, true, false, true, false, false, false, true, false, false, true, true, true, false, false, false, true, false, false, true, false, true, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, true, true, true, false, false, false, false, true, true, false, true, true, false, false, true, true, false, false, false, true, true, false, true, true, true, false, false, false, true, false, false, true, false, false, false, false, false, false, false, true, false, true, false, false, false, false, true, false, true, false, false, false, false, false, true, true, true, true, false, true, true, false, false, false, false, true, true, false, false, true, true, false, false, true, false, false, true, true, false, true, false, false, true, true, false, false, true, false, false, true, true, false, false, true, true, false, false, false, true, false, true, true, true, true, true, true, false, true, false, true, false, false, false, true, true, true]);
            let encoded = BinVector::from_bools(&[true, true, false, false, true, true, true, false, false, false, false, true, true, false, true, true, false, false, true, true, false, false, false, true, true, false, true, true, true, false, false, false, true, false, false, true, false, false, false, false, false, false, false, true, false, true, false, false, false, false, true, false, true, false, false, false, false, false, true, true, true, true, false, true, true, false, false, false, false, true, true, false, false, true, true, false, false, true, false, false, true, true, false, true, false, false, true, true, false, false, true, false, false, true, false, true, false, false, true, true, false, false, false, true, false, true, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, true, true, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, true, true, true, false, false, false, false, true, true, false, true, true, false, false, true, true, false, false, false, true, true, false, true, true, true, false, false, false, true, false, false, true, false, false, false, false, false, false, false, true, false, true, false, false, false, false, true, false, true, false, false, false, false, false, true, true, true, true, false, true, true, false, false, false, false, true, true, false, false, true, true, false, false, true, false, false, true, true, false, true, false, false, true, true, false, false, true, false, false, true, false, true, false, false, true, true, false, false, false, true, false, true, true, true, true, true, false, true, false, true, false, false, false, false, false, false, true, true, true, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, false, true, false, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, true, false, true, true, true, true, true, true, false, false, true, false, true, false, false, true, false, false, false, true, false, true, true, false, false, false, false, true, true, false, false, true, true, false, false, false, false, false, true, true, false, true, true, false, false, true, false, false, true, true, true, true, false, false, true, true, false, true, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, true, true, true, false, true, true, false, false, false, true, false, false, true, true, false, true, false, true, false, true, false, false, true]);
            let encoded = BinVector::from_bools(&[true, true, true, true, false, true, false, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, true, false, true, true, true, true, true, true, false, false, true, false, true, false, false, true, false, false, false, true, false, true, true, false, false, false, false, true, true, false, false, true, true, false, false, false, false, false, true, true, false, true, true, false, false, true, false, false, true, true, true, true, false, false, true, true, false, true, true, true, true, true, false, true, true, false, false, true, true, true, false, true, false, true, true, true, true, false, true, true, false, false, false, true, false, false, true, true, true, false, true, false, true, false, false, true, false, false, false, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, false, true, false, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, true, false, true, true, true, true, true, true, false, false, true, false, true, false, false, true, false, false, false, true, false, true, true, false, false, false, false, true, true, false, false, true, true, false, false, false, false, false, true, true, false, true, true, false, false, true, false, false, true, true, true, true, false, false, true, true, false, true, true, true, true, true, false, true, true, false, false, true, true, true, false, true, false, true, true, true, true, false, true, true, false, false, false, true, false, false, true, true, true, false, true, false, false, false, false, true, false, false, false, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, true, true, false, false, false, false, true, false, false, true, true, false, false, true, false, true, true, true, true, false, false, true, false, false, true, true, false, true, true, true, false, false, false, false, false, false, true, true, true, false, false, false, true, true, false, true, true, true, true, true, true, false, false, false, true, false, false, false, true, true, true, true, false, true, true, false, true, false, false, false, false, true, true, true, false, false, true, true, true, true, true, true, false, true, true, false, false, false, true, true, false, false, true, true, true, true, true, true, true, true, false, false, true, false, false, true, false, true, false, true, false, false, false, true, true, true]);
            let encoded = BinVector::from_bools(&[false, false, false, true, true, true, false, false, false, false, true, false, false, true, true, false, false, true, false, true, true, true, true, false, false, true, false, false, true, true, false, true, true, true, false, false, false, false, false, false, true, true, true, false, false, false, true, true, false, true, true, true, true, true, true, false, false, false, true, false, false, false, true, true, true, true, false, true, true, false, true, false, false, false, false, true, true, true, false, false, true, true, true, true, true, true, false, true, true, false, false, false, true, true, true, false, false, true, true, true, true, true, true, true, true, false, false, true, false, false, true, true, false, true, false, true, false, false, true, false, true, true, true, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, true, true, false, false, false, false, true, false, false, true, true, false, false, true, false, true, true, true, true, false, false, true, false, false, true, true, false, true, true, true, false, false, false, false, false, false, true, true, true, false, false, false, true, true, false, true, true, true, true, true, true, false, false, false, true, false, false, false, true, true, true, true, false, true, true, false, true, false, false, false, false, true, true, true, false, false, true, true, true, true, true, true, false, true, true, false, false, false, true, true, true, false, false, true, true, true, true, true, true, true, true, false, false, true, false, false, true, true, false, true, false, true, false, false, true, false, true, true, true, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, true, false, true, true, false, false, true, false, true, true, false, false, false, false, true, true, false, false, true, false, false, true, true, false, false, true, true, true, true, false, false, true, false, true, false, false, false, false, true, true, false, true, true, false, true, false, false, false, false, true, false, true, false, true, true, false, false, true, true, false, true, false, true, false, true, false, false, false, true, false, true, false, false, false, true, true, false, false, true, false, true, false, false, false, true, false, false, false, false, false, true, true, true, false, true, true, true, false, true, true, true, true, false, true, true, false, false, false, false, true, false, false, false, true, true, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, true, false, true, true, false, false, true, false, true, true, false, false, false, false, true, true, false, false, true, false, false, true, true, false, false, true, true, true, true, false, false, true, false, true, false, false, false, false, true, true, false, true, true, false, true, false, false, false, false, true, false, true, false, true, true, false, false, true, true, false, true, false, true, false, true, false, false, false, true, false, true, false, false, false, true, true, false, false, true, false, true, false, false, false, true, false, false, false, false, false, true, true, true, true, false, true, true, true, false, true, true, true, true, false, true, true, false, false, false, false, false, true, false, false, false, false, true, true, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, true, false, true, true, false, false, true, false, true, true, false, false, false, false, true, true, false, false, true, false, false, true, true, false, false, true, true, true, true, false, false, true, false, true, false, false, false, false, true, true, false, true, true, false, true, false, false, false, false, true, false, true, false, true, true, false, false, true, true, false, true, false, true, false, true, false, false, false, true, false, true, false, false, false, true, true, false, false, true, false, true, false, false, false, true, false, false, false, false, false, true, true, true, true, false, true, true, true, false, true, true, true, true, false, true, true, false, false, false, false, false, true, false, false, false, false, true, true, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, true, true, false, true, true, false, true, false, false, false, false, false, true, false, false, false, true, false, false, true, true, true, true, false, true, true, false, true, true, true, true, false, true, false, false, false, false, true, true, false, true, false, true, true, false, true, true, true, true, false, true, true, false, true, true, false, false, false, false, false, true, false, true, false, false, true, true, true, false, true, true, true, false, true, false, true, true, false, false, false, false, false, true, false, true, true, true, true, true, false, true, false, false, false, false, true, false, false, true, true, false, false, true, false, true, true, false, true, true, true, true, false, true, false, true, true]);
            let encoded = BinVector::from_bools(&[true, true, false, true, true, true, false, true, true, false, true, false, false, false, false, false, true, false, false, false, true, false, false, true, true, true, true, false, true, true, false, true, true, true, true, false, true, false, false, false, false, true, true, false, true, false, true, true, false, true, true, true, true, false, true, true, false, true, true, false, false, false, false, false, true, false, true, false, false, true, true, true, false, true, true, true, false, true, false, true, true, false, false, false, false, false, true, false, true, true, true, true, true, false, true, true, false, false, false, false, true, false, false, true, true, false, false, true, false, true, false, true, false, true, true, true, true, false, false, true, false, true, false, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, true, true, false, true, true, false, true, false, false, false, true, false, true, false, false, false, true, false, false, true, true, true, true, false, true, true, false, true, true, true, true, false, true, false, false, false, false, true, true, false, true, false, true, true, false, true, true, true, true, false, true, true, false, true, true, false, false, false, false, false, true, false, true, false, false, true, true, true, false, true, true, true, false, true, false, true, true, false, false, false, false, false, true, false, true, true, true, true, true, false, true, true, false, false, false, false, true, false, false, true, true, false, false, true, false, true, false, true, false, true, true, true, true, false, false, true, false, true, false, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, true, false, false, false, false, false, true, true, false, true, true, false, false, true, true, true, false, true, false, true, false, false, false, false, true, true, false, true, true, false, true, false, false, true, false, true, false, false, false, false, false, false, false, false, false, true, false, false, false, false, true, true, true, true, true, true, true, true, false, true, true, false, true, false, false, false, true, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, true, true, true, true, false, false, false, false, true, false, true, false, true, true, false, false, true, false, true, false, false, true, true, true, true, false, true, false, false, false, false, false, false]);
            let encoded = BinVector::from_bools(&[false, false, true, true, true, false, false, false, false, false, true, true, false, true, true, false, false, true, true, true, false, true, false, true, false, false, false, false, true, true, false, true, true, false, true, false, false, true, false, true, false, false, false, false, false, false, false, false, false, true, false, false, false, false, true, true, true, true, true, true, true, true, false, true, true, false, true, false, false, false, true, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, true, true, true, true, false, false, false, false, false, true, false, true, false, true, true, false, false, true, false, true, false, false, true, true, true, true, true, false, true, false, false, true, false, false, false, false, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, true, false, false, false, false, false, true, true, false, true, true, false, false, true, true, true, false, true, false, true, false, false, false, false, true, true, false, true, true, false, true, false, false, true, false, true, false, false, false, false, true, false, false, false, false, true, false, false, false, false, true, true, true, true, true, true, true, true, false, true, true, false, true, false, false, false, true, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, true, true, true, true, false, false, false, false, false, true, false, true, false, true, true, false, false, true, false, true, false, false, true, true, true, true, true, false, true, false, false, true, false, false, false, false, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, true, true, true, true, true, true, false, false, false, false, false, false, false, false, true, true, true, false, false, true, false, true, false, false, true, false, true, true, true, false, true, false, true, false, false, true, false, true, true, true, true, true, true, true, false, false, false, false, true, false, true, true, false, true, true, false, false, true, false, false, true, true, true, false, true, true, true, true, true, false, true, false, false, false, true, true, false, true, false, false, true, true, true, false, true, false, true, false, true, false, false, false, true, true, false, true, false, true, false, false, false, true, false, false, true, true, false, false, false, true, false, true, true, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, false, false, true, true, true, true, true, true, false, false, false, false, false, false, false, false, true, true, true, false, false, true, false, true, false, false, true, false, true, true, true, false, true, false, true, false, false, true, false, true, true, true, true, true, true, true, false, false, false, false, true, false, true, true, false, true, true, false, false, true, false, false, true, true, true, false, true, true, true, true, true, false, true, false, false, false, true, true, false, true, false, false, true, true, true, false, true, false, true, false, true, false, false, false, false, true, true, false, true, false, true, false, false, false, true, false, false, true, false, true, false, false, false, true, false, true, false, true, true, false, true, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, true, true, true, true, true, true, false, false, false, false, false, false, false, false, true, true, true, false, false, true, false, true, false, false, true, false, true, true, true, false, true, false, true, false, false, true, false, true, true, true, true, true, true, true, false, false, false, false, true, false, true, true, false, true, true, false, false, true, false, false, true, true, true, false, true, true, true, true, true, false, true, false, false, false, true, true, false, true, false, false, true, true, true, false, true, false, true, false, true, false, false, false, false, true, true, false, true, false, true, false, false, false, true, false, false, true, false, true, false, false, false, true, false, true, false, true, true, true, true, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, true, false, true, false, false, true, true, true, false, true, true, true, true, true, false, false, true, false, true, false, false, false, false, false, false, true, false, true, false, false, true, true, true, true, false, false, true, true, false, false, true, true, false, false, true, false, false, true, true, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, false, true, true, false, true, false, false, false, true, false, true, false, true, false, true, false, false, false, true, false, false, true, false, true, false, true, false, false, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, true, true, false, true, false, true, false, false, true, true, true, false, true, true, true, true, true, false, false, true, false, true, false, false, false, false, false, false, true, false, true, false, false, true, true, true, true, false, false, true, true, false, false, true, true, false, false, true, false, false, true, true, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, false, true, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, false, false, true, false, false, true, false, false, true, false, true, false, false, false, true, false, true, false, false, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, true, false, true, false, false, true, true, true, false, true, true, true, true, true, false, false, true, false, true, false, false, false, false, false, false, true, false, true, false, false, true, true, true, true, false, false, true, true, false, false, true, true, false, false, true, false, false, true, true, true, false, false, true, true, false, false, true, true, true, true, false, false, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, false, true, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, false, false, true, false, false, true, false, false, true, false, true, false, false, false, true, false, true, false, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, true, false, false, true, true, false, true, false, false, true, true, true, true, true, false, false, false, true, false, true, true, false, false, true, true, false, false, true, true, true, true, true, false, true, false, true, false, true, true, false, true, false, false, true, false, true, false, true, false, true, false, false, false, true, false, true, true, true, false, true, true, false, true, true, true, false, false, false, false, true, false, false, false, true, false, true, false, false, true, true, true, false, true, true, false, true, true, false, true, false, false, true, true, false, false, false, true, true, true, false, true, true, true, false, false, true, false, true, false, true, true, false, true, true, false, false]);
            let encoded = BinVector::from_bools(&[false, false, false, false, true, false, false, true, true, false, true, false, false, true, true, true, true, true, false, false, false, true, false, true, true, false, false, true, true, false, false, true, true, true, true, true, false, true, false, true, false, true, true, false, true, false, false, true, false, true, false, true, false, true, false, false, false, true, false, true, true, true, false, true, true, false, true, true, true, false, false, false, false, true, false, false, false, true, false, true, false, false, true, true, true, false, true, true, false, true, true, false, true, false, false, false, true, true, false, false, false, true, true, true, false, true, true, true, false, false, true, true, false, true, false, true, true, false, true, true, true, false, false, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, true, false, false, true, true, false, true, false, false, true, true, true, true, false, false, false, false, true, false, true, true, false, false, true, true, false, false, true, true, true, true, true, false, true, false, true, false, true, true, false, true, false, false, true, false, true, false, true, false, true, false, false, false, true, false, true, true, true, false, true, true, false, true, true, true, false, false, false, false, true, false, false, false, true, false, true, false, false, true, true, true, false, true, true, false, true, true, false, true, false, false, false, true, true, false, false, false, true, true, true, false, true, true, true, false, false, true, true, false, true, false, true, true, false, true, true, true, false, false, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, false, false, true, false, true, true, false, false, true, false, true, true, false, true, false, false, false, false, true, false, false, true, true, true, false, false, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, true, true, true, true, true, false, true, false, false, false, false, false, false, true, true, true, false, false, false, false, true, true, false, true, true, false, false, false, false, true, true, true, true, false, true, true, true, false, true, false, true, false, false, false, false, false, false, true, false, false, true, true, false, true, true, true, true, true, false, true, true, true, true, true, true, true, false, false, true, true, true, true, true]);
            let encoded = BinVector::from_bools(&[false, false, true, false, false, false, true, false, true, true, false, false, true, false, true, true, false, true, false, false, false, false, true, false, false, true, true, true, false, false, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, true, true, true, true, true, false, true, false, false, false, false, false, false, true, true, true, false, false, false, false, true, true, false, true, true, false, false, false, false, true, true, true, true, false, true, true, true, false, true, false, true, false, false, false, false, false, false, true, true, false, false, true, true, false, true, true, true, true, true, false, true, true, true, false, true, true, true, true, false, false, true, false, true, true, true, false, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, false, false, true, false, true, true, false, false, true, false, true, true, false, true, false, false, false, false, true, false, false, true, true, true, false, false, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, true, true, true, true, true, false, true, false, true, false, false, false, false, true, true, true, false, false, false, false, true, true, false, true, true, false, false, false, false, true, true, true, true, false, true, true, true, false, true, false, true, false, false, false, false, false, false, true, true, false, false, true, true, false, true, true, true, true, true, false, true, true, true, false, true, true, true, true, false, false, true, false, true, true, true, false, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, true, false, true, true, false, false, true, true, true, false, true, false, false, false, true, false, false, true, true, false, false, true, true, false, false, false, true, false, true, false, false, false, true, true, true, true, false, false, false, true, true, false, true, true, true, false, true, true, true, false, true, true, false, false, true, true, false, true, false, false, true, true, true, false, false, false, false, true, true, false, true, false, false, false, false, false, true, false, true, false, false, true, true, true, false, true, true, false, false, true, false, false, true, true, false, true, true, false, false, true, true, true, true, false, true, true, true, true, true, false, true, false, true, true, true]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, true, false, true, true, false, false, true, true, true, false, true, false, false, false, true, false, false, true, true, false, false, true, true, false, false, false, true, false, true, false, false, false, true, true, true, true, false, false, false, true, true, false, true, true, true, false, true, true, true, false, true, true, false, false, true, true, false, true, false, false, true, true, true, false, false, false, false, true, true, false, true, false, false, false, false, false, true, false, true, false, false, true, true, true, false, true, true, false, false, false, true, false, false, true, true, false, true, true, false, false, true, true, true, true, false, false, true, true, true, true, true, false, true, false, false, true, true, false, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, true, false, true, true, false, false, true, true, true, false, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, false, true, false, true, false, false, false, true, true, true, true, false, false, false, true, true, false, true, true, true, false, true, true, true, false, true, true, false, false, true, true, false, true, false, false, true, true, true, false, false, false, false, true, true, false, true, false, false, false, false, false, true, false, true, false, false, true, true, true, false, true, true, false, false, false, true, false, false, true, true, false, true, true, false, false, true, true, true, true, false, false, true, true, true, true, true, false, true, false, false, true, true, false, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, false, false, false, false, false, false, false, true, true, false, false, false, false, true, true, true, false, false, false, false, false, true, false, true, true, false, false, false, false, true, false, true, true, false, false, false, false, false, true, true, true, false, false, false, false, true, false, false, true, true, true, false, true, false, false, false, false, true, true, false, false, false, false, true, false, false, true, true, true, true, false, true, true, true, true, false, true, true, true, true, true, true, false, true, false, false, false, false, true, false, true, true, false, false, true, true, true, false, true, false, true, false, false, false, false, false, false, false, false, true, true, true, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, false, true, false, false, false, false, false, false, false, false, true, true, false, false, false, false, true, true, true, false, false, false, false, false, true, false, true, true, false, false, false, false, true, false, true, true, false, false, false, false, false, true, true, true, false, false, false, false, true, false, false, true, true, true, false, true, false, false, false, false, true, true, false, false, false, false, true, false, false, true, true, true, true, false, true, true, true, true, false, true, true, true, true, true, true, false, true, false, false, false, false, true, false, false, true, true, false, false, true, true, true, false, true, false, true, false, false, false, false, true, false, false, false, false, true, true, true, true, false, true, false, false, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, true, false, false, false, false, false, false, true, true, false, false, false, false, true, true, true, false, false, false, false, false, true, false, true, true, false, false, false, false, true, false, true, true, false, false, false, false, false, true, true, true, false, false, false, false, true, false, false, true, true, true, false, true, false, false, false, false, true, true, false, false, false, false, true, false, false, true, true, true, true, false, true, true, true, true, false, true, true, true, true, true, true, false, true, false, false, false, false, true, false, false, true, true, false, false, true, true, true, false, true, false, true, false, false, false, false, true, false, false, false, false, true, true, true, true, false, true, false, false, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, true, false, true, true, true, false, true, false, false, false, true, true, false, true, true, true, false, true, true, true, true, true, true, false, false, true, false, true, false, true, true, true, false, false, false, false, false, true, true, false, false, false, true, false, true, false, true, false, true, true, true, true, false, false, false, true, true, true, true, true, true, true, true, true, false, true, false, false, true, true, false, true, false, true, false, false, false, false, false, false, true, false, false, true, true, true, false, false, false, true, true, false, true, false, true, false, true, false, false, true, true, false, true, false, true, false, false, false, true, true, true, false, true, false, true, true]);
            let encoded = BinVector::from_bools(&[true, false, false, true, true, false, true, true, true, false, true, false, false, false, true, true, false, true, true, true, false, true, true, true, true, true, true, false, false, true, false, true, false, true, true, true, false, false, false, false, false, true, true, false, false, false, true, false, true, false, true, false, true, true, true, true, false, false, false, true, true, true, true, true, true, true, true, true, false, true, false, false, true, true, false, true, false, true, false, false, false, false, false, false, true, false, false, true, true, true, false, false, false, true, false, true, false, true, false, true, false, true, false, false, true, true, false, true, false, true, true, false, false, false, true, true, true, false, true, true, false, true, true, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, true, false, true, true, true, false, true, false, false, false, true, true, false, true, true, true, false, true, true, true, true, true, true, false, false, true, false, true, false, true, true, true, false, false, false, false, false, true, true, false, false, false, true, false, true, false, true, false, true, true, true, true, false, false, false, true, true, true, true, true, true, true, true, true, false, true, false, false, true, true, false, true, false, true, false, false, false, false, false, false, true, false, false, true, true, true, false, false, false, true, false, true, false, true, false, true, true, true, false, false, true, true, false, true, false, true, true, false, false, false, true, true, true, false, true, true, false, true, true, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, true, true, false, false, true, true, true, true, true, false, true, false, false, false, true, true, true, true, false, false, true, true, false, false, true, true, false, true, false, true, true, false, false, false, true, false, true, false, true, false, true, true, true, false, true, false, false, false, false, false, false, true, true, false, true, false, false, true, false, false, true, true, true, false, false, true, true, false, true, false, false, false, false, true, false, false, false, true, true, false, false, false, true, false, true, true, true, true, true, true, true, false, true, true, false, false, true, false, false, true, false, true, true, true, true, false, true, true, false, true, true, true, false, true, true]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, true, true, false, false, true, true, true, true, true, false, true, false, false, false, true, true, true, true, false, false, true, true, false, false, true, true, false, true, false, true, true, false, false, false, true, false, true, false, true, false, true, true, true, false, true, false, false, false, false, false, false, true, true, false, true, false, false, true, false, false, true, true, true, false, false, true, true, false, true, false, false, false, false, true, false, false, false, true, true, false, false, false, true, false, true, true, true, true, true, true, true, true, false, true, true, false, false, true, false, false, true, false, true, true, true, true, true, false, true, true, false, true, true, false, true, false, true, false, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, true, false, true, false, false, true, true, true, true, true, false, true, false, false, false, true, true, true, true, false, false, true, true, false, false, true, true, false, true, false, true, true, false, false, false, true, false, true, false, true, false, true, true, true, false, true, false, false, false, false, false, false, true, true, false, true, false, false, true, false, false, true, true, true, false, false, true, true, false, true, false, false, false, false, true, false, false, false, true, true, false, false, false, true, false, true, true, true, true, true, true, true, true, false, true, true, false, false, true, false, false, true, false, true, true, true, true, true, false, true, true, false, true, true, false, true, false, true, false, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, true, true, true, false, false, true, false, true, false, true, true, false, false, false, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, false, false, false, false, true, false, false, false, true, true, true, true, false, false, false, true, true, false, false, true, true, false, false, true, false, true, false, true, false, true, false, true, false, false, true, true, true, true, false, true, false, false, false, false, false, false, true, true, false, false, true, true, true, true, false, true, false, false, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, true, false, true, false, false, false, true, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, false, false, true, true, true, false, false, true, false, true, false, true, true, false, false, false, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, false, false, false, false, true, false, false, false, true, true, true, true, false, false, false, true, true, false, false, true, true, false, false, true, false, true, false, true, false, true, false, true, false, false, true, true, true, true, false, true, false, false, false, false, false, false, true, true, false, false, true, true, true, true, false, true, false, false, false, true, false, true, true, true, true, false, false, true, true, false, true, false, true, false, true, false, false, true, false, false, false, true, true, true, true, true, false, false, false, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, true, true, true, false, false, true, false, true, false, true, true, false, false, false, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, false, false, false, false, true, false, false, false, true, true, true, true, false, false, false, true, true, false, false, true, true, false, false, true, false, true, false, true, false, true, false, true, false, false, true, true, true, true, false, true, false, false, false, false, false, false, true, true, false, false, true, true, true, true, false, true, false, false, false, true, false, true, true, true, true, false, false, true, true, false, true, false, true, false, true, false, false, true, false, false, false, true, true, true, true, true, false, false, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, true, false, true, true, true, false, true, true, true, true, false, false, true, true, false, true, true, true, false, true, true, true, false, false, false, false, false, true, false, false, true, true, false, true, true, true, true, false, false, false, true, false, true, false, true, false, true, true, false, true, false, true, false, true, false, false, true, false, false, false, false, true, true, false, false, false, false, true, true, true, true, true, false, false, false, false, true, false, true, false, true, true, false, false, true, false, false, false, false, true, true, true, true, true, true, false, true, false, true, false, false, true, false, true, false, false, false, true, false, true, false, true, false, true, true, false]);
            let encoded = BinVector::from_bools(&[false, true, false, true, true, false, true, true, true, false, true, true, true, true, false, false, true, true, false, true, true, true, false, true, true, true, false, false, false, false, false, true, false, false, true, true, false, true, true, true, true, false, false, false, true, false, true, false, true, false, true, true, false, true, false, true, false, true, false, false, true, false, false, false, false, true, true, false, false, false, false, true, true, true, true, true, false, false, false, false, true, false, true, false, true, true, false, false, true, false, false, false, false, true, true, true, true, true, true, true, false, true, false, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, true, false, true, true, true, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, true, false, true, true, true, false, true, true, true, true, false, false, true, true, false, true, true, true, false, true, true, true, false, false, false, false, false, true, false, false, true, true, false, true, true, true, true, false, false, false, true, false, true, false, true, false, true, true, false, true, false, true, false, true, false, false, true, false, false, false, false, true, true, false, false, false, false, true, true, true, true, true, false, false, false, false, false, false, true, false, true, true, false, false, true, false, false, false, false, true, true, true, true, true, true, true, false, true, false, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, true, false, true, true, true, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, false, true, true, true, true, false, false, true, false, true, true, false, true, false, false, true, false, false, true, false, false, true, true, false, true, false, false, false, false, false, false, true, true, false, false, true, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, false, false, false, false, true, false, true, true, true, true, false, true, true, false, false, true, false, false, true, true, true, true, true, true, true, false, true, false, false, false, true, false, false, false, true, true, false, true, false, true, false, false, false, true, true, true, false, false, false, false, false, false, false, true, true, true, false, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, false, true, true, true, true, false, false, true, false, true, true, false, true, false, false, true, false, false, true, false, false, true, true, false, true, false, false, false, false, false, false, true, true, false, false, true, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, false, false, false, false, true, false, true, true, true, true, false, true, true, false, false, true, false, false, true, true, true, true, true, true, true, false, true, false, false, false, true, false, false, false, true, true, false, false, true, false, true, false, false, false, true, true, true, false, false, false, false, false, true, false, false, true, true, true, false, true, true, true, true, false, true, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, false, false, true, true, true, true, false, false, true, false, true, true, false, true, false, false, true, false, false, true, false, false, true, true, false, true, false, false, false, false, false, false, true, true, false, false, true, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, false, false, false, false, true, false, true, true, true, true, false, true, true, false, false, true, false, false, true, true, true, true, true, true, true, false, true, false, false, false, true, false, false, false, true, true, false, false, true, false, true, false, false, false, true, true, true, false, false, false, false, false, true, false, false, true, true, true, false, true, true, true, true, false, true, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, true, false, false, true, false, false, true, false, true, true, true, true, false, false, false, true, true, false, false, true, false, true, true, true, false, true, false, true, true, false, false, false, true, true, true, true, false, false, false, false, true, false, true, false, false, false, true, true, true, false, true, false, true, true, true, false, false, true, true, false, false, true, false, false, true, true, true, true, true, false, true, false, true, true, false, false, false, false, false, true, true, true, false, true, false, true, true, false, true, false, true, false, true, false, false, true, true, false, true, true, false, false, false, false, true, true, false, false, false, true, true, true, false, false, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, true, true, false, false, true, false, false, true, false, true, true, true, true, false, false, false, true, true, false, false, true, false, true, true, true, false, true, false, true, true, false, false, false, true, true, true, true, false, false, false, false, true, false, true, false, false, false, true, true, true, false, true, false, true, true, true, false, false, true, true, false, false, true, false, false, true, true, true, true, true, false, true, false, true, true, false, false, false, false, false, true, true, true, false, true, false, true, true, false, true, false, true, true, false, true, false, false, true, true, false, true, true, false, false, false, false, true, true, true, false, false, false, true, true, true, true, false, false, true, false, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, true, false, false, true, false, false, true, false, true, true, true, true, false, false, false, true, true, false, false, true, false, true, true, true, false, true, false, true, true, false, false, false, true, true, true, true, false, false, false, false, true, false, true, false, false, false, true, true, true, false, true, false, true, true, true, false, false, true, true, false, false, true, false, false, true, true, true, true, true, false, true, false, true, true, false, false, false, false, false, true, true, true, false, true, false, true, true, false, true, false, true, true, false, true, false, false, true, true, true, true, true, false, false, false, false, true, true, true, false, false, false, true, true, true, true, false, false, true, false, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, true, true, true, false, true, false, true, true, false, true, true, true, false, false, true, false, false, false, false, false, true, false, true, true, false, false, true, false, false, true, true, true, false, true, false, false, true, false, false, false, true, false, true, true, false, false, true, false, true, false, true, false, false, false, true, false, false, true, false, true, true, false, true, false, false, false, false, true, false, false, false, true, true, true, false, false, false, true, false, false, true, false, true, true, false, true, true, true, false, false, true, false, false, true, false, false, true, true, true, false, false, true, false, false, false, true, true, false, true, false, false, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, false, false, true, true, true, true, false, true, false, true, true, false, true, true, true, false, false, true, false, false, false, false, false, true, false, true, true, false, false, true, false, false, true, true, true, false, true, false, false, true, false, false, false, true, false, true, true, false, false, true, false, true, false, true, false, false, false, true, false, false, true, false, true, true, false, true, false, false, false, false, true, false, false, false, true, true, true, false, false, false, true, false, false, true, false, true, true, false, true, true, true, false, false, true, true, false, false, true, false, false, true, true, true, false, false, true, false, false, false, true, true, true, false, true, false, false, false, true, false, true, false, false, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, true, true, true, false, true, false, true, true, false, true, true, true, false, false, true, false, false, false, false, false, true, false, true, true, false, false, true, false, false, true, true, true, false, true, false, false, true, false, false, false, true, false, true, true, false, false, true, false, true, false, true, false, false, false, true, false, false, true, false, true, true, false, true, false, false, false, false, true, false, false, false, true, true, true, false, false, false, false, false, false, true, false, true, true, false, true, true, true, false, false, true, true, false, false, true, false, false, true, true, true, false, false, true, false, false, false, true, true, true, false, true, false, false, false, true, false, true, false, false, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, false, true, true, false, false, true, true, true, false, false, true, true, false, false, false, false, false, false, false, false, true, true, false, false, true, false, true, false, false, true, false, false, false, true, false, true, true, false, false, true, true, false, false, false, true, true, true, false, true, false, false, false, true, false, true, false, true, true, false, false, true, false, false, false, false, false, false, false, false, true, true, true, true, false, true, true, false, false, true, true, false, true, false, false, true, true, true, true, false, true, true, false, true, false, false, false, true, true, true, true, false, true, true, true, false, true, false, true, true, false, false, false, true, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, false, true, true, false, false, true, true, true, false, false, true, true, false, false, false, false, false, false, false, false, true, true, false, false, true, false, true, false, false, true, false, false, false, true, false, true, true, false, false, true, true, false, false, false, true, true, true, false, true, false, false, false, true, false, true, false, true, true, false, false, true, false, false, false, false, false, false, false, false, true, true, true, true, false, true, true, false, false, true, true, false, true, false, false, true, true, true, true, false, true, true, true, false, true, false, false, false, true, true, true, true, false, true, true, true, false, false, true, false, true, true, false, false, false, false, true, true, true, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, false, true, true, false, false, true, true, false, false, false, true, true, false, false, false, false, false, false, false, false, true, true, false, false, true, false, true, false, false, true, false, false, false, true, false, true, true, false, false, true, true, false, false, false, true, true, true, false, true, false, false, false, true, false, true, false, true, true, false, false, true, false, false, false, false, false, false, false, false, true, true, true, true, false, true, true, false, false, true, true, false, true, false, false, true, true, true, true, false, true, true, true, false, true, false, false, false, true, true, true, true, false, true, true, true, false, false, true, false, true, true, false, false, false, false, true, true, true, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, true, false, false, false, true, false, true, true, false, true, false, true, true, true, false, true, false, true, false, false, true, true, true, true, false, false, true, true, false, false, true, true, true, true, false, false, true, false, false, true, true, false, false, true, false, false, false, false, false, false, true, true, false, true, false, false, true, true, true, true, false, true, false, false, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, false, false, true, true, false, true, true, false, true, false, true, false, true, true, false, true, false, true, false, true, true, true, true, true, false, false, false, true, false, true, false, false, false, true]);
            let encoded = BinVector::from_bools(&[false, false, true, true, true, false, false, false, true, false, true, true, false, true, false, true, true, true, false, true, false, true, false, false, true, true, true, true, false, false, true, true, false, false, true, true, true, true, false, false, true, false, false, true, true, false, false, true, false, false, false, false, false, false, true, true, false, true, false, false, true, true, true, true, false, true, false, false, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, false, false, true, true, false, true, true, false, false, true, false, true, false, true, true, false, true, false, true, false, true, true, true, true, true, true, false, false, false, true, false, true, false, false, false, false, true, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, true, false, false, false, true, false, true, true, false, true, false, true, true, true, false, true, false, true, false, false, true, true, true, true, false, false, true, true, false, false, true, true, true, true, false, false, true, false, false, true, true, false, false, true, false, false, false, false, false, false, true, true, false, true, false, false, true, true, true, true, false, true, false, false, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, false, false, true, true, false, true, true, false, false, true, false, true, false, true, true, true, true, false, true, false, true, true, true, true, true, true, false, false, false, true, false, true, false, false, false, false, true, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, false, true, true, false, true, true, false, true, false, true, true, true, false, false, false, true, false, true, false, false, true, true, false, true, false, true, false, true, false, false, true, false, false, true, false, false, true, true, false, true, false, true, false, false, true, false, false, true, true, false, true, true, true, true, true, true, false, true, true, true, true, false, false, false, true, false, true, false, true, true, true, false, true, false, false, true, true, true, false, true, true, false, false, true, true, true, false, false, true, true, false, true, false, false, true, false, false, true, true, true, false, true, false, true, false, true, true, true, true, false, true, true, false, true, true, true]);
            let encoded = BinVector::from_bools(&[true, true, false, false, false, true, true, false, true, true, false, true, false, true, true, true, false, false, false, true, false, true, false, false, true, true, false, true, false, true, false, true, false, false, true, false, false, true, false, false, true, true, false, true, false, true, false, false, true, false, false, true, true, false, true, true, true, true, true, true, false, true, true, true, true, false, false, false, true, false, true, false, true, true, true, false, true, false, false, true, true, true, false, true, true, false, false, true, true, true, false, false, true, true, false, false, true, false, false, true, false, false, true, true, true, false, true, false, true, false, true, true, true, true, true, false, true, true, false, false, true, true, true, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, false, true, true, false, true, true, false, true, false, true, true, true, false, false, false, true, false, true, false, false, true, true, false, true, false, true, false, true, false, false, true, false, false, true, false, false, true, true, false, true, false, true, false, false, true, false, false, true, true, false, true, true, true, true, true, true, false, true, true, true, true, false, false, false, true, false, true, false, true, true, true, false, true, false, false, true, true, true, false, true, true, false, false, true, true, true, false, false, true, true, false, false, true, false, false, true, false, false, true, true, true, false, true, false, true, false, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, true, false, false, true, true, false, true, true, false, true, true, false, false, false, false, false, false, true, false, false, true, false, true, false, false, false, false, false, false, false, false, false, true, true, true, true, false, true, true, true, false, false, false, true, false, false, false, false, false, false, true, true, true, false, false, true, false, false, true, true, false, false, true, false, true, true, false, false, true, false, false, true, true, false, false, true, true, false, true, true, false, true, true, true, false, false, true, false, true, true, false, true, false, true, true, false, false, true, true, true, true, false, true, true, false, true, true, false, false, true, true, true, false, true, false, true]);
            let encoded = BinVector::from_bools(&[true, false, false, true, true, false, false, true, true, false, true, true, false, true, true, false, false, false, false, false, false, true, false, false, true, false, true, false, false, false, false, false, false, false, false, false, true, true, true, true, false, true, true, true, false, false, false, true, false, false, false, false, false, false, true, true, true, false, false, true, false, false, true, true, false, false, true, false, true, true, false, false, true, false, false, true, true, false, false, true, true, false, true, true, false, true, true, true, false, false, true, false, true, true, false, false, true, false, true, true, false, false, true, true, true, true, false, true, true, false, true, true, true, false, false, true, true, true, true, false, true, false, true, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, true, false, false, true, false, false, true, true, false, true, true, false, false, false, false, false, false, true, false, false, true, false, true, false, false, false, false, false, false, false, false, false, true, true, true, true, false, true, true, true, false, false, false, true, false, false, false, false, false, false, true, true, true, false, false, true, false, false, true, true, false, false, true, false, true, true, false, false, true, false, false, true, true, false, false, true, true, false, true, true, false, true, true, true, false, false, true, false, true, true, false, false, true, false, true, true, false, false, true, true, true, true, false, true, true, false, true, true, true, false, false, true, true, true, true, false, true, false, true, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, false, true, false, true, false, true, true, true, true, true, true, false, true, false, false, false, true, true, false, false, false, true, true, false, true, false, false, false, true, false, true, false, false, false, false, false, false, true, true, true, true, false, true, false, false, true, true, false, false, false, false, false, true, false, true, false, false, false, false, false, true, true, false, true, false, true, false, false, true, false, false, false, false, true, false, false, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, true, false, true, true, false, false, false, false, false, true, true, true, false, false, true, false, true, true, false]);
            let encoded = BinVector::from_bools(&[true, true, true, false, false, true, false, true, false, true, true, true, true, true, true, false, true, false, false, false, true, true, false, false, false, true, true, false, true, false, false, false, true, false, true, false, false, false, false, false, false, true, true, true, true, false, true, false, false, true, true, false, false, false, false, false, true, false, true, false, false, false, false, false, true, true, false, true, false, true, false, false, true, false, false, false, false, true, false, false, false, true, true, false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, true, true, false, false, true, false, true, true, false, false, false, false, false, false, true, true, true, false, false, true, true, false, true, true, true, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, false, true, false, true, false, true, true, true, true, true, true, false, true, false, false, false, true, true, false, false, false, true, true, false, true, false, false, false, true, false, true, false, false, false, false, false, false, true, true, true, true, false, true, false, false, true, true, false, false, false, false, false, true, false, true, false, false, false, false, false, true, true, false, true, false, true, false, false, true, false, false, false, false, true, false, false, false, true, true, false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, true, true, false, false, true, false, true, true, false, false, false, false, true, false, true, true, true, false, false, true, true, false, true, true, true, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, false, true, false, false, true, false, false, true, true, false, false, true, false, true, true, true, true, false, true, false, false, true, true, true, false, true, false, false, false, false, true, true, true, false, true, true, true, true, false, true, false, true, false, true, true, false, false, false, true, true, true, true, false, true, false, true, true, true, false, false, true, true, true, false, true, true, false, false, true, true, false, true, true, false, true, true, true, false, true, true, true, true, true, true, false, true, false, true, false, false, true, true, false, true, true, false, true, true, true, true, true, false, false, false, true, false, true, false, true, false, true, true, true, true, true, false]);
            let encoded = BinVector::from_bools(&[false, false, false, true, false, true, false, false, true, false, false, true, true, false, false, true, false, true, true, true, true, false, true, false, false, true, true, true, false, true, false, false, false, false, true, true, true, false, true, true, true, true, false, true, false, true, false, true, true, false, false, false, true, true, true, true, false, true, false, true, true, true, false, false, true, true, true, false, true, true, false, false, true, true, false, true, true, false, true, true, true, false, true, true, true, true, true, true, false, true, false, true, false, false, true, true, true, false, true, true, false, true, true, true, true, true, false, false, false, true, false, false, true, false, true, false, true, true, true, true, true, true, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, false, true, false, false, true, false, false, true, true, false, false, true, false, true, true, true, true, false, true, false, false, true, true, true, false, true, false, false, false, false, true, true, true, false, true, true, true, true, false, true, false, true, true, true, true, false, false, false, true, true, true, true, false, true, false, true, true, true, false, false, true, true, true, false, true, true, false, false, true, true, false, true, true, false, true, true, true, false, true, true, true, true, true, true, false, true, false, true, false, false, true, true, true, false, true, true, false, true, true, true, true, true, false, false, false, true, false, false, true, false, true, false, true, true, true, true, true, true, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, false, false, false, true, true, true, true, false, false, false, true, false, false, false, false, false, false, true, false, false, true, false, false, true, true, false, true, false, true, true, true, false, false, false, false, false, false, false, false, false, true, false, true, true, true, true, true, false, false, true, false, true, true, true, false, true, false, true, false, false, true, true, true, true, false, true, false, true, false, false, false, true, false, false, true, false, false, true, false, false, true, true, false, false, true, true, true, false, true, false, true, false, true, false, false, true, true, true, false, false, false, true, true, true, true, false, true, false, true, false, true, false, false, true, true, true]);
            let encoded = BinVector::from_bools(&[false, true, false, false, false, false, false, true, true, true, true, false, false, false, true, false, false, false, false, false, false, true, false, false, true, false, false, true, true, false, true, false, true, true, true, false, false, false, false, false, false, false, false, false, true, false, true, true, true, true, true, false, false, true, false, true, true, true, false, true, false, true, false, false, true, true, true, true, false, true, false, true, false, false, false, true, false, false, true, false, false, true, false, false, true, true, false, false, true, true, true, false, true, false, false, true, false, true, false, false, true, true, true, false, false, false, true, true, true, true, false, false, true, false, true, false, true, false, false, false, true, true, true, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, false, false, false, true, true, true, true, false, false, false, true, false, false, false, false, false, false, true, false, false, true, false, false, true, true, false, true, false, true, true, true, false, false, false, false, false, false, false, false, false, true, false, true, true, true, true, true, false, false, true, false, true, true, true, false, true, false, true, false, false, true, true, true, true, false, true, false, true, false, false, false, true, false, false, true, false, false, true, false, false, true, true, false, false, true, true, true, false, true, false, false, true, false, true, false, false, false, true, true, false, false, false, true, true, true, true, false, false, true, false, true, false, true, false, false, false, true, true, true, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, false, true, false, true, false, false, false, false, true, false, true, false, true, true, false, true, false, false, false, true, true, false, true, true, false, false, false, false, false, true, false, false, false, true, true, false, false, true, false, false, true, true, true, false, false, false, true, false, true, true, false, true, true, true, true, true, false, false, true, false, false, true, true, false, true, true, true, false, false, false, true, false, false, true, false, false, false, false, true, true, false, false, true, true, false, true, false, true, true, true, true, false, true, false, false, false, false, false, true, true, false, false, true, false, true, false, false, true, true, true, true, true, true, false, true, true]);
            let encoded = BinVector::from_bools(&[true, false, false, false, false, true, false, true, false, false, false, false, true, false, true, false, true, true, false, true, false, false, false, true, true, false, true, true, false, false, false, false, false, true, false, false, false, true, true, false, false, true, false, false, true, true, true, false, false, false, true, false, true, true, false, true, true, true, true, true, false, false, true, false, false, true, true, false, true, true, true, false, false, false, true, false, false, true, false, false, false, false, true, true, false, false, true, true, false, true, false, true, true, true, true, true, false, true, false, false, false, false, false, true, true, false, false, true, false, true, true, false, false, true, true, true, true, true, false, true, false, true, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, false, true, false, true, false, false, false, false, false, false, true, false, true, true, false, true, false, false, false, true, true, false, true, true, false, false, false, false, false, true, false, false, false, true, true, false, false, true, false, false, true, true, true, false, false, false, true, false, true, true, false, true, true, true, true, true, false, false, true, false, false, true, true, false, true, true, true, false, false, false, true, false, false, true, false, false, false, false, true, true, false, false, true, true, false, true, false, true, true, true, true, true, false, true, false, false, false, false, false, true, true, false, false, true, false, true, true, false, false, true, true, true, true, true, false, true, false, true, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, true, true, true, true, false, false, true, false, false, true, false, true, true, true, true, false, true, true, true, true, false, true, true, true, true, false, true, true, true, false, false, false, false, false, true, true, true, false, true, false, true, true, true, true, true, false, false, false, false, true, true, false, true, false, true, true, false, true, false, true, false, true, false, false, true, false, true, true, true, true, true, false, true, false, true, true, true, true, false, false, true, true, true, false, true, true, true, true, true, false, true, true, true, false, true, false, true, true, false, true, true, true, true, false, false, true, true, false, false, false, true, true, false, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, false, true, true, true, true, true, false, false, true, false, false, true, false, true, true, true, true, false, true, true, true, true, false, true, true, true, true, false, true, true, true, false, false, false, false, false, true, true, true, false, true, false, true, true, true, true, true, false, false, false, false, true, true, false, true, false, true, true, false, true, false, true, false, true, false, false, true, false, true, true, true, true, true, false, true, false, true, true, true, true, false, false, true, true, true, false, true, true, true, true, true, false, false, true, true, true, false, true, false, true, true, false, true, true, true, true, false, false, true, true, true, false, false, false, true, true, true, false, true, false, false, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, true, true, true, true, false, false, true, false, false, true, false, true, true, true, true, false, true, true, true, true, false, true, true, true, true, false, true, true, false, false, false, false, false, false, true, true, true, false, true, false, true, true, true, true, true, false, false, false, false, true, true, false, true, false, true, true, false, true, false, true, false, true, false, false, true, false, true, true, true, true, true, false, true, false, true, true, true, true, false, false, true, true, true, false, true, true, true, true, true, false, false, true, true, true, false, true, false, true, true, false, true, true, true, true, false, false, true, true, true, false, false, false, true, true, true, false, true, false, false, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, false, true, true, false, false, true, true, true, true, true, true, false, false, true, false, false, true, true, false, false, false, true, true, false, false, false, true, false, false, true, true, false, true, true, false, false, false, false, true, true, false, true, true, true, false, false, true, true, true, false, false, true, false, true, false, false, false, false, false, true, false, true, false, true, true, false, true, false, false, false, false, true, true, true, true, true, true, true, true, false, true, true, false, false, false, false, false, false, true, true, true, false, true, true, true, true, true, false, false, false, true, false, true, false, false, true, true, false, true, true, true, true, false, false, true, true]);
            let encoded = BinVector::from_bools(&[true, false, true, true, false, true, true, false, false, true, true, true, true, true, true, false, false, true, false, false, true, true, false, false, false, true, true, false, false, false, true, false, false, true, true, false, true, true, false, false, false, false, true, true, false, true, true, true, false, false, true, true, true, false, false, true, false, true, false, false, false, false, false, true, false, true, false, true, true, false, true, false, false, false, false, true, true, true, true, true, true, true, true, false, true, true, false, false, false, false, false, false, true, true, true, true, false, true, true, true, true, true, false, false, false, true, false, true, false, false, true, true, true, false, true, true, true, true, false, false, false, true, true, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, false, true, true, false, false, true, true, true, true, true, true, false, false, true, false, false, true, true, false, false, false, true, true, false, false, false, true, false, false, true, true, false, true, true, false, false, false, false, true, true, false, true, true, true, false, false, true, true, true, false, false, true, false, true, false, false, false, false, false, false, false, true, false, true, true, false, true, false, false, false, false, true, true, true, true, true, true, true, true, false, true, true, false, false, false, false, false, false, true, true, true, true, false, true, true, true, true, true, false, false, false, true, false, true, false, false, true, true, true, false, true, true, true, true, false, false, false, true, true, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, true, false, false, false, true, false, false, false, true, true, false, true, true, true, true, false, false, false, false, true, false, true, false, false, false, true, false, false, false, true, true, false, false, false, false, true, false, true, true, true, true, false, true, true, true, false, true, true, false, false, false, true, false, false, false, true, true, true, true, false, true, true, true, true, true, true, false, true, false, false, false, false, true, false, true, false, true, true, false, false, true, false, true, true, false, true, true, false, false, true, false, true, false, false, false, false, true, true, false, true, true, false, true, true, false, true, true, false, false, false, true, false, true, true, false, false]);
            let encoded = BinVector::from_bools(&[true, true, true, false, true, false, false, false, true, false, false, false, true, true, false, true, true, true, true, false, false, false, false, true, false, true, false, false, false, true, false, false, false, true, true, false, false, false, false, true, false, true, true, true, true, false, true, true, true, false, true, true, false, false, false, true, false, false, false, true, true, true, true, false, true, true, true, true, true, true, false, true, false, false, false, false, true, false, true, false, true, true, false, false, true, false, true, true, false, true, true, false, false, true, false, false, true, false, false, false, false, true, true, false, true, true, false, true, true, false, false, true, true, false, false, false, true, false, true, true, true, false, false, false, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, true, false, false, false, true, false, false, false, true, true, false, true, true, true, true, false, false, false, false, true, false, true, false, false, false, true, true, false, false, true, true, false, false, false, false, true, false, true, true, true, true, false, true, true, true, false, true, true, false, false, false, true, false, false, false, true, true, true, true, false, true, true, true, true, true, true, false, true, false, false, false, false, true, false, true, false, true, true, false, false, true, false, true, true, false, true, true, false, false, true, false, false, true, false, false, false, false, true, true, false, true, true, false, true, true, false, false, true, true, false, false, false, true, false, true, true, true, false, false, false, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, false, false, false, true, false, true, false, true, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, true, true, false, false, false, true, true, true, true, true, true, true, true, true, false, true, false, false, false, true, true, false, false, true, true, false, true, false, false, true, true, false, false, true, true, false, false, true, true, true, false, false, false, true, true, false, true, true, true, false, false, false, false, false, false, false, false, false, true, false, false, true, true, false, false, true, true, true, false, false, false, false, false, true, false, false, false, true, true, true, false, true, false, false, true, false, true, false, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, false, false, true, false, false, false, true, false, true, false, true, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, true, true, false, false, false, true, true, true, true, true, true, true, true, true, false, true, false, false, false, true, true, false, false, true, true, false, true, false, false, true, true, false, false, true, true, false, false, true, true, true, false, false, false, true, true, false, true, true, true, false, false, false, false, false, false, false, false, false, true, false, false, true, true, false, false, true, true, false, true, false, false, false, false, false, true, false, false, false, true, true, true, false, true, true, false, false, true, false, true, false, false, true, false, true, false, true, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, false, false, false, true, false, true, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, false, false, true, true, true, true, true, true, true, true, true, false, true, false, false, false, true, true, false, false, true, true, false, true, false, false, true, true, false, false, true, true, false, false, true, true, true, false, false, false, true, true, false, true, true, true, false, false, false, false, false, false, false, false, false, true, false, false, true, true, false, false, true, true, false, true, false, false, false, false, false, true, false, false, false, true, true, true, false, true, true, false, false, true, false, true, false, false, true, false, true, false, true, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, false, true, false, true, false, false, true, false, false, false, true, true, true, true, false, false, false, false, true, true, true, false, true, false, false, false, true, true, false, false, true, false, false, false, false, true, false, false, true, true, false, true, false, false, true, false, true, false, false, false, false, false, true, true, false, true, true, false, false, false, true, false, true, true, true, false, true, true, false, false, true, true, false, true, true, true, true, true, true, false, false, false, true, false, true, false, false, false, true, false, true, false, true, true, false, true, true, true, true, false, true, false, false, false, true, true, false, true, true, true, true, true, false, false, false]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, false, true, false, true, false, false, true, false, false, false, true, true, true, true, false, false, false, false, true, true, true, false, true, false, false, false, true, true, false, false, true, false, false, false, false, true, false, false, true, true, false, true, false, false, true, false, true, false, false, false, false, false, true, true, false, true, true, false, false, false, true, false, true, true, true, false, true, true, false, false, true, true, false, true, true, true, true, true, true, false, false, false, true, false, true, false, false, false, true, false, false, true, false, true, true, false, true, true, true, true, false, true, false, false, false, true, true, true, false, true, true, true, true, false, true, false, false, false, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, true, false, true, false, true, false, false, true, false, false, false, true, true, true, true, false, false, false, false, true, true, true, false, true, false, false, false, true, true, false, false, true, false, false, false, false, true, false, false, true, true, false, true, false, false, true, false, true, false, false, false, false, false, true, true, false, true, true, false, false, false, true, false, true, true, true, false, true, false, false, false, true, true, false, true, true, true, true, true, true, false, false, false, true, false, true, false, false, false, true, false, false, true, false, true, true, false, true, true, true, true, false, true, false, false, false, true, true, true, false, true, true, true, true, false, true, false, false, false, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, false, true, true, false, false, true, false, false, true, true, true, true, false, false, true, false, true, false, false, false, false, true, true, true, false, true, true, true, false, false, true, false, false, false, false, true, false, false, false, true, false, true, true, false, false, false, false, false, true, false, false, false, true, true, false, true, false, false, true, false, false, true, true, false, true, true, false, false, true, true, true, false, false, false, false, true, false, true, true, false, true, false, true, true, true, false, true, true, false, false, false, false, true, false, false, true, true, false, true, false, false, true, false, true, true, true, false, false, true, false, false, false, false, true, true, true]);
            let encoded = BinVector::from_bools(&[true, false, false, false, false, true, true, false, false, true, false, false, true, true, true, true, false, false, true, false, true, false, false, false, false, true, true, true, false, true, true, true, false, false, true, false, false, false, false, true, false, false, false, true, false, true, true, false, false, false, false, false, true, false, false, false, true, true, false, true, false, false, true, false, false, true, true, false, true, true, false, false, true, true, true, false, false, false, false, true, false, true, true, false, true, false, true, true, true, false, true, true, false, false, true, false, false, true, false, false, true, true, false, true, false, false, true, false, true, true, true, true, false, false, true, false, false, false, true, false, true, true, true, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, false, true, true, false, false, true, false, false, true, true, true, true, false, false, true, false, true, false, false, false, false, true, true, true, false, true, true, true, false, false, true, false, false, false, false, true, false, false, false, true, false, true, true, false, false, false, false, false, true, false, false, false, true, true, false, true, false, false, true, false, false, true, true, false, true, true, false, false, true, true, true, false, false, false, false, true, false, true, true, false, true, false, true, true, true, false, true, true, false, false, true, false, false, true, false, false, true, true, false, true, true, false, true, false, true, true, true, true, false, false, true, false, false, false, true, false, true, true, true, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, false, false, true, true, false, false, false, true, true, true, true, false, false, false, false, true, false, false, true, true, true, false, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, false, true, false, true, true, true, true, true, true, false, true, false, false, false, false, false, false, false, true, true, true, false, true, true, false, true, true, false, true, false, false, true, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, true, true, true, true, true, true, true, false, true, true, true, true, false, true, true, true, false, false, true, true, true, false]);
            let encoded = BinVector::from_bools(&[true, false, false, true, false, false, true, true, false, false, false, true, true, true, true, false, false, false, false, true, false, false, true, true, true, false, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, false, true, false, true, true, true, true, true, true, false, true, false, false, false, false, false, false, false, true, true, true, false, true, true, false, true, true, false, true, false, false, true, true, false, true, true, false, false, true, false, true, false, true, true, false, true, true, false, true, true, true, true, true, true, true, false, true, true, true, true, true, false, true, true, true, false, false, true, true, true, true, false, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, false, false, true, true, false, false, true, true, true, true, true, false, false, false, false, true, false, false, true, true, true, false, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, false, true, false, true, true, true, true, true, true, false, true, false, false, false, false, false, false, false, true, true, true, false, true, true, false, true, true, false, true, false, false, true, true, false, true, true, false, false, true, false, true, false, true, true, false, true, true, false, true, true, true, true, true, true, true, false, true, true, true, true, true, false, true, true, true, false, false, true, true, true, true, false, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, false, true, true, true, false, false, false, true, false, false, true, true, false, false, true, true, true, false, false, true, true, true, true, false, false, false, false, true, true, true, false, true, false, false, false, false, false, false, true, true, true, false, true, true, false, true, false, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, false, false, true, true, false, false, true, false, false, false, false, true, true, true, false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, true, true, false, true, false, false, true, false, false, false, true, true, true, false, false, true, false, false, true, false, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, false, false, true, true, true, false, false, false, true, false, false, true, true, false, false, true, true, true, false, false, true, true, true, true, false, false, false, false, true, true, true, false, true, false, false, false, false, false, false, true, true, true, false, true, true, false, true, false, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, false, false, true, true, false, false, true, false, false, false, false, true, true, true, false, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, true, true, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, false, false, true, true, false, true, false, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, false, true, true, true, false, false, false, true, false, false, true, true, false, false, true, true, true, false, false, true, true, true, true, false, false, false, false, true, true, true, false, true, false, false, false, false, false, false, true, true, true, false, true, true, false, true, false, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, false, false, true, true, false, false, true, false, false, false, false, true, true, true, false, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, true, true, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, false, false, true, true, false, true, false, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, true, true, false, true, true, true, false, false, true, false, true, true, true, true, true, true, true, false, true, false, false, false, true, true, true, false, true, false, false, false, true, true, false, true, false, false, true, true, true, true, true, false, true, true, true, true, true, false, true, true, true, true, false, true, true, false, false, false, false, true, false, false, true, false, false, true, true, false, false, true, true, false, false, true, true, true, false, true, false, true, true, false, true, false, true, true, true, true, true, false, true, false, true, false, true, true, false, true, false, false, true, false, true, true, false, false, true, false, true, false, false, true, false, true, true, true]);
            let encoded = BinVector::from_bools(&[false, false, false, true, true, true, false, true, true, true, false, false, true, false, true, true, true, true, true, true, true, false, true, false, false, false, true, true, true, false, true, false, false, false, true, true, false, true, false, false, true, true, true, true, true, false, true, true, true, true, true, false, true, true, true, true, false, true, true, false, false, false, false, true, false, false, true, false, false, true, true, false, false, true, true, false, false, true, true, true, false, true, false, true, true, false, true, false, true, true, true, true, true, false, true, true, false, true, false, true, true, false, true, false, false, true, false, true, true, false, true, false, true, false, true, false, false, true, true, false, true, true, true, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, true, true, false, true, true, true, false, false, true, false, true, true, true, true, true, true, true, false, true, false, false, false, true, true, true, false, true, false, false, false, true, true, false, true, false, false, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, false, true, true, false, false, false, false, true, false, false, true, false, false, true, true, false, false, true, true, false, false, true, true, true, false, true, false, true, true, false, true, false, true, true, true, true, true, false, true, true, false, true, false, true, true, false, true, false, false, true, false, true, true, false, true, false, true, false, true, false, false, true, true, false, true, true, true, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, false, true, false, false, false, true, true, false, true, true, false, true, true, false, false, true, false, false, false, false, true, true, false, true, true, false, false, false, false, true, true, false, false, true, true, false, false, false, true, true, false, true, true, false, true, true, true, true, false, true, true, false, true, false, false, true, true, false, true, false, true, true, false, false, true, false, false, false, false, false, false, true, true, true, true, true, false, false, true, false, false, true, false, true, true, true, true, false, false, false, true, true, true, false, true, false, true, false, true, true, false, false, true, true, true, false, true, true, true, false, true, false, true, true, true, false]);
            let encoded = BinVector::from_bools(&[false, false, true, true, false, true, false, false, false, true, true, false, true, true, false, true, true, false, false, true, false, false, false, false, true, true, false, true, true, false, false, false, false, true, true, false, false, true, true, false, false, false, true, true, false, true, true, false, true, true, true, true, false, true, true, false, true, false, false, true, true, false, true, false, true, true, false, false, true, false, false, false, false, false, false, true, true, true, true, true, false, false, true, false, false, true, false, true, true, true, true, false, false, false, false, true, true, true, false, true, false, true, false, true, true, false, false, true, true, true, false, false, true, true, true, false, true, false, true, true, true, true, true, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, false, true, false, false, false, true, true, false, true, true, false, true, true, false, false, true, false, false, false, false, true, true, false, true, true, false, false, false, false, true, true, false, true, true, true, false, false, false, true, true, false, true, true, false, true, true, true, true, false, true, true, false, true, false, false, true, true, false, true, false, true, true, false, false, true, false, false, false, false, false, false, true, true, true, true, true, false, false, true, false, false, true, false, true, true, true, true, false, false, false, false, true, true, true, false, true, false, true, false, true, true, false, false, true, true, true, false, false, true, true, true, false, true, false, true, true, true, true, true, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, false, false, false, true, false, false, true, false, false, true, false, true, false, false, false, false, false, false, true, false, true, false, true, false, true, true, true, true, false, false, false, false, false, true, true, false, true, true, true, false, false, true, true, false, false, false, false, false, false, false, false, true, true, false, false, true, true, false, true, true, false, false, true, true, false, false, false, false, true, false, true, true, false, false, false, true, true, false, true, true, true, true, true, true, true, false, true, false, false, false, true, true, true, false, false, false, false, false, false, true, false, false, true, true, false, true, false, true, false, true, true, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, true, false, false, false, true, false, false, true, false, false, true, false, true, false, false, false, false, false, false, true, false, true, false, true, false, true, true, true, true, false, false, false, false, false, true, true, false, true, true, true, false, false, true, true, false, false, false, false, false, false, false, false, true, true, false, false, true, true, false, true, true, false, false, true, true, false, false, false, false, true, false, true, true, false, false, false, true, true, false, true, true, true, true, true, true, true, false, true, false, false, false, true, true, true, true, false, false, false, false, false, false, true, false, false, true, true, false, false, true, false, true, false, true, true, false, true, false, true, false, false, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, false, false, false, true, false, false, true, false, false, true, false, true, false, false, false, false, false, false, true, false, true, false, true, false, true, true, true, true, false, false, false, true, false, true, true, false, true, true, true, false, false, true, true, false, false, false, false, false, false, false, false, true, true, false, false, true, true, false, true, true, false, false, true, true, false, false, false, false, true, false, true, true, false, false, false, true, true, false, true, true, true, true, true, true, true, false, true, false, false, false, true, true, true, true, false, false, false, false, false, false, true, false, false, true, true, false, false, true, false, true, false, true, true, false, true, false, true, false, false, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, false, false, false, false, false, true, false, false, false, false, true, true, false, true, true, true, true, true, false, true, true, true, false, true, true, true, true, true, true, true, false, false, true, false, false, false, false, false, false, true, true, true, false, false, false, true, true, false, false, true, true, true, false, false, true, false, false, false, false, true, false, false, true, false, false, true, false, true, true, false, false, true, false, false, false, false, false, true, false, false, true, true, true, true, true, true, true, true, false, false, false, false, true, false, false, true, true, false, true, false, true, true, true, true, false, false, false, false, false, true, true, true, false, false, false, true]);
            let encoded = BinVector::from_bools(&[true, true, false, false, false, false, false, false, false, true, false, false, false, false, true, true, false, true, true, true, true, true, false, true, true, true, false, true, true, true, true, true, true, true, false, false, true, false, false, false, false, false, false, true, true, true, false, false, false, true, true, false, false, true, true, true, false, false, true, false, false, false, false, true, false, false, true, false, false, true, false, true, true, false, false, true, false, false, false, false, false, true, false, false, true, true, true, true, true, true, true, true, false, false, false, false, false, true, false, false, true, true, false, true, false, true, true, true, true, false, true, false, false, false, false, true, true, true, true, false, false, false, true, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, false, false, false, false, false, true, false, false, false, false, true, true, false, true, true, true, true, true, false, true, true, true, false, true, true, true, false, true, true, true, false, false, true, false, false, false, false, false, false, true, true, true, false, false, false, true, true, false, false, true, true, true, false, false, true, false, false, false, false, true, false, false, true, false, false, true, false, true, true, false, false, true, false, false, false, false, false, true, false, false, true, true, true, true, true, true, true, true, false, false, false, false, false, true, false, false, true, true, false, true, false, true, true, true, true, false, true, false, false, false, false, true, true, true, true, false, false, false, true, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, true, false, false, true, true, false, true, true, false, false, true, true, false, true, false, false, true, false, false, false, true, true, false, true, false, true, true, true, false, true, false, false, false, true, true, true, false, true, true, true, true, true, true, false, false, false, true, true, true, true, false, false, true, true, false, false, false, false, true, false, false, true, true, true, false, false, false, true, false, true, true, true, true, true, false, false, true, true, true, true, true, true, false, false, false, true, false, true, false, true, false, true, false, true, false, false, false, true, false, false, true, true, false, true, true, true, true, false, true, true, true, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, true, true, true, true, false, false, true, true, false, true, true, false, false, true, true, false, true, false, false, true, false, false, false, true, true, false, true, false, true, true, true, false, true, false, false, false, true, true, true, false, true, true, true, true, true, true, false, false, false, true, true, true, true, false, false, true, true, false, false, false, false, true, false, false, true, true, true, false, false, false, true, false, true, true, true, true, true, false, false, true, true, true, true, true, true, false, false, false, true, false, true, false, true, false, false, true, false, true, false, false, false, true, false, false, true, true, false, true, true, true, true, true, false, true, true, true, false, true, false, true, false, true, false, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, true, false, false, true, true, false, true, true, false, false, true, true, false, true, false, false, true, false, false, false, true, true, false, true, false, true, true, true, false, true, false, false, false, true, true, true, false, true, true, true, true, true, true, false, false, false, true, true, true, true, false, false, true, true, false, false, false, false, true, false, false, true, true, true, false, false, false, true, false, true, true, true, true, true, false, false, true, true, true, true, true, true, false, false, false, true, false, true, false, true, false, false, false, false, true, false, false, false, true, false, false, true, true, false, true, true, true, true, true, false, true, true, true, false, true, false, true, false, true, false, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, false, true, true, true, true, false, false, true, false, false, false, true, true, true, false, false, true, true, false, false, false, false, false, true, false, true, false, false, false, false, true, true, true, false, false, true, false, true, false, true, false, true, true, false, false, false, true, true, false, false, false, false, false, false, false, false, true, true, true, false, true, false, false, false, false, false, false, true, true, true, false, false, true, true, false, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, true, true, false, false, false, false, false, true, false, false, true, true, true, false, true, false, true, false, true, true, false, false, false, false, false, false]);
            let encoded = BinVector::from_bools(&[true, false, true, true, false, true, true, true, true, false, false, true, false, false, false, true, true, true, false, false, true, true, false, false, false, false, false, true, false, true, false, false, false, false, true, true, true, false, false, true, false, true, false, true, false, true, true, false, false, false, true, true, false, false, false, false, false, false, false, false, true, true, true, false, true, false, false, false, false, false, false, true, true, true, false, false, true, true, false, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, true, true, true, false, false, false, false, false, true, false, false, true, true, true, false, true, true, false, true, false, true, true, false, false, false, false, false, false, false, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, false, true, true, true, true, false, false, true, false, false, false, true, true, true, false, false, true, true, false, false, false, false, false, true, false, true, false, false, false, false, true, true, true, false, false, true, false, true, false, true, false, true, true, false, false, false, true, true, false, false, false, false, false, false, false, false, true, true, true, false, true, false, false, false, false, false, false, true, true, true, false, false, true, true, false, false, false, true, true, true, true, true, false, true, true, false, true, false, true, false, true, true, true, false, false, false, false, false, true, false, false, true, true, true, false, true, true, false, true, false, true, true, false, false, false, false, false, false, false, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, false, true, true, false, false, true, true, false, true, true, false, true, false, true, true, false, true, false, false, false, true, true, false, true, true, true, false, true, true, false, false, true, true, false, false, true, false, true, true, false, false, false, true, true, true, true, false, true, false, false, true, false, false, false, false, false, false, false, false, true, false, true, true, false, true, false, false, false, true, false, true, false, true, true, false, true, true, true, true, false, false, false, false, true, false, true, false, true, false, true, true, false, true, true, true, false, false, true, true, false, false, false, false, false, true, false, false, true, true, true, false, false, true, true, true, true]);
            let encoded = BinVector::from_bools(&[true, true, true, true, false, true, true, false, false, true, true, false, true, true, false, true, false, true, true, false, true, false, false, false, true, true, false, true, true, true, false, true, true, false, false, true, true, false, false, true, false, true, true, false, false, false, true, true, true, true, false, true, false, false, true, false, false, false, false, false, false, false, false, true, false, true, true, false, true, false, false, false, true, false, true, false, true, true, false, true, true, true, true, false, false, false, false, true, false, true, false, true, false, true, true, true, false, true, true, true, false, false, true, true, false, false, false, false, false, true, true, false, false, true, true, true, false, false, true, true, true, true, false, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, false, true, true, false, false, true, true, false, true, true, false, true, false, true, true, false, true, true, false, false, true, true, false, true, true, true, false, true, true, false, false, true, true, false, false, true, false, true, true, false, false, false, true, true, true, true, false, true, false, false, true, false, false, false, false, false, false, false, false, true, false, true, true, false, true, false, false, false, true, false, true, false, true, true, false, true, true, true, true, false, false, false, false, true, false, true, false, true, false, true, true, true, false, true, true, true, false, false, true, true, false, false, false, false, false, true, true, false, false, true, true, true, false, false, true, true, true, true, false, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, true, true, false, true, true, false, true, false, false, false, false, false, true, true, false, false, true, true, false, false, false, true, false, false, false, false, true, true, true, false, false, true, true, true, true, false, true, true, false, false, false, false, false, false, true, true, false, false, true, false, true, true, false, true, false, true, true, true, false, false, false, true, true, true, true, true, true, false, true, true, false, true, true, true, false, true, true, true, false, false, false, true, true, true, true, false, true, false, false, true, false, true, true, true, false, false, true, false, true, true, true, false, false, true, true, true, false, false, true, true, false, true, false, false, true, true]);
            let encoded = BinVector::from_bools(&[false, true, true, true, true, true, false, true, true, false, true, false, false, false, false, false, true, true, false, false, true, true, false, false, false, true, false, false, false, false, true, true, true, false, false, true, true, true, true, false, true, true, false, false, false, false, false, false, true, true, false, false, true, false, true, true, false, true, false, true, true, true, false, false, false, true, true, true, true, true, true, false, true, true, false, true, true, true, false, true, true, true, false, false, false, true, true, true, true, false, true, false, false, true, true, false, true, true, true, false, false, true, false, true, true, true, false, false, true, true, true, true, false, false, true, true, false, true, true, false, false, true, false, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, true, true, false, true, true, false, true, false, false, false, false, false, true, true, false, false, true, true, false, false, false, true, false, false, false, false, true, true, true, false, false, true, true, true, true, false, true, true, false, false, false, false, false, false, true, true, false, false, true, false, true, true, false, true, false, true, false, true, false, false, false, true, true, true, true, true, true, false, true, true, false, true, true, true, false, true, true, true, false, false, false, true, true, true, true, false, true, false, false, true, true, false, true, true, true, false, false, true, false, true, true, true, false, false, true, true, true, true, false, false, true, true, false, true, true, false, false, true, false, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, true, false, true, false, true, true, false, true, true, false, false, false, false, false, true, false, true, true, false, false, false, false, true, true, true, true, true, false, false, true, false, true, false, false, true, true, true, true, true, false, false, true, true, false, true, true, false, true, true, true, false, true, true, false, false, true, true, true, false, true, false, true, true, false, true, true, true, true, true, false, false, false, true, true, false, false, false, true, false, true, true, false, false, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, true, true, false, true, true, true, false, true, false, true, true, false, false, true, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, true, false, true, false, true, true, false, true, true, false, false, false, false, false, true, false, true, true, false, false, false, false, true, true, true, true, true, false, false, true, false, true, false, false, true, true, true, true, true, false, false, true, true, false, true, true, false, true, true, true, false, true, true, false, false, true, true, true, false, true, false, true, true, false, true, true, true, true, true, false, false, false, true, true, false, false, false, true, false, true, true, false, false, false, false, false, true, false, false, false, false, true, false, false, false, false, true, false, false, true, true, false, true, true, true, true, false, true, false, true, true, false, false, true, true, true, false, false, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, true, false, true, false, true, true, false, true, false, false, false, false, false, false, true, false, true, true, false, false, false, false, true, true, true, true, true, false, false, true, false, true, false, false, true, true, true, true, true, false, false, true, true, false, true, true, false, true, true, true, false, true, true, false, false, true, true, true, false, true, false, true, true, false, true, true, true, true, true, false, false, false, true, true, false, false, false, true, false, true, true, false, false, false, false, false, true, false, false, false, false, true, false, false, false, false, true, false, false, true, true, false, true, true, true, true, false, true, false, true, true, false, false, true, true, true, false, false, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, true, false, true, false, false, false, true, false, false, false, false, false, false, true, false, true, true, false, true, true, true, true, true, true, false, false, true, false, false, false, false, false, true, true, false, true, true, false, false, false, false, false, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, false, true, true, false, false, true, false, true, false, false, true, true, false, true, false, true, false, true, false, true, true, false, false, false, false, false, false, false, true, false, false, false, true, false, true, true, true, false, false, false, true, true, false, false, false, false, true, true, true, false, true, false, true, false]);
            let encoded = BinVector::from_bools(&[false, true, false, true, true, false, true, false, false, false, true, false, false, false, false, false, false, true, false, true, true, false, true, true, true, true, true, true, false, false, true, false, false, false, false, false, true, true, false, true, true, false, false, false, false, false, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, false, true, true, false, false, true, false, true, false, false, true, true, false, true, false, true, false, true, false, true, true, false, false, false, false, false, false, false, false, true, false, false, false, true, false, true, true, true, false, false, false, true, true, false, true, false, false, false, true, true, true, false, true, true, false, true, true, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, true, false, true, true, false, false, true, false, false, false, false, false, false, true, false, true, true, false, true, true, true, true, true, true, false, false, true, false, false, false, false, false, true, true, false, true, true, false, false, false, false, false, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, false, true, true, false, false, true, false, true, false, false, true, true, false, true, false, true, false, true, false, true, true, false, false, false, false, false, false, false, false, true, false, false, false, true, false, true, true, true, false, false, false, true, true, false, true, false, false, false, true, true, true, false, true, true, false, true, true, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, false, false, true, false, true, true, true, true, false, true, false, true, false, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, false, true, false, true, true, false, true, true, false, true, true, false, false, false, true, true, true, false, false, true, false, false, false, true, false, true, true, true, true, false, false, false, true, true, true, false, true, true, true, true, false, true, true, false, true, true, true, true, false, false, true, false, true, false, false, true, false, true, true, false, false, true, false, false, false, false, true, true, true, false, true, true, false, false, false, false, false, true, false, true, true, false, true, false, true, true, true, false]);
            let encoded = BinVector::from_bools(&[false, true, false, true, false, false, true, false, true, true, true, true, false, true, false, true, false, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, false, true, false, true, true, false, true, true, false, true, true, false, false, false, true, true, true, false, false, true, false, false, false, true, false, true, true, true, true, false, false, false, true, true, true, false, true, true, true, true, false, true, true, false, true, true, true, true, false, false, true, false, true, false, false, true, false, true, true, false, false, true, false, false, false, false, false, true, true, true, false, true, true, false, false, false, false, false, false, true, false, true, true, false, true, false, false, true, true, true, false, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, false, false, true, false, true, true, true, true, false, true, false, true, false, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, false, true, false, true, true, false, true, true, false, true, true, false, false, false, true, true, true, false, false, true, false, false, false, true, false, true, true, true, true, false, false, false, true, true, true, false, true, true, true, true, false, true, true, false, true, true, true, true, false, false, true, false, true, false, false, true, false, true, true, false, false, true, false, false, false, false, false, true, true, true, false, true, true, false, false, false, false, false, false, true, false, true, true, false, true, false, false, true, false, true, false, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, true, false, false, true, true, true, true, false, false, false, true, true, true, false, true, false, true, false, true, true, true, false, true, false, false, true, true, true, true, false, false, false, true, true, false, true, false, true, true, true, true, false, true, true, true, false, false, false, true, false, true, true, false, false, false, false, false, true, false, false, true, false, true, false, false, false, false, true, false, false, false, true, false, false, false, false, true, true, false, false, true, true, true, false, false, true, true, false, true, false, false, false, true, true, true, false, false, true, true, true, false, true, false, true, false, true, false, false, false, true, true, false, true, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, true, true, true, false, false, true, true, true, true, false, false, false, true, true, true, false, true, false, true, false, true, true, true, false, true, false, false, true, true, true, true, false, false, false, true, true, false, true, false, true, true, true, true, false, true, true, true, false, false, false, true, false, true, true, false, false, false, false, false, true, false, false, true, false, true, false, false, false, false, true, false, false, false, true, false, false, false, false, true, true, false, false, true, true, true, false, false, true, true, false, true, false, false, false, false, true, true, true, false, false, true, true, true, false, true, false, true, false, false, true, false, false, false, true, true, false, false, true, true, false, false, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, true, false, false, true, true, true, true, false, false, false, true, true, true, false, true, false, true, false, true, true, true, false, true, false, false, true, true, true, true, false, false, false, true, true, false, true, false, true, true, true, true, false, true, true, true, false, false, false, true, false, true, true, false, false, false, false, false, true, false, false, true, false, true, false, false, false, false, true, false, false, false, true, false, false, false, false, true, true, false, false, true, true, true, false, false, true, true, false, true, false, false, false, false, true, true, true, false, false, true, true, true, false, true, false, true, false, false, true, false, false, false, true, true, false, false, true, true, false, false, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, false, false, false, false, false, false, false, false, true, false, true, true, false, false, false, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, false, false, false, true, true, false, true, true, false, true, true, true, true, false, true, true, true, false, false, true, true, false, true, true, true, true, true, true, false, false, false, false, true, false, true, true, false, true, true, true, true, false, false, true, false, false, false, false, true, true, false, true, false, false, false, true, true, true, false, true, true, false, false, false, false, false, false, false, true, true, false, false, true, false, false, true, true, false, false, true, true, true, true, true]);
            let encoded = BinVector::from_bools(&[true, false, false, true, false, false, false, false, false, false, false, false, true, false, true, true, false, false, false, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, false, false, false, true, true, false, true, true, false, true, true, true, true, false, true, true, true, false, false, true, true, false, true, true, true, true, true, true, false, false, false, false, true, false, true, true, false, true, true, true, true, false, false, true, false, false, false, false, true, true, false, true, false, false, false, true, true, true, true, false, true, true, false, false, false, false, false, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, false, true, true, true, false, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, false, false, false, false, false, false, false, false, true, false, true, true, false, false, false, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, false, false, false, true, true, false, true, true, false, true, true, true, true, false, true, true, true, false, false, true, true, false, true, true, true, true, true, true, false, false, false, false, true, false, true, true, false, true, true, false, true, false, false, true, false, false, false, false, true, true, false, true, false, false, false, true, true, true, true, false, true, true, false, false, false, false, false, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, false, true, true, true, false, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, true, false, true, true, false, true, true, false, false, true, true, true, false, true, false, true, false, false, true, true, true, false, false, false, true, true, false, true, false, true, false, false, false, true, false, false, false, false, false, true, true, false, false, false, false, true, true, false, false, false, true, true, false, true, true, false, false, false, true, true, false, false, false, false, true, false, false, false, false, true, false, false, false, true, false, true, false, false, false, true, true, false, false, true, true, false, true, false, false, true, true, false, true, false, false, true, true, false, false, false, true, false, false, true, false, false, false, true, true, false, false, true, false, false, true, true]);
            let encoded = BinVector::from_bools(&[false, false, true, false, true, false, true, true, false, true, true, false, false, true, true, true, false, true, false, true, false, false, true, true, true, false, false, false, true, true, false, true, false, true, false, false, false, true, false, false, false, false, false, true, true, false, false, false, false, true, true, false, false, false, true, true, false, true, true, false, false, false, true, true, false, false, false, false, true, false, false, false, false, true, false, false, false, true, false, true, false, false, false, true, true, false, false, true, true, false, true, false, false, true, true, true, false, true, false, false, true, true, false, false, false, true, false, false, true, false, true, false, false, true, true, false, false, true, true, false, false, true, true, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, true, false, true, true, false, true, true, false, false, true, true, true, false, true, false, true, false, false, true, true, true, false, false, false, true, true, false, true, false, true, false, false, false, true, false, false, false, false, false, true, true, false, false, false, false, true, true, false, false, false, true, true, false, true, true, false, false, false, true, true, false, false, false, false, true, false, false, false, true, true, false, false, false, true, false, true, false, false, false, true, true, false, false, true, true, false, true, false, false, true, true, true, false, true, false, false, true, true, false, false, false, true, false, false, true, false, true, false, false, true, true, false, false, true, true, false, false, true, true, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, true, true, true, false, true, true, true, true, false, false, true, false, false, true, true, true, true, false, false, true, false, false, true, false, true, true, true, true, false, false, false, false, true, false, false, true, true, false, false, false, true, false, true, false, true, true, false, false, true, false, true, true, false, true, false, true, false, true, true, false, false, false, true, true, false, false, false, true, true, false, true, false, false, true, false, true, false, true, true, true, false, true, false, false, false, true, true, false, false, true, false, false, false, false, true, true, true, true, true, true, true, true, true, false, true, false, true, true, true, true, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, true, true, true, false, true, true, true, true, false, false, true, false, false, true, true, true, true, false, false, true, false, false, true, false, true, true, true, true, false, false, false, false, true, false, false, true, true, false, false, false, true, false, true, false, true, true, false, false, true, false, true, true, false, true, false, true, false, true, true, false, false, false, true, true, false, false, false, true, true, false, true, false, false, true, false, true, false, true, true, true, false, true, false, false, false, true, true, false, false, true, true, false, false, false, false, true, true, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, false, false, false, true, false, false, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, true, true, true, true, false, true, true, true, true, false, false, true, false, false, true, true, true, true, false, false, true, false, false, true, false, true, true, true, true, false, false, false, false, true, false, false, true, true, false, false, false, true, false, true, false, true, true, false, false, true, false, true, true, false, true, false, true, false, true, true, false, false, false, true, true, false, false, false, true, true, false, true, false, false, true, false, true, false, true, true, true, false, true, false, false, false, true, true, false, false, false, true, false, false, false, false, true, true, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, false, false, false, true, false, false, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, true, true, false, true, false, true, true, true, true, true, false, true, false, false, true, false, true, false, true, false, false, false, true, true, false, true, false, true, true, false, true, true, true, false, false, true, false, true, true, true, true, true, true, true, false, true, true, false, false, false, true, false, true, true, false, false, false, true, true, true, false, true, true, true, true, false, false, false, false, true, false, false, true, false, true, false, false, true, false, false, false, false, false, false, true, true, false, true, true, false, false, true, true, false, false, false, true, true, false, true, true, true, false, true, false, true, true, false, true, true, false, true, false, false, true, false]);
            let encoded = BinVector::from_bools(&[true, false, true, false, true, true, false, true, false, true, true, true, true, true, false, true, false, false, true, false, true, false, true, false, false, false, true, true, false, true, false, true, true, false, true, true, true, false, false, true, false, true, true, true, true, true, true, true, false, true, true, false, false, false, true, false, true, true, false, false, false, true, true, true, false, true, true, true, true, false, false, false, false, true, false, false, true, false, true, false, false, true, false, false, false, false, false, false, true, true, false, true, true, false, true, false, true, true, false, false, false, true, true, false, true, true, true, false, true, false, true, true, true, false, true, true, false, true, true, false, false, true, false, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, true, true, false, true, false, true, true, true, true, true, false, true, false, false, true, false, true, false, true, false, false, false, true, true, false, true, false, true, true, false, true, true, true, false, false, true, false, true, true, true, true, true, true, true, false, true, true, false, false, false, true, false, true, true, false, false, false, true, true, true, false, true, true, false, true, false, false, false, false, true, false, false, true, false, true, false, false, true, false, false, false, false, false, false, true, true, false, true, true, false, true, false, true, true, false, false, false, true, true, false, true, true, true, false, true, false, true, true, true, false, true, true, false, true, true, false, false, true, false, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, false, true, true, false, true, true, true, false, true, false, false, false, true, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, true, true, true, false, false, true, false, false, true, false, true, false, true, true, true, false, true, true, false, true, true, false, false, true, false, true, true, true, false, false, false, true, true, false, true, true, false, false, false, false, false, true, true, true, false, true, true, true, true, true, true, false, true, false, false, true, false, true, false, false, true, false, true, false, true, true, true, false, false, true, true, false, false, true, true, true, true, false, false, true, true, false, true, true, false, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, false, true, true, false, true, true, true, false, true, false, false, false, true, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, true, true, true, false, false, true, false, false, true, false, true, false, true, true, true, false, true, true, false, true, true, false, false, true, false, true, true, true, false, false, false, true, true, false, true, true, false, false, false, false, false, true, true, true, false, true, true, true, true, true, true, false, true, false, false, true, false, true, false, false, true, false, false, true, false, true, true, true, false, false, true, true, false, false, true, true, true, true, true, false, false, true, true, false, true, true, true, false, true, false, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, true, true, true, false, true, true, true, false, true, false, false, false, true, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, true, true, true, false, false, true, false, false, true, false, true, false, true, true, true, false, true, true, false, true, true, false, false, true, false, true, true, true, false, false, false, true, true, false, true, true, false, false, false, false, false, true, true, true, false, true, true, true, true, true, true, false, true, false, false, true, false, true, false, false, true, false, false, true, false, true, true, true, false, false, true, true, false, false, true, true, true, true, true, false, false, true, true, false, true, true, true, false, true, false, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, false, true, true, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, true, true, true, false, false, false, true, true, false, false, true, true, true, true, false, true, false, true, true, true, true, true, true, true, false, true, false, true, false, true, false, true, true, true, true, false, false, true, false, true, true, true, true, false, false, true, false, false, false, true, false, false, false, false, false, true, true, false, false, false, true, true, true, false, true, true, true, true, true, true, true, false, true, false, false, false, false, true, false, false, false, true, true, false, false, false, true, false, false, false, true, true, false]);
            let encoded = BinVector::from_bools(&[true, false, false, false, false, true, true, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, true, true, true, false, false, false, true, true, false, false, true, true, true, true, false, true, false, true, true, true, true, true, true, true, false, true, false, true, false, true, false, true, true, true, true, false, false, true, false, true, true, true, true, false, false, true, false, false, false, true, false, false, false, false, false, true, true, false, false, false, true, true, true, false, true, true, true, false, true, true, true, true, false, true, false, false, false, false, true, false, false, false, true, true, true, false, false, false, true, false, false, true, false, true, true, false, false, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, false, true, true, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, true, true, true, false, false, false, true, true, false, false, true, true, true, true, false, true, false, true, true, true, true, true, true, true, false, true, false, true, false, true, false, true, true, true, true, false, false, true, false, true, true, true, true, false, false, true, false, false, false, true, false, false, false, false, false, true, true, false, false, false, true, true, true, false, true, true, true, false, true, true, true, true, false, true, false, false, false, false, true, false, false, false, true, true, true, false, false, false, true, false, false, true, false, false, true, false, false, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, true, false, true, true, true, false, true, true, true, true, false, false, false, false, true, true, false, true, true, false, true, false, false, true, true, true, false, false, true, false, true, true, false, false, false, false, false, false, false, true, false, false, false, false, false, true, true, true, false, true, true, false, false, true, false, true, false, false, true, false, false, true, true, true, true, true, true, true, false, true, true, true, false, true, false, true, true, true, true, false, false, true, false, true, false, true, true, true, true, false, false, false, true, false, true, false, false, true, false, true, true, true, true, false, false, false, false, true, true, true, true, true, true, false, false, false]);
            let encoded = BinVector::from_bools(&[true, false, false, false, true, false, true, true, true, false, true, true, true, true, false, false, false, false, true, true, false, true, true, false, true, false, false, true, true, true, false, false, true, false, true, true, false, false, false, false, false, false, false, true, false, false, false, false, false, true, true, true, false, true, true, false, false, true, false, true, false, false, true, false, false, true, true, true, true, true, true, true, false, true, true, true, false, true, false, true, true, true, true, false, false, true, false, true, false, true, true, true, true, false, true, false, false, true, false, true, false, false, true, false, true, true, true, true, false, false, false, false, false, true, true, true, true, true, true, true, false, false, true, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, true, false, true, true, true, false, true, true, true, true, false, false, false, false, true, true, false, true, true, false, true, false, false, true, true, true, false, false, true, false, true, true, false, false, false, false, false, false, false, true, false, false, false, false, false, true, true, true, false, true, true, false, false, true, false, true, false, false, true, false, false, false, true, true, true, true, true, true, false, true, true, true, false, true, false, true, true, true, true, false, false, true, false, true, false, true, true, true, true, false, true, false, false, true, false, true, false, false, true, false, true, true, true, true, false, false, false, false, false, true, true, true, true, true, true, true, false, false, true, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, true, true, true, true, true, true, true, false, true, true, true, false, false, true, true, true, false, false, true, true, false, true, false, false, false, false, false, true, true, false, false, true, true, true, false, false, false, false, true, true, false, true, false, false, true, false, false, true, true, true, false, false, false, false, true, true, false, false, true, false, false, false, false, false, true, false, false, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, false, false, true, true, true, true, true, true, false, true, false, false, false, false, true, false, false, true, true, false, false, true, false, false, false, false, false, false, false, false, true, true, true, true]);
            let encoded = BinVector::from_bools(&[true, false, false, false, true, true, true, true, true, true, true, false, true, true, true, false, false, true, true, true, false, false, true, true, false, true, false, false, false, false, false, true, true, false, false, true, true, true, false, false, false, false, true, true, false, true, false, false, true, false, false, true, true, true, false, false, false, false, true, true, false, false, true, false, false, false, false, false, true, false, false, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, false, false, true, true, true, true, true, true, true, false, true, false, false, false, false, true, false, false, true, true, false, false, true, false, true, false, false, false, false, false, false, false, true, true, true, true, true, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, true, true, true, true, true, true, true, false, true, true, true, false, false, true, true, true, false, false, true, true, false, true, false, false, false, false, false, true, true, false, false, true, true, true, false, false, false, false, true, true, false, true, false, false, true, false, false, true, true, true, false, false, false, false, true, true, true, false, true, false, false, false, false, false, true, false, false, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, false, false, true, true, true, true, true, true, true, false, true, false, false, false, false, true, false, false, true, true, false, false, true, false, true, false, false, false, false, false, false, false, true, true, true, true, true, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, false, true, true, true, false, false, true, true, true, false, false, false, true, false, true, true, false, false, false, true, false, true, false, false, false, true, true, true, true, true, true, true, false, true, true, true, false, false, false, true, true, false, false, false, true, false, false, false, true, false, false, true, false, false, true, false, true, false, true, true, true, true, false, true, true, false, true, true, false, true, false, false, false, true, false, true, true, false, false, true, true, false, false, false, false, true, true, true, true, true, false, true, false, false, false, true, false, true, true, true, false, false, false, false, true, false, false, false, true, true, false, true, true, true, true, false]);
            let encoded = BinVector::from_bools(&[false, false, true, true, false, true, true, true, false, false, true, true, true, false, false, false, true, false, true, true, false, false, false, true, false, true, false, false, false, true, true, true, true, true, true, true, false, true, true, true, false, false, false, true, true, false, false, false, true, false, false, false, true, false, false, true, false, false, true, false, true, false, true, true, true, true, false, true, true, false, true, true, false, true, false, false, false, true, false, true, true, false, false, true, true, false, false, false, false, true, true, true, true, true, false, false, true, false, false, false, true, false, true, true, true, false, false, false, false, true, false, false, false, false, true, true, false, true, true, true, true, true, false, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, false, true, true, true, false, false, true, true, true, false, false, false, true, false, true, true, false, false, false, true, false, true, false, false, false, true, true, true, true, true, true, true, false, true, true, true, false, false, false, true, true, false, false, true, true, false, false, false, true, false, false, true, false, false, true, false, true, false, true, true, true, true, false, true, true, false, true, true, false, true, false, false, false, true, false, true, true, false, false, true, true, false, false, false, false, true, true, true, true, true, false, false, true, false, false, false, true, false, true, true, true, false, false, false, false, true, false, false, false, false, true, true, false, true, true, true, true, true, false, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, true, false, true, true, false, true, true, false, false, true, false, true, true, true, false, false, false, false, true, true, true, true, true, true, false, true, false, false, false, false, true, true, true, false, false, false, false, true, true, false, true, false, false, false, true, false, false, false, true, true, true, true, true, false, false, true, true, false, false, false, true, false, false, true, false, false, true, false, false, false, false, true, false, false, false, false, true, true, true, true, false, true, false, true, true, false, true, false, false, true, false, false, false, true, true, true, true, true, false, false, false, true, true, false, true, false, true, true, false, false, false, false, false, false, true, false]);
            let encoded = BinVector::from_bools(&[true, false, false, true, true, false, true, true, false, true, true, false, false, true, false, true, true, true, false, false, false, false, true, true, true, true, true, true, false, true, false, false, false, false, true, true, true, false, false, false, false, true, true, false, true, false, false, false, true, false, false, false, true, true, true, true, true, false, false, true, true, false, false, false, true, false, false, true, false, false, true, false, false, false, false, true, false, false, false, false, true, true, true, true, false, true, false, true, true, false, true, false, false, true, true, false, false, false, true, true, true, true, true, false, false, false, true, true, false, true, false, false, true, true, false, false, false, false, false, false, false, true, true, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, true, false, true, true, false, true, true, false, false, true, false, true, true, true, false, false, false, false, true, true, true, true, true, true, false, true, false, false, false, false, true, true, true, false, false, false, false, true, true, false, true, false, false, false, true, false, false, false, true, true, true, true, true, false, false, true, true, false, false, false, true, false, false, true, true, false, true, false, false, false, false, true, false, false, false, false, true, true, true, true, false, true, false, true, true, false, true, false, false, true, true, false, false, false, true, true, true, true, true, false, false, false, true, true, false, true, false, false, true, true, false, false, false, false, false, false, false, true, true, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, false, false, true, false, false, true, false, true, false, false, true, false, false, true, true, true, true, false, true, false, true, false, false, false, false, false, false, false, false, false, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, false, false, true, false, false, true, true, false, false, false, true, false, false, false, false, true, false, true, true, false, true, true, false, true, true, false, true, false, false, false, false, false, false, true, false, false, true, false, true, false, false, true, false, false, false, true, true, true, false, false, true, false, false, true, false, false, true, false, true, true, false, false, true, true]);
            let encoded = BinVector::from_bools(&[true, true, false, true, false, false, true, false, false, true, false, true, false, false, true, false, false, true, true, true, true, false, true, false, true, false, false, false, false, false, false, false, false, false, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, false, false, true, false, false, true, true, false, false, false, true, false, false, false, false, true, false, true, true, false, true, true, false, true, true, false, true, false, false, false, false, false, false, true, false, false, true, false, false, true, false, false, true, false, false, false, true, true, true, false, false, true, false, false, true, true, false, false, true, false, true, true, true, false, false, true, true, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, false, false, true, false, false, true, false, true, false, false, true, false, false, true, true, true, true, false, true, false, true, false, false, false, false, false, false, false, false, false, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, false, false, true, false, false, true, true, false, false, false, true, false, false, false, false, true, false, true, true, false, true, true, false, true, true, false, true, false, false, false, false, false, true, true, false, false, true, false, false, true, false, false, true, false, false, false, true, true, true, false, false, true, false, false, true, true, false, false, true, false, true, true, true, false, false, true, true, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, false, false, true, false, false, true, true, true, true, false, false, false, false, true, true, false, true, false, false, false, true, true, true, false, true, true, false, false, false, true, true, false, true, false, true, false, true, true, false, false, true, true, true, false, false, false, true, false, true, true, false, true, false, true, true, true, false, true, true, false, false, false, false, true, true, false, false, false, false, false, false, true, true, false, true, true, true, true, false, false, true, true, false, false, false, false, false, false, true, true, false, false, true, false, true, false, false, true, false, true, true, true, false, true, true, true, true, true, true, true, true, true, true, false, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, true, false, false, true, false, false, true, true, true, true, false, false, false, false, true, true, false, true, false, false, false, true, true, true, false, true, true, false, false, false, true, true, false, true, false, true, false, true, true, false, false, true, true, true, false, false, false, true, false, true, true, false, true, false, true, true, true, false, true, true, false, false, false, false, true, true, false, false, false, false, false, false, true, true, false, true, true, true, true, false, false, true, true, false, false, false, false, false, false, true, true, false, false, false, true, false, true, false, false, true, false, true, true, true, false, true, true, false, true, true, true, true, true, true, true, true, true, false, false, true, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, false, false, true, false, false, true, true, false, true, false, false, false, false, true, true, false, true, false, false, false, true, true, true, false, true, true, false, false, false, true, true, false, true, false, true, false, true, true, false, false, true, true, true, false, false, false, true, false, true, true, false, true, false, true, true, true, false, true, true, false, false, false, false, true, true, false, false, false, false, false, false, true, true, false, true, true, true, true, false, false, true, true, false, false, false, false, false, false, true, true, false, false, false, true, false, true, false, false, true, false, true, true, true, false, true, true, false, true, true, true, true, true, true, true, true, true, false, false, true, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, true, false, false, true, false, true, false, false, false, false, false, false, false, true, false, true, false, true, false, false, false, true, false, false, true, false, false, false, false, true, false, false, false, false, true, true, true, false, false, false, true, true, false, false, false, true, false, false, true, false, false, true, false, false, false, false, true, true, true, true, false, true, false, false, false, true, false, true, true, true, false, false, true, true, false, false, false, false, true, false, true, false, false, true, true, true, false, true, true, false, true, false, true, false, false, false, true, false, false, true, false, false, false, false, false, false, true, false, false, false, false, true, false, true, true, false]);
            let encoded = BinVector::from_bools(&[false, true, false, false, true, false, false, true, false, true, false, false, false, false, false, false, false, true, false, true, false, true, false, false, false, true, false, false, true, false, false, false, false, true, false, false, false, false, true, true, true, false, false, false, true, true, false, false, false, true, false, false, true, false, false, true, false, false, false, false, true, true, true, true, false, true, false, false, false, true, false, true, true, true, false, false, true, true, false, false, false, false, true, false, true, false, false, true, true, true, false, true, true, false, true, true, false, true, false, false, false, true, false, false, true, false, false, false, false, false, true, false, true, false, false, false, false, true, false, false, true, true, false, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, true, false, false, true, false, true, false, false, false, false, false, false, false, true, false, true, false, true, false, true, false, true, false, false, true, false, false, false, false, true, false, false, false, false, true, true, true, false, false, false, true, true, false, false, false, true, false, false, true, false, false, true, false, false, false, false, true, true, true, true, false, true, false, false, false, true, false, true, true, true, false, false, true, true, false, false, false, false, true, false, true, false, false, true, true, true, false, true, true, false, true, true, false, true, false, false, false, true, false, false, true, false, false, false, false, false, true, false, true, false, false, false, false, true, false, false, true, true, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, false, false, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, false, true, false, false, true, false, false, true, false, true, false, false, false, false, false, true, false, false, false, true, false, false, false, true, false, true, true, false, true, true, false, false, true, true, false, false, true, true, false, false, false, false, true, true, false, false, true, true, true, false, false, false, false, false, true, false, true, false, true, false, false, true, true, false, true, true, false, false, true, false, true, true, false, false, false, false, true, false, false, false, true, false, true, false, true, true, false, true, true, true, false, true, false, true, true, true, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, false, false, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, false, true, false, false, true, false, false, true, false, true, false, false, false, false, false, true, false, false, false, true, false, false, false, true, false, true, true, false, true, true, false, false, true, true, false, false, true, true, false, false, false, false, true, true, false, false, true, true, true, false, false, false, false, false, true, false, true, false, true, false, false, true, true, false, true, true, false, false, true, false, true, true, true, false, false, false, false, true, false, false, false, true, false, true, false, true, true, false, true, true, true, true, false, true, false, true, true, true, true, false, true, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, true, false, false, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, false, true, false, false, true, false, false, true, false, true, false, false, false, false, false, true, false, false, false, true, false, false, false, true, false, true, true, false, true, true, false, false, true, true, false, false, true, true, false, false, false, false, true, true, false, false, true, true, true, false, true, false, false, false, true, false, true, false, true, false, false, true, true, false, true, true, false, false, true, false, true, true, true, false, false, false, false, true, false, false, false, true, false, true, false, true, true, false, true, true, true, true, false, true, false, true, true, true, true, false, true, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, false, false, true, false, false, true, false, false, false, false, false, true, true, true, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, true, true, true, false, true, true, false, false, false, true, true, true, true, true, false, true, false, false, true, true, false, false, true, false, true, true, false, false, false, true, false, false, true, true, true, true, false, false, false, true, false, false, true, false, true, false, false, false, true, false, true, false, true, true, false, false, false, false, true, true, false, true, false, false, false, true, false, true, true, true, false, false, false, true, true, true, false, true, true, true, false, false, false]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, false, false, true, false, false, true, false, false, false, false, false, true, true, true, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, true, true, true, false, true, true, false, false, false, true, true, true, true, true, false, true, false, false, true, true, false, false, true, false, true, true, false, false, false, true, false, false, true, true, true, true, false, false, false, true, false, false, true, false, true, false, false, false, true, false, true, false, true, true, false, false, false, false, false, true, true, false, true, false, false, false, true, false, true, true, true, false, false, true, false, true, true, true, false, true, true, true, true, false, false, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, false, false, true, false, false, true, false, false, false, false, false, true, true, true, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, true, true, true, true, false, true, true, false, false, false, true, true, true, true, false, false, true, false, false, true, true, false, false, true, false, true, true, false, false, false, true, false, false, true, true, true, true, false, false, false, true, false, false, true, false, true, false, false, false, true, false, true, false, true, true, false, false, false, false, false, true, true, false, true, false, false, false, true, false, true, true, true, false, false, true, false, true, true, true, false, true, true, true, true, false, false, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, true, true, true, false, true, false, false, false, false, true, false, true, false, true, false, false, false, false, true, false, true, true, false, true, false, false, true, true, true, false, false, false, false, false, true, true, false, true, false, false, false, true, true, true, true, true, false, false, true, true, true, false, false, false, true, false, false, true, false, true, false, true, false, false, true, true, true, false, false, false, false, false, false, true, false, false, true, false, false, true, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, true, false, true, true, true, true, false, true, false, false, true, true, true, true, true, false, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, false, true, true, true, false, true, false, false, false, false, true, false, true, false, true, false, false, false, false, true, false, true, true, false, true, false, false, true, true, true, false, false, false, false, false, true, true, false, true, false, false, false, true, true, true, true, true, false, false, true, true, true, false, false, false, true, false, false, true, false, true, false, true, false, false, true, true, true, false, false, false, false, false, false, true, false, false, true, false, false, true, true, false, false, false, false, true, false, true, true, true, false, true, true, true, true, true, true, false, true, true, true, true, false, true, false, false, false, true, true, true, true, true, false, false, false, false, true, false, false, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, true, true, true, false, true, false, false, false, false, true, false, true, false, true, false, false, false, false, true, false, true, true, false, true, false, false, true, true, true, false, false, false, false, false, true, true, false, true, false, false, false, true, true, true, true, true, false, false, true, true, true, false, false, false, true, false, false, true, false, true, false, true, false, false, true, true, true, false, false, false, false, false, false, true, false, false, true, false, false, true, true, false, false, false, false, true, false, true, true, true, false, true, true, true, false, true, true, false, true, true, true, true, false, true, false, false, false, true, true, true, true, true, false, false, false, false, true, false, false, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, true, false, false, true, true, true, false, true, true, false, false, true, true, false, false, false, true, false, true, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, false, true, true, true, true, true, false, false, false, true, false, false, true, false, true, false, false, false, false, true, false, true, true, false, false, true, true, true, true, true, false, true, false, false, true, false, true, true, false, true, false, true, false, false, true, true, false, true, false, true, true, true, true, false, true, false, true, false, true, false, false, true, true, true, true, false, true, false, true, false, true, true, false, false, false, true, false, false, false, false, false, true]);
            let encoded = BinVector::from_bools(&[false, true, false, false, true, false, false, true, true, true, false, true, true, false, false, true, true, false, false, false, true, false, true, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, false, true, true, true, true, true, false, false, false, true, false, false, true, false, true, false, false, false, false, true, false, true, true, false, false, true, true, true, true, true, false, true, false, false, true, false, true, true, false, true, false, true, false, false, true, true, false, true, false, true, true, true, true, false, true, false, true, true, false, true, false, false, true, true, true, true, false, true, false, true, false, true, false, true, false, false, false, true, false, false, true, false, false, false, true, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, true, false, false, true, true, true, false, true, true, false, true, true, true, false, false, false, true, false, true, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, false, true, true, true, true, true, false, false, false, true, false, false, true, false, true, false, false, false, false, true, false, true, true, false, false, true, true, true, true, true, false, true, false, false, true, false, true, true, false, true, false, true, false, false, true, true, false, true, false, true, true, true, true, false, true, false, true, true, false, true, false, false, true, true, true, true, false, true, false, true, false, true, false, true, false, false, false, true, false, false, true, false, false, false, true, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, true, false, true, false, true, false, true, true, true, true, true, false, false, true, true, false, true, false, false, true, true, false, true, true, false, false, true, false, true, false, false, true, true, true, false, true, false, true, true, true, false, true, false, false, false, false, false, true, false, false, true, true, false, false, true, true, false, false, false, false, false, true, false, false, false, true, true, true, true, true, true, true, false, true, true, false, false, true, false, false, true, true, false, false, false, false, true, false, false, true, false, true, true, true, true, true, true, false, true, true, false, true, false, false, false, false, false, false, true, false, false, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, true, false, true, false, true, false, true, false, true, true, true, true, true, false, false, true, true, false, true, false, false, true, true, false, true, true, false, false, true, false, true, false, false, true, true, true, false, true, false, true, true, true, false, true, false, false, false, false, false, true, false, false, true, true, false, false, true, true, false, false, false, false, false, true, false, false, false, true, true, true, true, true, true, true, false, true, true, false, false, true, false, false, true, true, false, false, false, false, true, false, false, true, true, false, true, true, true, true, true, true, false, true, true, false, true, false, false, false, false, false, false, false, true, false, false, true, true, true, true, false, true, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, true, false, true, false, true, false, true, true, true, true, true, false, false, true, true, false, true, false, false, true, true, false, true, true, false, false, true, false, true, false, false, true, true, true, false, true, false, true, true, true, false, true, false, false, false, false, false, true, false, false, true, true, false, false, true, true, false, false, false, false, false, true, false, false, false, true, true, true, true, true, true, true, false, true, true, false, false, true, false, false, true, true, false, false, false, false, true, false, false, true, true, false, true, false, true, true, true, true, false, true, true, false, true, false, false, false, false, false, false, false, true, false, false, true, true, true, true, false, true, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, false, false, true, false, true, false, false, true, true, true, false, false, true, true, false, false, false, false, true, false, false, false, false, true, true, false, true, false, false, false, true, false, false, true, true, true, true, true, true, false, true, true, true, true, true, false, false, false, true, true, false, true, false, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, true, false, true, false, false, true, true, true, true, true, true, true, true, false, true, true, false, false, true, false, true, false, true, true, true, true, false, false, false, false, true, true, false, true, true, true, false, false, true, true, true, false, false, false, true, true, true]);
            let encoded = BinVector::from_bools(&[true, true, false, false, false, false, true, false, true, false, false, true, true, true, false, false, true, true, false, false, false, false, true, false, false, false, false, true, true, false, true, false, false, false, true, false, false, true, true, true, true, true, true, false, true, true, true, true, true, false, false, false, true, true, false, true, false, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, true, false, true, false, false, true, true, true, true, true, true, true, true, false, true, true, false, false, true, false, true, true, false, true, true, true, true, false, false, false, false, true, true, false, true, true, true, true, false, false, true, true, true, false, false, true, false, true, true, true, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, false, false, true, false, true, false, false, true, true, true, false, false, true, true, false, false, false, false, true, false, false, false, false, true, true, false, true, false, false, false, true, false, false, false, true, true, true, true, true, false, true, true, true, true, true, false, false, false, true, true, false, true, false, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, true, false, true, false, false, true, true, true, true, true, true, true, true, false, true, true, false, false, true, false, true, true, false, true, true, true, true, false, false, false, false, true, true, false, true, true, true, true, false, false, true, true, true, false, false, true, false, true, true, true, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, true, false, false, true, false, false, false, true, true, false, false, false, true, false, true, true, true, false, true, false, true, false, false, false, true, false, true, true, true, true, true, true, true, true, true, false, false, false, true, true, false, false, false, true, true, true, true, false, false, false, true, true, true, true, false, true, true, false, true, true, true, true, false, false, false, false, false, false, true, true, true, true, false, false, true, false, true, false, false, false, true, false, false, false, false, false, false, true, true, true, true, false, true, true, true, true, false, true, true, true, false, true, false, true, true, true, false, false, true, true, false, true, true, false, false, false]);
            let encoded = BinVector::from_bools(&[true, true, true, false, true, false, false, true, false, false, false, true, true, false, false, false, true, false, true, true, true, false, true, false, true, false, false, false, true, false, true, true, true, true, true, true, true, true, true, false, false, false, true, true, false, false, false, true, true, true, true, false, false, false, true, true, true, true, false, true, true, false, true, true, true, true, false, false, false, false, false, false, true, true, true, true, false, false, true, false, true, false, false, false, true, false, false, false, false, false, false, true, true, true, false, true, false, true, true, true, true, false, true, true, true, false, true, false, true, true, false, true, false, false, true, true, false, true, true, true, false, false, true, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, true, false, false, true, false, false, false, true, true, false, false, false, true, false, true, true, true, false, true, false, true, false, false, false, true, false, true, true, true, true, true, true, true, true, true, false, false, false, true, true, false, false, false, true, true, true, true, false, false, false, true, true, true, true, false, true, true, false, true, true, true, true, false, false, false, false, false, false, true, true, true, true, false, false, true, false, true, false, false, false, true, false, false, false, false, false, false, true, true, false, false, true, false, true, true, true, true, false, true, true, true, false, true, false, true, true, false, true, false, false, true, true, false, true, true, true, false, false, true, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, false, true, false, false, false, true, false, true, false, true, false, true, false, true, true, false, true, false, true, true, false, true, false, true, true, true, false, false, true, false, true, true, false, false, true, true, false, true, true, false, false, false, true, true, false, false, false, false, true, true, true, true, true, false, true, false, true, false, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, true, true, false, false, false, true, true, true, true, false, true, false, false, false, false, false, true, true, false, true, true, false, false, true, true, true, true, true, true, false, false, false, true, false, true, false, true, true, false, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, false, false, true, false, false, false, true, false, true, false, true, false, true, false, true, true, false, true, false, true, true, false, true, false, true, true, true, false, false, true, false, true, true, false, false, true, true, false, true, true, false, false, false, true, true, false, false, false, false, true, true, true, true, true, false, true, false, true, false, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, true, true, false, false, false, true, true, true, true, false, true, false, false, false, false, false, false, true, true, false, true, true, false, false, true, true, true, true, true, true, false, true, false, false, true, false, true, false, true, false, true, false, false, false, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, false, true, false, false, false, true, false, true, false, true, false, true, false, true, true, false, true, false, true, true, false, true, false, true, true, true, false, false, true, false, true, true, false, false, true, true, false, true, true, false, false, false, true, true, false, false, false, false, true, true, true, true, true, false, true, false, true, false, true, true, false, true, true, false, false, true, true, true, true, false, false, false, true, false, true, true, true, false, false, false, true, true, true, true, false, true, false, false, false, false, false, false, true, true, false, true, true, false, false, true, true, true, true, true, true, false, true, false, false, true, false, true, false, true, false, true, false, false, false, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, true, false, true, false, false, true, false, false, true, true, true, true, false, true, true, false, false, false, true, false, true, true, true, true, true, false, false, true, false, false, false, true, false, false, true, false, true, false, true, true, true, false, false, false, true, true, false, true, false, false, true, true, true, true, true, true, false, false, false, true, true, false, false, true, false, true, false, false, false, false, true, false, true, false, false, false, false, true, true, false, false, true, false, true, false, false, true, true, false, false, true, true, false, false, false, true, false, false, true, true, true, false, true, true, true, true, true, false, false, true, false, true, false, true, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, true, true, false, true, false, false, true, false, false, true, true, true, true, false, true, true, false, false, false, true, false, true, true, true, true, true, false, false, true, false, false, false, true, false, false, true, false, true, false, true, true, true, false, false, false, true, true, false, true, false, false, true, true, true, true, true, true, false, false, false, true, true, false, false, true, false, true, false, false, false, false, true, false, true, false, false, false, false, true, true, false, false, true, false, true, false, false, true, true, false, false, false, true, true, false, false, false, true, false, false, true, true, true, false, true, true, true, true, true, true, false, false, true, false, true, false, false, true, true, false, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, true, false, true, false, false, true, false, false, true, true, true, true, false, true, true, false, false, false, true, false, true, true, true, true, true, false, false, true, false, false, false, true, false, false, true, false, true, false, true, true, true, false, false, false, true, true, false, true, false, false, true, true, true, true, true, true, false, false, false, true, true, true, false, true, false, true, false, false, false, false, true, false, true, false, false, false, false, true, true, false, false, true, false, true, false, false, true, true, false, false, false, true, true, false, false, false, true, false, false, true, true, true, false, true, true, true, true, true, true, false, false, true, false, true, false, false, true, true, false, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, true, false, true, false, true, false, false, true, false, false, false, true, false, true, false, false, true, false, true, true, true, false, false, false, true, false, false, true, true, false, true, false, false, false, true, false, false, false, true, true, false, true, true, false, false, true, true, false, true, true, true, true, false, true, true, false, true, true, true, false, true, false, true, false, false, true, true, true, false, true, false, true, true, false, true, false, true, true, false, false, true, false, false, false, true, true, true, false, true, true, true, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, true, true, true, true, false, true, true, true, true, false]);
            let encoded = BinVector::from_bools(&[true, false, false, false, true, false, true, false, true, false, false, true, false, false, false, true, false, true, false, false, true, false, true, true, true, false, false, false, true, false, false, true, true, false, true, false, false, false, true, false, false, false, true, true, false, true, true, false, false, true, true, false, true, true, true, true, false, true, true, false, true, true, true, false, true, false, true, false, false, true, true, true, false, true, false, true, true, false, true, false, true, true, false, false, true, false, false, false, true, true, true, false, true, true, false, true, false, true, false, false, false, false, false, false, false, true, false, false, false, true, true, false, true, true, true, true, false, true, true, true, true, true, false, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, true, false, true, false, true, false, false, true, false, false, false, true, false, true, false, false, true, false, true, true, true, false, false, false, true, false, false, true, false, false, true, false, false, false, true, false, false, false, true, true, false, true, true, false, false, true, true, false, true, true, true, true, false, true, true, false, true, true, true, false, true, false, true, false, false, true, true, true, false, true, false, true, true, false, true, false, true, true, false, false, true, false, false, false, true, true, true, false, true, true, false, true, false, true, false, false, false, false, false, false, false, true, false, false, false, true, true, false, true, true, true, true, false, true, true, true, true, true, false, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, true, true, false, true, false, true, true, false, true, true, false, false, false, true, false, true, true, true, false, true, false, false, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, false, true, true, true, true, true, false, true, true, false, false, false, false, true, false, true, true, false, true, false, true, false, false, true, true, false, true, false, false, true, true, true, false, false, false, false, false, false, true, true, false, true, true, false, false, true, true, false, true, false, true, false, true, false, true, false, false, true, false, false, false, false, false, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, true, true, true, false, true, false, true, true, false, true, true, false, false, false, true, false, true, true, true, false, true, false, false, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, false, true, true, true, true, true, false, true, true, false, false, false, false, true, false, true, true, false, true, false, true, false, false, true, true, false, true, false, false, true, true, true, false, false, false, false, false, false, true, true, true, false, true, true, false, false, true, true, false, true, false, true, false, true, false, false, true, false, false, true, false, false, false, false, false, false, false, true, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, true, true, false, true, false, true, true, false, true, true, false, false, false, true, false, true, true, true, false, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, false, true, true, true, true, true, false, true, true, false, false, false, false, true, false, true, true, false, true, false, true, false, false, true, true, false, true, false, false, true, true, true, false, false, false, false, false, false, true, true, true, false, true, true, false, false, true, true, false, true, false, true, false, true, false, false, true, false, false, true, false, false, false, false, false, false, false, true, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, false, true, false, false, false, true, true, false, true, false, true, false, false, false, true, false, false, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, false, false, true, false, false, true, true, false, true, true, true, false, true, false, false, false, false, false, false, true, false, true, true, false, false, false, true, true, true, false, false, false, true, false, true, true, true, false, false, true, true, false, true, false, true, false, false, false, false, false, true, true, true, true, true, true, false, true, true, true, false, true, true, false, true, true, false, false, false, false, false, false, true, true, false, false, true, false, true, false, true, true, false, false]);
            let encoded = BinVector::from_bools(&[true, true, true, true, false, true, false, false, false, true, true, false, true, false, true, false, false, false, true, false, false, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, false, false, true, false, false, true, true, false, true, true, true, false, true, false, false, false, false, false, false, true, false, true, true, false, false, false, true, true, true, false, false, false, true, false, true, true, true, false, false, true, true, false, true, false, true, false, false, false, false, false, true, true, true, true, true, true, false, true, true, true, true, false, true, true, false, true, true, false, false, false, false, false, false, true, true, true, false, false, true, false, true, false, false, true, true, false, false, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, false, true, false, false, false, true, true, false, true, false, true, false, false, false, true, false, false, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, false, false, true, false, false, true, true, false, true, true, true, false, true, false, false, false, true, false, false, true, false, true, true, false, false, false, true, true, true, false, false, false, true, false, true, true, true, false, false, true, true, false, true, false, true, false, false, false, false, false, true, true, true, true, true, true, false, true, true, true, true, false, true, true, false, true, true, false, false, false, false, false, false, true, true, true, false, false, true, false, true, false, false, true, true, false, false, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, false, true, false, false, true, true, false, false, true, false, true, true, true, false, false, false, true, false, false, false, true, true, false, false, true, true, false, false, true, true, true, false, true, false, true, false, false, true, true, true, false, true, true, true, true, false, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, true, false, true, false, true, true, true, false, false, false, false, true, false, true, false, false, false, true, true, false, false, false, true, true, false, false, false, true, false, false, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, false, false, true, false, false, false, true, false, false, true]);
            let encoded = BinVector::from_bools(&[false, false, true, true, false, true, false, false, true, true, false, false, true, false, true, true, true, false, false, false, true, false, false, false, true, true, false, false, true, true, false, false, true, true, true, false, true, false, true, false, false, true, true, true, false, true, true, true, true, false, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, true, false, true, false, true, true, true, false, false, false, false, true, false, true, false, false, false, true, true, false, false, false, true, true, false, false, false, true, false, true, false, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, false, false, false, true, false, false, false, true, true, false, false, true, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, false, true, false, false, true, true, false, false, true, false, true, true, true, false, false, false, true, false, false, false, true, true, false, false, true, true, false, false, true, true, true, false, true, false, true, false, false, true, true, true, false, true, true, true, true, false, true, false, true, true, true, false, false, false, false, false, false, false, false, false, false, true, false, true, false, true, true, true, false, false, false, false, true, false, true, false, false, false, true, true, false, false, false, true, true, false, false, false, true, false, true, false, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, false, false, false, true, false, false, false, true, true, false, false, true, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, true, false, false, false, true, true, true, true, false, true, true, false, true, false, false, false, false, true, true, false, true, false, false, false, false, true, false, false, false, true, false, true, false, true, false, true, true, true, false, false, true, false, true, false, false, false, false, true, false, false, true, false, true, true, true, false, true, false, true, false, false, false, false, false, true, false, false, false, true, false, false, false, true, true, true, true, true, true, false, false, false, false, false, true, true, true, true, false, true, true, false, false, false, true, false, true, true, false, false, false, false, true, false, true, false, true, false, true, false, false, true, true, false, true, true, true]);
            let encoded = BinVector::from_bools(&[true, true, false, true, true, false, false, false, true, true, true, true, false, true, true, false, true, false, false, false, false, true, true, false, true, false, false, false, false, true, false, false, false, true, false, true, false, true, false, true, true, true, false, false, true, false, true, false, false, false, false, true, false, false, true, false, true, true, true, false, true, false, true, false, false, false, false, false, true, false, false, false, true, false, false, false, true, true, true, true, true, true, false, false, false, false, false, true, true, true, true, false, true, true, true, false, false, false, true, false, true, true, false, false, false, false, true, false, true, false, false, true, false, true, false, false, true, true, true, false, true, true, false, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, true, false, false, false, true, true, true, true, false, true, true, false, true, false, false, false, false, true, true, false, true, false, false, false, false, true, false, false, false, true, false, true, false, true, false, true, true, true, false, false, true, false, true, false, false, false, false, true, false, false, true, false, true, true, true, false, true, false, true, false, false, false, false, false, true, false, false, false, true, false, false, false, true, true, true, true, true, true, false, false, false, false, false, true, true, true, true, false, true, true, true, false, false, false, true, false, true, true, false, false, false, false, true, false, true, false, false, true, false, true, false, false, true, true, true, true, true, true, false, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, false, true, false, false, false, true, true, true, false, true, false, true, false, true, false, true, false, true, false, false, false, false, false, true, true, true, false, false, true, true, true, true, true, true, true, false, true, true, false, false, true, false, true, false, false, true, true, false, true, false, true, false, false, false, false, true, true, false, true, true, false, false, true, true, true, false, false, false, false, true, false, true, true, true, false, false, true, true, false, true, false, true, true, false, false, false, true, true, false, false, false, true, true, true, true, true, false, true, true, false, false, false, true, false, false, true, false, false, false, false, false, false, false, true, true]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, false, true, false, false, false, true, true, true, false, true, false, true, false, true, false, true, false, true, false, false, false, false, false, true, true, true, false, false, true, true, true, true, true, true, true, false, true, true, false, false, true, false, true, false, false, true, true, false, true, false, true, false, false, false, false, true, true, false, true, true, false, false, true, true, true, false, false, false, false, true, false, true, true, true, false, false, true, true, false, true, false, true, true, false, false, false, true, true, false, true, false, false, true, true, true, true, true, false, true, true, false, false, false, true, false, true, false, true, false, false, false, false, false, true, false, false, true, true, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, false, true, false, false, false, true, true, true, false, true, false, true, false, true, false, true, false, true, false, false, false, false, false, true, true, true, false, false, true, true, true, true, true, true, true, false, true, true, false, false, true, false, true, false, false, true, true, false, true, false, true, false, true, false, false, true, true, false, true, true, false, false, true, true, true, false, false, false, false, true, false, true, true, true, false, false, true, true, false, true, false, true, true, false, false, false, true, true, false, true, false, false, true, true, true, true, true, false, true, true, false, false, false, true, false, true, false, true, false, false, false, false, false, true, false, false, true, true, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, false, false, true, true, true, false, true, true, false, true, true, true, true, false, true, false, true, false, true, true, false, true, false, false, true, true, false, true, true, true, true, false, true, true, true, false, true, false, false, false, false, true, false, true, false, true, true, true, true, true, false, false, true, true, false, true, true, false, false, true, true, true, false, false, true, false, true, true, false, false, true, true, false, false, true, false, false, true, true, false, false, true, true, true, true, true, false, true, true, false, false, false, false, true, false, true, false, true, true, true, true, true, false, true, true, true, false, false, true, false, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, false, false, true, true, true, false, true, true, false, true, true, true, true, false, true, false, true, false, true, true, false, true, false, false, true, true, false, true, true, true, true, false, true, true, true, false, true, false, false, false, false, true, false, true, false, true, true, true, true, true, false, false, true, true, false, true, true, false, false, true, true, true, false, false, true, false, true, true, false, false, true, true, false, false, true, false, false, true, true, false, false, true, true, true, true, true, false, true, true, true, false, false, false, false, true, false, true, false, true, true, true, true, true, false, true, false, true, true, false, false, true, false, true, false, true, true, false, false, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, true, false, false, true, true, true, false, true, true, false, true, true, true, true, false, true, false, true, false, true, true, false, true, false, false, true, true, false, true, true, true, true, false, true, true, true, false, true, false, false, false, false, true, false, true, false, true, true, true, true, true, false, false, true, true, false, true, true, false, false, true, true, true, false, true, true, false, true, true, false, false, true, true, false, false, true, false, false, true, true, false, false, true, true, true, true, true, false, true, true, true, false, false, false, false, true, false, true, false, true, true, true, true, true, false, true, false, true, true, false, false, true, false, true, false, true, true, false, false, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, true, true, true, true, true, true, true, false, false, false, false, true, false, true, false, true, false, true, true, false, true, true, true, false, false, false, true, true, false, false, false, false, false, true, true, false, false, false, false, false, false, true, false, true, false, false, false, true, true, true, true, true, false, false, false, true, true, false, false, false, false, true, true, true, false, true, false, false, false, true, false, false, true, false, false, false, true, false, true, true, true, false, true, false, true, false, false, true, true, true, false, false, false, false, true, false, true, false, true, true, true, false, true, true, false, true, false, true, false, false, false, false, true, false, true, false]);
            let encoded = BinVector::from_bools(&[false, true, false, false, true, true, true, true, true, true, true, false, false, false, false, true, false, true, false, true, false, true, true, false, true, true, true, false, false, false, true, true, false, false, false, false, false, true, true, false, false, false, false, false, false, true, false, true, false, false, false, true, true, true, true, true, false, false, false, true, true, false, false, false, false, true, true, true, false, true, false, false, false, true, false, false, true, false, false, false, true, false, true, true, true, false, true, false, true, false, false, true, true, true, true, false, false, false, false, true, false, true, false, true, true, true, false, true, true, false, false, true, false, true, false, false, false, false, true, true, false, true, true, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, true, true, true, true, true, true, true, false, false, false, false, true, false, true, false, true, false, true, true, false, true, true, true, false, false, false, true, true, false, false, true, false, false, true, true, false, false, false, false, false, false, true, false, true, false, false, false, true, true, true, true, true, false, false, false, true, true, false, false, false, false, true, true, true, false, true, false, false, false, true, false, false, true, false, false, false, true, false, true, true, true, false, true, false, true, false, false, true, true, true, true, false, false, false, false, true, false, true, false, true, true, true, false, true, true, false, false, true, false, true, false, false, false, false, true, true, false, true, true, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, true, false, true, false, true, true, true, true, false, true, true, true, false, false, false, false, true, true, true, true, false, true, true, true, false, true, false, false, true, false, true, true, false, false, false, true, false, true, true, true, true, true, true, true, true, false, true, false, true, true, false, false, false, true, false, true, false, false, true, true, true, false, true, true, true, false, false, false, true, false, false, false, false, true, false, false, true, false, false, true, true, false, true, true, false, false, false, false, false, true, true, false, true, true, true, true, false, false, true, false, false, false, true, true, true, true, true, false, false, true, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, true, false, true, false, true, true, true, true, false, true, true, true, false, false, false, false, true, true, true, true, false, true, true, true, false, true, false, false, true, false, true, true, false, false, false, true, false, true, true, true, true, true, true, true, true, false, true, false, true, true, false, false, false, true, false, true, false, false, true, true, true, false, true, true, true, false, false, false, true, false, false, false, false, true, false, false, true, false, false, true, true, false, true, true, false, false, false, false, false, false, true, true, false, true, true, true, true, false, false, true, false, false, false, true, true, true, true, true, true, false, false, true, false, true, false, true, false, false, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, true, true, false, true, false, true, true, true, true, false, true, true, true, false, false, false, false, true, true, true, true, false, true, true, true, false, true, false, false, true, false, true, true, false, false, false, true, false, true, true, true, true, true, true, true, true, false, true, false, true, true, false, false, false, true, false, true, false, false, true, true, true, false, true, true, true, false, false, false, true, false, false, false, false, true, false, false, true, false, false, true, true, false, true, true, false, false, false, false, false, false, true, true, false, true, true, true, true, false, false, true, false, false, false, true, true, true, true, true, true, false, false, true, false, true, false, true, false, false, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, false, true, true, false, false, true, true, true, true, false, true, false, false, true, false, true, true, true, false, true, true, true, true, false, false, true, false, true, true, true, false, true, false, false, true, false, false, true, false, true, true, false, false, true, true, false, true, true, true, false, true, false, false, false, true, false, true, false, true, false, false, false, false, false, false, true, true, true, true, true, true, true, false, true, false, true, true, true, true, true, true, false, false, true, false, true, false, false, false, true, true, false, false, false, true, true, false, false, true, false, true, true, true, false, true, false, false, true, false, false, true, true, true, true, true, true]);
            let encoded = BinVector::from_bools(&[false, true, true, false, false, true, true, false, false, true, true, true, true, false, true, false, false, true, false, true, true, true, false, true, true, true, true, false, false, true, false, true, true, true, false, true, false, false, true, false, false, true, false, true, true, false, false, true, true, false, true, true, true, false, true, false, false, false, true, false, true, false, true, false, false, false, false, false, false, true, true, true, true, true, true, true, false, true, false, true, true, true, true, true, true, false, false, true, false, true, false, false, false, true, false, true, false, false, false, true, true, false, false, true, false, true, true, true, false, true, false, false, false, true, false, false, true, true, false, true, true, true, false, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, false, true, true, false, false, true, true, true, true, false, true, false, false, true, false, true, true, true, false, true, true, true, true, false, false, true, false, true, true, true, false, true, false, false, true, false, false, true, false, true, true, false, false, true, true, false, true, true, true, false, true, false, false, false, true, false, true, false, true, false, false, false, false, false, false, true, true, true, true, true, true, true, false, true, false, true, true, true, true, true, true, false, false, true, false, true, false, false, false, true, false, true, false, false, false, true, true, false, false, true, false, true, true, true, false, true, false, false, false, true, false, false, true, true, false, true, false, true, false, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, true, false, true, false, true, false, false, true, true, false, true, true, true, false, false, false, true, false, true, true, false, true, true, false, false, true, false, true, true, true, true, false, true, true, true, false, false, false, true, true, false, true, true, true, true, true, false, true, true, true, false, true, true, false, true, false, false, true, true, false, false, true, true, true, true, true, true, true, true, false, false, false, true, false, true, true, true, false, false, false, true, true, true, false, true, true, false, false, false, false, false, false, true, false, true, true, false, false, false, true, false, false, true, true, true, false, true, false, false, true, true, true, false, true, true, false]);
            let encoded = BinVector::from_bools(&[false, false, true, false, true, false, true, false, true, false, false, true, true, false, true, true, true, false, false, false, true, false, true, true, false, true, true, false, false, true, false, true, true, true, true, false, true, true, true, false, false, false, true, true, false, true, true, true, true, true, false, true, true, true, false, true, true, false, true, false, false, true, true, false, false, true, true, true, true, true, true, true, true, false, false, false, true, false, true, true, true, false, false, false, true, true, true, false, true, true, false, false, false, false, true, false, false, true, false, true, true, false, false, false, true, false, false, true, true, true, false, false, true, false, false, true, true, true, true, false, true, true, false, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, true, false, true, false, true, false, false, true, true, false, true, true, true, false, false, false, true, false, true, true, false, true, true, false, false, true, false, true, true, true, true, false, true, true, true, false, false, false, true, true, false, true, true, true, true, true, false, true, true, true, false, true, true, false, true, false, false, true, true, false, false, true, true, true, true, true, true, true, true, false, false, false, true, false, true, true, true, false, false, false, true, true, true, false, true, true, false, false, false, false, true, false, false, true, false, true, true, false, false, false, true, false, false, true, true, true, false, false, true, false, false, true, true, true, true, false, true, true, false, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, true, false, false, true, true, true, false, true, false, true, true, false, true, true, false, true, false, true, true, true, true, true, true, false, true, false, false, false, false, false, true, false, true, true, true, false, true, false, false, false, true, true, false, true, false, true, true, true, true, true, true, false, true, true, true, false, true, false, true, false, true, true, false, true, false, false, false, true, false, false, true, true, false, false, false, false, true, true, true, false, true, false, false, false, true, true, false, true, false, true, true, true, false, false, true, true, false, true, true, false, false, true, false, true, false, true, true, true, false, true, true, true, false, true, true, true]);
            let encoded = BinVector::from_bools(&[true, true, true, true, true, false, false, true, true, true, false, true, false, true, true, false, true, true, false, true, false, true, true, true, true, true, true, false, true, false, false, false, false, false, true, false, true, true, true, false, true, false, false, false, true, true, false, true, false, true, true, true, true, true, true, false, true, true, true, false, true, false, true, false, true, true, false, true, false, false, false, true, false, false, true, true, false, false, false, false, true, true, true, false, true, false, false, false, true, true, false, true, false, true, true, true, true, false, false, true, true, false, true, true, false, false, true, false, true, false, false, true, true, true, false, true, true, true, true, false, true, true, false, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, true, false, false, true, false, true, false, true, false, true, true, false, true, true, false, true, false, true, true, true, true, true, true, false, true, false, false, false, false, false, true, false, true, true, true, false, true, false, false, false, true, true, false, true, false, true, true, true, true, true, true, false, true, true, true, false, true, false, true, false, true, true, false, true, false, false, false, true, false, false, true, true, false, false, false, false, true, true, true, false, true, false, false, false, true, true, false, true, false, true, true, true, true, false, false, true, true, false, true, true, false, false, true, false, true, false, false, true, true, true, false, true, true, true, true, false, true, true, false, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, true, true, true, false, false, false, false, true, false, true, true, false, true, false, true, false, false, false, false, true, true, false, false, true, false, true, true, true, false, false, false, false, false, true, false, false, true, false, false, true, true, true, true, true, false, false, true, true, true, false, true, true, false, true, true, true, true, true, false, false, false, true, true, true, true, true, false, true, false, true, false, true, true, false, false, false, false, true, false, true, false, false, true, false, true, true, true, false, true, true, false, false, false, false, false, false, true, true, true, true, false, false, false, false, false, true, false, false, false, true, true, false, false, false, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, true, true, true, true, false, false, false, false, true, false, true, true, false, true, false, true, false, false, false, false, true, true, false, false, true, false, true, true, true, false, false, false, false, false, true, false, false, true, false, false, true, true, true, true, true, false, false, true, true, true, false, true, true, false, true, true, true, true, true, false, false, false, true, true, true, true, true, false, true, false, true, false, true, true, false, false, false, false, true, false, true, false, false, true, false, true, true, true, false, true, true, true, false, false, false, false, false, false, true, true, true, true, false, false, false, false, false, true, true, false, false, false, true, true, false, false, false, false, true, true, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, true, true, true, false, false, false, false, true, false, true, true, false, true, false, true, false, false, false, false, true, true, false, false, true, false, true, true, true, false, false, false, false, false, true, false, false, true, false, false, true, true, true, true, true, false, false, true, true, true, false, true, true, false, true, true, true, true, true, false, false, false, true, true, true, true, true, false, true, false, true, false, true, true, false, false, false, false, true, false, true, false, false, true, false, true, true, true, false, true, true, true, false, false, false, false, false, false, true, false, true, true, false, false, false, false, false, true, true, false, false, false, true, true, false, false, false, false, true, true, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, true, false, false, true, true, true, false, false, true, false, false, false, false, true, false, false, false, false, false, false, true, true, true, false, false, true, false, true, false, true, true, true, true, true, false, true, false, false, true, false, true, false, false, false, false, false, false, true, true, false, true, false, false, true, true, true, true, false, true, false, true, true, false, true, false, true, false, true, true, false, true, false, false, false, false, true, false, false, true, false, false, true, true, false, false, false, false, false, true, true, true, false, false, true, true, true, true, false, false, false, true, false, true, true, false, false, true, true, true, false, true, true, true, false, true, false]);
            let encoded = BinVector::from_bools(&[false, false, false, false, true, false, false, true, true, true, false, false, true, false, false, false, false, true, false, false, false, false, false, false, true, true, true, false, false, true, false, true, false, true, true, true, true, true, false, true, false, false, true, false, true, false, false, false, false, false, false, true, true, false, true, false, false, true, true, true, true, false, true, false, true, true, false, true, false, true, false, true, true, false, true, false, false, false, false, true, false, false, true, false, false, true, true, false, false, false, false, false, true, true, false, true, false, false, true, true, true, true, false, false, false, true, false, true, true, false, false, false, true, true, true, false, true, true, false, true, false, true, false, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, true, false, false, true, true, true, false, false, true, false, false, false, false, true, false, false, false, false, false, false, true, true, true, false, false, true, false, true, false, true, true, true, true, true, false, true, false, false, true, false, true, false, false, false, false, false, false, true, true, false, true, false, false, true, true, true, true, false, true, false, true, true, true, true, false, true, false, true, true, false, true, false, false, false, false, true, false, false, true, false, false, true, true, false, false, false, false, false, true, true, false, true, false, false, true, true, true, true, false, false, false, true, false, true, true, false, false, false, true, true, true, false, true, true, false, true, false, true, false, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, true, false, true, false, true, true, false, true, true, false, true, true, true, false, false, true, true, false, true, false, true, true, true, true, true, true, true, false, true, false, false, true, false, false, false, true, false, true, true, true, false, false, true, false, true, true, true, false, false, false, false, true, true, false, false, true, true, false, true, true, true, true, false, false, true, true, false, true, false, false, false, false, false, true, false, true, true, false, true, true, false, true, false, false, false, true, true, true, false, true, false, false, false, false, true, false, false, true, false, false, true, true, true, true, false, false, false, false, true, true, true, true, true, false, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, true, true, false, true, false, true, true, false, true, true, false, true, true, true, false, false, true, true, false, true, false, true, true, true, true, true, true, true, false, true, false, false, true, false, false, false, true, false, true, true, true, false, false, true, false, true, true, true, false, false, false, false, true, true, false, false, true, true, false, true, true, true, true, false, false, true, true, false, true, false, false, false, false, false, true, false, true, true, false, true, true, false, true, false, false, false, true, true, true, false, true, true, false, false, false, false, true, false, false, true, false, false, true, true, true, true, false, true, false, false, false, true, true, true, true, false, true, false, false, false, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, true, false, true, false, true, true, false, true, true, false, true, true, true, false, false, true, true, false, true, false, true, true, true, true, true, true, true, false, true, false, false, true, false, false, false, true, false, true, true, true, false, false, true, false, true, true, true, false, false, false, false, true, true, false, false, true, true, false, true, true, true, true, false, false, true, true, false, true, false, false, false, false, false, true, false, true, true, false, true, true, false, true, false, false, false, true, true, true, false, true, true, false, false, false, false, true, false, false, true, false, false, true, true, true, true, false, true, false, false, false, true, true, false, true, false, true, false, false, false, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, true, false, false, false, false, true, true, true, false, false, true, true, false, true, false, true, false, false, true, false, false, true, false, false, false, true, true, true, false, false, false, true, true, false, true, false, false, false, true, true, false, true, false, true, true, false, false, false, false, true, true, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, true, true, true, false, false, true, true, true, true, true, false, true, false, false, true, false, false, true, true, true, false, false, true, true, false, false, true, true, true, false, false, true, false, true, false, true, true, false, false, true, true, false, false, false, true, true, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, true, false, false, false, false, true, true, true, false, false, true, true, false, true, false, true, false, false, true, false, false, true, false, false, false, true, true, true, false, false, false, true, true, false, true, false, false, false, true, true, false, true, false, true, true, false, false, false, false, true, true, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, true, true, true, false, false, true, true, true, true, true, false, true, false, false, true, false, false, true, true, true, false, false, true, false, true, false, false, true, true, true, false, false, true, false, true, false, true, true, false, true, false, true, true, false, false, false, true, false, true, true, false, false, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, true, false, false, false, false, true, true, true, false, false, true, true, false, true, false, true, false, false, true, false, false, true, false, false, false, true, true, true, false, false, false, true, true, false, true, false, false, false, true, true, false, true, false, true, true, false, false, false, false, true, true, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, true, true, false, false, false, true, true, true, true, true, false, true, false, false, true, false, false, true, true, true, false, false, true, false, true, false, false, true, true, true, false, false, true, false, true, false, true, true, false, true, false, true, true, false, false, false, true, false, true, true, false, false, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, true, true, true, false, true, false, true, true, true, true, true, true, false, true, true, false, false, true, true, false, true, false, false, false, true, true, true, false, true, true, true, true, false, false, true, true, false, true, false, true, true, true, true, false, true, false, false, true, false, true, false, true, false, false, true, false, false, true, true, false, false, true, false, true, true, true, false, true, false, false, true, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, false, false, true, true, true, true, true, true, false, false, false, true, false, true, true, false, false, false, false, false, false, false, true, false, true, true, true, false, true, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, true, true, true, false, true, false, true, true, true, true, true, true, false, true, true, false, false, true, true, false, true, false, false, false, true, true, true, false, true, true, true, true, false, false, true, true, false, true, false, true, true, true, true, false, true, false, false, true, false, true, false, true, false, false, true, false, false, true, true, false, false, true, false, true, true, true, false, true, false, false, true, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, false, false, true, true, true, true, true, true, true, false, false, false, true, false, true, true, false, false, false, false, true, false, false, false, true, false, true, true, false, true, false, true, true, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, true, true, true, false, true, false, true, true, true, true, true, true, false, true, true, false, false, true, true, false, true, false, false, false, true, true, true, false, true, true, true, true, false, false, true, true, false, true, false, false, true, true, true, false, true, false, false, true, false, true, false, true, false, false, true, false, false, true, true, false, false, true, false, true, true, true, false, true, false, false, true, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, false, false, true, true, true, true, true, true, true, false, false, false, true, false, true, true, false, false, false, false, true, false, false, false, true, false, true, true, false, true, false, true, true, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, false, true, true, false, false, false, true, true, true, false, true, true, true, true, false, false, true, true, false, true, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, false, false, true, true, true, false, false, true, false, false, true, false, false, true, false, true, true, false, false, false, true, false, true, false, true, false, false, false, false, false, false, true, false, false, true, false, true, false, false, true, false, true, false, false, false, false, true, false, true, true, true, false, false, true, false, true, false, true, false, false, true, false, false, true, true, false, false, true, false, true, false, true, true, true, false, true, true, false, false]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, false, true, true, false, false, false, true, true, true, false, true, true, true, true, false, false, true, true, false, true, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, false, false, true, true, true, false, false, true, false, false, true, false, false, true, false, true, true, false, false, false, true, false, true, false, true, false, false, false, false, false, false, true, false, false, true, false, true, false, false, true, false, true, false, false, false, false, true, false, true, true, true, false, false, false, true, false, true, false, true, false, false, true, false, false, true, true, false, false, true, true, false, true, false, true, true, true, false, true, true, true, false, true, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, false, true, true, false, false, false, true, true, true, false, true, true, true, true, false, false, true, true, false, true, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, false, false, false, true, true, true, false, false, true, false, false, true, false, false, true, false, true, true, false, false, false, true, false, true, false, true, false, false, false, false, false, false, true, false, false, true, false, true, false, false, true, false, true, false, false, false, false, true, false, true, true, true, false, false, false, true, false, true, false, true, false, false, true, false, false, true, true, false, false, true, true, false, true, false, true, true, true, false, true, true, true, false, true, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, true, false, false, true, false, false, true, true, false, true, false, false, true, false, false, false, false, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, true, false, true, false, true, true, true, false, true, false, true, true, false, false, true, true, true, false, true, true, false, false, false, true, false, true, false, true, false, false, true, false, false, false, true, true, true, false, false, false, true, false, true, true, false, true, false, false, true, true, false, false, true, true, true, false, true, false, false, false, false, false, true, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, true, false, false, true, false, false, true, true, false, true, false, false, true, false, false, false, false, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, true, false, true, false, true, true, true, false, true, false, true, true, false, false, true, true, true, false, true, true, false, false, false, true, false, true, false, true, false, false, true, false, false, false, true, true, true, false, false, false, true, false, true, true, false, true, false, false, true, true, false, false, true, true, true, false, false, true, false, false, false, false, false, true, true, false, true, true, false, false, true, false, true, true, false, true, false, false, true, false, true, false, true, false, true, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, true, false, false, true, false, false, true, true, false, true, false, false, true, false, false, false, false, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, true, false, true, false, true, true, true, false, true, false, true, true, false, false, true, true, true, false, true, true, false, false, false, true, false, true, false, true, false, false, true, false, false, false, true, true, true, false, false, false, true, false, true, true, false, true, false, false, true, true, false, false, true, true, true, false, false, true, false, false, false, false, true, true, true, false, true, true, false, false, true, false, true, true, false, true, false, false, true, false, true, false, true, false, true, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, false, false, true, false, true, false, true, true, true, true, false, false, true, true, true, true, false, true, true, true, false, true, true, true, true, false, true, false, false, false, false, false, false, true, true, false, false, false, true, true, false, true, false, true, false, true, true, true, true, false, true, true, true, false, true, false, true, true, false, false, false, true, true, true, false, false, false, false, true, true, true, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, true, false, false, true, true, false, true, true, true, false, true, true, false, true, true, false, false, false, true, false, false, true, false, false, true, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, false, false, true, false, true, false, true, true, true, true, false, false, true, true, true, true, false, true, true, true, false, true, true, true, true, false, true, false, false, false, false, false, false, true, true, false, false, false, true, true, false, true, false, true, false, true, true, true, true, false, true, true, true, false, true, false, true, true, false, false, false, true, true, true, false, false, false, false, true, true, true, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, true, true, false, false, true, true, false, true, true, true, false, true, true, false, true, true, false, true, false, false, true, false, false, true, false, false, false, true, true, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, false, false, true, false, true, false, true, true, true, true, false, false, true, true, true, true, false, true, true, true, false, true, true, true, true, false, true, false, false, false, false, false, false, true, true, false, false, false, true, true, false, true, false, true, false, true, true, true, true, false, true, true, true, false, true, false, true, true, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, true, true, false, false, true, true, false, true, true, true, false, true, true, false, true, true, false, true, false, false, true, false, false, true, false, false, false, true, true, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, true, true, true, true, true, false, true, false, true, false, false, false, true, true, false, false, false, true, true, true, false, false, true, false, true, false, true, true, true, true, true, false, false, false, true, true, false, true, false, false, false, false, false, true, false, true, false, false, false, false, true, false, false, false, true, false, true, true, false, true, false, false, true, false, true, true, true, false, false, true, false, false, true, true, false, true, false, true, false, false, true, true, true, false, true, false, true, false, false, false, false, false, true, false, false, false, false, false, false, false, false, true, true, true, false, true, false, true, true, true, true, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[true, true, true, true, true, true, true, true, true, false, true, false, true, false, false, false, true, true, false, false, false, true, true, true, false, false, true, false, true, false, true, true, true, true, true, false, false, false, true, true, false, true, false, false, false, false, false, true, false, true, false, false, false, false, true, false, false, false, true, false, true, true, false, true, false, false, true, false, true, true, true, false, false, true, false, false, true, true, false, true, false, true, false, false, true, true, true, false, true, false, true, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, true, true, true, false, false, true, false, true, true, true, true, false, true, false, true, false, false, false, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, true, true, true, true, true, false, true, false, true, false, false, false, true, true, false, false, false, true, true, true, false, false, true, false, true, false, true, true, true, true, true, false, false, false, true, true, false, true, false, false, false, false, false, true, false, true, false, false, false, false, true, false, false, false, true, false, true, true, false, true, false, false, true, false, true, true, true, false, false, true, false, false, true, true, false, true, false, true, false, false, true, true, true, false, true, false, true, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, true, true, true, false, false, true, false, true, true, true, true, false, true, false, false, false, false, false, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, false, false, false, false, true, false, true, false, true, true, true, true, false, false, false, false, false, false, false, true, false, true, true, false, false, true, false, false, false, false, false, true, false, true, true, false, true, true, true, true, false, false, false, false, false, true, true, false, false, true, true, true, false, false, false, true, false, false, false, false, true, false, true, true, true, false, false, true, false, true, false, false, false, false, false, false, false, true, true, false, false, true, true, false, true, false, false, true, true, true, true, false, true, false, true, false, false, true, true, false, true, true, false, false, true, true, true, false, false, false, true, false, true, false, false, true]);
            let encoded = BinVector::from_bools(&[false, true, true, false, false, false, false, false, true, false, true, false, true, true, true, true, false, false, false, false, false, false, false, true, false, true, true, false, false, true, false, false, false, false, false, true, false, true, true, false, true, true, true, true, false, false, false, false, false, true, true, false, false, true, true, true, false, false, false, true, false, false, false, false, true, false, true, true, true, false, false, true, false, true, false, false, false, false, false, false, false, true, true, false, false, true, true, false, true, false, false, true, true, true, true, true, false, true, false, true, false, false, true, true, false, true, true, false, false, true, true, true, true, false, false, false, true, false, false, true, false, false, false, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, false, false, false, false, true, false, true, false, true, true, true, true, false, false, false, false, false, false, false, true, false, true, true, false, false, true, false, false, false, false, false, true, false, true, true, false, true, true, true, true, false, false, false, false, false, true, true, false, false, true, false, true, false, false, false, true, false, false, false, false, true, false, true, true, true, false, false, true, false, true, false, false, false, false, false, false, false, true, true, false, false, true, true, false, true, false, false, true, true, true, true, true, false, true, false, true, false, false, true, true, false, true, true, false, false, true, true, true, true, false, false, false, true, false, false, true, false, false, false, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, false, false, false, true, true, true, true, false, false, true, false, true, false, true, false, false, false, true, false, false, true, true, true, false, true, false, false, true, false, true, false, true, false, false, false, false, true, true, false, true, true, true, false, false, false, true, false, true, false, true, false, true, true, false, false, false, true, false, true, true, true, false, false, false, false, true, false, false, true, false, true, false, true, false, true, false, true, true, true, false, false, true, true, false, false, false, true, false, false, true, true, true, true, true, true, false, true, true, true, true, true, false, true, true, true, true, false, false, false, false, false, true, false, true, false]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, false, false, false, true, true, true, true, false, false, true, false, true, false, true, false, false, false, true, false, false, true, true, true, false, true, false, false, true, false, true, false, true, false, false, false, false, true, true, false, true, true, true, false, false, false, true, false, true, false, true, false, true, true, false, false, false, true, false, true, true, true, false, false, false, false, true, false, false, true, false, true, false, true, false, true, false, true, true, true, false, false, true, true, false, false, false, true, false, false, false, true, true, true, true, true, true, false, true, true, true, true, true, false, true, true, true, true, true, false, false, false, false, false, true, true, false, true, false, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, true, false, false, false, true, true, true, true, false, false, true, false, true, false, true, false, false, false, true, false, false, true, true, true, false, false, false, false, true, false, true, false, true, false, false, false, false, true, true, false, true, true, true, false, false, false, true, false, true, false, true, false, true, true, false, false, false, true, false, true, true, true, false, false, false, false, true, false, false, true, false, true, false, true, false, true, false, true, true, true, false, false, true, true, false, false, false, true, false, false, false, true, true, true, true, true, true, false, true, true, true, true, true, false, true, true, true, true, true, false, false, false, false, false, true, true, false, true, false, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, true, true, true, true, false, false, false, false, false, false, false, true, false, false, false, false, true, true, true, true, false, true, true, true, false, false, false, false, true, true, true, false, false, true, false, false, true, false, false, true, false, false, false, false, true, false, false, true, false, false, true, true, true, false, false, true, false, false, false, true, true, true, false, true, false, false, true, false, true, false, true, true, true, false, true, true, true, false, false, false, true, false, false, true, false, false, false, true, true, false, false, true, false, true, true, false, true, true, true, false, false, false, true, true, false, false, false, true, true, true, false, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, true, true, true, true, true, false, false, false, false, false, false, false, true, false, false, false, false, true, true, true, true, false, true, true, true, false, false, false, false, true, true, true, false, false, true, false, false, true, false, false, true, false, false, false, false, true, false, false, true, false, false, true, true, true, false, false, true, false, false, false, true, true, true, false, true, false, false, true, false, true, false, true, true, true, false, true, true, true, false, false, false, true, false, false, true, false, false, false, true, true, false, false, false, true, false, true, true, false, true, true, true, false, false, false, true, true, false, false, false, false, true, true, true, false, false, false, false, true, false, true, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, true, true, true, true, false, false, false, false, false, false, false, true, false, false, false, false, true, true, true, true, false, true, true, true, false, true, false, false, true, true, true, false, false, true, false, false, true, false, false, true, false, false, false, false, true, false, false, true, false, false, true, true, true, false, false, true, false, false, false, true, true, true, false, true, false, false, true, false, true, false, true, true, true, false, true, true, true, false, false, false, true, false, false, true, false, false, false, true, true, false, false, false, true, false, true, true, false, true, true, true, false, false, false, true, true, false, false, false, false, true, true, true, false, false, false, false, true, false, true, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, false, false, false, false, false, true, false, true, false, false, true, false, false, true, true, true, true, true, false, true, true, true, true, false, true, false, false, true, false, true, false, false, true, true, true, true, true, true, false, false, false, true, true, false, false, true, false, true, true, false, true, true, true, true, false, false, false, false, false, true, true, true, false, false, true, true, false, true, false, true, true, true, false, false, false, false, true, true, true, false, false, false, false, false, true, true, true, true, true, true, false, true, false, true, true, false, true, false, true, true, false, false, true, false, true, false, true, true, false, true, true, true, false, false, false, true]);
            let encoded = BinVector::from_bools(&[false, true, true, false, false, false, false, false, false, true, false, true, false, false, true, false, false, true, true, true, true, true, false, true, true, true, true, false, true, false, false, true, false, true, false, false, true, true, true, true, true, true, false, false, false, true, true, false, false, true, false, true, true, false, true, true, true, true, false, false, false, false, false, true, true, true, false, false, true, true, false, true, false, true, true, true, false, false, false, false, true, true, true, false, false, false, false, false, true, true, true, true, true, true, true, false, true, false, true, true, false, true, false, true, true, false, false, true, false, true, false, false, true, true, false, true, true, true, true, false, false, false, false, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, false, false, false, false, false, true, false, true, false, false, true, false, false, true, true, true, true, true, false, true, true, true, true, false, true, false, false, true, false, true, false, false, true, true, true, true, true, true, false, false, false, true, true, false, false, true, false, true, true, false, true, true, true, true, false, false, false, false, false, true, true, true, false, false, true, true, false, true, false, true, true, true, false, false, false, false, true, true, true, false, false, false, false, false, true, false, true, true, true, true, true, false, true, false, true, true, false, true, false, true, true, false, false, true, false, true, false, false, true, true, false, true, true, true, true, false, false, false, false, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, true, false, false, true, true, false, false, true, true, false, false, false, false, false, true, true, true, true, true, false, true, false, false, false, true, true, false, true, false, false, false, false, true, true, false, false, true, false, true, false, true, false, false, true, true, true, false, true, false, false, true, false, true, true, false, true, false, true, true, true, false, true, false, false, false, true, true, true, false, false, true, false, false, true, false, false, false, false, false, true, true, false, true, true, false, true, false, false, false, false, false, false, false, true, true, true, false, false, true, true, false, false, true, false, true, true, false, true, true, false, true, false, true, true, true, true]);
            let encoded = BinVector::from_bools(&[false, false, true, true, true, false, false, true, true, false, false, true, true, false, false, false, false, false, true, true, true, true, true, false, true, false, false, false, true, true, false, true, false, false, false, false, true, true, false, false, true, false, true, false, true, false, false, true, true, true, false, true, false, false, true, false, true, true, false, true, false, true, true, true, false, true, false, false, false, true, true, true, false, false, true, false, false, true, false, false, false, false, false, true, true, false, true, true, false, true, false, false, false, false, false, false, false, false, true, true, true, false, false, true, true, false, false, true, false, true, false, true, false, true, true, false, true, false, true, true, true, true, true, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, true, false, false, true, true, false, false, true, true, false, false, false, false, false, true, true, true, true, true, false, true, false, false, false, true, true, false, true, false, false, false, false, true, true, false, false, true, false, true, false, true, false, false, true, true, true, false, true, false, false, true, false, true, true, false, true, false, true, true, true, false, true, false, false, false, true, true, true, false, false, true, false, false, true, false, false, false, false, false, true, true, false, true, true, false, true, false, false, false, false, false, false, false, false, true, true, true, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, true, false, true, true, true, true, true, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, false, false, false, false, false, true, true, true, true, false, true, true, false, true, true, false, false, false, true, true, true, false, false, false, false, true, false, false, false, true, true, true, false, false, false, false, false, false, true, false, true, true, false, true, false, false, false, false, false, false, false, true, true, false, true, true, true, false, false, true, true, false, false, false, true, true, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, false, false, false, true, false, true, false, false, false, true, false, true, true, false, true, false]);
            let encoded = BinVector::from_bools(&[true, false, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, false, false, false, false, false, true, true, true, true, false, true, true, false, true, true, false, false, false, true, true, true, false, false, false, false, true, false, false, false, true, true, true, false, false, false, false, false, false, true, false, true, true, false, true, false, false, false, false, false, false, false, true, true, false, true, true, true, false, false, true, true, false, false, false, true, true, false, false, false, false, false, true, false, true, true, true, true, true, true, true, true, true, false, false, false, true, false, true, true, false, false, false, true, false, true, true, true, false, true, false, false, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, false, false, false, false, false, true, true, true, true, false, true, false, false, true, true, false, false, false, true, true, true, false, false, false, false, true, false, false, false, true, true, true, false, false, false, false, false, false, true, false, true, true, false, true, false, false, false, false, false, false, false, true, true, false, true, true, true, false, false, true, true, false, false, false, true, true, false, false, false, false, false, true, false, true, true, true, true, true, true, true, true, true, false, false, false, true, false, true, true, false, false, false, true, false, true, true, true, false, true, false, false, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, false, false, false, true, false, true, false, false, true, false, true, false, false, true, true, true, false, true, true, false, true, false, false, true, false, true, false, false, true, false, true, true, true, false, false, false, true, true, true, false, false, true, false, true, true, false, false, false, false, false, true, false, false, false, false, false, false, true, false, true, true, true, true, false, true, true, false, true, true, false, true, true, false, true, false, false, false, false, false, true, true, false, true, true, true, true, false, true, true, false, false, false, true, false, false, false, true, true, false, false, false, true, true, false, false, false, false, false, false, false, false, true, false, false, true, false]);
            let encoded = BinVector::from_bools(&[false, false, true, false, false, false, false, true, false, true, false, false, true, false, true, false, false, true, true, true, false, true, true, false, true, false, false, true, false, true, false, false, true, false, true, true, true, false, false, false, true, true, true, false, false, true, false, true, true, false, false, false, false, false, true, false, false, false, false, false, false, true, false, true, true, true, true, false, true, true, false, true, true, false, true, true, false, true, false, false, false, false, false, true, true, false, true, true, true, true, false, true, true, false, true, false, false, true, false, false, false, true, true, false, false, false, true, true, false, false, false, false, false, false, false, false, false, true, true, false, false, true, true, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, false, false, false, true, false, true, false, false, true, false, false, false, false, true, true, true, false, true, true, false, true, false, false, true, false, true, false, false, true, false, true, true, true, false, false, false, true, true, true, false, false, true, false, true, true, false, false, false, false, false, true, false, false, false, false, false, false, true, false, true, true, true, true, false, true, true, false, true, true, false, true, true, false, true, false, false, false, false, false, true, true, false, true, true, true, true, false, true, true, false, true, false, false, true, false, false, false, true, true, false, false, false, true, true, false, false, false, false, false, false, false, false, false, true, true, false, false, true, true, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, true, false, true, false, false, true, true, true, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, true, true, false, true, false, false, true, false, false, true, true, true, true, false, false, false, false, false, false, true, true, false, true, false, false, false, false, true, false, true, false, false, false, true, false, false, false, false, false, false, false, false, false, true, true, false, true, false, true, true, false, false, true, true, false, true, false, false, true, true, true, false, false, false, false, false, false, true, false, false, true, false, true, false, true, true, true, false, false, false]);
            let encoded = BinVector::from_bools(&[false, false, false, true, true, false, true, false, false, true, true, true, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, true, true, false, true, false, false, true, false, false, true, true, true, true, false, false, false, false, false, false, true, true, false, true, false, false, false, false, true, false, true, false, false, false, true, false, false, false, false, false, false, false, false, false, true, true, false, true, false, true, true, false, false, true, true, true, false, true, false, false, true, true, true, false, false, false, false, false, false, true, false, false, false, true, false, true, false, true, true, false, true, false, false, false, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, true, false, true, false, false, true, true, true, false, false, true, false, false, false, true, false, false, false, true, false, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, true, true, false, true, false, false, true, false, false, true, true, true, true, false, false, false, false, false, false, true, true, false, true, false, false, false, false, true, false, true, false, false, false, true, false, false, false, false, false, false, false, false, false, true, true, false, true, false, true, true, false, false, true, true, true, false, true, false, false, true, true, true, false, false, false, false, false, false, true, false, false, false, true, false, true, false, true, true, false, true, false, false, false, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, false, true, false, true, false, true, true, false, true, true, false, true, false, false, true, false, false, false, true, true, true, false, true, false, false, true, true, true, true, true, false, false, true, false, false, false, false, false, true, false, false, false, false, false, false, true, false, true, false, true, true, true, true, false, true, false, true, true, true, true, true, true, false, false, false, true, true, true, false, true, true, false, false, true, true, false, true, true, false, true, false, false, false, false, false, false, true, true, true, true, false, true, false, false, false, false, true, false, true, false, false, true, false, true, false, false, true, true, false, false, true, true, true, false, false, true]);
            let encoded = BinVector::from_bools(&[false, false, true, true, false, true, false, true, false, true, true, false, true, true, false, true, false, false, true, false, false, false, true, true, true, false, true, false, false, true, true, true, true, true, false, false, true, false, false, false, false, false, true, false, false, false, false, false, false, true, false, true, false, true, true, true, true, false, true, false, true, true, true, true, true, true, false, false, false, true, true, true, false, true, true, false, false, true, true, false, true, true, false, true, false, false, false, false, false, false, true, true, true, true, false, false, true, false, false, false, false, true, false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, true, true, true, false, false, true, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, false, true, false, true, false, true, true, false, true, true, false, true, false, false, true, false, false, false, true, true, true, false, true, false, false, true, true, false, true, true, false, false, true, false, false, false, false, false, true, false, false, false, false, false, false, true, false, true, false, true, true, true, true, false, true, false, true, true, true, true, true, true, false, false, false, true, true, true, false, true, true, false, false, true, true, false, true, true, false, true, false, false, false, false, false, false, true, true, true, true, false, false, true, false, false, false, false, true, false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, true, true, true, false, false, true, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, false, true, false, true, true, true, false, false, true, false, false, true, false, true, false, false, true, true, false, false, true, true, false, true, true, false, true, false, true, true, false, true, false, false, false, true, true, true, true, false, false, false, true, true, false, false, true, false, false, true, true, true, false, true, false, false, false, false, true, true, true, false, false, false, false, false, true, false, true, true, true, true, false, false, true, true, true, true, true, true, true, false, false, false, false, false, true, false, false, true, false, false, false, false, true, false, true, true, true, false, false, false, false, true, true, true, true, true, true, false, true, false, true, false, false, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, false, true, false, true, true, true, false, false, true, false, false, true, false, true, false, false, true, true, false, false, true, true, false, true, true, false, true, false, true, true, false, true, false, false, false, true, true, true, true, false, false, false, true, true, false, false, true, false, false, true, true, true, false, true, false, false, false, false, true, true, true, false, false, false, false, false, true, false, true, true, true, true, false, false, true, true, true, true, true, true, true, false, false, false, false, false, true, false, false, true, true, false, false, false, false, true, false, true, true, true, false, false, false, false, true, true, false, true, true, true, true, false, true, false, false, true, false, false, false, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, false, true, false, true, true, true, false, false, true, false, false, true, false, true, false, false, true, true, false, false, true, true, false, true, true, false, true, false, true, true, false, true, true, false, false, true, true, true, true, false, false, false, true, true, false, false, true, false, false, true, true, true, false, true, false, false, false, false, true, true, true, false, false, false, false, false, true, false, true, true, true, true, false, false, true, true, true, true, true, true, true, false, false, false, false, false, true, false, false, true, true, false, false, false, false, true, false, true, true, true, false, false, false, false, true, true, false, true, true, true, true, false, true, false, false, true, false, false, false, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, false, false, false, true, false, true, false, false, false, true, true, true, false, true, true, false, false, false, true, true, true, true, true, true, true, false, true, false, true, true, false, true, true, false, true, true, false, true, true, false, true, true, true, true, false, true, false, false, true, false, false, true, false, false, false, false, true, false, true, false, true, true, true, true, true, false, true, false, true, true, true, false, false, true, false, true, true, false, false, false, true, true, false, false, false, true, false, false, true, false, false, false, false, true, false, false, false, true, false, false, true, true, false, false, true, false, true, false, false, true, false, false, true, false, true, true]);
            let encoded = BinVector::from_bools(&[false, false, false, false, false, false, false, true, false, true, false, false, false, true, true, true, false, true, true, false, false, false, true, true, true, true, true, true, true, false, true, false, true, true, false, true, true, false, true, true, false, true, true, false, true, true, true, true, false, true, false, false, true, false, false, true, false, false, false, false, true, false, true, false, true, true, true, true, true, false, true, false, true, true, true, false, false, true, false, true, true, false, false, false, true, true, false, false, false, true, false, false, true, false, true, false, false, false, true, false, false, false, true, false, false, true, true, false, false, true, false, false, true, false, false, true, false, false, false, true, false, true, false, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, false, false, false, true, false, true, false, false, false, true, true, true, false, true, true, false, false, true, true, true, true, true, true, true, true, false, true, false, true, true, false, true, true, false, true, true, false, true, true, false, true, true, true, true, false, true, false, false, true, false, false, true, false, false, false, false, true, false, true, false, true, true, true, true, true, false, true, false, true, true, true, false, false, true, false, true, true, false, false, false, true, true, false, false, false, true, false, false, true, false, true, false, false, false, true, false, false, false, true, false, false, true, true, false, false, true, false, false, true, false, false, true, false, false, false, true, false, true, false, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, false, false, true, false, true, true, true, false, false, true, false, false, true, true, true, true, false, true, true, true, true, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, false, false, false, false, true, false, true, true, false, true, true, false, true, false, true, false, true, true, true, false, false, true, false, true, true, false, true, true, true, true, true, false, true, true, false, true, true, false, false, false, false, true, false, false, true, true, false, true, false, false, true, true, false, true, true, true, true, true, false, true, true, false, true, false, true, false, true, true, true, true, false, false, false, true, false, false, true]);
            let encoded = BinVector::from_bools(&[false, false, true, false, false, false, true, false, true, true, true, false, false, true, false, false, true, true, true, true, false, true, true, true, true, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, false, false, false, false, true, false, true, true, false, true, true, false, true, false, true, false, true, true, true, false, false, true, false, true, true, false, true, true, true, true, true, false, true, true, false, true, true, false, false, false, false, true, false, false, true, true, false, true, false, false, true, true, true, false, true, true, true, true, true, false, true, true, false, true, false, true, false, false, true, true, true, true, false, false, false, false, true, false, false, true, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, false, false, true, false, true, true, true, false, false, true, false, false, true, true, true, true, false, true, true, true, true, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, false, false, false, true, true, false, true, true, false, true, true, false, true, false, true, false, true, true, true, false, false, true, false, true, true, false, true, true, true, true, true, false, true, true, false, true, true, false, false, false, false, true, false, false, true, true, false, true, false, false, true, true, true, false, true, true, true, true, true, false, true, true, false, true, false, true, false, false, true, true, true, true, false, false, false, false, true, false, false, true, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, true, false, false, true, true, false, true, false, false, true, false, false, false, true, false, true, false, true, false, false, false, false, false, false, false, true, false, false, true, true, true, false, false, true, false, false, true, false, true, true, true, false, true, false, true, true, false, false, true, true, false, false, false, false, false, false, true, false, true, true, true, false, false, false, true, false, false, false, true, false, true, true, true, true, false, false, false, true, false, false, false, true, false, true, false, true, false, false, true, true, true, true, false, true, true, true, false, false, true, false, false, false, true, false, true, false, false, false, true, false, false, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, false, true, true, false, false, true, true, false, true, false, false, true, false, false, false, true, false, true, false, true, false, false, false, false, false, false, false, true, false, false, true, true, true, false, false, true, false, false, true, false, true, true, true, false, true, false, true, true, false, false, true, true, false, false, false, false, false, false, true, false, true, true, true, false, false, false, true, false, false, false, true, false, true, true, true, true, false, false, false, true, false, false, false, true, false, true, false, true, false, false, true, true, true, true, true, false, true, true, true, false, false, true, false, false, false, true, false, true, false, false, false, false, true, false, false, false, true, false, true, false, true, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, true, false, false, true, true, false, true, false, false, true, false, false, false, true, false, true, false, true, false, false, false, false, false, false, false, true, false, false, true, true, true, false, false, true, false, false, true, false, true, true, true, false, true, false, true, true, false, false, true, true, false, false, false, false, false, false, true, false, true, true, true, false, false, false, true, false, false, false, true, false, true, true, true, true, false, false, false, true, false, false, false, true, false, true, false, true, false, false, true, true, true, true, true, false, true, true, true, false, false, true, false, false, false, true, false, true, false, false, false, false, true, false, false, false, true, false, true, false, true, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, true, true, true, true, false, true, true, false, false, false, false, false, true, false, false, false, true, false, true, true, false, false, true, false, true, false, true, true, true, false, false, false, true, true, true, false, true, false, true, true, false, false, true, false, false, true, false, false, true, false, true, false, true, true, true, true, true, true, true, false, false, false, true, true, false, true, true, true, true, true, true, true, false, false, false, true, true, false, false, false, false, false, false, false, false, true, false, false, false, true, false, true, true, false, false, true, false, false, false, false, false, true, true, true, true, false, false, true, true, true, true, true, false, true, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, true, true, true, true, false, true, true, false, false, false, false, false, true, false, false, false, true, false, true, true, false, false, true, false, true, false, true, true, true, false, false, false, true, true, true, false, true, false, true, true, false, false, true, false, false, true, false, false, true, false, true, false, true, true, true, true, true, true, true, false, false, false, true, true, false, true, true, true, true, true, true, true, false, false, false, true, true, false, false, false, false, false, false, false, false, true, false, false, false, true, false, false, true, true, false, false, true, false, false, false, false, false, true, true, true, true, true, false, false, true, true, true, true, true, false, false, true, true, true, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, true, true, true, true, false, true, true, false, false, false, false, false, true, false, false, false, true, false, true, true, false, false, true, false, true, false, true, true, true, false, false, false, true, true, true, false, true, false, true, true, false, false, true, false, false, true, false, false, true, false, true, false, true, true, true, true, true, true, true, false, false, false, true, true, false, true, true, true, true, true, true, true, false, true, false, true, true, false, false, false, false, false, false, false, false, true, false, false, false, true, false, false, true, true, false, false, true, false, false, false, false, false, true, true, true, true, true, false, false, true, true, true, true, true, false, false, true, true, true, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, false, false, true, true, true, false, false, false, false, false, false, true, true, true, true, true, false, true, true, true, false, true, true, false, true, false, false, false, true, false, true, true, true, true, true, false, false, true, false, true, false, true, true, false, false, false, true, true, true, false, true, false, true, false, false, true, false, true, false, false, false, false, true, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, false, false, false, false, true, true, false, false, true, false, true, false, true, false, true, false, true, true, true, false, false, true, false, false, true, true, false, false, false, true, false, false, false, true, true, false, false]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, false, false, true, true, true, false, false, false, false, false, false, true, true, true, true, true, false, true, true, true, false, true, true, false, true, false, false, false, true, false, true, true, true, true, true, false, false, true, false, true, false, true, true, false, false, false, true, true, true, false, true, false, true, false, false, true, false, true, false, false, false, false, true, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, false, false, false, false, true, true, false, false, true, false, true, true, false, true, false, true, false, true, true, true, false, false, true, false, false, true, true, true, false, false, false, true, false, false, false, true, true, true, false, true, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, false, false, false, true, true, true, false, false, false, false, false, false, true, true, true, true, true, false, true, true, true, false, true, true, false, true, false, false, false, true, false, true, true, true, true, true, false, false, true, false, true, false, true, true, false, false, false, true, true, true, false, true, false, true, false, false, true, false, true, false, false, false, false, true, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, false, false, false, false, true, true, false, false, true, false, true, true, false, true, false, true, false, true, true, true, false, false, true, false, false, true, true, true, false, false, false, true, false, false, false, true, true, true, false, true, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, false, false, false, false, true, false, true, true, false, false, true, false, true, true, false, true, true, true, false, true, true, true, false, false, false, false, false, true, false, true, true, true, true, true, false, true, true, true, false, true, false, false, true, true, true, true, true, true, false, true, false, true, true, false, false, true, false, false, false, false, false, false, true, false, false, false, false, true, true, true, true, true, true, false, true, true, false, false, true, true, false, false, true, true, true, false, true, false, true, false, true, false, false, true, false, false, true, false, true, false, true, false, false, false, true, false, true, true, true, false, true, true, false, true, true, true]);
            let encoded = BinVector::from_bools(&[false, true, true, false, false, false, false, false, true, false, true, true, false, false, true, false, true, true, false, true, true, true, false, true, true, true, false, false, false, false, false, true, false, true, true, true, true, true, false, true, true, true, false, true, false, false, true, true, true, true, true, true, false, true, false, true, true, false, false, true, false, false, false, false, false, false, true, false, false, false, false, true, true, true, true, true, true, false, true, true, false, false, true, true, false, false, true, true, true, false, true, false, true, false, false, true, false, false, true, false, false, true, false, true, false, true, false, false, false, true, true, false, true, true, true, false, true, true, false, false, true, true, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, false, false, false, false, true, false, true, true, false, false, true, false, true, true, false, true, true, true, false, true, true, true, false, false, false, false, false, true, false, true, true, true, true, true, false, true, true, true, false, true, false, false, true, true, true, true, true, true, false, true, false, true, true, false, false, true, false, false, false, false, false, false, true, false, false, true, false, true, true, true, true, true, true, false, true, true, false, false, true, true, false, false, true, true, true, false, true, false, true, false, false, true, false, false, true, false, false, true, false, true, false, true, false, false, false, true, true, false, true, true, true, false, true, true, false, false, true, true, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, false, true, true, false, false, true, false, false, false, false, false, true, true, false, true, false, true, true, true, false, true, false, false, true, true, true, false, false, false, true, true, false, false, true, false, true, false, true, false, false, false, true, false, true, true, true, true, false, false, false, true, true, false, true, true, true, false, true, true, true, false, false, false, true, true, false, true, true, false, true, false, false, false, true, false, true, false, true, false, false, true, true, false, false, true, true, true, false, false, false, true, true, true, false, false, true, false, true, false, false, true, true, false, false, true, true, false, true, true, false, false, false, false, false, true, true]);
            let encoded = BinVector::from_bools(&[true, true, false, false, false, true, true, false, false, true, false, false, false, false, false, true, true, false, true, false, true, true, true, false, true, false, false, true, true, true, false, false, false, true, true, false, false, true, false, true, false, true, false, false, false, true, false, true, true, true, true, false, false, false, true, true, false, true, true, true, false, true, true, true, false, false, false, true, true, false, true, true, false, true, false, false, false, true, false, true, false, true, false, false, true, true, false, false, true, true, true, false, false, false, true, true, true, true, false, false, true, false, true, false, false, true, true, false, false, true, false, true, false, true, true, false, false, false, false, false, false, true, true, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, false, true, true, false, false, true, false, false, false, false, false, true, true, false, true, false, true, true, true, false, true, false, false, true, true, true, false, false, false, true, true, false, false, true, false, true, false, true, false, false, false, true, false, true, true, true, true, false, false, false, true, true, false, true, true, true, false, true, true, true, false, false, false, true, true, true, true, true, false, true, false, false, false, true, false, true, false, true, false, false, true, true, false, false, true, true, true, false, false, false, true, true, true, true, false, false, true, false, true, false, false, true, true, false, false, true, false, true, false, true, true, false, false, false, false, false, false, true, true, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, false, true, true, false, false, false, true, false, true, false, false, false, false, true, false, false, false, false, false, false, true, false, false, false, false, true, true, true, false, false, false, true, true, false, true, true, false, true, true, false, false, false, true, true, false, false, false, false, false, false, true, false, true, false, false, true, true, false, true, true, true, true, true, true, false, true, false, false, false, true, true, true, true, false, true, false, true, false, false, false, false, false, false, false, true, false, false, false, true, true, false, false, false, false, true, true, false, false, false, true, false, true, true, false, false, true, false, false, true, true, false, true, true, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, false, true, true, false, false, false, true, false, true, false, false, false, false, true, false, false, false, false, false, false, true, false, false, false, false, true, true, true, false, false, false, true, true, false, true, true, false, true, true, false, false, false, true, true, false, false, false, false, false, false, true, false, true, false, false, true, true, false, true, true, true, true, true, true, false, true, false, false, false, true, true, true, true, false, true, false, true, false, false, false, false, false, false, false, true, false, false, false, true, true, true, false, false, false, false, true, true, false, false, false, true, false, true, true, false, false, false, true, false, false, true, true, false, false, true, true, false, false, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, false, true, true, false, false, false, true, false, true, false, false, false, false, true, false, false, false, false, false, false, true, false, false, false, false, true, true, true, false, false, false, true, true, false, true, true, false, true, true, false, false, false, true, true, false, false, false, false, false, false, true, false, true, false, false, true, true, false, true, true, true, true, true, true, false, true, false, false, false, true, true, true, true, false, true, false, true, false, false, false, false, false, false, false, true, false, false, false, true, true, true, false, false, false, false, true, true, false, false, false, true, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, false, true, false, false, true, false, true, true, false, false, false, true, false, true, true, true, true, false, true, false, false, true, true, true, true, true, false, true, false, false, false, true, true, true, false, true, false, false, false, true, false, true, false, true, false, false, false, true, true, false, false, false, true, true, false, false, true, true, false, false, false, false, true, false, true, false, false, true, true, false, true, true, false, true, true, false, false, false, true, true, false, true, true, false, true, false, true, false, true, false, false, false, true, false, true, true, false, false, true, false, true, false, true, false, true, false, true, false, false, false, false, false, true, true, true, false]);
            let encoded = BinVector::from_bools(&[true, false, false, false, false, true, false, false, true, false, true, true, false, false, false, true, false, true, true, true, true, false, true, false, false, true, true, true, true, true, false, true, false, false, false, true, true, true, false, true, false, false, false, true, false, true, false, true, false, false, false, true, true, false, false, false, true, true, false, false, true, true, false, false, false, false, true, false, true, false, false, true, true, false, true, true, false, true, true, false, false, false, true, true, false, true, true, false, true, false, true, false, true, false, true, false, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, true, false, false, false, false, false, true, true, true, true, true, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, false, true, false, false, true, false, true, true, false, false, true, true, false, true, true, true, true, false, true, false, false, true, true, true, true, true, false, true, false, false, false, true, true, true, false, true, false, false, false, true, false, true, false, true, false, false, false, true, true, false, false, false, true, true, false, false, true, true, false, false, false, false, true, false, true, false, false, true, true, false, true, true, false, true, true, false, false, false, true, true, false, true, true, false, true, false, true, false, true, false, true, false, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, true, false, false, false, false, false, true, true, true, true, true, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, false, false, true, true, true, false, true, true, false, false, false, false, false, true, false, false, false, false, false, true, false, false, false, false, false, false, true, false, false, true, true, true, false, false, true, false, true, false, false, false, false, true, false, true, false, true, true, false, false, true, true, false, false, true, false, false, true, true, true, false, false, true, false, false, false, true, true, false, false, true, true, false, true, true, false, true, false, true, false, false, false, true, true, true, false, true, true, true, false, true, false, false, true, false, true, false, false, false, false, true, true, true, true, false, true, false, true, true, true, false, false, false, false, false, true, false]);
            let encoded = BinVector::from_bools(&[false, false, false, true, false, false, true, true, true, false, true, true, false, false, false, false, false, true, false, false, false, false, false, true, false, false, false, false, false, false, true, false, false, true, true, true, false, false, true, false, true, false, false, false, false, true, false, true, false, true, true, false, false, true, true, false, false, true, false, false, true, true, true, false, false, true, false, false, false, true, true, false, false, true, true, false, true, true, false, true, false, true, false, false, false, true, true, true, false, true, true, true, false, true, true, false, false, true, false, true, false, false, false, false, true, true, true, true, false, true, false, false, true, true, true, false, false, false, false, false, false, true, false, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, false, false, true, true, true, false, true, true, false, false, false, false, false, true, false, false, false, false, false, true, false, false, false, false, false, false, true, false, false, true, true, true, false, false, true, false, true, false, false, false, false, true, false, true, false, true, true, false, false, true, true, false, false, true, false, false, true, true, true, false, false, true, false, false, false, true, true, false, false, true, true, false, true, true, false, true, false, true, false, false, false, true, false, true, false, true, true, true, false, true, true, false, false, true, false, true, false, false, false, false, true, true, true, true, false, true, false, false, true, true, true, false, false, false, false, false, false, true, false, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, false, true, false, false, true, true, false, true, false, true, true, true, true, true, true, true, false, true, false, true, true, true, false, false, false, false, false, false, false, true, true, true, false, true, true, true, false, false, true, true, true, false, false, true, true, true, false, false, false, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, false, false, false, false, false, true, false, true, false, true, true, true, true, false, true, true, false, true, false, true, true, true, false, false, true, false, true, true, true, false, true, false, true, false, false, false, false, false, true, true, true, true, false, true, false, false, true, false, false, false]);
            let encoded = BinVector::from_bools(&[false, false, true, true, false, true, false, false, true, true, false, true, false, true, true, true, true, true, true, true, false, true, false, true, true, true, false, false, false, false, false, false, false, true, true, true, false, true, true, true, false, false, true, true, true, false, false, true, true, true, false, false, false, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, false, false, false, false, false, true, false, true, false, true, true, true, true, false, true, true, false, true, false, true, true, true, false, false, false, true, false, true, true, true, false, true, false, true, false, false, false, false, false, true, true, true, true, true, false, true, false, false, true, true, false, false, false, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, false, true, false, false, true, true, false, true, false, true, true, true, true, true, true, true, false, true, false, true, true, true, false, false, false, false, false, false, false, true, true, true, false, true, true, true, false, false, true, true, true, false, false, true, true, true, false, false, false, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, false, false, false, false, false, true, false, true, false, true, true, true, true, false, true, true, false, true, false, true, true, true, false, false, false, true, false, true, true, true, false, true, false, true, false, false, false, false, false, true, true, true, true, true, false, true, true, false, true, true, false, false, false, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, false, true, true, false, false, true, false, true, true, false, false, true, false, false, true, true, true, true, false, false, false, false, false, true, false, true, false, false, false, false, false, true, true, true, false, false, false, true, true, false, true, false, true, true, true, false, true, true, true, false, false, true, true, false, true, false, false, false, false, false, false, false, true, true, true, false, true, false, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, false, true, true, false, false, true, false, false, true, true, true, false, false, true, true, false, false, true, true, true, true, true, true, false, false, true, true, true, true, false, true]);
            let encoded = BinVector::from_bools(&[true, true, true, true, false, true, true, false, false, true, false, true, true, false, false, true, false, false, true, true, true, true, false, false, false, false, false, true, false, true, false, false, false, false, false, true, true, true, false, false, false, true, true, false, true, false, true, true, true, false, true, true, true, false, false, true, true, false, true, false, false, false, false, false, false, false, true, true, true, false, true, false, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, false, true, true, false, false, false, true, false, false, true, true, true, false, false, true, true, false, false, true, true, true, true, true, true, true, false, false, true, true, true, true, true, false, false, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, false, true, true, false, false, true, false, true, true, false, false, true, true, false, true, true, true, true, false, false, false, false, false, true, false, true, false, false, false, false, false, true, true, true, false, false, false, true, true, false, true, false, true, true, true, false, true, true, true, false, false, true, true, false, true, false, false, false, false, false, false, false, true, true, true, false, true, false, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, false, true, true, false, false, false, true, false, false, true, true, true, false, false, true, true, false, false, true, true, true, true, true, true, true, false, false, true, true, true, true, true, false, false, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, false, false, true, false, false, true, true, true, true, false, false, true, false, true, true, true, true, true, true, false, false, true, true, true, true, true, true, false, true, true, false, false, true, false, true, true, true, false, false, false, false, true, true, true, true, false, true, true, false, true, true, false, false, true, false, false, false, false, true, true, false, true, false, false, false, false, true, false, false, true, true, false, false, false, true, false, true, false, true, false, true, true, false, false, true, true, false, true, false, false, true, false, false, true, false, false, true, false, false, true, false, true, false, true, false, false, false, false, true, true, false, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[true, true, false, true, false, false, true, false, false, true, true, true, true, false, false, true, false, true, true, true, true, true, true, false, false, true, true, true, true, true, true, false, true, true, false, false, true, false, true, true, true, false, false, false, false, true, true, true, true, false, true, true, false, true, true, false, false, true, false, false, false, false, true, true, false, true, false, false, false, false, true, false, false, true, true, false, false, false, true, false, true, false, true, false, true, true, false, false, true, true, false, true, false, false, true, true, false, false, true, false, false, true, false, false, true, false, true, false, true, false, true, false, false, false, true, true, false, true, true, true, true, false, true, false, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, false, false, true, false, false, true, true, true, true, false, true, true, false, true, true, true, true, true, true, false, false, true, true, true, true, true, true, false, true, true, false, false, true, false, true, true, true, false, false, false, false, true, true, true, true, false, true, true, false, true, true, false, false, true, false, false, false, false, true, true, false, true, false, false, false, false, true, false, false, true, true, false, false, false, true, false, true, false, true, false, true, true, false, false, true, true, false, true, false, false, true, true, false, false, true, false, false, true, false, false, true, false, true, false, true, false, true, false, false, false, true, true, false, true, true, true, true, false, true, false, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, false, true, false, true, false, true, true, false, true, false, false, true, true, false, true, false, false, false, false, false, true, true, true, false, false, false, false, true, false, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, true, true, true, true, false, false, true, false, true, true, true, false, false, true, false, true, false, true, true, true, true, false, false, false, true, true, false, true, false, false, true, true, false, true, true, false, true, true, false, false, true, false, false, true, true, true, true, true, true, false, false, false, false, true, true, false, true, true, true, true, false, true, false, true, true, true, false, false, true, false, true]);
            let encoded = BinVector::from_bools(&[true, false, false, false, false, true, false, true, false, true, true, false, true, false, false, true, true, false, true, false, false, false, false, false, true, true, true, false, false, false, false, true, false, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, true, true, true, true, false, false, true, false, true, true, true, false, false, true, false, true, false, true, true, true, true, false, false, false, true, true, false, true, false, false, true, true, false, true, true, false, true, true, false, false, true, false, false, true, true, false, true, true, true, true, false, false, false, false, true, true, false, true, true, true, true, true, false, true, false, true, true, true, false, true, false, true, false, false, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, false, true, false, true, false, true, true, false, true, false, false, true, true, false, true, false, false, false, false, false, true, true, true, false, false, false, false, true, false, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, true, true, true, true, false, false, true, false, true, true, true, false, true, true, false, true, false, true, true, true, true, false, false, false, true, true, false, true, false, false, true, true, false, true, true, false, true, true, false, false, true, false, false, true, true, false, true, true, true, true, false, false, false, false, true, true, false, true, true, true, true, true, false, true, false, true, true, true, false, true, false, true, false, false, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, false, false, false, false, false, false, false, true, true, false, false, false, true, true, true, false, false, false, true, false, false, true, true, true, true, true, true, true, true, true, true, true, true, false, true, false, true, true, false, true, false, false, false, false, true, false, false, false, true, true, true, true, true, false, false, true, false, false, false, true, true, true, false, true, false, true, false, false, false, true, false, true, true, false, true, true, true, true, false, true, false, true, false, true, true, false, false, true, false, false, true, false, true, true, false, true, false, false, false, false, false, true, true, false, false, false, false, false, true, false, true, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[false, false, false, true, false, false, false, false, false, false, false, true, true, false, false, false, true, true, true, false, false, false, true, false, false, true, true, true, true, true, true, true, true, true, true, true, true, false, true, false, true, true, false, true, false, false, false, false, true, false, false, false, true, true, true, true, true, false, false, true, false, false, false, true, true, true, false, true, false, true, false, false, false, true, false, true, true, false, true, true, true, true, false, true, false, true, false, true, true, false, false, true, false, false, false, true, false, true, true, false, true, false, false, false, false, false, true, true, false, false, false, false, false, false, true, false, true, true, true, true, true, false, false, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, false, false, false, false, false, false, false, true, true, false, false, false, true, true, true, false, false, false, true, false, false, true, true, true, true, true, true, true, true, true, true, true, true, false, true, false, true, true, false, true, false, false, false, false, true, false, false, false, true, true, true, true, true, false, false, true, false, false, false, true, true, true, false, true, false, true, false, false, false, true, false, true, true, false, true, true, true, true, false, true, false, true, false, true, true, false, false, true, false, false, false, true, false, true, true, false, true, false, false, false, false, false, true, true, false, false, false, false, false, false, true, false, true, true, true, true, true, false, true, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, true, true, false, true, true, false, false, true, true, false, true, false, false, true, false, true, false, true, false, false, false, false, true, false, true, true, false, false, true, false, true, true, true, true, true, true, false, false, true, true, true, false, true, true, true, true, true, false, false, true, false, true, false, true, true, true, false, true, false, true, true, false, true, false, false, false, true, true, true, false, false, true, false, false, true, true, false, false, true, false, true, true, true, true, false, true, false, true, false, false, true, false, false, false, false, true, true, true, false, true, true, false, true, false, false, true, true, true, false, true, true, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[false, false, false, false, true, true, false, true, true, false, false, true, true, false, true, false, false, true, false, true, false, true, false, false, false, false, true, false, true, true, false, false, true, false, true, true, true, true, true, true, false, false, true, true, true, false, true, true, true, true, true, false, false, true, false, true, false, true, true, true, false, true, false, true, true, false, true, false, false, false, true, true, true, false, false, true, false, false, true, true, false, false, true, false, true, true, true, true, false, true, false, true, false, false, true, true, false, false, false, false, true, true, true, false, true, true, false, true, false, false, true, true, true, true, false, true, true, true, true, true, true, false, false, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, true, true, false, true, true, false, false, true, true, false, true, false, false, true, false, true, false, true, false, false, false, false, true, false, true, true, false, true, true, false, true, true, true, true, true, true, false, false, true, true, true, false, true, true, true, true, true, false, false, true, false, true, false, true, true, true, false, true, false, true, true, false, true, false, false, false, true, true, true, false, false, true, false, false, true, true, false, false, true, false, true, true, true, true, false, true, false, true, false, false, true, true, false, false, false, false, true, true, true, false, true, true, false, true, false, false, true, true, true, true, false, true, true, true, true, true, true, false, false, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, false, true, false, true, true, false, true, false, true, true, false, false, true, true, false, false, false, false, false, false, false, true, true, false, false, false, true, true, false, true, false, false, true, false, false, true, false, true, false, true, false, false, false, true, true, true, false, false, true, true, false, true, false, true, true, true, true, true, false, true, true, true, false, false, false, true, false, false, true, true, false, true, false, true, false, false, true, false, true, true, true, true, true, true, true, false, false, false, true, false, false, true, false, true, true, false, false, true, true, false, true, true, true, false, false, true, false, false, false, true, true, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[false, false, true, true, false, true, false, true, true, false, true, false, true, true, false, false, true, true, false, false, false, false, false, false, false, true, true, false, false, false, true, true, false, true, false, false, true, false, false, true, false, true, false, true, false, false, false, true, true, true, false, false, true, true, false, true, false, true, true, true, true, true, false, true, true, true, false, false, false, true, false, false, true, true, false, true, false, true, false, false, true, false, true, true, true, true, true, true, true, false, false, false, true, false, false, false, true, false, true, true, false, false, true, true, false, true, true, true, false, false, false, true, false, false, false, true, true, true, true, true, true, false, true, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, false, true, false, true, true, false, true, false, true, true, false, false, true, true, false, false, false, false, false, false, false, true, true, false, false, false, true, true, false, true, false, false, true, false, false, true, false, true, false, true, false, false, false, true, true, true, false, false, true, true, false, true, false, true, true, true, true, true, false, true, true, true, false, false, false, true, false, false, true, true, false, true, false, true, false, false, true, false, true, true, true, true, false, true, true, false, false, false, true, false, false, false, true, false, true, true, false, false, true, true, false, true, true, true, false, false, false, true, false, false, false, true, true, true, true, true, true, false, true, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, true, true, true, false, true, false, false, false, false, false, true, false, true, false, false, true, false, false, false, false, false, false, false, true, true, false, true, true, false, false, false, false, false, true, false, false, false, true, true, true, false, true, true, true, true, true, false, false, false, false, true, true, true, true, true, true, true, true, true, false, true, true, false, false, false, false, false, true, false, true, false, true, false, true, true, true, false, true, false, false, true, true, false, false, true, true, true, true, false, false, false, true, false, true, true, false, true, false, true, false, false, false, true, true, false, true, true, true, false, true, false, false, false, false, true, true]);
            let encoded = BinVector::from_bools(&[true, false, false, true, true, true, true, false, true, false, false, false, false, false, true, false, true, false, false, true, false, false, false, false, false, false, false, true, true, false, true, true, false, false, false, false, false, true, false, false, false, true, true, true, false, true, true, true, true, true, false, false, false, false, true, true, true, true, true, true, true, true, true, false, true, true, false, false, false, false, false, true, false, true, false, true, false, true, true, true, false, true, false, false, true, true, false, false, true, true, true, true, false, false, false, false, true, false, true, true, false, true, false, true, false, false, false, true, true, false, true, true, true, true, false, true, false, false, false, false, false, true, false, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, true, true, true, false, true, false, false, false, false, false, true, false, true, false, false, true, false, false, false, false, false, false, false, true, true, false, true, true, false, false, false, false, false, true, false, false, false, true, true, true, false, true, true, true, true, true, false, false, false, false, true, true, true, true, true, true, true, true, true, false, true, true, false, false, false, false, false, true, false, true, false, true, false, true, true, true, false, false, false, false, true, true, false, false, true, true, true, true, false, false, false, false, true, false, true, true, false, true, false, true, false, false, false, true, true, false, true, true, true, true, false, true, false, false, false, false, false, true, false, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, false, false, false, false, false, true, true, false, false, true, false, false, true, true, false, true, false, true, false, true, true, false, true, true, false, false, true, false, false, true, true, true, true, false, true, true, true, true, true, false, true, true, true, true, true, false, true, false, true, false, true, true, false, false, false, true, false, false, true, false, false, true, true, false, false, false, false, false, false, true, false, false, true, false, false, true, true, false, true, true, true, false, true, true, true, true, false, true, false, false, false, false, false, false, true, true, false, true, true, true, false, false, true, true, false, false, false, true, true, true, false, false, true, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, true, true, false, false, false, false, false, true, true, false, false, true, false, false, true, true, false, true, false, true, false, true, true, false, true, true, false, false, true, false, false, true, true, true, true, false, true, true, true, true, true, false, true, true, true, true, true, false, true, false, true, false, true, true, false, false, false, true, false, false, true, false, false, true, true, false, false, false, false, false, false, true, false, false, true, false, false, true, true, false, true, true, true, false, true, true, true, true, false, true, false, false, false, false, false, false, false, true, true, false, true, true, true, false, false, true, true, false, false, false, false, true, true, true, false, false, false, true, true, false, true, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, false, false, false, false, false, true, true, false, false, true, false, false, true, true, false, true, false, true, false, true, true, false, true, true, false, true, true, false, false, true, true, true, true, false, true, true, true, true, true, false, true, true, true, true, true, false, true, false, true, false, true, true, false, false, false, true, false, false, true, false, false, true, true, false, false, false, false, false, false, true, false, false, true, false, false, true, true, false, true, true, true, false, true, true, true, true, false, true, false, false, false, false, false, false, false, true, true, false, true, true, true, false, false, true, true, false, false, false, false, true, true, true, false, false, false, true, true, false, true, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, true, true, false, false, true, false, true, true, false, true, false, true, false, true, true, false, true, false, false, false, false, false, false, false, true, false, false, true, false, true, true, false, false, false, true, true, true, false, true, false, true, false, true, true, false, true, true, false, false, true, false, true, true, false, true, false, false, false, false, false, true, true, false, true, false, true, true, false, true, false, true, false, false, true, false, true, false, false, true, true, true, true, false, false, true, true, true, false, false, true, true, true, true, true, false, false, true, false, false, true, true, true, true, false, false, true, true, false, false, true, true, false, true, false, true, false]);
            let encoded = BinVector::from_bools(&[false, false, false, true, true, true, false, false, true, false, true, true, false, true, false, true, false, true, true, false, true, false, false, false, false, false, false, false, true, false, false, true, false, true, true, false, false, false, true, true, true, false, true, false, true, false, true, true, false, true, true, false, false, true, false, true, true, false, true, false, false, false, false, false, true, true, false, true, false, true, true, false, true, false, true, false, false, true, false, true, false, false, true, true, true, true, false, false, true, true, true, false, false, true, true, true, true, true, true, false, false, true, false, false, true, true, true, true, false, false, true, true, true, false, false, true, true, false, false, true, false, true, true, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, true, true, false, false, true, false, true, true, false, true, false, true, false, true, true, false, true, false, false, false, false, false, false, false, true, false, false, true, false, true, true, false, false, false, true, true, true, false, true, false, true, false, true, true, false, true, true, false, false, true, false, true, true, false, true, false, false, false, false, false, true, true, false, true, false, true, true, false, true, false, true, false, false, true, false, true, false, false, true, true, false, true, false, false, true, true, true, false, false, true, true, true, true, true, true, false, false, true, false, false, true, true, true, true, false, false, true, true, true, false, false, true, true, false, false, true, false, true, true, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, true, false, false, false, false, false, false, false, true, false, true, false, false, true, true, true, true, false, false, false, true, false, true, false, false, true, true, true, true, true, false, true, true, false, true, false, true, true, false, false, true, false, true, false, false, true, true, true, true, true, false, true, true, false, true, false, true, false, true, true, true, true, false, true, true, false, false, false, false, false, false, false, false, true, false, false, false, true, true, false, true, false, false, false, false, true, false, true, false, true, true, false, false, true, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, true, true, false, true, false, true, true]);
            let encoded = BinVector::from_bools(&[true, true, false, true, true, false, false, false, false, false, false, false, true, false, true, false, false, true, true, true, true, false, false, false, true, false, true, false, false, true, true, true, true, true, false, true, true, false, true, false, true, true, false, false, true, false, true, false, false, true, true, true, true, true, false, true, true, false, true, false, true, false, true, true, true, true, false, true, true, false, false, false, false, false, false, false, false, true, false, false, false, true, true, false, true, false, false, false, false, true, false, true, false, true, false, true, false, false, true, false, true, false, false, false, false, false, false, false, true, false, false, false, false, true, false, true, true, false, true, true, false, true, true, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, true, false, false, false, false, false, false, false, true, false, true, false, false, true, true, true, true, false, false, false, true, false, true, false, false, true, true, true, true, true, false, true, true, false, true, false, true, true, false, false, true, false, true, false, false, true, true, true, true, true, false, true, true, false, true, false, true, false, true, true, true, true, false, true, true, false, false, false, false, false, false, false, false, true, false, false, false, true, true, false, true, false, false, false, false, true, false, true, false, true, false, true, false, true, true, false, true, false, false, false, false, false, false, false, true, false, false, false, false, true, false, true, true, false, true, true, false, true, true, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, true, true, true, true, true, false, false, false, false, true, true, true, false, false, true, true, false, false, true, true, true, false, true, true, true, false, true, true, false, true, false, true, true, false, true, false, true, true, true, false, true, false, false, false, false, false, true, false, true, true, true, true, false, false, false, true, false, true, false, true, false, true, true, true, true, false, false, false, true, true, true, false, true, false, false, true, true, true, true, true, true, true, false, true, true, false, true, false, true, false, true, true, true, false, false, false, true, false, true, true, false, true, true, true, false, true, false, false, false, false, true, true, false, true, true, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, true, true, true, true, true, false, false, false, false, true, true, true, false, false, true, true, false, false, true, true, true, false, true, true, true, false, true, true, false, true, false, true, true, false, true, false, true, true, true, false, true, false, false, false, false, false, true, false, true, true, true, true, false, false, false, true, false, true, false, true, false, true, true, true, true, false, false, false, true, true, true, false, true, false, false, true, true, true, true, true, true, true, false, true, true, false, true, false, true, false, false, true, true, true, false, false, false, true, false, true, true, false, true, true, true, false, true, true, false, false, false, false, true, true, false, false, true, true, true, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, true, true, true, true, true, false, false, false, false, true, true, true, false, false, true, true, false, false, true, true, true, false, true, true, true, false, true, true, false, true, false, true, true, false, true, false, true, true, true, false, true, false, false, false, false, false, true, false, true, true, true, true, false, false, false, true, false, true, false, true, false, true, false, true, true, false, false, false, true, true, true, false, true, false, false, true, true, true, true, true, true, true, false, true, true, false, true, false, true, false, false, true, true, true, false, false, false, true, false, true, true, false, true, true, true, false, true, true, false, false, false, false, true, true, false, false, true, true, true, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, false, true, false, false, true, true, false, true, true, true, true, false, false, true, false, true, true, true, false, false, false, true, true, false, false, false, true, true, true, true, false, false, false, true, false, true, true, true, false, true, false, true, false, true, true, true, true, false, true, true, true, false, false, false, false, true, true, true, true, true, false, false, true, false, false, false, true, false, true, true, false, false, true, false, false, false, true, true, false, true, true, true, false, false, true, false, false, false, true, true, true, false, false, false, true, false, true, true, true, true, true, true, true, false, false, false, false, true, false, true, false, true, false, true, true]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, false, true, false, false, true, true, false, true, true, true, true, false, false, true, false, true, true, true, false, false, false, true, true, false, false, false, true, true, true, true, false, false, false, true, false, true, true, true, false, true, false, true, false, true, true, true, true, false, true, true, true, false, false, false, false, true, true, true, true, true, false, false, true, false, false, false, true, false, true, true, false, false, true, false, false, false, true, true, false, true, true, true, false, false, true, false, false, false, true, false, true, true, false, false, false, true, false, true, true, true, true, true, true, true, false, false, false, false, false, true, false, true, false, false, true, false, true, false, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, true, false, true, false, false, true, true, false, true, true, false, true, false, false, true, false, true, true, true, false, false, false, true, true, false, false, false, true, true, true, true, false, false, false, true, false, true, true, true, false, true, false, true, false, true, true, true, true, false, true, true, true, false, false, false, false, true, true, true, true, true, false, false, true, false, false, false, true, false, true, true, false, false, true, false, false, false, true, true, false, true, true, true, false, false, true, false, false, false, true, false, true, true, false, false, false, true, false, true, true, true, true, true, true, true, false, false, false, false, false, true, false, true, false, false, true, false, true, false, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, true, false, true, false, false, false, false, true, false, true, false, false, true, true, false, true, false, true, false, false, true, false, false, false, true, true, true, false, false, true, true, true, true, true, true, true, false, false, false, false, true, false, false, false, true, true, true, true, true, true, true, false, false, false, true, false, true, true, true, false, false, true, false, false, false, false, true, false, true, false, true, true, false, false, false, false, true, true, false, false, false, true, false, false, false, true, false, true, false, false, false, false, true, false, true, false, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, true, true, true, true, true]);
            let encoded = BinVector::from_bools(&[false, true, false, true, true, false, true, false, false, false, false, true, false, true, false, false, true, true, false, true, false, true, false, false, true, false, false, false, true, true, true, false, false, true, true, true, true, true, true, true, false, false, false, false, true, false, false, false, true, true, true, true, true, true, true, false, false, false, true, false, true, true, true, false, false, true, false, false, false, false, true, false, true, false, true, true, false, false, false, false, true, true, false, false, false, true, false, false, false, true, false, true, false, false, true, false, false, true, false, true, false, true, false, true, true, true, true, false, true, true, true, false, false, true, true, true, true, true, true, true, true, true, false, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, true, false, true, false, false, false, false, true, false, true, false, false, true, true, false, true, false, true, false, false, true, false, false, false, true, true, true, false, false, true, true, true, true, true, true, true, false, false, false, false, true, false, false, false, true, true, true, true, true, true, true, false, false, false, true, false, true, true, true, false, false, true, false, false, false, false, true, false, true, false, true, true, false, false, false, false, true, true, false, false, false, true, false, false, false, true, false, true, false, false, true, true, false, true, false, true, false, true, false, true, true, true, true, false, true, true, true, false, false, true, true, true, true, true, true, true, true, true, false, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, true, false, false, false, true, true, false, false, false, true, true, false, false, false, true, true, true, true, true, true, true, false, true, false, false, true, false, true, false, false, false, true, true, false, false, true, false, true, false, false, true, true, false, true, false, false, false, true, false, true, true, false, false, true, false, true, false, true, true, true, true, false, true, true, true, true, false, true, false, false, true, true, false, false, true, false, false, true, false, true, true, true, false, false, true, false, true, true, false, true, true, true, true, false, true, true, true, false, true, false, true, false, true, true, false, true, false, false, false, false, false, false, false, false, false, false]);
            let encoded = BinVector::from_bools(&[false, false, false, true, true, false, false, false, true, true, false, false, false, true, true, false, false, false, true, true, true, true, true, true, true, false, true, false, false, true, false, true, false, false, false, true, true, false, false, true, false, true, false, false, true, true, false, true, false, false, false, true, false, true, true, false, false, true, false, true, false, true, true, true, true, false, true, true, true, true, false, true, false, false, true, true, false, false, true, false, false, true, false, true, true, true, false, false, true, false, true, true, false, true, true, true, true, true, false, true, true, true, false, true, false, true, false, true, true, false, true, true, false, false, false, false, false, false, true, false, false, false, true, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, true, false, false, false, true, true, false, false, false, true, true, false, false, false, true, true, true, true, true, true, true, false, true, false, false, true, false, true, false, false, false, true, true, false, false, true, false, true, false, false, true, true, false, true, false, false, false, true, false, true, true, false, false, true, false, true, false, true, true, true, true, false, true, true, true, true, false, true, false, false, true, true, false, false, true, false, false, true, false, true, true, true, false, false, true, false, true, true, false, true, true, true, true, true, false, true, true, true, false, true, false, true, false, false, true, false, true, true, false, false, false, false, false, false, true, false, false, false, true, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, true, true, true, true, true, false, true, false, true, false, false, true, true, false, false, false, false, false, false, true, true, true, true, false, false, true, false, false, true, true, false, false, false, false, false, true, true, false, false, true, true, false, false, false, false, true, false, true, true, true, false, true, false, false, true, false, false, true, true, true, true, true, false, true, false, false, false, true, true, true, true, false, false, true, true, true, true, true, false, false, true, true, false, true, true, false, true, false, true, false, true, true, false, false, true, true, false, true, false, true, false, false, false, true, true, false, false, true, true, true, true, false, false, true, true, true]);
            let encoded = BinVector::from_bools(&[false, true, true, true, true, true, true, true, true, false, true, false, true, false, false, true, true, false, false, false, false, false, false, true, true, true, true, false, false, true, false, false, true, true, false, false, false, false, false, true, true, false, false, true, true, false, false, false, false, true, false, true, true, true, false, true, false, false, true, false, false, true, true, true, true, true, false, true, false, false, false, true, true, true, true, false, false, true, true, true, true, true, false, false, true, true, false, true, true, false, true, false, true, false, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, true, true, false, false, true, true, true, true, false, true, false, true, true, true, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, true, true, true, true, true, false, true, false, true, false, false, true, true, false, false, false, false, false, false, true, true, true, true, false, false, true, false, false, true, true, false, false, false, false, false, true, true, false, false, true, true, false, false, false, false, true, false, true, true, true, false, true, false, false, true, false, false, true, true, true, true, true, false, true, false, false, false, true, true, true, true, false, true, true, true, true, true, true, false, false, true, true, false, true, true, false, true, false, true, false, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, true, true, false, false, true, true, true, true, false, true, false, true, true, true, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, true, false, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, false, false, false, false, false, false, false, false, true, true, false, false, false, true, true, true, true, false, false, true, false, true, false, false, false, false, true, false, true, true, false, false, false, true, true, false, true, false, false, false, false, true, false, true, true, true, true, true, true, true, false, true, true, false, true, false, false, true, false, false, false, true, false, false, false, false, true, true, true, true, false, true, true, true, true, false, true, false, true, false, false, true, true, true, true, true, false, false, false, true, true, false, true, false, true, true, true]);
            let encoded = BinVector::from_bools(&[true, false, false, false, true, false, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, false, false, false, false, false, false, false, false, true, true, false, false, false, true, true, true, true, false, false, true, false, true, false, false, false, false, true, false, true, true, false, false, false, true, true, false, true, false, false, false, false, true, false, true, true, true, true, true, true, true, false, true, true, false, true, false, false, true, false, false, false, true, false, false, false, false, true, true, true, true, false, true, true, true, true, true, false, true, false, true, false, false, true, true, true, true, true, false, false, false, false, true, true, false, true, true, false, true, true, false, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, true, false, false, true, true, false, false, true, false, true, false, false, false, true, true, false, false, true, false, false, false, false, false, false, false, false, false, true, true, false, false, false, true, true, true, true, false, false, true, false, true, false, false, false, false, true, false, true, true, false, false, false, true, true, false, true, false, false, false, false, true, false, true, true, true, true, true, true, true, false, true, true, false, true, false, false, true, false, false, false, true, false, false, false, false, true, true, true, true, false, true, true, true, true, true, false, true, false, true, false, false, true, true, true, true, true, false, false, false, false, true, true, false, true, true, false, true, true, false, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, false, true, true, true, true, true, false, true, false, false, false, false, true, true, true, true, true, false, true, true, false, false, true, false, true, false, false, true, true, true, true, true, true, true, true, true, false, true, false, false, true, false, true, true, true, false, true, true, true, false, true, true, true, false, true, false, true, false, false, false, true, true, true, true, true, true, true, false, true, true, true, true, true, false, false, true, false, true, true, false, true, true, true, true, false, false, false, false, false, false, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, false, true, true, true, false, false, true, true]);
            let encoded = BinVector::from_bools(&[true, false, false, false, false, true, true, true, true, true, false, true, false, false, false, false, true, true, true, true, true, false, true, true, false, false, true, false, true, false, false, true, true, true, true, true, true, true, true, true, false, true, false, false, true, false, true, true, true, false, true, true, true, false, true, true, true, false, true, false, true, false, false, false, true, true, true, true, true, true, true, false, true, true, true, true, true, false, false, true, false, true, true, false, true, true, true, true, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, false, true, true, true, false, false, false, true, false, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, false, true, true, true, true, true, false, true, false, false, false, false, true, true, true, true, true, false, true, true, false, false, true, false, true, false, false, true, true, true, true, true, true, true, true, true, false, true, false, false, true, false, true, true, true, false, true, true, true, false, true, true, true, false, true, false, true, false, false, false, true, true, true, true, true, true, true, false, true, true, true, true, true, false, false, true, false, true, true, false, true, true, true, true, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, false, false, true, false, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, true, false, false, true, true, true, true, true, false, false, false, false, true, false, false, false, false, true, false, true, true, true, true, true, false, true, true, false, false, true, true, true, true, true, false, true, true, true, false, true, true, false, true, false, false, true, true, true, false, false, true, false, true, false, false, false, true, false, false, true, false, false, false, true, false, false, true, false, false, false, true, false, false, true, true, false, true, true, true, false, false, true, true, false, true, true, true, false, true, true, true, true, true, true, false, true, true, true, false, true, false, true, true, true, false, false, false, false, false, false, true, true, false, true, true, true]);
            let encoded = BinVector::from_bools(&[false, false, true, true, true, false, false, true, true, true, true, true, false, false, false, false, true, false, false, false, false, true, false, true, true, true, true, true, false, true, true, false, false, true, true, true, true, true, false, true, true, true, false, true, true, false, true, false, false, true, true, true, false, false, true, false, true, false, false, false, true, false, false, true, false, false, false, true, false, false, true, false, false, false, true, false, false, true, true, false, true, true, true, false, false, true, true, false, true, true, true, false, true, true, true, true, true, true, true, false, true, true, true, false, true, false, true, true, true, false, false, false, false, false, false, false, true, true, true, false, true, true, false, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, true, false, false, true, true, true, true, true, false, false, false, false, true, false, false, false, false, true, false, true, true, true, true, true, false, true, true, false, false, true, true, true, true, true, false, true, true, true, false, true, true, false, true, false, false, true, true, true, false, false, true, false, true, false, false, false, true, false, false, true, false, true, false, true, false, false, true, false, false, false, true, false, false, true, true, false, true, true, true, false, false, true, true, false, true, true, true, false, true, true, true, true, true, true, true, false, true, true, true, false, true, false, true, true, true, false, false, false, false, false, false, false, true, true, true, false, true, true, false, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, true, false, false, true, true, true, true, false, true, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, true, true, true, false, true, false, false, true, false, true, true, false, true, false, false, false, false, true, true, true, false, true, false, true, false, false, true, false, true, true, false, true, false, true, true, true, false, true, false, true, false, true, true, true, false, false, false, true, false, false, true, true, false, true, true, false, true, false, false, false, false, true, false, false, false, true, true, true, false, true, true, false, true, true, false, true, true, true, true, false, true, true, true, false, true, true, true, false, false, true, true]);
            let encoded = BinVector::from_bools(&[false, true, false, false, true, false, false, true, true, true, true, false, true, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, true, true, true, false, true, false, false, true, false, true, true, false, true, false, false, false, false, true, true, true, false, true, false, true, false, false, true, false, true, true, false, true, false, true, true, true, false, true, false, true, false, true, true, true, false, false, false, true, false, false, true, true, false, true, true, false, true, false, false, false, false, true, false, false, false, false, true, true, true, false, true, true, false, true, true, false, true, true, true, true, false, false, true, true, true, false, true, true, true, true, false, false, true, false, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, true, false, false, true, true, true, true, false, true, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, true, true, true, false, true, false, false, true, false, true, true, false, true, false, false, false, false, true, true, true, false, true, false, true, false, false, true, false, true, true, false, true, false, true, true, true, false, true, false, true, false, true, true, true, false, false, false, true, false, false, true, true, false, true, true, false, true, false, false, false, false, true, false, false, false, false, true, true, true, false, true, true, false, true, true, true, true, true, true, true, false, false, true, true, true, false, true, true, true, true, false, false, true, false, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, true, false, false, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, false, false, false, true, true, false, false, false, false, false, false, true, true, false, true, true, false, false, false, false, true, true, true, false, true, false, true, true, false, false, true, false, true, true, false, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, true, true, true, false, true, false, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, true, false, false, false, true, false, false, true, true, false, true, true, true, true, true, false]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, true, false, false, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, false, false, false, true, true, false, false, false, false, false, false, true, true, false, true, true, false, false, false, false, true, true, true, false, true, false, true, true, false, false, true, false, true, true, false, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, true, true, true, false, true, false, false, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, true, true, false, false, false, true, false, false, false, true, true, false, true, true, false, true, true, true, true, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, true, false, false, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, false, false, false, true, true, false, false, false, false, false, false, true, true, false, true, true, false, false, false, false, true, true, true, false, true, false, true, true, false, false, true, false, true, true, false, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, true, true, true, false, true, false, false, true, false, true, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, true, true, false, false, false, true, false, false, false, true, true, false, true, true, false, true, true, true, true, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, false, true, true, false, false, false, false, true, true, false, true, false, false, true, false, true, false, true, true, true, true, false, true, true, false, true, false, true, false, true, true, false, true, true, false, false, true, false, true, false, false, true, true, false, false, false, true, true, false, true, true, true, false, true, false, false, true, true, false, false, false, true, true, false, true, true, false, true, false, false, true, true, true, true, false, true, false, true, true, false, true, true, false, false, false, true, true, false, false, true, false, true, false, false, false, false, true, true, false, false, true, false, true, true, false, true, true, true, false, false, false, false, true, false, false, false]);
            let encoded = BinVector::from_bools(&[true, true, true, true, false, true, true, false, false, false, false, true, true, false, true, false, false, true, false, true, false, true, true, true, true, false, true, true, false, true, false, true, false, true, true, false, true, true, false, false, true, false, true, false, false, true, true, false, false, false, true, true, false, true, true, true, false, true, false, false, true, true, false, false, false, true, true, false, true, true, false, true, false, false, true, true, true, true, false, true, false, true, true, false, true, true, false, false, false, true, true, false, false, true, false, false, true, false, false, false, false, true, true, false, false, true, false, true, true, false, false, true, true, true, false, false, false, false, true, true, false, false, true, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, false, true, true, false, false, false, false, true, true, false, true, false, false, true, false, true, false, true, true, true, true, false, true, true, false, true, false, true, false, true, true, false, true, true, false, false, true, false, true, false, false, true, true, false, false, false, true, true, false, true, true, true, false, true, false, false, true, true, false, false, false, true, true, false, true, true, false, true, false, false, true, true, true, true, false, true, false, true, true, false, false, true, false, false, false, true, true, false, false, true, false, false, true, false, false, false, false, true, true, false, false, true, false, true, true, false, false, true, true, true, false, false, false, false, true, true, false, false, true, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, false, true, false, false, true, false, true, false, false, true, false, false, true, true, false, false, true, true, true, false, true, false, true, true, false, true, true, true, false, false, true, true, false, false, false, true, true, false, true, false, false, true, false, true, true, true, true, false, false, true, true, true, true, true, false, false, true, false, true, false, false, false, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, true, true, false, false, false, false, true, false, true, true, true, false, true, false, false, true, false, true, true, true, false, true, false, false, false, false, false, false, true, true, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, false, true, false, false, true, false, true, false, false, true, false, false, true, true, false, false, true, true, true, false, true, false, true, true, false, true, true, true, false, false, true, true, false, false, false, true, true, false, true, false, false, true, false, true, true, true, true, false, false, true, true, true, true, true, false, false, true, false, true, false, false, false, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, true, true, false, false, false, false, true, false, true, false, true, true, false, true, false, false, true, false, true, true, true, false, true, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, false, true, false, false, true, false, true, false, false, true, false, false, true, true, false, false, true, true, true, false, true, false, true, true, false, true, true, true, false, false, true, true, false, false, false, true, true, false, true, false, false, true, false, true, true, true, true, false, false, true, true, true, true, true, false, false, true, false, true, false, false, false, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, true, false, false, false, false, false, true, false, true, false, true, true, false, true, false, false, true, false, true, true, true, false, true, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, true, false, true, true, false, false, false, true, true, false, false, false, true, true, true, false, true, true, true, true, true, false, true, false, false, true, false, false, true, true, true, false, false, false, false, true, true, true, false, false, true, false, false, false, true, true, true, false, true, false, true, false, true, true, false, true, true, true, false, true, true, false, false, true, false, false, true, false, false, true, true, false, false, true, true, false, false, false, false, true, false, false, false, true, false, true, true, true, true, false, false, false, true, true, true, true, true, true, false, true, false, true, true]);
            let encoded = BinVector::from_bools(&[true, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, true, false, true, true, false, false, false, true, true, false, false, false, true, true, true, false, true, true, true, true, true, false, true, false, false, true, false, false, true, true, true, false, false, false, false, true, true, true, false, false, true, false, false, false, true, true, true, false, true, false, true, false, true, true, false, true, true, true, false, true, true, false, false, true, false, false, true, false, false, true, true, false, false, true, true, false, false, true, false, false, true, false, false, false, true, false, true, true, true, true, false, false, false, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, true, false, true, true, false, false, false, true, true, false, false, false, true, true, true, false, true, true, true, true, false, false, true, false, false, true, false, false, true, true, true, false, false, false, false, true, true, true, false, false, true, false, false, false, true, true, true, false, true, false, true, false, true, true, false, true, true, true, false, true, true, false, false, true, false, false, true, false, false, true, true, false, false, true, true, false, false, true, false, false, true, false, false, false, true, false, true, true, true, true, false, false, false, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, false, true, false, false, false, true, false, true, true, true, true, false, false, true, true, false, true, true, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, true, true, false, true, true, false, false, false, true, true, true, true, true, true, true, true, true, false, false, true, true, true, true, true, true, false, true, true, false, false, true, false, true, true, true, false, false, false, false, true, false, true, false, true, false, false, false, true, false, false, false, true, false, false, true, false, true, true, false, true, false, false, true, true, true, true, true, false, true, true, false, false, false, true, true, true, true, false, false, true, true, false, true]);
            let encoded = BinVector::from_bools(&[true, false, false, true, false, true, false, false, false, true, false, true, true, true, true, false, false, true, true, false, true, true, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, true, true, false, true, true, false, false, false, true, true, true, true, true, true, true, true, true, false, false, true, true, true, true, true, true, false, true, true, false, false, true, false, true, true, true, false, false, false, false, true, false, true, false, true, false, false, false, true, false, false, false, true, false, false, true, false, true, false, true, false, true, false, false, true, true, true, true, true, false, true, true, false, false, false, false, true, true, true, true, false, false, true, true, true, false, true, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, false, true, false, false, false, true, false, true, true, true, true, false, false, true, true, false, true, true, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, true, true, false, true, true, false, false, false, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, false, true, true, false, false, true, false, true, true, true, false, false, false, false, true, false, true, false, true, false, false, false, true, false, false, false, true, false, false, true, false, true, false, true, false, true, false, false, true, true, true, true, true, false, true, true, false, false, false, false, true, true, true, true, false, false, true, true, true, false, true, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, false, true, false, false, false, false, false, true, false, true, true, false, true, true, false, true, false, true, true, false, true, true, true, true, true, true, false, true, false, true, false, true, false, false, true, false, true, true, true, true, false, true, true, true, false, false, true, true, true, true, true, true, false, false, true, true, true, true, true, true, true, false, false, false, false, false, true, true, false, true, false, true, true, true, false, false, false, false, false, false, true, false, true, false, true, true, false, true, true, false, false, false, false, false, true, false, true, true, false, true, true, false, false, true, true, false, false, false, false, true, false, false, true, false, true, true]);
            let encoded = BinVector::from_bools(&[false, false, false, true, false, true, false, false, false, false, false, true, false, true, true, false, true, true, false, true, false, true, true, false, true, true, true, true, true, true, false, true, false, true, false, true, false, false, true, false, true, true, true, true, false, true, true, true, false, false, true, true, true, true, true, true, false, false, true, true, true, true, true, true, true, false, false, false, false, false, true, true, false, true, false, true, true, true, false, false, false, false, false, false, true, false, true, false, true, true, false, true, true, false, false, false, false, false, false, true, false, true, true, false, true, true, false, false, true, true, false, false, false, false, false, true, false, false, false, true, false, true, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, false, true, false, false, false, false, false, true, false, true, true, false, true, true, false, true, false, true, true, false, true, true, true, true, true, true, true, true, false, true, false, true, false, false, true, false, true, true, true, true, false, true, true, true, false, false, true, true, true, true, true, true, false, false, true, true, true, true, true, true, true, false, false, false, false, false, true, true, false, true, false, true, true, true, false, false, false, false, false, false, true, false, true, false, true, true, false, true, true, false, false, false, false, false, false, true, false, true, true, false, true, true, false, false, true, true, false, false, false, false, false, true, false, false, false, true, false, true, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, false, false, false, false, true, true, false, true, true, false, true, false, true, true, true, false, false, true, true, true, true, true, true, true, false, true, false, true, false, false, false, true, true, false, false, true, true, false, false, false, false, true, true, false, true, false, true, true, true, false, false, true, false, false, false, true, true, false, false, true, false, false, false, false, false, false, false, false, true, false, false, true, false, true, true, false, false, true, true, false, true, true, false, true, true, true, true, false, true, true, true, false, true, false, false, true, true, false, false, false, true, false, true, true, false, false, true, true, true, true, false, false, true, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, false, false, false, false, false, false, true, true, false, true, true, false, true, false, true, true, true, false, false, true, true, true, true, true, true, true, false, true, false, true, false, false, false, true, true, false, false, true, true, false, false, false, false, true, true, false, true, false, true, true, true, false, false, true, false, false, false, true, true, false, false, true, false, false, false, false, false, false, false, false, true, false, false, true, false, true, true, false, false, true, true, false, true, true, false, true, true, true, true, false, true, true, true, true, false, true, false, false, true, true, false, false, false, true, false, true, true, false, false, false, true, true, true, true, false, false, true, true, true, false, true, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, false, false, false, false, true, true, false, true, true, false, true, false, true, true, true, false, false, true, true, true, true, true, true, true, false, true, false, true, false, false, false, true, true, false, false, true, true, false, false, false, false, true, true, false, true, false, true, true, true, false, false, true, false, false, false, true, true, false, false, true, false, false, false, false, false, false, false, false, true, false, false, true, false, true, true, false, false, true, true, false, true, true, false, true, true, true, true, false, true, true, true, true, false, true, false, false, true, true, false, false, false, true, false, true, true, false, false, false, true, true, true, true, false, false, true, true, true, false, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, true, false, true, true, false, true, false, true, false, true, false, false, false, false, false, true, false, true, false, true, true, false, true, true, false, true, false, false, false, false, false, true, true, false, false, true, true, false, true, false, false, false, false, false, false, true, false, true, false, false, false, false, true, false, true, false, false, true, false, false, true, true, true, false, false, true, true, true, true, true, false, true, false, false, false, false, true, true, true, true, false, true, false, false, false, true, true, false, true, true, true, true, false, true, true, true, false, false, true, true, true, true, true, true, true, false, false, true, true, false, true, false, false, true, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, true, false, true, true, false, true, false, true, false, true, false, false, false, false, false, true, false, true, false, true, true, false, true, true, false, true, false, false, false, false, false, true, true, false, false, true, true, false, true, false, false, false, false, false, false, true, false, true, false, false, false, false, true, false, true, false, false, true, false, false, true, true, true, false, false, true, true, true, true, true, false, true, false, false, false, false, true, true, true, true, false, true, false, false, false, true, true, false, true, true, false, true, true, false, true, true, true, false, false, true, true, true, true, true, true, true, true, false, false, true, true, false, true, false, true, false, true, true, false, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, true, false, true, true, false, true, false, true, false, true, false, false, false, false, false, true, false, true, false, true, true, false, true, true, false, true, false, false, false, false, false, true, true, false, false, true, true, false, true, false, false, false, false, false, false, true, false, true, false, false, false, false, true, false, true, false, false, true, false, false, true, true, true, false, false, true, true, true, true, true, false, true, false, true, false, false, true, true, true, true, false, true, false, false, false, true, true, false, true, true, false, true, true, false, true, true, true, false, false, true, true, true, true, true, true, true, true, false, false, true, true, false, true, false, true, false, true, true, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, true, true, true, true, true, true, false, false, true, false, true, true, false, false, false, false, true, false, true, false, false, false, true, false, true, false, true, false, true, false, true, false, false, true, true, false, true, true, true, false, false, true, false, false, true, true, false, false, true, false, true, false, true, true, true, true, false, false, false, false, true, false, true, true, true, false, true, true, true, false, false, true, false, false, false, true, false, true, false, true, true, false, true, false, false, false, true, false, false, false, true, true, false, false, true, true, true, true, true, true, true, false, false, false, true, true, true, false, false, false, false, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, false, true, true, true, true, true, true, false, false, true, false, true, true, false, false, false, false, true, false, true, false, false, false, true, false, true, false, true, false, true, false, true, false, false, true, true, false, true, true, true, false, false, true, false, false, true, true, false, false, true, false, true, false, true, true, true, true, false, false, false, false, true, false, true, true, true, false, true, true, true, false, false, true, false, false, false, true, false, true, false, true, true, false, true, false, false, false, true, false, false, false, false, true, true, false, false, true, true, true, true, true, true, true, false, false, false, true, false, true, true, false, false, false, false, true, true, true, true, false, true, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, true, true, true, true, true, true, false, false, true, false, true, true, false, false, false, false, true, false, true, false, false, false, true, false, true, false, true, false, true, false, true, false, false, true, true, false, true, true, true, false, false, true, false, false, true, true, false, false, true, false, true, false, true, true, true, true, false, false, false, false, true, false, true, true, true, false, true, true, true, false, false, true, false, false, false, true, false, true, false, true, true, false, true, false, false, false, true, false, false, false, false, true, true, false, false, true, true, true, true, true, true, true, false, false, false, true, false, true, true, false, false, false, false, true, true, true, true, true, true, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, false, false, true, false, false, false, false, true, false, false, false, true, true, false, true, false, true, false, true, true, true, true, false, true, true, false, false, true, true, false, true, true, false, true, false, false, true, false, false, false, true, false, true, false, false, false, true, true, true, false, true, true, true, false, true, true, false, false, true, true, false, false, true, true, true, true, true, true, true, true, true, true, false, true, false, false, true, false, false, false, true, false, true, false, false, true, false, false, false, true, false, false, true, true, true, true, true, true, false, false, false, false, false, false, false, false, true, false, true, false, false, true, true, false, false, true]);
            let encoded = BinVector::from_bools(&[true, false, false, true, false, false, true, false, false, false, false, true, false, false, false, true, true, false, true, false, true, false, true, true, true, true, false, true, true, false, false, true, true, false, true, true, false, true, false, false, true, false, false, false, true, false, true, false, false, false, true, true, true, false, true, true, true, false, true, true, false, false, true, true, false, false, true, true, true, true, true, true, true, true, true, true, false, true, false, false, true, false, false, false, true, false, true, false, false, true, false, false, false, true, false, false, false, true, true, true, true, true, true, false, false, false, false, false, false, false, true, false, true, false, true, false, false, true, false, true, false, false, true, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, false, false, true, false, false, false, false, true, false, false, false, true, true, false, true, false, true, false, true, true, true, true, false, true, true, false, false, true, true, false, true, true, false, true, false, false, true, false, false, false, true, false, true, false, false, false, true, true, true, false, true, true, true, false, true, true, false, false, true, true, false, false, true, true, true, true, true, true, true, true, true, true, false, true, false, false, true, false, false, false, true, false, true, false, false, true, false, false, false, true, false, false, false, true, true, true, true, true, true, false, false, false, false, false, false, false, true, false, true, false, true, false, false, true, false, true, true, false, true, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, false, false, true, false, true, true, true, false, true, true, true, false, false, true, true, false, false, true, false, true, true, true, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, false, true, true, true, false, true, false, true, false, false, false, true, false, false, false, false, false, true, false, true, true, true, false, true, false, true, false, true, true, false, false, false, false, true, true, true, false, false, true, false, false, false, false, true, false, false, false, false, false, false, true, false, false, false, true, false, false, true, false, false, true, false, false, true, false, true, true, true, false, true, false, true, false, true, true, true, false]);
            let encoded = BinVector::from_bools(&[true, true, true, true, false, false, true, false, true, true, true, false, true, true, true, false, false, true, true, false, false, true, false, true, true, true, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, false, true, true, true, false, true, false, true, false, false, false, true, false, false, false, false, false, true, false, true, true, true, false, true, false, true, false, true, true, false, false, false, false, true, true, true, false, false, true, false, false, false, false, true, false, false, false, false, false, false, true, true, false, false, false, true, false, false, true, false, false, true, false, false, true, false, true, true, true, true, false, true, false, true, false, false, true, true, true, true, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, false, false, true, false, true, true, true, false, true, true, true, false, false, true, true, false, true, true, false, true, true, true, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, false, true, true, true, false, true, false, true, false, false, false, true, false, false, false, false, false, true, false, true, true, true, false, true, false, true, false, true, true, false, false, false, false, true, true, true, false, false, true, false, false, false, false, true, false, false, false, false, false, false, true, true, false, false, false, true, false, false, true, false, false, true, false, false, true, false, true, true, true, true, false, true, false, true, false, false, true, true, true, true, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, false, false, false, true, false, true, false, false, true, true, true, false, false, false, false, false, true, true, true, false, false, false, false, true, true, true, false, true, true, true, true, false, true, false, true, true, true, false, true, true, false, false, true, true, true, false, true, true, false, true, true, false, false, false, true, true, false, false, true, false, false, true, false, false, false, false, false, false, true, true, false, true, false, true, true, true, false, true, true, false, true, false, true, false, true, true, true, true, false, false, true, true, false, true, true, false, false, true, false, true, false, false, false, false, true, false, true, false, true, true, false, false, false, false, false]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, false, false, false, true, false, true, false, false, true, true, true, false, false, false, false, false, true, true, true, false, false, false, false, true, true, true, false, true, true, true, true, false, true, false, true, true, true, false, true, true, false, false, true, true, true, false, true, true, false, true, true, false, false, false, true, true, false, false, true, false, false, true, false, false, false, false, false, false, true, true, false, true, false, true, true, true, false, true, true, false, true, false, true, false, true, true, true, true, false, true, false, true, true, false, true, true, false, false, true, false, true, false, false, false, false, false, true, false, true, false, true, true, false, true, false, false, false, false, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, true, false, false, false, true, false, true, false, false, true, true, true, false, false, false, false, false, true, true, true, false, false, false, false, true, true, true, false, true, true, true, true, false, true, false, true, true, true, false, true, true, false, false, true, true, true, false, true, true, false, true, true, false, false, false, true, true, false, false, true, false, false, true, false, false, false, false, false, false, true, true, false, true, false, true, true, true, false, true, true, false, true, false, true, false, true, true, false, true, false, true, false, true, true, false, true, true, false, false, true, false, true, false, false, false, false, false, true, false, true, false, true, true, false, true, false, false, false, false, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, true, false, true, true, false, false, true, true, false, false, true, true, false, true, true, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, true, false, true, false, true, false, false, false, true, true, false, false, false, false, true, true, true, false, true, true, false, true, false, false, false, true, false, false, true, true, false, true, false, true, true, false, false, false, false, true, true, true, true, false, false, false, true, false, false, true, false, true, false, true, false, false, true, false, true, true, true, true, false, false, true, true, false, true, false, false, true, false, false, true, true, true, true, true, false, true, true, false, true, true, false]);
            let encoded = BinVector::from_bools(&[true, false, true, false, true, false, true, true, false, false, true, true, false, false, true, true, false, true, true, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, true, false, true, false, true, false, false, false, true, true, false, false, false, false, true, true, true, false, true, true, false, true, false, false, false, true, false, false, true, true, false, true, false, true, true, false, false, false, false, true, true, true, true, false, false, false, true, false, false, true, false, true, false, true, false, false, true, false, true, true, true, true, true, false, false, true, true, false, true, false, false, true, false, false, true, true, true, true, true, true, false, true, true, false, false, true, true, true, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, true, false, true, true, false, false, true, true, false, false, true, true, false, true, true, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, true, false, true, false, true, false, false, false, true, true, false, false, false, false, true, true, true, false, true, true, false, true, false, false, false, true, false, false, true, true, false, true, false, true, true, false, false, false, false, true, true, true, true, false, false, false, true, false, false, true, false, true, false, true, false, false, true, false, true, true, true, true, true, false, false, true, true, false, true, false, false, true, false, true, true, true, true, true, true, true, false, true, true, false, false, true, true, true, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, false, true, true, true, true, false, false, true, false, true, false, true, true, true, false, false, false, false, true, false, true, false, true, true, true, true, true, false, true, true, true, true, false, true, false, false, true, false, false, true, true, false, true, false, true, false, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, true, true, false, false, false, false, true, false, false, false, false, false, false, true, true, true, false, true, false, true, true, true, true, true, true, false, true, false, true, false, true, false, false, true, false, true, false, false, false, false, false, true, true, false, false, false, false, false, false, false, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, false, true, false, false, true, true, true, true, false, false, true, false, true, false, true, true, true, false, false, false, false, true, false, true, false, true, true, true, true, true, false, true, true, true, true, false, true, false, false, true, false, false, true, true, false, true, false, true, false, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, true, true, false, false, false, false, true, false, false, false, false, false, false, true, true, true, false, true, false, true, true, true, true, true, true, false, true, false, true, true, false, true, false, false, true, false, true, false, false, false, false, false, true, true, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, false, true, true, true, true, false, false, true, false, true, false, true, true, false, false, false, false, false, true, false, true, false, true, true, true, true, true, false, true, true, true, true, false, true, false, false, true, false, false, true, true, false, true, false, true, false, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, true, true, false, false, false, false, true, false, false, false, false, false, false, true, true, true, false, true, false, true, true, true, true, true, true, false, true, false, true, true, false, true, false, false, true, false, true, false, false, false, false, false, true, true, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, false, false, false, false, false, false, true, false, true, true, false, false, false, true, true, true, true, false, true, false, true, true, true, false, false, true, true, false, false, false, false, true, true, false, true, true, true, false, true, true, false, false, false, true, true, true, true, false, true, false, true, true, false, false, true, true, false, false, true, true, false, true, false, false, true, true, true, false, true, true, true, true, false, false, false, false, false, true, true, true, true, false, true, true, false, true, true, false, true, true, false, false, true, false, true, false, false, true, false, true, true, false, false, true, false, false, true, false, false, true, false, true, false, true, true, false]);
            let encoded = BinVector::from_bools(&[true, false, true, true, false, false, false, false, false, false, true, false, true, true, false, false, false, true, true, true, true, false, true, false, true, true, true, false, false, true, true, false, false, false, false, true, true, false, true, true, true, false, true, true, false, false, false, true, true, true, true, false, true, false, true, true, false, false, true, true, false, false, true, true, false, true, false, false, true, true, true, false, true, true, true, true, false, false, false, false, false, true, true, true, true, false, true, true, false, true, true, false, true, true, false, false, false, true, false, true, false, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, false, true, true, false, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, false, false, false, false, false, false, true, false, true, true, false, false, false, true, true, true, true, false, true, false, true, true, true, false, false, true, true, false, false, false, false, true, true, false, true, true, false, false, true, true, false, false, false, true, true, true, true, false, true, false, true, true, false, false, true, true, false, false, true, true, false, true, false, false, true, true, true, false, true, true, true, true, false, false, false, false, false, true, true, true, true, false, true, true, false, true, true, false, true, true, false, false, false, true, false, true, false, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, false, true, true, false, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, true, true, true, true, false, false, false, true, true, false, true, false, true, true, false, false, true, false, true, true, false, true, true, false, true, true, true, true, false, false, true, false, false, false, false, false, true, true, false, true, true, true, true, false, false, true, true, true, true, false, false, false, true, true, false, true, true, true, true, true, true, true, false, false, true, true, false, true, true, false, false, false, true, true, true, true, false, true, false, true, false, true, true, false, false, false, true, false, true, true, true, false, true, true, false, true, false, true, true, false, true, false, false, true, false, true, false, true, true, true, false, false, true, false, false, true]);
            let encoded = BinVector::from_bools(&[false, false, true, false, true, true, true, true, false, false, false, true, true, false, true, false, true, true, false, false, true, false, true, true, false, true, true, false, true, true, true, true, false, false, true, false, false, false, false, false, true, true, false, true, true, true, true, false, false, true, true, true, true, false, false, false, true, true, false, true, true, true, true, true, true, true, false, false, true, true, false, true, true, false, false, false, true, true, true, true, false, true, false, true, false, true, true, false, false, false, true, false, true, true, false, true, false, true, true, false, true, false, true, true, false, true, false, false, true, false, false, true, false, true, true, true, false, false, true, true, false, false, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, true, true, true, true, false, false, false, true, true, false, true, false, true, true, false, false, true, false, true, true, false, true, true, false, true, true, true, true, false, false, true, false, false, false, false, false, true, true, false, true, true, true, true, false, false, true, true, true, true, false, false, false, true, true, false, true, true, true, false, true, true, true, false, false, true, true, false, true, true, false, false, false, true, true, true, true, false, true, false, true, false, true, true, false, false, false, true, false, true, true, false, true, false, true, true, false, true, false, true, true, false, true, false, false, true, false, false, true, false, true, true, true, false, false, true, true, false, false, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, true, true, true, true, true, true, false, false, true, false, true, true, false, true, false, true, false, true, true, true, true, false, false, false, false, true, true, true, true, true, true, true, false, false, false, false, true, true, true, true, true, true, false, true, false, true, false, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, false, false, true, true, true, false, false, true, true, false, false, true, true, true, false, true, true, true, false, false, true, false, true, true, true, false, false, false, false, false, true, true, true, true, false, false, true, true, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, true, true, true, true, true, true, false, false, true, false, true, true, false, true, false, true, false, true, true, true, true, false, false, false, false, true, true, true, true, true, true, true, false, false, false, false, true, true, true, true, true, true, false, true, false, true, false, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, false, false, true, true, true, false, false, true, true, false, false, true, true, true, false, true, true, true, false, false, true, false, true, true, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, false, true, true, true, true, true, true, false, false, true, false, true, true, false, true, false, true, false, true, true, true, true, false, false, false, false, true, true, true, true, true, true, true, false, false, false, false, true, true, true, true, true, true, false, true, false, true, false, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, false, false, true, true, true, false, false, true, true, false, false, true, true, true, false, true, true, true, false, false, true, false, true, true, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, false, true, false, false, true, false, true, true, false, true, false, false, false, true, false, true, false, false, false, true, false, true, true, false, true, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, false, false, true, true, true, false, false, true, true, true, true, true, false, true, false, true, true, false, false, true, false, true, false, false, false, true, false, false, false, true, true, false, false, false, true, false, false, false, false, false, true, false, true, false, false, false, true, true, true, true, false, true, false, false, true, true, false, false, false, false, false, true, true]);
            let encoded = BinVector::from_bools(&[true, true, false, false, false, true, false, false, true, false, true, true, false, true, false, false, false, true, false, true, false, false, false, true, false, true, true, false, true, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, false, false, true, true, true, false, false, true, true, true, true, true, false, true, false, true, true, false, false, true, false, true, false, false, false, true, false, false, false, true, true, false, false, false, true, false, false, false, false, false, false, true, false, true, false, false, false, true, true, true, true, false, true, false, false, false, true, true, false, false, false, true, false, false, true, false, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, false, true, false, false, true, false, true, true, false, true, false, false, false, true, false, true, false, false, false, true, false, true, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, false, false, true, true, true, false, false, true, true, true, true, true, false, true, false, true, true, false, false, true, false, true, false, false, false, true, false, false, false, true, true, false, false, false, true, false, false, false, false, false, false, true, false, true, false, false, false, true, true, true, true, false, true, false, false, false, true, true, false, false, false, true, false, false, true, false, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, true, true, false, true, true, true, false, true, false, true, true, true, false, false, true, true, true, false, false, false, true, true, false, true, false, false, true, false, false, true, true, false, true, false, true, true, true, true, true, true, true, false, false, false, true, true, false, true, false, true, false, false, true, true, true, true, false, false, true, true, true, true, false, false, false, true, true, false, false, false, false, false, true, true, true, true, true, true, true, false, true, true, true, false, false, false, false, true, false, false, true, false, false, true, false, true, false, false, false, true, true, true, true, false, false, true, true, true, false, true, true, true, false, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, false, true, true, true, false, true, true, true, false, true, false, true, true, true, false, false, true, true, true, false, false, false, true, true, false, true, false, false, true, false, false, true, true, false, true, false, true, true, true, true, true, true, true, false, false, false, true, true, false, true, false, true, false, false, true, true, true, true, false, false, true, true, true, true, false, false, false, true, true, false, false, false, false, false, true, true, true, true, true, true, true, false, true, true, true, false, false, false, false, true, false, false, true, true, false, false, true, false, true, false, false, false, true, true, true, true, false, false, false, true, true, true, false, true, true, true, false, false, true, false, false, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, true, true, false, true, true, true, false, true, false, true, true, true, false, false, true, true, true, false, false, false, true, true, false, true, false, false, true, false, false, true, true, false, true, false, true, true, true, true, true, true, true, false, false, false, true, true, false, true, false, true, false, false, true, true, true, true, false, false, true, true, true, true, false, false, false, true, true, false, false, false, false, false, true, true, true, true, true, true, true, false, true, true, true, false, false, false, false, true, false, false, true, false, false, false, true, false, true, false, false, false, true, true, true, true, false, false, false, true, true, true, false, true, true, true, false, false, true, false, false, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, true, true, false, true, true, true, false, false, true, true, false, true, false, false, true, true, false, true, false, true, false, true, false, true, false, true, false, false, false, true, true, false, true, false, false, false, false, false, false, false, true, true, true, false, true, true, false, true, false, false, false, false, true, true, true, true, true, false, false, false, true, true, false, false, true, true, true, false, false, true, false, false, false, true, false, true, false, true, true, false, true, true, false, true, false, false, true, true, true, false, false, false, true, false, false, false, false, false, false]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, true, true, false, true, true, true, false, false, true, true, false, true, false, false, true, true, false, true, false, true, false, true, false, true, false, true, false, false, false, true, true, false, true, false, false, false, false, false, false, false, true, true, true, false, true, true, false, true, false, false, false, false, true, true, true, true, true, false, false, false, true, true, false, false, true, true, true, false, false, true, false, false, false, false, true, false, true, false, true, true, false, true, true, false, true, false, false, true, true, true, true, false, false, false, true, false, false, true, false, false, false, false, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, true, true, false, true, true, true, false, false, true, true, false, true, false, false, true, true, false, true, false, true, false, true, false, true, false, true, false, false, false, true, true, false, true, false, false, false, false, false, false, false, true, true, true, false, true, true, false, true, true, false, false, false, true, true, true, true, true, false, false, false, true, true, false, false, true, true, true, false, false, true, false, false, false, false, true, false, true, false, true, true, false, true, true, false, true, false, false, true, true, true, true, false, false, false, true, false, false, true, false, false, false, false, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, false, false, true, true, false, true, true, true, false, false, true, false, true, true, true, false, false, true, true, false, true, false, true, false, true, true, true, true, true, true, true, false, true, false, false, true, false, false, false, false, true, false, false, false, true, true, true, true, false, false, true, false, true, false, false, false, true, true, true, true, true, true, true, true, false, true, false, false, true, true, false, true, false, false, false, true, true, true, true, true, false, true, true, true, false, true, false, true, false, true, false, false, true, false, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, true, false, true, true, false, false]);
            let encoded = BinVector::from_bools(&[true, true, true, false, false, false, true, true, false, true, true, true, false, false, true, false, true, true, true, false, false, true, true, false, true, false, true, false, true, true, true, true, true, true, true, false, true, false, false, true, false, false, false, false, true, false, false, false, true, true, true, true, false, false, true, false, true, false, false, false, true, true, true, true, true, true, true, true, false, true, false, false, true, true, false, true, false, false, false, true, true, true, true, true, false, true, true, true, false, true, false, true, false, true, false, false, false, true, false, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, true, false, false, true, true, false, false, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, false, false, true, true, false, true, true, true, false, false, true, false, true, true, true, false, false, true, true, false, true, false, true, false, true, true, true, true, true, true, true, false, true, false, false, true, false, false, false, false, true, false, false, false, true, true, true, true, false, false, true, false, true, false, false, false, true, true, true, true, true, true, true, true, false, true, false, false, true, true, false, true, false, false, false, true, true, true, true, true, false, true, true, true, false, true, false, true, false, true, false, false, true, true, false, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, true, false, false, true, true, false, false, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, true, false, true, false, false, true, true, true, false, false, false, true, true, true, true, false, true, true, true, true, true, true, false, true, false, true, false, false, false, false, true, false, true, true, true, true, false, false, true, true, true, false, true, false, true, false, false, false, true, false, false, false, true, true, true, true, true, true, false, false, true, true, false, false, true, true, true, true, true, false, false, true, false, true, false, true, false, false, true, true, false, true, false, false, true, true, false, false, true, false, true, true, true, true, true, false, false, false, false, false, true, true, false, false, true, false, false, true, true, false, true, false, false, false, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, false, true, false, true, false, false, true, true, true, false, false, false, true, true, true, true, false, true, true, true, true, true, true, false, true, false, true, false, false, false, false, true, false, true, true, true, true, false, false, true, true, true, false, true, false, true, false, false, false, true, false, false, false, true, true, true, true, true, true, false, false, true, true, false, false, true, true, true, true, true, false, false, true, false, true, false, true, false, false, true, true, false, true, false, false, true, true, false, false, true, false, true, true, true, true, true, true, false, false, false, false, false, true, true, false, false, true, true, false, false, true, true, false, true, false, false, false, false, true, true, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, true, false, true, false, false, true, true, true, false, false, false, true, true, true, true, false, true, true, true, true, true, true, false, true, false, true, false, false, false, false, true, false, true, true, true, true, false, false, true, true, true, false, true, false, true, false, false, false, true, false, false, false, true, true, true, true, true, true, false, false, true, true, false, false, true, true, true, true, true, false, false, true, false, true, false, true, false, false, true, true, false, true, false, false, true, true, false, false, true, false, true, true, true, true, true, true, false, false, false, false, false, true, false, false, false, true, true, false, false, true, true, false, true, false, false, false, false, true, true, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, true, true, false, true, false, true, true, false, false, false, false, true, true, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, true, true, true, true, true, false, false, true, true, false, true, false, true, false, false, true, false, false, true, true, false, true, false, true, false, false, false, false, false, true, true, true, false, false, false, false, false, true, true, false, false, true, false, true, true, true, true, false, false, false, false, true, true, false, false, true, false, true, true, true, true, true, false, true, false, true, true, true, false, false, true, true, true, false, true, false, false, true, false, false, false, true, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, true, true, true, false, true, false, true, true, false, false, false, false, true, true, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, true, true, true, true, true, false, false, true, true, false, true, false, true, false, false, true, false, false, true, true, false, true, false, true, false, false, false, false, false, true, true, true, false, false, false, false, false, true, true, false, false, true, false, true, true, true, true, false, false, false, false, true, true, false, false, true, false, true, false, true, true, true, true, false, true, false, true, true, true, false, false, true, true, true, false, false, true, false, false, true, false, false, false, false, true, true, false, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, true, true, false, true, false, true, true, false, false, false, false, true, true, true, true, true, true, false, true, false, true, false, true, false, true, false, false, true, false, false, true, false, true, true, true, true, true, false, false, true, true, false, true, false, true, false, false, true, false, false, true, true, false, true, false, true, false, false, false, false, false, true, true, true, false, false, false, false, false, true, true, false, false, true, false, true, true, true, true, false, false, false, false, true, true, false, false, true, false, true, false, true, true, true, true, false, true, false, true, true, true, false, false, true, true, true, false, false, true, false, false, true, false, false, false, false, true, true, false, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, false, true, true, true, false, false, true, true, false, true, false, true, true, false, false, true, true, true, true, false, true, false, true, true, false, false, false, false, false, true, false, true, true, false, true, false, false, false, true, false, false, false, false, false, true, false, false, false, false, false, false, true, true, false, false, true, false, true, false, false, true, true, true, true, true, false, true, false, false, true, true, false, false, false, true, true, false, true, true, true, false, false, true, false, false, true, true, true, false, false, false, false, true, true, true, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, false, true, false, true, false, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, false, true, true, true, false, false, true, true, false, true, false, true, true, false, false, true, true, true, true, false, true, false, true, true, false, false, false, false, false, true, false, true, true, false, true, false, false, false, true, false, false, false, false, false, true, false, false, false, false, false, false, true, true, false, false, true, false, true, false, false, true, true, true, true, true, false, true, false, false, true, true, false, false, false, true, true, false, true, true, true, false, false, true, false, false, true, true, true, false, false, true, false, false, true, true, true, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, false, false, true, true, false, true, false, false, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, false, true, true, true, false, false, true, true, false, true, false, true, true, false, false, true, true, true, true, false, true, true, true, true, false, false, false, false, false, true, false, true, true, false, true, false, false, false, true, false, false, false, false, false, true, false, false, false, false, false, false, true, true, false, false, true, false, true, false, false, true, true, true, true, true, false, true, false, false, true, true, false, false, false, true, true, false, true, true, true, false, false, true, false, false, true, true, true, false, false, true, false, false, true, true, true, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, false, false, true, true, false, true, false, false, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, false, true, true, true, true, true, false, false, true, false, false, true, false, true, false, true, false, true, true, true, true, true, false, true, false, true, true, false, false, true, true, false, true, false, true, false, true, true, false, true, true, false, false, false, false, false, true, true, false, false, false, true, false, false, true, true, true, false, true, true, true, true, false, false, false, false, false, true, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, true, false, true, false, false, true, true, false, true, true, true, true, true, true, true, false, false, true, false, true, false, false, true, true, true, false, true, false, true, true, true, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, false, true, true, true, true, true, false, false, true, false, false, true, false, true, false, true, false, true, true, true, true, true, false, true, false, true, true, false, false, true, true, false, true, false, true, false, true, true, false, true, true, false, false, false, false, false, true, true, false, false, false, true, false, false, true, true, true, false, true, true, true, true, false, false, false, false, false, true, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, true, false, true, false, false, true, true, false, false, true, true, true, true, true, true, true, false, false, true, false, true, false, false, false, true, true, true, false, true, false, true, false, true, true, true, true, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, false, true, true, true, true, true, false, false, true, false, false, true, false, true, false, true, false, true, true, true, true, true, false, true, false, true, true, false, false, true, true, false, true, false, true, false, true, true, false, true, true, false, false, false, false, false, true, true, false, false, false, true, false, false, true, true, true, false, true, true, true, true, false, false, false, false, false, true, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, true, false, true, false, false, true, true, false, false, true, true, true, true, true, true, true, false, false, true, false, true, false, true, false, true, true, true, false, true, false, true, false, true, true, true, true, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, true, false, true, true, true, false, false, false, true, false, true, false, true, false, false, true, false, false, false, false, true, false, false, false, true, false, false, true, true, true, false, true, true, true, false, true, false, false, true, false, true, false, false, true, true, false, false, false, false, false, false, true, false, true, true, false, false, true, false, true, true, false, true, false, true, true, false, true, true, true, true, false, false, true, false, false, true, true, true, true, true, true, false, false, false, true, false, false, false, true, false, false, true, true, true, true, true, true, true, true, false, false, false, false, true, false, false, false, false, false, false, true, false, true, true, false]);
            let encoded = BinVector::from_bools(&[false, true, false, false, true, false, true, true, true, false, false, false, true, false, true, false, true, false, false, true, false, false, false, false, true, false, false, false, true, false, false, true, true, true, false, true, true, true, false, true, false, false, true, false, true, false, false, true, true, false, false, false, false, false, false, true, false, true, true, false, false, true, false, true, true, false, true, false, true, true, false, true, true, true, true, false, false, true, false, false, true, true, true, true, true, true, false, false, false, true, false, false, false, true, true, false, false, true, true, true, true, true, true, true, true, false, false, false, false, true, true, false, false, false, false, false, false, true, true, false, true, true, false, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, true, false, true, true, true, false, false, false, true, false, true, false, true, false, false, true, false, false, false, false, true, false, false, true, true, false, false, true, true, true, false, true, true, true, false, true, false, false, true, false, true, false, false, true, true, false, false, false, false, false, false, true, false, true, true, false, false, true, false, true, true, false, true, false, true, true, false, true, true, true, true, false, false, true, false, false, true, true, true, true, true, true, false, false, false, true, false, false, false, true, true, false, false, true, true, true, true, true, true, true, true, false, false, false, false, true, true, false, false, false, false, false, false, true, true, false, true, true, false, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, false, true, false, false, false, true, false, true, true, true, true, true, true, false, true, true, true, false, true, false, false, false, true, false, true, false, true, true, true, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, true, false, false, false, false, true, false, true, true, false, false, true, false, false, true, true, true, true, true, false, false, true, true, true, false, false, false, false, true, true, true, true, false, true, true, true, true, true, true, false, true, false, true, true, false, true, false, true, true, true, true, true, true, true, false, true, false, false, true, false, false, true, false, true, false, true, false, true, true, true, false]);
            let encoded = BinVector::from_bools(&[true, false, false, true, false, true, false, false, false, true, false, true, true, true, true, true, true, false, true, true, true, false, true, false, false, false, true, false, true, false, true, true, true, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, true, false, false, false, false, true, false, true, true, false, false, true, false, false, true, true, true, true, true, false, false, true, true, true, false, false, false, false, true, true, true, true, false, true, true, true, true, true, true, false, true, false, true, true, false, true, true, false, true, true, true, true, true, true, true, false, true, false, false, true, false, false, false, true, false, true, false, true, false, false, true, true, true, true, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, false, true, false, false, false, true, false, true, true, true, true, true, true, false, true, true, true, false, true, false, false, false, true, false, true, false, true, true, true, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, true, false, false, false, false, true, false, true, true, false, false, true, false, false, true, true, true, true, true, false, false, true, true, true, false, false, false, false, true, true, true, true, false, true, true, true, true, true, true, false, true, false, true, true, true, true, true, false, true, true, true, true, true, true, true, false, true, false, false, true, false, false, false, true, false, true, false, true, false, false, true, true, true, true, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, false, false, true, true, true, false, false, false, true, false, true, true, true, false, true, false, true, true, false, true, false, true, true, true, false, true, false, true, true, true, false, false, false, false, false, true, false, true, true, true, true, true, false, false, false, false, true, true, true, true, false, true, false, true, false, false, false, false, false, true, false, false, false, true, true, false, false, true, false, false, false, true, false, true, false, true, true, true, false, false, false, true, false, true, false, false, true, true, false, true, false, false, true, true, false, false, false, true, false, true, true, true, false, false, false, true, false, true, false, false, false, false, false, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, false, true, false, false, true, true, true, false, false, false, true, false, true, true, true, false, true, false, true, true, false, true, false, true, true, true, false, true, false, true, true, true, false, false, false, false, false, true, false, true, true, true, true, true, false, false, false, false, true, true, true, true, false, true, false, true, false, false, false, false, false, true, false, false, false, true, true, false, false, true, false, false, false, true, false, true, false, true, true, true, false, false, false, true, false, true, false, false, true, true, false, true, true, false, false, true, true, false, false, false, true, false, true, true, true, false, false, false, false, true, false, true, false, false, false, false, true, false, true, false, true, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, false, false, true, true, true, false, false, false, true, false, true, true, true, false, true, false, true, true, false, true, false, true, true, true, false, true, false, true, true, true, false, false, false, false, false, true, false, true, true, true, true, true, false, false, false, false, true, true, true, true, false, true, false, true, false, false, false, false, false, true, false, false, false, true, true, false, false, true, false, false, false, true, false, true, false, true, true, true, false, false, false, true, false, true, false, false, true, true, false, true, true, false, false, true, true, false, false, false, true, true, true, true, true, false, false, false, false, true, false, true, false, false, false, false, true, false, true, false, true, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, true, true, false, true, false, false, true, true, true, false, false, false, true, false, false, false, true, false, false, true, true, true, true, false, true, true, false, true, true, false, false, true, false, true, true, true, true, true, true, true, false, false, true, false, true, true, false, true, true, true, false, true, false, true, true, false, false, false, true, true, true, false, false, true, true, true, true, false, true, false, false, true, true, false, false, false, false, false, false, false, false, true, true, false, false, true, true, false, true, false, true, false, true, false, false, false, false, true, false, true, false, false, false, false, false, false, true, true, true, true, true, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[true, true, true, true, true, true, false, true, false, false, true, true, true, false, false, false, true, false, false, false, true, false, false, true, true, true, true, false, true, true, false, true, true, false, false, true, false, true, true, true, true, true, true, true, false, false, true, false, true, true, false, true, true, true, false, true, false, true, true, false, false, false, true, true, true, false, false, true, true, true, true, false, true, false, false, true, true, false, false, false, false, false, false, false, false, true, true, false, false, true, true, false, true, false, false, true, false, true, false, false, false, false, true, false, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, true, true, false, true, false, false, true, true, true, false, false, false, true, false, false, false, true, false, false, true, true, true, true, false, true, true, false, true, true, false, false, true, false, true, true, true, true, true, true, true, false, false, true, false, true, true, false, true, true, true, false, true, false, true, true, false, false, false, true, true, true, false, false, true, true, true, true, false, true, false, false, true, true, false, false, false, false, false, false, false, false, true, true, false, false, true, true, false, true, false, false, true, true, true, false, false, false, false, true, false, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, true, true, false, false, false, true, true, true, true, false, true, true, false, true, false, false, false, false, true, false, true, true, true, true, true, false, false, false, false, false, true, false, false, false, true, true, true, false, true, false, false, true, false, true, true, false, true, false, false, true, false, false, true, true, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, false, false, false, false, true, true, false, false, true, false, false, true, false, false, true, true, false, false, false, false, false, false, false, true, false, false, false, false, true, true, false, true, false, false, false, false, true, true, true, false, false, true, false, true, true, false, false]);
            let encoded = BinVector::from_bools(&[false, false, true, true, true, true, false, false, false, true, true, true, true, false, true, true, false, true, false, false, false, false, true, false, true, true, true, true, true, false, false, false, false, false, true, false, false, false, true, true, true, false, true, false, false, true, false, true, true, false, true, false, false, true, false, false, true, true, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, false, false, false, false, true, true, false, false, true, false, false, true, false, false, true, true, false, false, false, false, false, false, false, false, true, false, false, false, false, true, true, false, true, false, false, false, false, false, true, true, true, false, false, true, false, false, true, true, false, false, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, true, true, false, false, true, true, true, true, true, false, true, true, false, true, false, false, false, false, true, false, true, true, true, true, true, false, false, false, false, false, true, false, false, false, true, true, true, false, true, false, false, true, false, true, true, false, true, false, false, true, false, false, true, true, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, false, false, false, false, true, true, false, false, true, false, false, true, false, false, true, true, false, false, false, false, false, false, false, false, true, false, false, false, false, true, true, false, true, false, false, false, false, false, true, true, true, false, false, true, false, false, true, true, false, false, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, false, false, false, true, true, true, false, true, true, true, true, false, false, true, true, true, true, true, true, true, true, true, true, false, false, true, false, false, true, false, true, false, false, false, true, true, true, false, false, true, false, false, true, true, false, true, false, false, true, true, false, true, true, true, false, true, true, true, false, false, true, true, true, false, false, true, false, true, true, false, true, true, true, false, false, true, true, false, false, true, false, false, false, false, false, false, true, false, true, false, true, true, true, false, false, false, false, false, false, false, false, true, false, false, true, true, false, false, true, false, false, false, true, false, true, false]);
            let encoded = BinVector::from_bools(&[false, false, true, false, false, false, false, true, true, true, false, true, true, true, true, false, false, true, true, true, true, true, true, true, true, true, true, false, false, true, false, false, true, false, true, false, false, false, true, true, true, false, false, true, false, false, true, true, false, true, false, false, true, true, false, true, true, true, false, true, true, true, false, false, true, true, true, false, false, true, false, true, true, false, true, true, true, false, false, true, true, false, false, true, false, false, false, false, false, false, true, false, true, false, true, true, true, true, false, false, false, false, false, false, false, false, true, false, false, true, true, true, false, false, true, false, false, false, false, true, false, true, false, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, false, false, false, true, true, true, false, true, true, true, true, false, false, true, true, true, true, true, true, true, true, true, true, false, false, true, false, false, true, false, true, false, false, false, true, true, true, false, false, true, false, false, true, true, false, true, false, false, true, true, false, true, true, true, false, true, true, true, false, false, true, true, true, false, false, true, false, true, true, false, true, true, true, false, false, true, true, false, false, true, false, false, false, false, false, false, true, false, true, false, true, true, true, true, false, false, false, false, false, false, false, false, true, true, false, true, true, true, false, false, true, false, false, false, false, true, false, true, false, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, false, false, false, false, true, false, false, true, false, true, true, true, false, false, true, false, false, true, true, false, true, true, true, true, true, false, true, false, false, false, true, false, true, false, true, true, false, true, false, false, true, true, false, true, false, false, true, false, true, false, true, true, false, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, false, true, true, false, true, true, false, false, true, false, false, true, true, true, false, false, false, false, false, true, false, false, false, false, false, true, false, true, true, false, true, false, false, false, true, true, false, false, true, true, false, true, true, false, false, false, true]);
            let encoded = BinVector::from_bools(&[true, true, true, true, false, false, false, false, true, false, false, true, false, true, true, true, false, false, true, false, false, true, true, false, true, true, true, true, true, false, true, false, false, false, true, false, true, false, true, true, false, true, false, false, true, true, false, true, false, false, true, false, true, false, true, true, false, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, false, true, true, false, true, true, false, false, true, false, false, true, true, true, false, false, false, false, false, true, false, false, false, false, false, false, true, false, true, true, false, true, false, false, false, true, true, false, false, false, true, true, false, true, true, false, false, false, false, true, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, false, false, false, false, true, false, false, true, false, true, true, true, false, false, true, false, false, true, true, false, true, true, true, true, true, false, true, false, false, false, true, false, true, false, true, true, false, true, false, false, true, true, false, true, false, false, true, false, true, false, true, true, false, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, false, false, true, true, false, true, true, false, false, true, false, false, true, true, true, false, false, false, false, false, true, false, false, false, false, false, false, true, false, true, true, false, true, false, false, false, true, true, false, false, false, true, true, false, true, true, false, false, false, false, true, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, true, true, false, true, false, false, false, false, true, false, false, false, false, true, false, false, false, true, false, true, true, false, true, true, true, true, false, true, false, false, true, true, false, false, true, false, true, true, false, true, false, false, true, false, true, false, true, false, true, false, false, false, false, true, true, true, false, true, false, false, true, false, true, false, false, false, false, true, false, false, false, false, false, true, false, true, true, false, true, false, true, true, false, true, false, true, false, true, true, false, false, true, true, true, true, true, true, false, false, true, true, true, false, true, true, true, false, false, true, true, false, true, true, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, true, true, false, true, false, false, false, false, true, false, false, false, false, true, false, false, false, true, false, true, true, false, true, true, true, true, false, true, false, false, true, true, false, false, true, false, true, true, false, true, false, false, true, false, true, false, true, false, true, false, false, false, false, true, true, true, false, true, false, false, true, false, true, false, false, false, false, true, false, false, false, false, false, true, false, true, true, false, true, false, true, true, false, true, false, true, false, true, true, false, false, false, true, true, true, true, true, true, false, false, true, true, true, false, true, false, true, true, false, false, true, true, false, true, true, true, true, false, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, true, true, false, true, false, false, false, false, true, false, false, false, false, true, false, false, false, true, false, true, true, false, false, true, true, true, false, true, false, false, true, true, false, false, true, false, true, true, false, true, false, false, true, false, true, false, true, false, true, false, false, false, false, true, true, true, false, true, false, false, true, false, true, false, false, false, false, true, false, false, false, false, false, true, false, true, true, false, true, false, true, true, false, true, false, true, false, true, true, false, false, false, true, true, true, true, true, true, false, false, true, true, true, false, true, false, true, true, false, false, true, true, false, true, true, true, true, false, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, false, true, false, false, true, true, false, false, false, false, false, false, false, false, true, true, true, true, false, true, false, true, true, true, true, true, false, true, false, false, true, false, false, false, true, false, true, false, false, false, true, false, false, true, false, false, false, false, false, false, true, true, true, true, true, false, true, false, false, true, false, true, true, true, true, false, false, true, true, true, true, true, false, true, true, true, true, true, false, true, true, true, true, false, true, true, true, true, true, false, false, true, true, true, true, false, false, false, false, false, false, true, true, true, false, false, false, true, false, true, false, true, false, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, false, true, false, true, false, false, true, true, false, false, false, false, false, false, false, false, true, true, true, true, false, true, false, true, true, true, true, true, false, true, false, false, true, false, false, false, true, false, true, false, false, false, true, false, false, true, false, false, false, false, false, false, true, true, true, true, true, false, true, false, false, true, false, true, true, true, true, false, false, true, true, true, true, true, false, true, true, true, true, true, false, true, true, true, true, false, true, true, true, true, true, false, false, false, true, true, true, true, false, false, false, false, false, false, true, true, true, false, false, false, false, true, false, true, false, true, false, false, true, false, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, false, true, false, false, true, true, false, false, false, false, false, false, false, false, true, true, true, true, false, true, false, true, true, true, true, true, false, true, false, false, true, false, false, false, true, false, true, false, false, false, true, false, false, true, false, false, false, false, false, false, true, true, true, true, true, false, true, false, false, true, false, true, true, true, true, false, false, true, true, true, true, true, false, true, true, true, true, true, false, false, true, true, true, false, true, true, true, true, true, false, false, false, true, true, true, true, false, false, false, false, false, false, true, true, true, false, false, false, false, true, false, true, false, true, false, false, true, false, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, true, true, false, false, true, false, true, false, true, true, true, false, false, false, false, true, true, false, false, false, true, false, false, true, true, false, false, false, false, true, true, true, false, true, true, false, false, true, false, false, false, false, true, true, false, false, true, false, true, true, false, true, true, true, true, false, true, true, false, false, false, true, true, false, false, true, false, true, false, false, false, true, false, false, true, true, true, true, false, false, false, true, false, false, true, false, true, true, true, true, true, false, false, true, false, true, true, true, false, false, false, false, false, false, false, false, false, true, false, true, false, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[false, false, false, true, true, true, false, false, true, false, true, false, true, true, true, false, false, false, false, true, true, false, false, false, true, false, false, true, true, false, false, false, false, true, true, true, false, true, true, false, false, true, false, false, false, false, true, true, false, false, true, false, true, true, false, true, true, true, true, false, true, true, false, false, false, true, true, false, false, true, false, true, false, false, false, true, false, false, true, true, true, true, false, false, false, true, false, false, true, false, true, true, true, true, false, true, false, false, true, false, true, true, true, false, false, false, false, false, false, false, false, false, false, true, false, true, false, true, true, true, true, false, true, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, true, true, false, false, true, false, true, false, true, true, true, false, false, false, false, true, true, false, false, false, true, false, false, true, true, false, false, false, false, true, true, true, false, true, true, false, false, true, false, false, false, false, false, true, false, false, true, false, true, true, false, true, true, true, true, false, true, true, false, false, false, true, true, false, false, true, false, true, false, false, false, true, false, false, true, true, true, true, false, false, false, true, false, false, true, false, true, true, true, true, false, true, false, false, true, false, true, true, true, false, false, false, false, false, false, false, false, false, false, true, false, true, false, true, true, true, true, false, true, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, false, true, false, true, true, false, true, true, false, false, true, true, false, false, true, false, false, true, false, false, false, false, false, true, false, false, true, false, false, true, false, true, true, true, false, true, false, true, true, true, true, false, false, true, true, true, false, false, true, false, true, false, false, false, false, false, false, true, false, true, true, false, true, true, true, true, false, true, false, true, false, false, false, true, true, true, false, false, false, false, false, false, false, true, false, false, false, true, false, true, true, false, false, false, true, true, false, true, true, true, true, true, false, true, true, false, true, true, true, false, false, true, false, false, true, true]);
            let encoded = BinVector::from_bools(&[false, false, true, true, false, true, false, true, true, false, true, true, false, false, true, true, false, false, true, false, false, true, false, false, false, false, false, true, false, false, true, false, false, true, false, true, true, true, false, true, false, true, true, true, true, false, false, true, true, true, false, false, true, false, true, false, false, false, false, false, false, true, false, true, true, false, true, true, true, true, false, true, false, true, false, false, false, true, true, true, false, false, false, false, false, false, false, true, false, false, false, true, false, true, true, true, false, false, false, true, true, false, true, true, true, true, true, false, true, true, true, false, true, true, true, false, false, true, false, false, false, true, true, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, false, true, false, true, true, false, true, true, false, false, true, true, false, false, true, false, false, true, false, false, false, false, false, true, false, false, true, false, false, true, false, true, true, true, false, false, false, true, true, true, true, false, false, true, true, true, false, false, true, false, true, false, false, false, false, false, false, true, false, true, true, false, true, true, true, true, false, true, false, true, false, false, false, true, true, true, false, false, false, false, false, false, false, true, false, false, false, true, false, true, true, true, false, false, false, true, true, false, true, true, true, true, true, false, true, true, true, false, true, true, true, false, false, true, false, false, false, true, true, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, true, true, false, false, false, false, true, false, true, false, false, true, false, true, true, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, true, false, false, false, true, false, false, false, false, true, true, false, false, true, false, false, false, false, true, false, true, true, false, true, true, false, false, false, true, false, true, false, false, true, true, false, false, true, true, true, true, false, false, true, false, true, true, true, true, true, true, true, false, true, false, true, false, true, true, true, true, false, false, true, false, true, false, true, false, false, false, false, false, false, false, true, true, true, true, false, false, true, false, true, false, true]);
            let encoded = BinVector::from_bools(&[true, false, false, false, true, true, false, false, false, false, true, false, true, false, false, true, false, true, true, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, true, false, false, false, true, false, false, false, false, true, true, false, false, true, false, false, false, false, true, false, true, true, false, true, true, false, false, false, true, false, true, false, false, true, true, false, false, true, true, true, true, false, false, true, false, true, true, true, true, true, true, true, false, true, false, true, false, true, true, true, false, true, false, false, true, false, true, false, true, false, false, false, false, false, false, false, false, true, true, true, true, false, false, true, false, false, true, false, false, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, true, true, false, false, false, false, true, false, true, false, false, true, false, true, true, true, true, false, true, false, true, false, false, true, true, false, true, true, false, false, true, false, false, false, true, false, false, false, false, true, true, false, false, true, false, false, false, false, true, false, true, true, false, true, true, false, false, false, true, false, true, false, false, true, true, false, false, true, true, true, true, false, false, true, false, true, true, true, true, true, true, true, false, true, false, true, false, true, true, true, false, true, false, false, true, false, true, false, true, false, false, false, false, false, false, false, false, true, true, true, true, false, false, true, false, false, true, false, false, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, true, false, false, false, false, true, true, true, true, false, true, true, false, true, false, false, true, true, false, true, true, true, false, true, true, false, false, false, false, true, false, false, false, false, true, true, true, true, true, true, true, false, true, true, true, false, true, true, true, false, true, false, true, false, false, true, true, false, false, false, true, true, true, true, false, true, false, false, false, false, true, true, false, false, true, false, false, true, false, false, true, true, false, true, false, false, true, false, true, true, false, true, true, true, false, false, false, true, false, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, true, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, true, false, false, false, false, true, true, true, true, false, true, true, false, true, false, false, true, true, false, true, true, true, false, true, true, false, false, false, false, true, false, false, false, false, true, true, true, true, true, true, true, false, true, true, true, false, true, true, true, false, true, false, true, false, false, true, true, false, false, false, true, true, true, true, false, true, false, false, false, false, true, true, false, false, true, false, false, false, true, false, false, true, true, false, true, false, false, true, false, true, true, true, false, true, true, true, false, false, false, true, true, false, false, false, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, true, false, false, false, true, false, false, false, false, true, false, false, true, true, false, true, false, false, false, false, true, true, true, true, false, true, true, false, true, false, false, true, true, false, true, true, true, false, true, true, false, false, false, false, true, false, false, false, false, true, true, true, true, true, true, true, false, true, true, true, false, true, true, true, false, true, false, true, false, false, true, true, false, false, false, true, true, true, true, false, true, false, false, false, false, true, true, false, false, true, false, false, false, true, false, false, true, true, false, true, false, false, true, false, true, true, true, false, true, true, true, false, false, false, true, true, false, false, false, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, false, true, true, false, false, false, true, false, false, true, false, true, false, false, true, false, false, false, true, true, true, true, true, true, false, false, true, false, false, true, true, false, true, false, true, false, true, false, true, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, true, true, false, false, false, false, false, true, true, false, false, true, false, false, false, true, false, false, false, false, false, true, true, false, false, true, true, true, false, true, true, true, true, true, false, false, false, false, false, false, true, true, true, true, true, false, true, false, true, false, true, false, true, false, false]);
            let encoded = BinVector::from_bools(&[true, true, false, true, false, true, true, false, false, false, true, false, false, true, false, true, false, false, true, false, false, false, true, true, true, true, true, true, false, false, true, false, false, true, true, false, true, false, true, false, true, false, true, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, true, true, false, false, false, false, false, true, true, false, false, true, false, false, false, true, false, false, false, false, false, true, true, false, false, true, true, true, false, false, true, true, true, true, true, false, false, false, false, false, false, true, true, true, true, false, true, false, true, false, true, false, true, true, false, true, false, false, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, false, true, true, false, false, false, true, false, false, true, false, true, false, false, true, false, false, false, true, true, true, true, true, true, false, false, true, false, false, true, true, false, true, false, true, false, true, false, true, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, true, true, false, false, false, false, false, true, true, false, false, true, false, false, false, true, false, false, false, false, false, true, true, false, false, true, true, true, false, false, true, true, true, true, true, false, false, false, false, false, false, true, true, true, true, false, true, false, true, false, true, false, false, true, false, true, false, false, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, true, false, true, false, true, true, true, true, true, true, false, false, true, false, true, true, true, true, false, true, true, false, true, true, true, false, true, true, true, false, false, true, false, false, true, false, true, false, false, true, false, false, false, false, false, true, true, false, false, true, false, false, false, true, true, true, false, false, true, false, true, false, false, false, true, false, false, true, true, false, true, false, false, true, false, false, false, false, true, false, false, false, true, true, true, true, true, true, true, false, true, true, false, true, false, true, false, true, true, false, false, false, true, false, false, false, false, true, false, false, true, false, false, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, true, false, true, false, true, true, true, true, true, true, false, false, true, false, true, true, true, true, false, true, true, false, true, true, true, false, true, true, true, false, false, true, false, false, true, false, true, false, false, true, false, false, false, false, false, true, true, false, false, true, false, false, false, true, true, true, false, false, true, false, true, false, false, false, true, false, false, true, true, false, true, false, false, true, false, false, false, false, true, false, false, false, true, true, true, true, true, true, true, false, false, true, true, false, true, false, true, false, true, true, false, false, false, true, false, false, false, false, false, true, false, false, true, false, false, false, false, true, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, true, false, true, false, true, true, true, true, true, true, false, false, true, false, true, true, true, true, false, true, true, false, true, true, true, false, true, false, true, false, false, true, false, false, true, false, true, false, false, true, false, false, false, false, false, true, true, false, false, true, false, false, false, true, true, true, false, false, true, false, true, false, false, false, true, false, false, true, true, false, true, false, false, true, false, false, false, false, true, false, false, false, true, true, true, true, true, true, true, false, false, true, true, false, true, false, true, false, true, true, false, false, false, true, false, false, false, false, false, true, false, false, true, false, false, false, false, true, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, false, false, true, true, false, false, false, true, true, false, true, false, false, true, true, true, false, true, false, true, true, false, true, false, true, true, false, false, true, true, false, true, true, false, true, true, false, false, false, true, false, true, true, false, true, true, false, false, false, true, true, false, true, true, true, true, false, false, false, false, false, false, true, false, false, true, false, true, true, false, true, false, true, true, true, false, false, false, true, true, false, true, true, true, false, false, true, true, true, true, false, false, false, false, false, false, true, true, false, true, true, false, false, true, false, true, true, false, true, false, false, false, true, true, true, false]);
            let encoded = BinVector::from_bools(&[false, false, false, true, false, false, true, true, false, false, false, true, true, false, true, false, false, true, true, true, false, true, false, true, true, false, true, false, true, true, false, false, true, true, false, true, true, false, true, true, false, false, false, true, false, true, true, false, true, true, false, false, false, true, true, false, true, true, true, true, false, false, false, false, false, false, true, false, false, true, false, true, true, false, true, false, true, true, true, false, false, false, true, true, false, true, true, true, false, false, true, true, true, true, false, false, false, false, false, false, false, true, true, false, true, true, false, false, true, false, false, true, true, false, true, false, false, false, false, true, true, true, true, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, false, false, true, true, false, false, false, true, true, false, true, false, false, true, true, true, false, false, false, true, true, false, true, false, true, true, false, false, true, true, false, true, true, false, true, true, false, false, false, true, false, true, true, false, true, true, false, false, false, true, true, false, true, true, true, true, false, false, false, false, false, false, true, false, false, true, false, true, true, false, true, false, true, true, true, false, false, false, true, true, false, true, true, true, false, false, true, true, true, true, false, false, false, false, false, false, false, true, true, false, true, true, false, false, true, false, false, true, true, false, true, false, false, false, false, true, true, true, true, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, true, true, false, true, false, true, true, false, false, true, false, false, true, false, true, true, false, true, true, true, true, false, true, true, false, true, false, false, false, true, false, true, true, false, false, true, true, true, false, false, false, true, true, false, true, true, true, false, true, true, false, true, true, true, false, true, false, false, false, true, true, false, true, true, false, true, true, true, false, false, true, true, true, true, true, true, false, false, true, false, false, true, true, false, true, true, true, false, true, true, true, false, true, false, true, false, true, false, true, true, false, false, false, true, true, false, false, true, false, true, false, false, true, true, true]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, true, true, false, true, false, true, true, false, false, true, false, false, true, false, true, true, false, true, true, true, true, false, true, true, false, true, false, false, false, true, false, true, true, false, false, true, true, true, false, false, false, true, true, false, true, true, true, false, true, true, false, true, true, true, false, true, false, false, false, true, true, false, true, true, false, true, true, true, false, false, true, true, true, true, true, true, false, false, true, false, false, true, true, false, true, true, true, false, true, true, true, true, false, true, false, true, false, true, false, true, true, false, false, false, true, true, true, false, false, true, false, true, false, true, false, true, true, true, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, true, true, true, false, true, false, true, true, false, false, true, false, false, true, false, true, true, false, true, true, true, true, false, true, true, false, true, false, false, false, true, false, true, true, false, false, true, true, true, false, false, false, true, true, false, true, true, true, false, true, true, false, true, true, true, false, true, false, false, false, true, true, false, true, true, false, true, true, true, false, false, true, true, true, true, false, true, false, false, true, false, false, true, true, false, true, true, true, false, true, true, true, true, false, true, false, true, false, true, false, true, true, false, false, false, true, true, true, false, false, true, false, true, false, true, false, true, true, true, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, true, true, false, true, false, true, false, true, true, true, true, true, true, false, false, true, false, true, true, false, true, false, false, false, true, false, false, false, false, false, false, true, false, true, true, true, true, false, true, true, true, false, true, false, false, true, false, false, false, false, false, false, true, true, true, false, false, false, true, false, false, true, true, true, false, false, true, true, true, false, true, true, true, false, true, true, true, false, true, true, true, true, false, false, false, false, true, false, false, false, true, false, true, true, true, true, true, true, true, false, true, false, false, false, true, false, false, true, false, true, false, false, false, false, true, false]);
            let encoded = BinVector::from_bools(&[true, true, true, false, true, true, false, true, false, true, false, true, true, true, true, true, true, false, false, true, false, true, true, false, true, false, false, false, true, false, false, false, false, false, false, true, false, true, true, true, true, false, true, true, true, false, true, false, false, true, false, false, false, false, false, false, true, true, true, false, false, false, true, false, false, true, true, true, false, false, true, true, true, false, true, true, true, false, true, true, true, false, true, true, true, true, false, false, false, false, true, false, false, false, true, true, false, true, true, true, true, true, true, true, false, true, false, false, false, true, false, false, false, true, false, true, false, false, true, false, false, true, true, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, true, true, false, true, false, true, false, true, true, true, true, true, true, false, false, true, false, true, true, false, true, false, false, false, true, false, false, false, false, false, false, true, false, true, true, true, true, false, true, true, true, false, true, false, false, true, false, false, false, false, false, false, true, true, true, false, false, false, true, true, false, true, true, true, false, false, true, true, true, false, true, true, true, false, true, true, true, false, true, true, true, true, false, false, false, false, true, false, false, false, true, true, false, true, true, true, true, true, true, true, false, true, false, false, false, true, false, false, false, true, false, true, false, false, true, false, false, true, true, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, false, false, true, false, false, true, true, true, true, true, false, true, true, false, true, true, false, false, false, true, true, false, true, false, false, false, false, false, false, true, true, true, false, true, false, false, true, false, false, false, false, false, true, true, false, true, true, true, false, false, false, false, true, false, true, true, true, true, false, true, true, true, true, false, false, true, true, true, false, true, false, false, true, false, true, true, false, true, true, true, false, false, true, true, false, true, true, true, true, true, false, false, true, false, false, true, false, true, true, true, false, true, true, false, true, true, false, true, true, true, false, true, false, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, false, false, false, false, true, false, false, true, true, true, true, true, false, true, true, false, true, true, false, false, false, true, true, false, true, false, false, false, false, false, false, true, true, true, false, true, false, false, true, false, false, false, false, false, true, true, false, true, true, true, false, false, false, false, true, false, true, true, true, true, false, true, true, true, true, false, false, true, true, true, false, true, false, false, true, false, true, true, false, true, true, true, false, false, true, true, false, true, true, true, true, true, false, false, false, true, false, false, true, false, true, true, true, false, true, true, false, true, false, true, false, true, true, true, false, true, false, false, true, false, false, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, false, false, true, false, false, true, true, true, false, true, false, true, true, false, true, true, false, false, false, true, true, false, true, false, false, false, false, false, false, true, true, true, false, true, false, false, true, false, false, false, false, false, true, true, false, true, true, true, false, false, false, false, true, false, true, true, true, true, false, true, true, true, true, false, false, true, true, true, false, true, false, false, true, false, true, true, false, true, true, true, false, false, true, true, false, true, true, true, true, true, false, false, false, true, false, false, true, false, true, true, true, false, true, true, false, true, false, true, false, true, true, true, false, true, false, false, true, false, false, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, false, false, false, true, true, true, false, true, false, false, false, false, false, false, false, false, true, true, false, true, false, true, true, false, false, true, true, true, false, false, false, false, false, true, true, true, false, false, true, true, false, false, true, true, false, false, false, false, true, false, false, false, true, true, true, true, false, false, true, false, true, false, false, true, false, true, false, true, false, false, false, false, false, true, false, false, false, false, true, false, false, false, true, true, true, false, false, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, true, false, false, false, true, true, false, true, true, true, true, false, true, false]);
            let encoded = BinVector::from_bools(&[false, false, false, false, false, false, false, true, true, true, false, true, false, false, false, false, false, false, false, false, true, true, false, true, false, true, true, false, false, true, true, true, false, false, false, false, false, true, true, true, false, false, true, true, false, false, true, true, false, false, false, false, true, false, false, false, true, true, true, true, false, false, true, false, true, false, false, true, false, true, false, true, false, false, false, false, false, true, false, false, false, false, true, false, false, false, true, true, true, false, false, true, true, true, false, false, true, false, true, false, true, false, false, false, false, true, false, true, false, false, false, false, true, true, false, true, true, true, true, true, false, true, false, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, false, false, false, true, true, true, false, true, false, false, false, false, false, false, false, false, true, true, false, true, false, true, true, false, false, true, true, true, false, false, false, false, false, true, true, true, false, false, true, true, false, false, true, true, false, false, false, false, true, false, false, false, true, true, false, true, false, false, true, false, true, false, false, true, false, true, false, true, false, false, false, false, false, true, false, false, false, false, true, false, false, false, true, true, true, false, false, true, true, true, false, false, true, false, true, false, true, false, false, false, false, true, false, true, false, false, false, false, true, true, false, true, true, true, true, true, false, true, false, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, false, true, false, false, false, false, true, false, false, false, true, true, true, true, false, true, false, false, false, true, false, true, false, false, true, true, true, false, false, true, false, false, false, true, true, true, false, true, true, true, true, false, true, false, true, false, false, false, true, true, false, false, false, false, true, false, false, true, true, true, false, false, false, false, true, false, true, true, false, true, true, false, true, true, true, true, true, false, true, false, false, false, true, false, true, true, false, true, false, false, false, true, true, false, false, false, true, true, true, false, false, false, false, true, false, true, true, true, false, true, false, false, true, true, false, true]);
            let encoded = BinVector::from_bools(&[false, false, false, false, false, true, false, false, false, false, true, false, false, false, true, true, true, true, false, true, false, false, false, true, false, true, false, false, true, true, true, false, false, true, false, false, false, true, true, true, false, true, true, true, true, false, true, false, true, false, false, false, true, true, false, false, false, false, true, false, false, true, true, true, false, false, false, false, true, false, true, true, false, true, true, false, true, true, true, true, true, false, true, false, false, false, true, false, true, true, false, true, false, false, true, false, true, true, false, false, false, true, true, true, false, false, false, false, true, false, false, true, true, true, false, true, false, false, true, true, true, false, false, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, false, true, false, true, false, false, true, false, false, false, true, true, true, true, false, true, false, false, false, true, false, true, false, false, true, true, true, false, false, true, false, false, false, true, true, true, false, true, true, true, true, false, true, false, true, false, false, false, true, true, false, false, false, false, true, false, false, true, true, true, false, false, false, false, true, false, true, true, false, true, true, false, true, true, true, true, true, false, true, false, false, false, true, false, true, true, false, true, false, false, true, false, true, true, false, false, false, true, true, true, false, false, false, false, true, false, false, true, true, true, false, true, false, false, true, true, true, false, false, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, false, true, true, true, false, true, true, false, false, false, false, false, false, false, true, true, false, false, true, false, true, true, true, false, true, false, false, true, true, false, false, false, false, true, true, true, true, false, true, true, true, true, true, true, true, false, false, true, false, false, false, false, false, false, false, false, true, true, true, false, true, true, true, false, false, true, false, true, false, false, true, false, false, false, false, false, true, true, true, false, false, false, false, true, false, true, false, false, true, true, false, false, true, true, false, false, false, true, false, false, true, false, false, false, false, false, true, false, true, true, true, false, true, true, true, false]);
            let encoded = BinVector::from_bools(&[false, true, false, false, false, true, true, true, false, true, true, false, false, false, false, false, false, false, true, true, false, false, true, false, true, true, true, false, true, false, false, true, true, false, false, false, false, true, true, true, true, false, true, true, true, true, true, true, true, false, false, true, false, false, false, false, false, false, false, false, true, true, true, false, true, true, true, false, false, true, false, true, false, false, true, false, false, false, false, false, true, true, true, false, false, false, false, true, false, true, false, false, true, true, false, false, false, true, true, false, false, false, true, false, false, true, false, false, false, false, true, false, true, false, true, true, true, false, true, true, true, true, true, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, false, true, true, true, false, true, true, false, false, false, false, false, false, false, true, true, false, false, true, false, true, true, true, false, true, false, false, true, true, false, false, false, false, true, true, true, true, false, true, true, true, true, true, true, true, false, false, true, false, false, false, false, false, false, false, false, true, true, true, false, true, true, true, false, false, true, false, true, false, false, true, false, false, false, false, false, true, true, true, false, false, false, false, true, false, true, false, false, true, true, false, false, false, true, true, false, false, false, true, true, false, true, false, false, false, false, true, false, true, false, true, true, true, false, true, true, true, true, true, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, true, false, true, true, false, true, true, true, true, false, false, true, false, false, false, true, true, false, false, false, true, true, false, true, true, true, true, false, false, true, false, true, false, true, true, false, false, false, false, false, true, false, true, false, true, true, false, true, true, false, false, false, true, true, false, false, false, false, true, true, true, false, true, false, true, true, false, true, true, true, false, true, true, false, true, true, true, true, false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, true, true, true, true, false, false, true, true, true, true, false, true, false, false, false, false, true, true, false, true, false]);
            let encoded = BinVector::from_bools(&[true, true, true, false, true, false, true, true, false, true, true, true, true, false, false, true, false, false, false, true, true, false, false, false, true, true, false, true, true, true, true, false, false, true, false, true, false, true, true, false, false, false, false, false, true, false, true, false, true, true, false, true, true, false, false, false, true, true, false, false, false, false, true, true, true, false, true, false, true, true, false, true, true, true, false, true, true, false, true, true, true, true, false, true, false, false, true, false, true, false, true, false, true, true, true, false, false, true, false, true, true, true, true, true, false, false, true, true, true, true, true, false, true, false, false, false, false, true, true, true, false, true, true, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, true, false, true, true, false, true, true, true, true, false, false, true, false, false, false, true, true, false, false, false, true, true, false, true, true, true, true, false, false, true, false, true, false, true, true, false, false, false, false, false, true, false, true, false, true, true, false, true, true, false, false, false, true, true, false, false, false, false, true, true, true, false, true, false, true, true, false, true, true, true, false, true, true, false, true, true, true, true, false, true, false, false, true, false, true, false, true, false, true, true, true, false, false, true, false, true, true, true, true, true, false, false, true, true, true, true, true, true, true, false, false, false, false, true, true, true, false, true, true, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, true, true, false, true, false, true, true, false, false, false, false, false, true, true, false, false, false, false, false, false, false, false, true, true, true, true, true, true, false, false, true, false, true, false, true, true, false, true, false, true, true, true, false, true, false, false, false, true, true, true, false, true, true, true, false, true, true, false, false, true, true, false, false, false, true, true, true, true, false, false, true, false, true, false, true, false, true, true, true, false, true, true, false, false, false, false, false, false, true, false, true, false, true, true, false, false, false, true, true, true, false, true, false, true, false, true, true, true, false, true, false, true, true, false, false, true]);
            let encoded = BinVector::from_bools(&[true, false, false, true, true, true, false, true, false, true, true, false, false, false, false, false, true, true, false, false, false, false, false, false, false, false, true, true, true, true, true, true, false, false, true, false, true, false, true, true, false, true, false, true, true, true, false, true, false, false, false, true, true, true, false, true, true, true, false, true, true, false, false, true, true, false, false, false, true, true, true, true, false, false, true, false, true, false, true, false, true, true, true, false, true, true, false, false, false, false, false, false, true, false, true, true, false, true, true, false, false, false, true, true, true, false, true, false, true, false, true, true, true, true, false, true, false, true, true, true, false, false, false, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, true, true, false, true, false, true, true, false, false, false, false, false, true, true, false, false, false, false, false, false, false, false, true, true, true, true, true, true, false, false, true, false, true, false, true, true, false, true, false, true, true, true, false, true, false, false, false, true, true, true, false, true, true, true, false, true, true, false, false, true, true, false, false, false, true, true, true, true, false, false, true, false, true, false, true, false, true, true, true, false, true, true, false, false, false, false, false, false, true, false, true, true, false, true, true, false, false, false, true, true, true, false, true, false, true, false, true, true, true, true, false, true, false, true, true, true, true, false, false, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, true, true, false, true, true, true, false, true, false, true, true, true, true, false, true, true, false, true, true, true, false, true, true, false, true, true, true, false, false, true, true, false, true, true, false, true, true, true, true, false, true, true, true, false, false, false, true, true, false, false, false, false, true, true, true, false, false, true, false, false, false, false, false, true, false, true, true, true, true, false, true, true, true, true, false, true, true, true, true, true, true, false, false, true, true, false, true, true, true, true, false, true, true, true, true, false, false, true, true, false, true, true, false, true, false, false, false, true, true, true, true, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[false, false, false, true, true, true, false, true, true, true, false, true, false, true, true, true, true, false, true, true, false, true, true, true, false, true, true, false, true, true, true, false, false, true, true, false, true, true, false, true, true, true, true, false, true, true, true, false, false, false, true, true, false, false, false, false, true, true, true, false, false, true, false, false, false, false, false, true, false, true, true, true, true, false, true, true, true, true, false, true, true, true, true, true, true, false, false, true, true, false, true, true, true, true, false, false, true, true, true, true, false, false, true, true, false, true, true, false, true, false, false, false, false, true, true, true, true, true, false, true, true, false, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, true, true, false, true, true, true, false, true, false, true, true, true, true, false, true, true, false, true, true, true, false, true, true, false, true, true, true, false, false, true, true, false, true, true, false, true, true, true, true, false, true, true, true, false, false, false, true, true, false, true, false, false, true, true, true, false, false, true, false, false, false, false, false, true, false, true, true, true, true, false, true, true, true, true, false, true, true, true, true, true, true, false, false, true, true, false, true, true, true, true, false, false, true, true, true, true, false, false, true, true, false, true, true, false, true, false, false, false, false, true, true, true, true, true, false, true, true, false, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, false, true, true, false, true, true, true, false, true, true, true, false, true, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, true, true, true, false, true, false, true, false, false, false, false, true, true, false, true, true, true, false, true, false, true, false, false, false, true, false, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, false, true, true, true, true, false, true, false, true, false, false, true, false, true, true, false, false, true, false, true, true, false, true, true, true, false, true, true, true, false, false, false, false, false, true, true, true, true, true, true, true, false, false, false, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, false, true, true, false, true, true, true, false, true, true, true, false, true, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, true, true, true, false, true, false, true, false, false, false, false, true, true, false, true, true, true, false, true, false, true, false, false, false, true, false, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, false, true, true, true, true, false, true, false, true, false, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, true, false, true, true, true, false, false, false, false, false, true, true, true, true, true, true, true, true, false, true, false, false, true, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, false, true, true, false, true, true, true, false, true, true, true, false, true, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, true, true, true, false, true, false, true, false, false, false, false, true, true, false, true, true, true, false, true, false, true, false, false, false, true, false, true, false, false, true, true, true, false, true, true, false, false, true, true, false, false, false, true, true, true, true, false, true, false, true, false, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, true, false, true, true, true, false, false, false, false, false, true, true, true, true, true, true, true, true, false, true, false, false, true, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, false, true, true, false, false, true, false, false, true, false, true, true, false, true, true, false, true, false, false, false, false, true, true, true, false, true, true, true, true, false, true, false, true, true, true, true, true, true, false, true, false, true, true, false, true, false, false, true, false, true, false, false, true, false, false, false, false, false, false, true, false, false, true, true, false, false, true, false, true, false, true, true, true, false, true, false, true, false, false, false, false, true, false, false, true, true, false, false, false, true, false, true, false, true, true, false, true, false, true, false, true, true, false, false, false, true, false, true, true, true, true, false, true, true, false, true]);
            let encoded = BinVector::from_bools(&[true, false, false, false, false, true, true, false, false, true, false, false, true, false, true, true, false, true, true, false, true, false, false, false, false, true, true, true, false, true, true, true, true, false, true, false, true, true, true, true, true, true, false, true, false, true, true, false, true, false, false, true, false, true, false, false, true, false, false, false, false, false, false, true, false, false, true, true, false, false, true, false, true, false, true, true, true, false, true, false, true, false, false, false, false, true, false, false, true, true, false, false, false, true, false, false, true, false, true, true, false, true, false, true, false, true, true, false, false, false, true, true, false, true, true, true, true, false, false, true, true, false, true, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, false, true, true, false, false, true, false, false, true, false, true, true, false, true, true, false, true, false, false, false, false, true, true, true, false, true, true, true, true, false, true, false, true, true, true, true, true, true, false, true, false, true, true, false, true, false, false, true, false, true, false, false, true, false, false, false, false, true, false, true, false, false, true, true, false, false, true, false, true, false, true, true, true, false, true, false, true, false, false, false, false, true, false, false, true, true, false, false, false, true, false, false, true, false, true, true, false, true, false, true, false, true, true, false, false, false, true, true, false, true, true, true, true, false, false, true, true, false, true, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, false, true, false, true, false, true, true, false, true, false, true, false, true, false, false, true, false, false, true, false, false, false, true, false, true, false, false, true, true, false, true, false, false, false, false, true, false, false, true, false, true, false, true, false, false, true, false, true, true, true, true, false, true, false, false, false, false, true, true, false, false, true, false, true, true, true, false, false, true, true, false, true, true, true, false, false, true, false, true, true, false, false, false, false, false, false, true, false, true, false, true, true, true, true, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, true, true, false, false, true, true, true]);
            let encoded = BinVector::from_bools(&[true, true, false, false, false, true, false, true, false, true, true, false, true, false, true, false, true, false, false, true, false, false, true, false, false, false, true, false, true, false, false, true, true, false, true, false, false, false, false, true, false, false, true, false, true, false, true, false, false, true, false, true, true, true, true, false, true, false, false, false, false, true, true, false, false, true, false, true, true, true, false, false, true, true, false, true, true, true, false, false, true, false, true, true, false, false, false, false, false, false, true, false, true, false, true, true, true, true, true, false, false, true, true, true, true, true, true, true, true, true, true, true, false, false, false, true, true, false, false, false, true, true, true, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, false, false, false, true, false, true, true, false, true, false, true, false, true, false, false, true, false, false, true, false, false, false, true, false, true, false, false, true, true, false, true, false, false, false, false, true, false, false, true, false, true, false, true, false, false, true, false, true, true, true, true, false, true, false, false, false, false, true, true, false, false, true, false, true, true, true, false, false, true, true, false, true, true, true, false, false, true, false, true, true, false, false, false, false, false, false, true, false, true, false, true, true, true, true, true, false, false, true, true, true, true, true, true, true, true, true, true, true, false, false, false, true, true, false, false, false, true, true, true, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, true, false, true, false, true, false, true, false, false, false, true, true, false, false, false, false, false, false, true, false, true, true, false, true, false, true, true, true, true, false, false, false, true, true, true, true, false, true, true, true, true, true, true, false, true, false, true, true, true, false, false, true, false, true, false, true, true, true, false, true, true, false, false, true, false, false, false, false, true, false, false, true, true, false, false, true, true, true, true, true, false, false, true, false, false, false, false, false, false, true, true, true, true, false, false, true, false, false, true, true, false, true, true, false, false, true, true, true, true, false, false, true, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, true, true, true, true, false, true, false, true, false, true, false, false, false, true, true, false, false, false, false, false, false, true, false, true, true, false, true, false, true, true, true, true, false, false, false, true, true, true, true, false, true, true, true, true, true, true, false, true, false, true, true, true, false, false, true, false, true, false, true, true, true, false, true, true, false, false, true, false, false, false, false, true, false, false, true, true, false, false, true, true, true, true, true, false, false, true, false, false, false, false, false, false, true, false, true, true, true, false, false, true, false, false, true, true, false, true, true, false, false, false, true, true, true, true, false, false, true, false, false, true, false, false, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, true, false, true, false, true, false, true, false, false, false, true, true, false, false, false, false, false, false, true, false, true, true, false, true, false, true, true, true, true, false, false, false, true, true, true, true, false, true, true, true, true, true, true, false, true, false, true, true, true, false, false, true, false, true, false, true, true, true, false, true, true, false, false, true, false, false, false, false, true, false, false, true, true, false, false, true, true, true, true, true, false, false, true, false, false, false, false, false, false, true, false, true, true, true, false, false, true, false, false, true, true, false, true, true, false, false, false, true, true, false, true, false, false, true, false, false, true, false, false, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, true, true, true, false, false, true, false, true, false, true, false, true, true, true, true, false, true, true, false, false, false, false, false, false, false, true, true, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, true, false, true, true, false, true, true, true, true, true, true, true, false, false, false, true, false, true, true, true, false, true, true, false, true, false, true, true, true, false, false, true, false, true, false, false, true, true, true, false, true, false, false, true, true, false, true, false, true, true, true, false, false, true, true, true, true, false, false, false, true, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, false, false, true, true, true, true, false, false, true, false, true, false, true, false, true, true, true, true, false, true, true, false, false, false, false, false, false, false, true, true, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, true, false, true, true, false, true, true, true, true, true, true, true, false, false, false, true, false, true, true, true, false, true, true, false, true, false, true, true, true, false, false, true, false, true, false, false, true, true, true, true, false, true, false, false, true, true, false, true, false, true, true, true, false, false, true, false, true, true, true, false, false, false, true, false, false, true, false, true, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, true, true, true, false, false, true, false, true, false, true, false, true, true, true, true, false, true, true, false, false, false, false, false, false, false, true, true, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, true, false, true, true, false, true, true, true, true, true, true, true, false, false, false, true, false, true, true, true, false, true, true, false, true, false, true, true, true, false, false, true, false, true, false, false, true, true, true, true, false, true, false, false, true, true, false, true, false, true, true, true, false, false, true, false, true, true, true, false, false, false, true, false, false, true, false, true, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, true, true, false, false, true, true, true, true, true, false, false, true, false, true, false, false, false, false, false, true, true, true, true, false, false, false, true, true, false, false, false, true, false, false, true, true, true, true, false, false, true, true, true, false, false, false, false, true, true, true, false, true, false, true, true, true, true, true, false, false, false, false, true, true, false, false, true, true, true, false, false, true, false, false, true, true, false, false, true, true, false, false, true, false, true, false, true, false, true, false, false, true, true, true, true, true, false, true, false, false, false, false, true, true, true, true, true, true, false, true, true, true, true, false, true, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, true, true, false, false, true, true, true, true, true, false, false, true, false, true, false, false, false, false, false, true, true, true, true, false, false, false, true, true, false, false, false, true, false, false, true, true, true, true, false, false, true, true, true, false, false, false, false, true, true, true, false, true, false, true, true, true, true, true, false, false, false, false, true, true, false, false, true, true, true, false, false, true, false, false, true, true, false, false, true, true, false, false, true, false, true, false, true, false, true, false, false, false, true, true, true, true, true, false, true, false, false, false, false, true, true, true, false, true, true, true, false, true, true, true, true, true, false, true, true, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, true, true, false, false, true, true, true, true, true, false, false, true, false, true, false, false, false, false, false, true, true, true, true, false, false, true, true, true, false, false, false, true, false, false, true, true, true, true, false, false, true, true, true, false, false, false, false, true, true, true, false, true, false, true, true, true, true, true, false, false, false, false, true, true, false, false, true, true, true, false, false, true, false, false, true, true, false, false, true, true, false, false, true, false, true, false, true, false, true, false, false, false, true, true, true, true, true, false, true, false, false, false, false, true, true, true, false, true, true, true, false, true, true, true, true, true, false, true, true, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, false, true, true, true, true, true, true, true, false, true, false, false, false, false, false, true, true, false, true, false, false, true, false, true, true, false, false, true, false, false, true, false, true, false, true, true, true, false, true, true, true, true, true, false, true, false, false, true, false, false, false, false, false, true, true, false, true, true, true, false, true, true, true, true, false, false, false, false, false, false, false, false, true, false, true, true, false, false, false, false, true, false, false, true, false, true, false, false, true, false, true, true, true, false, false, true, true, false, false, false, false, false, false, false, true, false, true, false, true, false, true, true, true, false, true, false]);
            let encoded = BinVector::from_bools(&[false, false, true, false, false, true, true, true, true, true, true, true, false, true, false, false, false, false, false, true, true, false, true, false, false, true, false, true, true, false, false, true, false, false, true, false, true, false, true, true, true, false, true, true, true, true, true, false, true, false, false, true, false, false, false, false, false, true, true, false, true, true, true, false, true, true, true, true, false, false, false, false, false, false, false, false, true, false, true, true, false, false, false, false, true, false, false, true, false, true, false, false, true, false, true, true, true, true, false, false, true, true, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, false, true, false, true, false, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, false, true, true, true, true, true, true, true, false, true, false, false, false, false, false, true, true, false, true, false, false, true, false, true, true, false, false, true, false, false, true, false, true, false, true, true, true, false, true, true, true, true, true, false, true, false, false, true, false, false, false, false, false, true, true, false, true, true, true, false, true, true, true, false, false, false, false, false, false, false, false, false, true, false, true, true, false, false, false, false, true, false, false, true, false, true, false, false, true, false, true, true, true, true, false, false, true, true, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, false, true, false, true, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, true, false, false, false, true, true, false, false, false, true, false, false, true, true, false, false, true, false, true, true, true, true, false, false, true, true, false, true, false, false, true, false, false, false, false, true, true, false, true, true, true, false, true, false, true, false, false, false, false, true, true, false, true, false, false, true, true, false, false, true, false, true, false, true, true, true, false, true, true, true, false, true, true, true, false, true, true, true, true, false, true, false, true, false, false, true, true, false, false, true, false, true, true, false, false, true, false, false, false, true, false, true, true, true, true, false, false, false, true, true, false, false, true, false, false, true]);
            let encoded = BinVector::from_bools(&[true, true, false, true, true, false, false, false, true, true, false, false, false, true, false, false, true, true, false, false, true, false, true, true, true, true, false, false, true, true, false, true, false, false, true, false, false, false, false, true, true, false, true, true, true, false, true, false, true, false, false, false, false, true, true, false, true, false, false, true, true, false, false, true, false, true, false, true, true, true, false, true, true, true, false, true, true, true, false, true, true, true, true, false, true, false, true, false, false, true, true, false, false, true, false, false, true, true, false, false, true, false, false, false, true, false, true, true, true, true, false, false, false, false, true, true, false, false, true, true, false, false, true, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, true, false, false, false, true, true, false, false, false, true, false, false, true, true, false, false, true, false, true, true, true, true, false, false, true, true, false, true, false, false, true, false, false, false, false, true, true, false, true, true, true, false, true, false, true, false, false, false, false, true, true, false, true, false, false, false, true, false, false, true, false, true, false, true, true, true, false, true, true, true, false, true, true, true, false, true, true, true, true, false, true, false, true, false, false, true, true, false, false, true, false, false, true, true, false, false, true, false, false, false, true, false, true, true, true, true, false, false, false, false, true, true, false, false, true, true, false, false, true, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, false, false, false, false, false, true, false, false, true, true, false, false, true, true, true, true, true, true, true, true, true, true, true, false, true, true, false, false, false, false, false, true, false, false, false, true, true, false, false, false, false, false, false, false, true, false, false, true, false, false, true, true, false, false, true, false, true, true, false, true, false, false, false, true, true, false, true, false, true, false, false, true, false, false, false, true, true, false, true, false, false, true, true, false, true, true, true, true, false, false, false, false, true, true, false, true, true, true, true, true, false, false, true, true, true, true, true, true, true, true, true, true, false, true, false, false]);
            let encoded = BinVector::from_bools(&[true, true, false, true, false, false, false, false, false, true, false, false, true, true, false, false, true, true, true, true, true, true, true, true, true, true, true, false, true, true, false, false, false, false, false, true, false, false, false, true, true, false, false, false, false, false, false, false, true, false, false, true, false, false, true, true, false, false, true, false, true, true, false, true, false, false, false, true, true, false, true, false, true, false, false, true, false, false, false, true, true, false, true, false, false, true, true, false, true, true, true, true, false, false, true, false, false, true, true, false, true, true, true, true, true, false, false, true, true, true, false, true, true, true, true, true, true, true, false, false, true, false, true, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, false, false, false, false, false, true, false, false, true, true, false, false, true, true, true, false, true, true, true, true, true, true, true, false, true, true, false, false, false, false, false, true, false, false, false, true, true, false, false, false, false, false, false, false, true, false, false, true, false, false, true, true, false, false, true, false, true, true, false, true, false, false, false, true, true, false, true, false, true, false, false, true, false, false, false, true, true, false, true, false, false, true, true, false, true, true, true, true, false, false, true, false, false, true, true, false, true, true, true, true, true, false, false, true, true, true, false, true, true, true, true, true, true, true, false, false, true, false, true, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, true, true, true, true, false, true, false, false, false, true, false, false, true, true, false, true, false, false, true, false, true, false, false, false, true, false, true, true, false, true, true, true, true, true, false, false, true, false, false, true, false, false, true, false, false, true, true, false, true, false, true, true, false, false, false, true, false, true, true, true, true, false, true, false, false, true, false, false, true, false, true, true, true, false, true, true, false, false, true, false, true, false, false, true, false, false, true, false, true, true, false, false, true, true, true, false, false, true, true, false, false, true, false, false, false, true, false, true, false, false, false, true, false, true, false, true]);
            let encoded = BinVector::from_bools(&[true, true, true, true, true, true, true, true, false, true, false, false, false, true, false, false, true, true, false, true, false, false, true, false, true, false, false, false, true, false, true, true, false, true, true, true, true, true, false, false, true, false, false, true, false, false, true, false, false, true, true, false, true, false, true, true, false, false, false, true, false, true, true, true, true, false, true, false, false, true, false, false, true, false, true, true, true, false, true, true, false, false, true, false, true, false, false, true, false, false, true, false, true, true, true, false, false, true, true, true, false, false, true, true, false, false, true, false, false, false, false, true, false, true, false, false, false, true, true, false, true, false, true, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, true, true, true, true, false, true, false, false, false, true, false, false, true, true, false, true, false, false, true, false, true, false, false, false, true, false, true, true, false, true, true, true, true, true, false, false, true, false, false, true, false, false, true, false, false, true, true, false, true, false, true, true, false, false, false, true, false, true, true, true, true, false, true, false, false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, false, true, false, false, true, false, true, true, true, false, false, true, true, true, false, false, true, true, false, false, true, false, false, false, false, true, false, true, false, false, false, true, true, false, true, false, true, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, true, true, true, false, true, true, true, false, false, false, true, true, true, false, false, true, true, true, false, true, true, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, true, true, true, false, true, true, true, true, true, true, true, true, false, true, true, true, false, true, true, true, false, false, true, true, false, false, false, false, false, false, true, true, false, true, true, false, true, false, true, true, true, false, false, true, true, false, false, false, true, false, true, false, false, true, false, true, false, false, false, true, false, true, true, true, true, true, false, false, true, true, false, false, false, true, true, false, false, false, false]);
            let encoded = BinVector::from_bools(&[false, true, true, true, true, true, true, false, true, true, true, false, false, false, true, true, true, false, false, true, true, true, false, true, true, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, true, true, true, false, true, true, true, true, true, true, true, true, false, true, true, true, false, true, true, true, false, false, true, true, false, false, false, false, false, false, true, true, false, true, true, false, true, false, true, true, true, false, false, true, true, false, false, false, true, false, true, false, false, true, true, false, true, false, false, false, true, false, true, true, true, true, true, false, false, true, true, true, false, false, false, true, true, false, false, false, false, true, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, true, true, true, false, true, true, true, false, false, false, true, true, true, false, false, true, true, true, false, true, true, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, true, true, true, false, true, true, true, true, true, true, true, true, false, true, true, true, false, true, true, true, false, false, true, true, false, false, false, false, false, false, true, true, false, true, true, false, true, false, true, true, true, false, false, true, true, false, false, false, true, false, true, true, false, true, true, false, true, false, false, false, true, false, true, true, true, true, true, false, false, true, true, true, false, false, false, true, true, false, false, false, false, true, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, false, true, false, false, false, true, false, false, false, true, false, false, true, true, false, false, true, true, false, true, true, true, false, false, true, true, false, true, false, false, false, false, false, false, false, false, true, true, false, false, false, false, false, true, true, true, false, true, true, false, false, true, true, true, false, true, false, true, true, false, true, true, false, false, true, false, true, false, false, false, true, true, true, true, true, true, true, true, false, false, true, true, false, true, false, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, false, false, false, false, false, true, true, false, true, false, false, false, true, true, false]);
            let encoded = BinVector::from_bools(&[false, false, true, false, false, true, false, false, false, true, false, false, false, true, false, false, true, true, false, false, true, true, false, true, true, true, false, false, true, true, false, true, false, false, false, false, false, false, false, false, true, true, false, false, false, false, false, true, true, true, false, true, true, false, false, true, true, true, false, true, false, true, true, false, true, true, false, false, true, false, true, false, false, false, true, true, true, true, true, true, true, true, false, false, true, true, false, true, false, true, true, true, true, true, false, true, true, true, true, true, false, true, true, true, true, true, false, false, false, false, true, false, true, true, false, true, false, false, false, false, true, true, true, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, false, true, false, false, false, true, false, false, false, true, false, false, true, true, false, false, true, true, false, true, true, true, false, false, true, true, false, true, false, false, false, false, false, false, false, false, true, true, false, false, false, false, false, true, true, true, true, true, true, false, false, true, true, true, false, true, false, true, true, false, true, true, false, false, true, false, true, false, false, false, true, true, true, true, true, true, true, true, false, false, true, true, false, true, false, true, true, true, true, true, false, true, true, true, true, true, false, true, true, true, true, true, false, false, false, false, true, false, true, true, false, true, false, false, false, false, true, true, true, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, false, false, true, true, false, true, true, true, false, true, false, false, true, false, false, false, false, false, false, false, true, true, true, true, false, false, true, true, true, false, false, false, false, true, false, true, false, true, true, true, false, true, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, true, false, false, true, false, true, false, true, true, false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, false, false, true, true, false, true, true, true, false, false, true]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, false, false, true, true, false, true, true, true, false, true, false, false, true, false, false, false, false, false, false, false, true, true, true, true, false, false, true, true, true, false, false, false, false, true, false, true, false, true, true, true, false, true, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, true, false, false, true, false, true, false, true, true, false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, false, false, false, true, true, false, true, true, true, true, false, false, true, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, false, false, true, true, false, true, true, true, false, true, false, false, true, false, false, false, false, false, false, false, true, true, true, true, false, false, true, true, true, false, false, false, false, true, false, true, false, true, true, true, false, true, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, true, false, false, true, false, true, false, true, true, false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, true, false, false, false, false, false, true, true, true, true, true, true, true, true, false, false, false, true, true, false, true, true, true, true, false, false, true, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, true, false, true, true, true, true, false, true, true, false, true, false, false, true, true, true, false, true, false, true, true, false, true, false, true, false, true, true, false, false, false, false, false, false, false, false, true, true, false, false, false, true, false, false, true, false, true, true, true, false, false, true, true, false, true, true, false, false, true, false, false, true, true, true, true, true, false, true, false, false, false, true, true, false, true, true, false, false, true, false, false, true, false, false, true, false, true, false, true, true, false, false, false, false, false, true, true, false, false, false, true, false, false, false, false, true, false, true, false, true, true, true, false, false, true, true]);
            let encoded = BinVector::from_bools(&[false, true, false, false, true, false, true, true, true, true, false, true, true, false, true, false, false, true, true, true, false, true, false, true, true, false, true, false, true, false, true, true, false, false, false, false, false, false, false, false, true, true, false, false, false, true, false, false, true, false, true, true, true, false, false, true, true, false, true, true, false, false, true, false, false, true, true, true, true, true, false, true, false, false, false, true, true, false, true, true, false, false, true, false, false, true, false, false, true, false, true, false, true, true, true, false, false, false, false, false, true, true, false, false, false, true, false, false, false, false, false, true, false, true, false, true, true, true, false, false, false, true, true, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, true, false, true, true, true, true, false, true, true, false, true, false, false, true, true, true, false, true, false, true, true, false, true, false, true, false, true, true, false, false, false, false, false, false, false, false, true, true, false, false, false, true, false, false, true, false, true, true, true, false, false, true, true, false, true, true, false, false, true, false, false, false, true, true, true, true, false, true, false, false, false, true, true, false, true, true, false, false, true, false, false, true, false, false, true, false, true, false, true, true, true, false, false, false, false, false, true, true, false, false, false, true, false, false, false, false, false, true, false, true, false, true, true, true, false, false, false, true, true, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, true, true, true, false, true, true, true, false, false, false, true, false, true, false, true, false, false, false, false, false, false, true, false, true, false, true, false, true, false, true, true, true, true, false, false, false, true, true, true, true, false, true, true, true, true, false, false, false, true, true, false, true, false, false, false, true, false, false, false, false, false, false, true, false, true, true, true, false, true, false, false, true, true, false, true, false, false, false, true, false, false, true, true, false, true, false, true, false, true, false, true, false, false, false, true, false, false, true, false, false, false, true, false, true, false, false, true, true, true, false, true, true, false, true, true, true]);
            let encoded = BinVector::from_bools(&[true, true, false, false, true, true, true, false, true, true, true, false, false, false, true, false, true, false, true, false, false, false, false, false, false, true, false, true, false, true, false, true, false, true, true, true, true, false, false, false, true, true, true, true, false, true, true, true, true, false, false, false, true, true, false, true, false, false, false, true, false, false, false, false, false, false, true, false, true, true, true, false, true, false, false, true, true, false, true, false, false, false, true, false, false, true, true, false, true, false, true, false, true, false, true, true, false, false, false, true, false, false, true, false, false, false, true, false, true, false, false, false, true, true, true, false, true, true, false, false, true, true, false, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, true, true, true, false, true, true, true, false, false, false, true, false, true, false, true, false, false, false, false, false, false, true, false, true, false, true, false, true, false, true, true, true, true, false, false, false, true, true, true, true, false, true, true, true, true, false, false, false, true, true, false, true, false, false, false, true, false, false, false, false, false, false, true, false, true, true, true, false, true, false, false, true, true, false, true, false, false, false, true, false, false, true, true, false, true, false, true, false, true, false, true, true, false, false, false, true, false, false, true, false, false, false, true, false, true, false, false, false, true, true, true, false, true, true, false, true, true, true, false, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, true, true, false, true, true, true, true, true, false, false, false, false, false, true, true, true, true, true, false, false, true, true, true, true, false, true, true, true, true, false, false, false, false, true, false, false, true, true, false, false, false, false, true, true, false, false, false, true, true, true, false, false, false, false, true, true, false, false, false, false, false, true, true, false, true, false, true, true, false, true, false, false, true, true, false, true, true, false, false, false, false, true, true, false, true, false, true, true, false, true, true, false, true, false, false, false, true, false, false, true, false, false, true, false, true, true, false, false, false, true, true, false, true, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, true, false, true, true, false, true, true, true, true, true, false, false, false, false, false, true, true, true, true, true, false, false, true, true, true, true, false, true, true, true, true, false, false, false, false, true, false, false, true, true, false, false, false, false, true, true, false, false, false, true, true, true, false, false, false, false, true, true, false, false, false, false, false, true, true, false, true, false, true, true, false, true, false, false, true, true, false, true, true, false, false, false, false, true, true, false, true, false, true, true, false, true, false, true, false, true, false, false, false, true, false, false, true, false, false, true, false, true, true, true, false, false, false, true, true, false, false, true, true, false, true, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, true, true, false, true, true, true, true, true, false, false, false, false, false, true, true, true, true, true, false, false, true, true, true, true, false, true, true, true, false, false, false, false, false, true, false, false, true, true, false, false, false, false, true, true, false, false, false, true, true, true, false, false, false, false, true, true, false, false, false, false, false, true, true, false, true, false, true, true, false, true, false, false, true, true, false, true, true, false, false, false, false, true, true, false, true, false, true, true, false, true, false, true, false, true, false, false, false, true, false, false, true, false, false, true, false, true, true, true, false, false, false, true, true, false, false, true, true, false, true, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, false, true, false, false, false, true, false, false, true, true, false, true, true, true, false, false, false, false, false, false, false, true, true, true, false, false, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, true, false, true, false, false, true, true, true, true, true, false, false, true, false, false, true, true, false, true, false, false, true, true, false, false, false, true, false, false, true, true, true, true, false, true, true, false, false, false, false, true, false, false, false, false, false, false, false, true, true, false, false, true, false, false, false, false, true, false, true, true, true, true, true, true, false, true, false, true, true, true, true, false, false, false]);
            let encoded = BinVector::from_bools(&[true, false, false, false, false, true, false, false, false, true, false, false, true, true, false, true, true, true, false, false, false, false, false, false, false, true, true, true, false, false, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, true, false, true, false, false, true, true, true, true, true, false, false, true, false, false, true, true, false, true, false, false, true, true, false, false, false, true, false, false, true, true, true, true, false, true, true, false, false, false, false, true, false, false, false, false, false, false, false, true, false, true, false, false, true, false, false, false, false, true, false, true, true, true, true, true, false, true, false, true, false, true, true, true, true, true, false, false, true, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, false, true, false, false, false, true, false, false, true, true, false, true, true, true, false, true, false, false, false, false, false, true, true, true, false, false, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, true, false, true, false, false, true, true, true, true, true, false, false, true, false, false, true, true, false, true, false, false, true, true, false, false, false, true, false, false, true, true, true, true, false, true, true, false, false, false, false, true, false, false, false, false, false, false, false, true, false, true, false, false, true, false, false, false, false, true, false, true, true, true, true, true, false, true, false, true, false, true, true, true, true, true, false, false, true, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, true, false, true, false, true, false, true, false, true, true, true, false, false, true, true, true, false, true, true, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, true, false, true, true, true, false, false, false, false, true, true, true, false, false, true, false, true, true, true, false, false, false, true, true, false, true, true, false, true, false, true, false, true, false, false, false, false, false, false, false, false, false, true, false, false, true, true, false, true, true, true, true, false, true, false, true, false, true, true, true, false, true, true, true, true, false, false, true, false, true, false, false, false, false, true, false, false, false, true, true, false]);
            let encoded = BinVector::from_bools(&[false, false, false, false, true, false, true, false, true, false, true, false, true, true, true, false, false, true, true, true, false, true, true, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, true, false, true, true, true, false, false, false, false, true, true, true, false, false, true, false, true, true, true, false, false, false, true, true, false, true, true, false, true, false, true, false, true, false, false, false, false, false, false, false, false, false, true, false, false, true, true, false, true, true, true, true, false, true, false, true, true, false, true, true, true, false, true, true, true, true, false, false, true, false, true, true, false, false, false, false, true, false, false, false, false, true, true, false, false, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, true, false, true, false, true, false, true, false, true, true, true, false, false, true, true, true, false, true, true, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, true, false, true, true, true, false, false, false, false, true, true, true, false, false, true, false, true, true, true, false, false, false, true, true, false, true, true, false, true, false, true, false, true, false, false, false, false, false, false, false, false, false, true, false, false, true, true, false, true, true, true, true, false, true, false, true, true, false, true, true, true, false, true, true, true, true, false, false, false, false, true, true, false, false, false, false, true, false, false, false, false, true, true, false, false, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, false, true, false, true, false, false, true, false, false, true, true, false, false, false, false, false, true, false, true, false, true, false, false, false, true, true, true, true, true, true, true, true, true, false, true, false, false, true, false, true, true, true, false, true, false, true, false, true, false, true, false, true, true, true, false, true, true, false, true, true, true, false, true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, false, false, false, true, false, false, true, false, true, true, true, false, true, false, true, false, true, false, false, false, true, true, false, true, false, false, false, false, false, false, false, true, true, true, true, false, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, false, true, false, true, false, false, true, false, false, true, true, false, false, false, false, false, true, false, true, false, true, false, false, false, true, true, true, true, true, true, true, true, true, false, true, false, false, true, false, true, true, true, false, true, false, true, false, true, false, true, false, true, true, true, false, true, true, false, true, true, true, false, true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, false, false, false, true, false, false, true, false, true, true, true, false, false, true, false, true, false, true, false, false, false, true, true, false, true, false, false, false, false, false, false, false, false, true, true, true, false, true, false, false, true, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, false, false, false, true, false, false, true, false, false, true, true, false, false, false, false, false, true, false, true, false, true, false, false, false, true, true, true, true, true, true, true, true, true, false, true, false, false, true, false, true, true, true, false, true, false, true, false, true, false, true, false, true, true, true, false, true, true, false, true, true, true, false, true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, false, false, false, true, false, false, true, false, true, true, true, false, false, true, false, true, false, true, false, false, false, true, true, false, true, false, false, false, false, false, false, false, false, true, true, true, false, true, false, false, true, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, true, true, true, true, false, false, true, false, false, false, false, true, false, false, false, false, false, false, true, true, true, true, true, false, true, false, false, false, true, false, true, true, false, false, false, true, true, true, true, true, true, false, true, false, false, true, true, true, true, false, true, true, false, true, true, false, true, true, true, true, true, false, false, false, true, true, true, false, false, true, true, false, false, true, true, false, false, false, false, false, false, true, true, true, true, true, false, true, true, false, false, true, true, false, true, true, false, true, true, false, false, false, true, true, true, true, false, false, false, true, true, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[false, true, true, false, true, true, true, true, false, false, true, false, false, false, false, true, false, false, false, false, false, false, true, true, true, true, true, false, true, false, false, false, true, false, true, true, false, false, false, true, true, true, true, true, true, false, true, false, false, true, true, true, true, false, true, true, false, true, true, false, true, true, true, true, true, false, false, false, true, true, true, false, false, true, true, false, false, true, true, false, false, false, false, false, false, true, true, true, true, true, false, true, true, false, true, false, true, true, false, true, true, false, true, true, false, false, false, true, true, true, false, true, false, false, false, true, true, true, false, true, true, false, false, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, true, true, true, true, false, false, true, false, false, false, false, true, false, false, false, false, false, false, true, true, true, true, true, false, true, false, false, false, true, false, true, true, false, false, false, true, true, true, true, true, true, false, true, false, false, true, true, true, true, false, true, true, false, true, true, false, true, true, true, true, true, false, false, false, true, true, true, false, false, true, true, false, false, true, true, false, false, false, false, false, false, true, true, true, true, true, false, true, true, false, true, false, true, true, false, true, true, false, true, true, false, false, false, true, true, true, false, true, false, true, false, true, true, true, false, true, true, false, false, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, false, true, false, true, true, true, true, false, true, false, true, true, false, false, false, true, false, true, false, false, false, true, true, true, true, true, false, true, false, true, false, false, true, true, false, true, true, true, false, true, true, true, true, false, false, true, false, true, true, false, true, false, false, true, false, false, false, false, true, false, false, false, true, false, true, true, false, false, true, false, false, true, false, false, false, false, true, true, true, true, false, true, false, true, true, false, false, true, true, false, true, false, true, true, false, false, true, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, true, true, true, false]);
            let encoded = BinVector::from_bools(&[false, true, false, false, false, true, false, true, true, true, true, false, true, false, true, true, false, false, false, true, false, true, false, false, false, true, true, true, true, true, false, true, false, true, false, false, true, true, false, true, true, true, false, true, true, true, true, false, false, true, false, true, true, false, true, false, false, true, false, false, false, false, true, false, false, false, true, false, true, true, false, false, true, false, false, true, false, false, false, false, true, true, true, true, false, true, false, true, true, false, false, true, true, false, true, true, false, true, true, false, false, true, false, false, false, false, false, false, false, false, true, false, false, true, true, true, false, false, true, true, true, true, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, false, true, false, true, true, true, true, false, true, false, true, true, false, false, false, true, false, true, false, false, false, true, true, true, true, true, false, true, false, true, false, false, true, true, false, true, true, true, false, true, true, true, true, false, false, true, false, true, true, false, true, false, false, true, false, false, false, false, true, false, false, false, true, false, true, true, false, false, true, false, false, true, false, false, false, false, true, true, true, true, false, true, false, true, true, false, false, true, true, false, true, true, false, false, true, false, false, true, false, false, false, false, false, false, false, false, true, false, false, true, true, true, false, false, true, true, true, true, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, false, true, true, false, true, false, true, true, true, true, false, false, true, false, false, false, true, false, true, false, false, true, false, true, true, false, true, false, false, true, false, true, false, false, true, true, false, true, false, false, true, false, false, true, false, true, true, false, false, true, false, false, true, false, true, false, false, false, false, false, true, false, false, true, true, false, false, true, true, false, false, false, true, true, true, false, false, true, true, true, false, false, false, false, false, false, true, false, true, false, true, false, false, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, false, false, true, false, false, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, true, false, true, true, false, true, false, true, true, true, true, false, false, true, false, false, false, true, false, true, false, false, true, false, true, true, false, true, false, false, true, false, true, false, false, true, true, false, true, false, false, true, false, false, true, false, true, true, false, false, true, false, false, true, false, true, false, false, false, false, false, true, false, false, true, true, false, false, true, true, false, false, false, true, true, true, false, false, true, true, true, false, false, false, false, false, false, true, false, true, false, true, true, false, false, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, false, false, true, true, false, false, true, true, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, false, true, true, false, true, false, true, true, true, true, false, false, true, false, false, false, true, false, true, false, false, true, false, true, true, false, true, false, false, true, false, false, false, false, true, true, false, true, false, false, true, false, false, true, false, true, true, false, false, true, false, false, true, false, true, false, false, false, false, false, true, false, false, true, true, false, false, true, true, false, false, false, true, true, true, false, false, true, true, true, false, false, false, false, false, false, true, false, true, false, true, true, false, false, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, false, false, true, true, false, false, true, true, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, true, false, true, true, true, true, false, true, true, true, true, false, true, false, true, false, false, false, true, false, true, true, true, true, true, true, false, false, true, true, false, false, false, false, false, false, true, false, false, true, true, true, false, false, false, false, true, false, true, false, false, true, false, false, false, true, false, false, true, false, true, false, true, true, false, true, true, true, true, true, true, true, false, true, false, true, false, false, false, false, true, false, true, true, true, false, true, false, false, true, true, false, false, true, true, true, false, false, true, false, false, true, true, true, false, true, false, false, true, true, false, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, true, false, true, false, true, true, true, true, false, true, true, true, true, false, true, false, true, false, false, false, true, false, true, true, true, true, true, true, false, false, true, true, false, false, false, false, false, false, true, false, false, true, true, true, false, false, false, false, true, false, true, false, false, true, false, false, false, true, false, false, true, false, true, false, true, true, false, true, true, true, true, true, true, true, false, true, false, true, false, false, false, false, true, false, true, true, true, false, true, false, false, true, true, true, false, false, true, true, true, false, false, true, false, false, true, true, true, false, true, true, false, false, true, true, false, false, true, false, true, false, true, false, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, true, false, true, true, true, true, false, true, true, true, true, false, true, false, true, false, false, false, true, false, true, true, true, true, true, true, false, false, true, true, false, false, false, false, false, false, true, false, false, true, true, true, false, false, false, false, true, false, true, false, false, true, false, false, false, true, false, false, true, false, true, false, true, true, false, true, true, true, true, true, true, true, false, true, false, true, false, false, false, false, true, false, true, true, true, false, true, false, false, true, true, true, false, false, true, true, true, false, false, true, true, false, true, true, true, false, true, true, false, false, true, true, false, false, true, false, true, false, true, false, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, true, false, false, true, true, false, true, true, false, false, false, true, true, false, true, false, true, false, true, false, true, true, true, false, false, false, true, false, false, false, false, false, true, false, true, false, false, true, false, true, true, false, true, true, false, false, false, false, true, true, false, false, true, false, true, false, false, false, true, false, false, false, true, false, true, false, false, true, true, false, false, true, true, true, false, false, false, false, true, true, true, false, false, true, true, false, false, false, false, false, true, false, true, false, true, true, false, false, false, false, true, false, true, false, false, false, false, true, true, false, false, false, true, false, true, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, true, false, false, true, true, false, true, true, false, false, false, true, true, false, true, false, true, false, true, false, true, true, true, false, false, false, true, false, false, false, false, false, true, false, true, false, false, true, false, true, true, false, true, true, false, false, false, false, true, true, false, false, true, false, true, false, false, false, true, false, false, false, true, false, true, false, false, true, true, false, false, true, true, true, false, false, false, false, true, true, true, false, false, true, true, false, false, false, false, false, false, true, false, true, false, true, true, false, false, false, false, true, false, true, false, false, false, false, false, true, true, false, false, false, false, true, false, true, false, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, true, false, false, true, true, false, true, true, false, false, false, true, true, false, true, false, true, false, true, false, true, true, false, false, false, false, true, false, false, false, false, false, true, false, true, false, false, true, false, true, true, false, true, true, false, false, false, false, true, true, false, false, true, false, true, false, false, false, true, false, false, false, true, false, true, false, false, true, true, false, false, true, true, true, false, false, false, false, true, true, true, false, false, true, true, false, false, false, false, false, false, true, false, true, false, true, true, false, false, false, false, true, false, true, false, false, false, false, false, true, true, false, false, false, false, true, false, true, false, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, false, false, false, true, true, false, false, true, false, false, false, false, false, false, true, false, true, true, true, true, true, false, false, true, false, false, false, false, false, false, false, true, true, true, false, false, true, false, false, false, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, true, true, false, false, true, true, false, true, true, false, false, true, false, true, true, false, false, false, true, true, false, true, false, true, false, true, true, true, true, true, false, true, false, false, false, false, true, true, true, true, false, false, false, true, false, false, true, true, true, false, false, false, true, true, true, false, true, false, false, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, false, false, false, true, true, false, false, true, false, false, false, false, false, false, true, false, true, true, true, true, true, false, false, true, false, false, false, false, false, false, false, true, true, true, false, false, true, false, false, false, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, true, true, false, false, true, true, false, true, true, false, false, true, false, true, true, false, false, false, true, true, false, true, false, true, false, true, true, true, true, true, false, true, false, false, true, false, false, true, true, true, true, false, false, false, true, false, false, true, true, true, true, false, false, false, true, true, true, false, false, true, false, false, true, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, false, false, false, true, true, false, false, true, false, false, false, false, false, false, true, false, true, true, true, true, true, false, false, true, false, false, false, false, false, false, false, true, true, true, false, false, true, false, false, false, false, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, true, true, false, false, true, true, false, true, true, false, false, true, false, true, true, false, false, false, true, true, false, true, false, true, false, true, true, true, true, true, false, true, false, false, true, false, false, true, true, true, true, false, false, false, true, false, false, true, true, true, true, false, false, false, true, true, true, false, false, true, false, false, true, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, true, true, true, false, false, true, false, false, true, false, false, false, false, false, true, false, true, false, true, true, true, true, false, false, false, true, true, false, true, false, false, false, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, true, true, false, true, true, false, true, false, true, false, false, true, false, true, true, true, true, false, true, true, true, true, false, true, false, true, true, true, true, false, false, true, false, false, true, false, true, true, true, true, true, true, true, true, false, false, true, true, true, false, true, true, false, true, true, true, false, true, false, false, false, false, true, true, true, false, false, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, false, true, true, true, false, false, true, false, false, true, false, false, false, false, false, true, false, true, false, true, true, true, true, false, false, false, true, true, false, true, false, false, false, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, true, true, false, true, true, false, true, false, true, false, false, true, false, true, true, true, true, false, true, true, true, true, false, true, false, true, true, true, true, false, false, true, false, false, true, false, true, true, true, true, true, true, true, true, true, false, false, true, true, true, false, true, true, false, true, true, true, false, true, false, false, false, false, false, true, true, true, true, false, false, true, true, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, true, true, true, false, false, true, false, false, true, false, false, false, false, false, true, true, true, false, true, true, true, true, false, false, false, true, true, false, true, false, false, false, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, true, true, false, true, true, false, true, false, true, false, false, true, false, true, true, true, true, false, true, true, true, true, false, true, false, true, true, true, true, false, false, true, false, false, true, false, true, true, true, true, true, true, true, true, true, false, false, true, true, true, false, true, true, false, true, true, true, false, true, false, false, false, false, false, true, true, true, true, false, false, true, true, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, false, true, false, false, true, true, false, false, false, true, false, false, true, true, false, false, true, false, false, false, true, true, true, false, false, false, false, true, false, false, true, false, false, false, false, false, true, false, false, true, false, false, false, false, false, true, false, true, true, true, false, true, false, true, true, false, true, false, false, false, false, true, true, false, false, true, true, true, false, true, false, true, true, true, false, false, true, true, false, false, false, true, false, true, false, true, false, true, false, true, false, false, false, true, false, true, true, false, false, true, false, false, true, true, false, true, true, false, true, true, false, true, false, false, false, true]);
            let encoded = BinVector::from_bools(&[false, false, false, false, false, true, false, false, true, true, false, false, false, true, false, false, true, true, false, false, true, false, false, false, true, true, true, false, false, false, false, true, false, false, true, false, false, false, false, false, true, false, false, true, false, false, false, false, false, true, false, true, true, true, false, true, false, true, true, false, true, false, false, false, false, true, true, false, false, true, true, true, false, true, false, true, true, true, false, false, true, true, false, false, false, true, false, true, false, true, false, true, false, true, false, false, false, false, true, false, true, true, false, false, true, false, false, true, true, false, true, true, true, false, true, true, false, true, true, false, false, false, true, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, false, true, false, false, true, true, false, false, false, true, false, false, true, true, false, false, true, false, false, false, true, true, true, false, false, false, false, true, false, false, true, false, false, false, false, false, true, false, false, true, false, false, false, false, false, true, false, true, true, true, false, true, false, true, true, false, true, false, false, false, false, true, true, false, false, true, true, true, false, true, false, true, true, true, false, false, true, true, false, false, false, false, false, true, false, true, false, true, false, true, false, false, false, false, true, false, true, true, false, false, true, false, false, true, true, false, true, true, true, false, true, true, false, true, true, false, false, false, true, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, true, true, false, false, false, false, false, false, true, false, true, false, false, true, true, true, true, true, false, false, true, true, false, false, false, true, false, true, false, true, true, false, true, false, false, true, false, false, false, true, true, false, false, true, false, false, false, true, false, true, false, true, false, true, false, true, true, true, false, true, true, true, true, false, false, false, false, false, false, true, true, true, true, true, true, true, false, false, false, true, true, false, false, false, false, true, true, false, true, true, true, true, true, false, false, true, false, true, true, true, false, true, true, false, true, true, true, false, true, true, true, true, true, true, false, true]);
            let encoded = BinVector::from_bools(&[false, false, true, false, true, true, false, false, false, false, false, false, true, false, true, false, false, true, true, true, true, true, false, false, true, true, false, false, false, true, false, true, false, true, true, false, true, false, false, true, false, false, false, true, true, false, false, true, false, false, false, true, false, true, false, true, false, true, false, true, true, true, false, true, true, true, true, false, false, false, false, false, false, true, true, true, true, true, true, true, false, false, false, true, true, false, false, false, false, true, true, false, true, true, false, true, true, true, false, false, true, false, true, true, true, false, true, true, false, true, false, true, true, false, true, true, true, true, true, true, true, false, false, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, true, true, false, false, false, false, false, false, true, false, true, false, false, true, true, true, true, true, false, false, true, true, false, false, false, true, false, true, false, true, true, false, true, false, false, true, false, false, false, true, true, false, false, true, false, false, false, false, false, true, false, true, false, true, false, true, true, true, false, true, true, true, true, false, false, false, false, false, false, true, true, true, true, true, true, true, false, false, false, true, true, false, false, false, false, true, true, false, true, true, false, true, true, true, false, false, true, false, true, true, true, false, true, true, false, true, false, true, true, false, true, true, true, true, true, true, true, false, false, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, true, true, true, false, false, true, true, false, true, true, true, true, true, false, true, false, false, false, false, false, false, true, true, true, false, true, true, false, true, true, true, true, true, true, false, true, false, true, true, true, true, false, true, true, false, true, false, false, false, false, false, true, false, false, true, false, false, false, true, true, false, true, true, true, true, false, true, false, true, true, false, false, false, true, true, false, false, false, false, false, true, true, false, false, true, false, false, false, false, false, true, true, false, false, true, false, true, true, true, true, true, false, true, false, false, true, true, false, false, true, false, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, false, false, true, true, true, false, false, true, true, false, true, true, true, true, true, false, true, false, false, false, false, false, false, true, true, true, false, true, true, false, true, true, true, true, true, true, false, true, false, true, true, true, true, false, true, true, false, true, false, false, false, false, false, true, false, false, true, false, false, false, true, true, false, true, true, true, true, false, true, false, true, true, false, false, false, true, true, false, false, false, false, false, true, true, false, false, true, false, false, false, false, false, false, true, true, false, false, true, false, true, true, true, true, true, false, true, false, false, false, true, true, false, false, true, false, false, true, false, true, false, false, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, true, true, true, false, false, true, true, false, true, true, false, true, true, false, true, false, false, false, false, false, false, true, true, true, false, true, true, false, true, true, true, true, true, true, false, true, false, true, true, true, true, false, true, true, false, true, false, false, false, false, false, true, false, false, true, false, false, false, true, true, false, true, true, true, true, false, true, false, true, true, false, false, false, true, true, false, false, false, false, false, true, true, false, false, true, false, false, false, false, false, false, true, true, false, false, true, false, true, true, true, true, true, false, true, false, false, false, true, true, false, false, true, false, false, true, false, true, false, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, false, true, false, true, false, false, false, false, false, false, true, true, true, false, true, true, true, true, true, false, false, false, true, false, false, true, false, false, false, false, true, false, false, false, true, true, true, true, false, false, false, true, true, false, false, true, false, false, false, false, false, false, false, true, true, false, true, true, true, true, true, false, true, true, false, false, true, true, false, false, true, false, true, false, false, false, true, true, true, false, true, true, false, true, true, false, false, false, false, false, true, false, true, false, false, true, false, false, false, true, true, true, true, false, false, false, false, false, true, true, false, false, false, true, false, true]);
            let encoded = BinVector::from_bools(&[false, false, true, false, false, true, false, true, false, false, false, false, false, false, true, true, true, false, true, true, true, true, true, false, false, false, true, false, false, true, false, false, false, false, true, false, false, false, true, true, true, true, false, false, false, true, true, false, false, true, false, false, false, false, false, false, false, true, true, false, true, true, true, true, true, false, true, true, false, false, true, true, false, false, true, false, true, false, false, false, true, true, true, false, true, true, false, true, true, false, false, false, false, false, false, true, false, true, false, false, true, false, false, false, true, true, true, true, false, false, false, false, false, false, true, true, false, false, true, false, true, false, false, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, false, true, false, true, false, false, false, false, false, false, true, true, true, false, true, true, true, true, true, false, false, false, true, false, false, true, false, false, false, false, true, false, false, false, true, true, true, true, false, false, false, true, true, false, false, true, false, false, false, false, false, false, false, true, true, false, true, true, true, true, true, false, true, true, false, false, true, true, false, false, true, false, true, false, false, false, true, true, true, false, true, true, false, true, true, false, false, false, false, false, false, true, false, true, false, false, true, false, false, false, true, false, true, true, false, false, false, false, false, false, true, true, false, false, true, false, true, false, false, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, false, false, true, false, true, false, false, false, true, false, true, true, false, true, true, false, true, false, false, true, false, true, true, false, true, false, true, true, true, false, false, false, false, false, false, false, true, false, true, false, true, true, false, false, true, false, true, true, true, true, false, true, true, false, false, false, true, true, true, false, false, true, false, true, true, true, false, true, true, false, false, false, true, true, false, true, false, false, false, true, false, true, false, true, true, true, false, true, true, false, false, true, true, true, false, true, false, true, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, false, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, true, false, false, true, false, true, false, false, false, true, false, true, true, false, true, true, false, true, false, false, true, false, true, true, false, true, false, true, true, true, false, false, false, false, false, false, false, true, false, true, false, true, true, false, false, true, false, true, true, true, true, false, true, true, false, false, false, true, true, true, false, false, true, false, true, true, true, false, true, true, false, false, false, true, true, false, true, false, false, false, true, false, true, false, true, true, true, false, true, true, false, false, false, true, true, true, false, true, false, true, false, false, true, false, false, false, false, true, true, false, false, false, true, false, false, true, false, false, true, false, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, false, false, true, false, true, false, false, false, true, false, true, true, false, true, true, false, true, false, false, true, false, true, true, false, true, false, true, true, true, false, false, false, false, false, false, false, true, false, true, false, true, true, false, false, true, false, true, true, true, true, false, true, true, false, false, false, true, true, true, false, false, true, false, true, true, true, false, true, true, false, false, false, true, true, false, true, false, false, false, true, false, true, false, true, true, true, false, true, true, false, false, false, true, true, true, false, true, false, true, false, false, true, false, false, false, false, true, true, false, false, false, true, false, false, true, false, false, true, false, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, true, false, false, true, true, false, false, true, true, false, true, true, false, false, false, false, true, true, true, true, true, true, false, true, true, false, false, false, false, false, true, true, true, true, false, false, false, true, false, false, true, false, false, false, false, false, true, false, false, false, true, false, false, false, true, false, true, true, true, true, false, true, false, true, false, true, false, false, true, false, true, true, false, false, false, true, false, true, false, false, false, false, false, false, false, false, true, true, true, false, true, false, false, false, true, false, true, true, false, true, false, false, false, true, false, true, true, false, false, true, true, false, false, false, true, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, true, false, false, true, true, false, false, true, true, false, true, true, false, false, false, false, true, true, true, true, true, true, false, true, true, false, false, false, false, false, true, true, true, true, false, false, false, true, false, false, true, false, false, false, false, false, true, false, false, false, true, false, false, false, true, false, true, true, true, true, false, true, false, true, false, true, false, false, true, false, true, true, false, false, false, true, false, true, false, false, false, false, false, false, false, false, true, true, true, false, false, true, false, false, false, true, false, true, true, false, true, false, false, false, true, false, false, true, true, false, false, true, true, false, false, false, false, true, true, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, true, false, false, true, true, false, false, true, true, false, true, true, false, false, false, false, true, true, true, true, true, true, false, true, true, false, false, false, false, false, true, true, false, true, false, false, false, true, false, false, true, false, false, false, false, false, true, false, false, false, true, false, false, false, true, false, true, true, true, true, false, true, false, true, false, true, false, false, true, false, true, true, false, false, false, true, false, true, false, false, false, false, false, false, false, false, true, true, true, false, false, true, false, false, false, true, false, true, true, false, true, false, false, false, true, false, false, true, true, false, false, true, true, false, false, false, false, true, true, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, true, false, true, true, true, true, false, false, true, true, true, true, false, true, false, true, true, true, true, true, true, true, false, true, true, false, true, true, true, false, false, false, false, true, true, true, true, true, false, false, false, false, false, false, true, true, true, false, false, true, false, true, true, true, true, false, false, false, true, false, false, true, false, false, true, false, false, true, true, true, false, false, true, false, true, false, true, false, false, true, true, false, true, false, true, false, true, true, false, true, false, true, true, true, false, true, true, true, true, true, false, false, false, false, false, true, true, true, false, false, false, true, false, false, false, true]);
            let encoded = BinVector::from_bools(&[false, false, true, true, true, false, true, true, true, true, false, false, true, true, true, true, false, true, false, true, true, true, true, true, true, true, false, true, true, false, true, true, true, false, false, false, false, true, true, true, true, true, false, false, false, false, false, false, true, true, true, false, false, true, false, true, true, true, true, false, false, false, true, false, false, true, false, false, true, false, false, true, true, true, false, false, true, false, true, false, true, false, false, true, true, false, true, false, true, false, true, true, false, true, true, false, true, true, true, false, true, true, true, true, true, false, false, false, false, false, false, true, true, true, false, false, false, true, false, false, false, false, false, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, true, false, true, true, true, true, false, false, true, true, true, true, false, true, false, true, true, true, true, true, true, true, false, true, true, false, true, true, true, false, false, false, false, true, true, true, true, true, false, false, true, false, false, false, true, true, true, false, false, true, false, true, true, true, true, false, false, false, true, false, false, true, false, false, true, false, false, true, true, true, false, false, true, false, true, false, true, false, false, true, true, false, true, false, true, false, true, true, false, true, true, false, true, true, true, false, true, true, true, true, true, false, false, false, false, false, false, true, true, true, false, false, false, true, false, false, false, false, false, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, false, false, true, false, true, true, true, true, false, true, true, false, true, false, false, false, true, false, false, true, false, false, false, true, false, true, false, false, false, true, false, false, false, true, true, false, false, false, true, false, true, true, false, true, true, true, true, false, false, true, true, false, true, true, true, false, true, true, true, false, false, true, false, false, false, false, false, true, false, true, true, false, true, false, true, false, false, true, false, false, false, false, false, true, false, false, true, true, true, true, false, false, true, true, true, true, true, true, false, true, true, false, false, false, false, false, false, false, true, false, true, false, false, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, false, false, false, false, true, false, true, true, true, true, false, true, true, false, true, false, false, false, true, false, false, true, false, false, false, true, false, true, false, false, false, true, false, false, false, true, true, false, false, false, true, false, true, true, false, true, true, true, true, false, false, true, true, false, true, true, true, false, true, true, true, false, false, true, false, false, false, false, false, true, false, true, true, false, true, false, true, false, false, true, false, false, false, false, false, true, false, false, true, true, true, true, false, false, false, true, true, true, true, true, true, false, true, true, false, false, false, false, true, false, false, false, true, false, true, false, false, false, true, false, true, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, false, false, true, false, true, true, true, true, false, true, true, false, true, false, false, false, true, false, false, true, false, false, false, true, false, true, false, false, false, true, false, false, false, true, true, false, false, false, true, false, true, true, false, true, true, true, true, false, false, true, true, false, true, true, true, false, true, true, true, false, false, true, false, false, false, false, false, true, false, true, true, false, true, false, true, false, false, true, false, false, false, false, false, true, false, false, true, true, true, true, false, false, false, true, true, true, true, true, true, false, true, true, false, false, false, false, true, false, false, false, true, false, true, false, false, false, true, false, true, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, false, true, true, true, false, true, true, false, true, true, true, false, false, true, false, true, true, false, true, true, false, true, false, false, true, true, false, false, true, true, false, true, true, false, false, false, true, true, false, true, false, false, false, false, true, false, false, false, true, true, false, false, false, false, false, false, true, false, false, true, true, false, false, false, false, false, false, true, true, true, false, true, false, true, true, true, false, true, false, false, false, false, true, true, false, false, false, true, false, false, true, false, true, false, true, true, true, true, true, true, false, true, true, false, false, false, false, false, true, false, true, true, false, true, true, true]);
            let encoded = BinVector::from_bools(&[false, true, false, true, false, true, true, true, false, true, true, false, true, true, true, false, false, true, false, true, true, false, true, true, false, true, false, false, true, true, false, false, true, true, false, true, true, false, false, false, true, true, false, true, false, false, false, false, true, false, false, false, true, true, false, false, false, false, false, false, true, false, false, true, true, false, false, false, false, false, false, true, true, true, false, true, false, true, true, true, false, true, false, false, false, false, true, true, false, false, false, true, false, false, false, true, false, true, false, true, true, true, true, true, true, false, true, true, false, false, false, false, false, false, true, false, true, true, false, false, true, true, true, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, false, true, true, true, false, true, true, false, true, true, true, false, false, true, false, true, true, false, true, true, false, true, false, false, true, true, false, false, true, true, false, true, true, false, false, false, true, true, false, true, false, false, false, false, true, false, false, false, true, true, false, false, false, false, false, false, true, false, false, true, true, false, false, false, false, false, false, true, true, true, false, true, false, true, true, true, false, true, false, false, false, false, true, true, false, false, false, true, false, false, false, true, false, true, false, true, true, true, true, true, false, false, true, true, false, false, false, false, false, false, true, false, true, true, false, false, true, true, true, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, false, false, false, false, false, true, true, true, false, false, true, true, false, false, true, true, true, true, true, true, false, true, true, true, false, false, false, true, true, false, true, true, true, true, false, false, false, false, true, true, false, true, true, true, false, false, true, false, true, false, true, false, true, true, false, true, false, false, true, true, false, false, true, true, false, true, true, false, false, true, true, false, true, true, true, false, true, true, false, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, true, true, false, true, false, true, true, false, true, true, false, false, false, true, false, false, false, false, false, false, true]);
            let encoded = BinVector::from_bools(&[false, false, true, false, false, false, false, false, false, true, true, true, false, false, true, true, false, false, true, true, true, true, true, true, false, true, true, true, false, false, false, true, true, false, true, true, true, true, false, false, false, false, true, true, false, true, true, true, false, false, true, false, true, false, true, false, true, true, false, true, false, false, true, true, false, false, true, true, false, true, true, false, false, true, true, false, true, true, true, false, true, true, false, false, false, false, false, false, false, false, true, true, false, true, true, false, true, false, true, true, true, true, false, true, false, true, true, false, true, true, false, false, false, false, true, false, false, false, true, false, false, false, false, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, false, false, true, false, false, true, true, true, false, false, true, true, false, false, true, true, true, true, true, true, false, true, true, true, false, false, false, true, true, false, true, true, true, true, false, false, false, false, true, true, false, true, true, true, false, false, true, false, true, false, true, false, true, true, false, true, false, false, true, true, false, false, true, true, false, true, true, false, false, true, true, false, true, true, true, false, true, true, false, false, false, false, false, false, false, false, true, true, false, true, true, false, true, false, true, true, true, true, false, true, false, true, true, false, true, true, false, false, false, false, true, false, false, false, true, false, false, false, false, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, true, false, false, true, true, true, false, false, true, false, false, true, false, false, true, false, false, true, false, false, true, false, true, false, false, false, true, false, true, true, true, false, false, false, true, false, false, false, false, false, false, false, true, false, true, true, true, true, false, true, false, false, false, true, false, true, false, false, true, true, false, false, true, true, true, true, true, true, false, false, true, true, false, true, false, false, true, false, false, false, true, true, true, false, false, false, true, true, true, true, true, false, true, false, true, true, true, false, false, false, false, false, false, false, true, true, false, true, true, false, false, false, true, true, false, true]);
            let encoded = BinVector::from_bools(&[false, false, false, false, true, false, false, true, true, true, false, false, true, false, false, true, false, false, true, false, false, true, false, false, true, false, true, false, false, false, true, false, true, true, true, false, false, false, true, false, false, false, false, false, false, false, true, false, true, true, true, true, false, true, false, false, false, true, false, true, false, false, true, true, false, false, true, true, true, true, true, true, false, false, true, true, false, true, false, false, true, false, false, false, true, true, true, false, false, false, true, true, true, true, true, true, false, true, false, true, true, true, false, false, false, false, false, false, false, true, false, true, false, true, true, false, false, false, true, true, true, false, true, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, true, false, false, true, true, true, false, false, true, false, false, true, false, false, true, false, false, true, false, false, true, false, true, false, false, false, true, false, true, true, true, false, false, false, true, false, false, false, false, false, false, false, true, false, true, true, true, true, false, true, false, false, false, true, false, true, false, false, true, true, false, false, true, true, true, true, true, true, false, false, true, true, false, true, false, false, true, false, false, false, true, true, true, false, false, false, true, true, true, true, true, true, false, true, false, true, true, true, false, false, false, false, false, false, false, true, false, true, false, true, true, false, false, false, true, true, false, false, true, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, true, true, false, false, false, true, false, true, true, false, true, false, false, true, true, true, true, true, false, true, true, false, true, true, true, true, true, false, true, false, true, false, false, true, false, false, false, true, true, true, true, true, true, false, true, true, false, false, true, true, true, true, true, false, false, true, false, false, false, true, false, true, true, false, true, true, true, false, false, true, false, true, true, false, true, false, true, true, false, true, true, true, false, false, true, true, false, true, false, false, true, true, true, true, false, true, false, false, true, false, true, false, true, false, false, true, false, false, false, false, false, true, false, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, true, true, false, false, false, true, false, true, true, false, true, false, false, true, true, true, true, true, false, true, true, false, true, true, true, true, true, false, true, false, true, false, false, true, false, false, false, true, true, true, true, true, true, false, true, true, false, false, true, true, true, true, true, false, false, true, false, false, false, true, false, true, true, false, true, true, true, false, false, true, false, true, true, false, true, false, true, true, false, true, true, true, false, false, true, true, false, true, false, false, false, true, true, true, true, false, true, false, false, true, false, true, false, true, false, false, false, true, false, false, false, false, false, true, true, false, false, true, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, true, true, false, false, false, true, false, true, true, false, true, false, false, true, true, true, true, true, false, true, true, false, true, true, true, true, true, false, true, false, true, false, false, true, false, false, false, true, true, true, true, true, true, false, true, true, false, false, true, true, false, true, true, false, false, true, false, false, false, true, false, true, true, false, true, true, true, false, false, true, false, true, true, false, true, false, true, true, false, true, true, true, false, false, true, true, false, true, false, false, false, true, true, true, true, false, true, false, false, true, false, true, false, true, false, false, false, true, false, false, false, false, false, true, true, false, false, true, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, true, true, false, false, true, false, false, true, false, true, false, false, false, false, true, true, true, true, true, false, true, false, false, false, true, true, true, true, true, true, false, false, true, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, true, true, true, true, true, false, true, false, true, true, false, false, false, false, false, false, false, false, true, true, true, true, false, true, false, true, false, false, true, false, false, false, false, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, true, true, false, true, true, true, true, true, true, false, false, true, true, true, false, true, true, false, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, true, true, false, false, true, false, false, true, false, true, false, false, false, false, true, true, true, true, true, false, true, false, false, false, true, true, true, true, true, true, false, false, true, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, true, true, true, true, true, false, true, false, true, true, false, false, false, false, false, false, false, false, true, true, true, true, false, true, false, true, false, false, true, false, false, false, false, true, false, false, true, true, true, true, false, false, true, false, true, false, true, false, false, true, true, false, true, true, true, true, true, false, true, false, false, true, true, true, false, false, true, true, false, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, true, true, false, false, true, false, false, true, false, true, false, false, false, false, true, true, true, true, true, false, true, false, false, false, true, true, true, true, true, true, false, false, true, false, false, false, false, false, false, true, false, true, false, true, false, false, false, false, false, true, true, true, true, true, false, true, false, true, true, false, false, false, false, false, false, false, false, true, true, true, true, false, true, false, true, false, false, true, false, false, false, false, true, false, false, true, true, true, true, false, false, true, false, true, false, true, false, false, true, true, false, true, true, true, true, true, false, true, false, false, true, true, true, false, false, true, true, false, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, true, true, true, true, true, true, true, false, true, false, false, false, false, true, true, true, false, false, true, false, false, true, true, false, true, false, true, true, true, true, false, false, true, false, true, true, true, true, true, false, false, true, true, false, false, false, true, false, false, true, true, true, true, true, true, true, false, true, true, false, false, false, true, true, false, true, true, false, false, false, false, false, false, true, false, true, true, true, true, false, true, true, false, false, true, false, true, true, false, true, true, false, false, false, true, true, false, true, false, false, true, true, true, false, false, true, true, true, false, false, false, false, false, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, true, true, true, true, true, true, true, false, true, false, false, false, false, true, true, true, false, false, true, false, false, true, true, false, true, false, true, true, true, true, false, false, true, false, true, true, true, true, true, false, false, true, true, false, false, false, true, false, false, true, true, true, true, true, true, true, false, true, true, false, false, false, true, true, false, true, true, false, false, false, false, false, false, true, false, true, true, true, true, false, true, true, false, false, true, false, true, true, false, false, true, true, false, false, false, true, true, false, true, false, false, true, true, true, false, true, false, true, true, true, false, false, false, false, false, false, false, true, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, true, true, true, true, true, true, true, false, true, false, false, false, false, false, true, true, false, false, true, false, false, true, true, false, true, false, true, true, true, true, false, false, true, false, true, true, true, true, true, false, false, true, true, false, false, false, true, false, false, true, true, true, true, true, true, true, false, true, true, false, false, false, true, true, false, true, true, false, false, false, false, false, false, true, false, true, true, true, true, false, true, true, false, false, true, false, true, true, false, false, true, true, false, false, false, true, true, false, true, false, false, true, true, true, false, true, false, true, true, true, false, false, false, false, false, false, false, true, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, false, false, false, true, false, true, false, true, true, false, false, false, true, true, false, false, true, true, false, false, true, false, false, false, true, true, true, true, false, false, true, false, true, false, false, false, false, true, true, false, true, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, false, true, true, false, true, false, false, false, true, false, true, false, true, true, true, true, true, false, false, false, false, true, false, true, true, false, true, false, false, false, true, false, true, false, true, false, false, true, false, true, false, false, true, false, true, true, true, true, false, false, true, false, true, false, true, false, false, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, true, false, false, false, true, false, true, false, true, true, false, false, false, true, true, false, false, true, true, false, false, true, false, false, false, true, true, true, true, false, false, true, false, true, false, false, false, false, true, true, false, true, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, false, true, true, false, true, false, false, false, true, false, true, false, true, true, true, true, true, false, false, false, false, true, false, true, true, false, true, false, false, false, true, false, true, false, false, true, false, false, true, false, true, false, false, true, false, true, true, true, true, false, false, false, true, false, true, false, true, false, false, false, false, false, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, false, false, false, true, false, true, false, true, true, false, false, false, true, true, false, false, true, true, false, false, true, false, false, false, true, true, true, true, false, false, true, false, true, false, false, false, false, true, true, true, true, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, false, true, true, false, true, false, false, false, true, false, true, false, true, true, true, true, true, false, false, false, false, true, false, true, true, false, true, false, false, false, true, false, true, false, false, true, false, false, true, false, true, false, false, true, false, true, true, true, true, false, false, false, true, false, true, false, true, false, false, false, false, false, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, false, false, false, true, true, false, true, true, false, false, false, true, false, false, false, true, true, false, true, true, false, false, true, true, true, true, false, false, true, true, false, true, false, false, false, false, false, true, false, true, true, false, true, false, false, true, true, false, true, false, true, false, false, false, false, false, false, true, true, false, true, true, true, false, false, true, false, true, true, true, false, true, true, false, false, false, false, false, false, true, false, false, false, false, true, false, false, false, true, true, true, false, false, true, true, true, true, true, true, false, false, false, true, false, true, false, true, true, false, false, false, false, true, false, false, true]);
            let encoded = BinVector::from_bools(&[false, false, true, false, false, false, false, true, true, false, true, true, false, false, false, true, false, false, false, true, true, false, true, true, false, false, true, true, true, true, false, false, true, true, false, true, false, false, false, false, false, true, false, true, true, false, true, false, false, true, true, false, true, false, true, false, false, false, false, false, false, true, true, false, true, true, true, false, false, true, false, true, true, true, false, true, true, false, false, false, false, false, false, true, false, false, false, false, true, false, false, false, true, true, false, true, false, false, true, true, true, true, true, true, false, false, false, true, false, true, true, false, true, true, false, false, false, false, false, true, false, false, false, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, false, false, false, true, true, false, true, true, false, false, false, true, false, false, false, true, true, false, true, true, false, false, true, true, true, true, false, false, true, true, false, true, false, false, false, false, false, true, false, true, true, false, true, false, false, true, true, false, true, false, true, false, false, false, false, false, false, true, true, false, true, true, true, false, false, true, false, true, true, true, false, true, true, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, true, true, false, true, false, false, true, true, true, true, true, true, false, false, false, true, false, true, true, false, true, true, false, false, false, false, false, true, false, false, false, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, false, false, true, false, false, false, false, false, true, true, true, false, true, true, false, true, false, false, false, false, false, false, false, true, false, true, false, false, true, true, true, true, false, false, true, true, true, false, false, false, true, true, false, true, false, true, true, false, true, true, false, true, false, false, true, false, true, false, false, true, true, true, false, false, true, true, true, false, false, true, false, false, true, false, true, true, true, false, false, true, false, false, false, true, false, true, false, true, false, true, false, true, false, true, true, false, true, true, true, false, true, true, true, true, false, true, true, false, true, false, false, true, false, false, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, false, false, false, true, false, false, false, false, false, true, true, true, false, true, true, false, true, false, false, false, false, false, false, false, true, false, true, false, false, true, true, true, true, false, false, true, true, true, false, false, false, true, true, false, true, false, true, true, false, true, true, false, true, false, false, true, false, true, false, false, true, true, true, false, false, true, true, true, false, false, true, false, false, true, false, true, true, true, false, false, true, false, false, false, true, false, true, false, true, false, true, true, false, true, false, true, true, false, true, true, true, false, true, true, true, true, false, false, true, true, false, true, false, false, true, false, false, false, true, true, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, false, false, true, false, false, false, false, false, true, true, true, false, true, true, false, true, false, false, false, false, false, false, false, true, false, true, false, false, true, true, true, true, false, false, true, true, true, false, false, false, true, true, false, true, false, true, true, false, true, true, false, true, false, false, true, false, true, false, false, true, true, true, false, false, true, true, true, false, false, true, false, false, true, false, true, true, true, false, false, true, false, false, false, true, false, true, false, true, false, true, true, false, true, false, true, true, false, true, true, true, false, true, true, true, true, false, false, true, true, false, true, false, false, true, false, false, false, true, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, true, true, false, true, false, false, false, false, true, false, false, false, true, true, false, true, true, true, true, true, true, true, false, false, true, false, true, true, false, true, false, true, false, false, false, false, true, true, true, false, false, false, true, true, false, false, true, false, true, false, true, false, true, true, true, false, true, false, true, true, true, true, true, true, false, false, true, true, false, false, true, false, false, false, false, true, true, false, false, true, true, true, false, true, false, false, false, false, false, true, false, false, false, false, true, true, false, false, true, false, false, false, true, false, true, false, false, true, true, true, false, true, false, false, false, false]);
            let encoded = BinVector::from_bools(&[true, true, true, true, true, true, false, true, false, false, false, false, true, false, false, false, true, true, false, true, true, true, true, true, true, true, false, false, true, false, true, true, false, true, false, true, false, false, false, false, true, true, true, false, false, false, true, true, false, false, true, false, true, false, true, false, true, true, true, false, true, false, true, true, true, true, true, true, false, false, true, true, false, false, true, false, false, false, false, true, true, false, false, true, true, true, false, true, false, false, false, false, false, true, true, false, false, false, false, true, true, false, false, true, false, false, false, true, false, true, true, false, false, true, true, true, false, true, true, false, false, false, false, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, true, true, false, true, false, false, false, false, true, false, false, false, true, true, false, true, true, true, true, true, true, true, false, false, true, false, true, true, false, true, false, true, false, false, false, false, true, true, true, false, false, false, true, true, false, false, true, false, true, false, true, false, true, true, true, false, true, false, true, true, true, true, true, true, false, false, true, true, false, false, true, false, false, false, false, true, true, false, false, true, true, true, false, true, false, false, false, false, false, true, true, false, false, false, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, true, true, false, true, true, false, false, false, false, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, true, false, true, true, false, false, true, true, false, true, false, false, false, false, false, false, true, true, false, false, true, false, false, true, true, false, false, false, false, true, true, false, true, false, true, true, true, false, false, false, false, false, false, false, false, true, false, true, false, false, false, true, true, false, true, true, false, true, false, false, true, true, false, false, false, true, false, true, true, false, false, true, true, false, false, true, true, false, false, false, true, true, false, false, true, true, false, false, false, false, false, true, false, true, true, false, false, true, true, false, true, true, true, false, true, false, true, false, true, true, false, false, true, false, true, false]);
            let encoded = BinVector::from_bools(&[false, true, false, false, true, false, true, true, false, false, true, true, false, true, false, false, false, false, false, false, true, true, false, false, true, false, false, true, true, false, false, false, false, true, true, false, true, false, true, true, true, false, false, false, false, false, false, false, false, true, false, true, false, false, false, true, true, false, true, true, false, true, false, false, true, true, false, false, false, true, false, true, true, false, false, true, true, false, false, true, true, false, false, false, true, true, false, false, true, true, false, false, false, false, false, false, true, false, true, true, false, false, true, true, false, true, true, true, false, true, false, false, true, false, true, true, false, false, false, true, false, true, false, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, true, false, true, true, false, false, true, true, false, true, true, false, false, false, false, false, true, true, false, false, true, false, false, true, true, false, false, false, false, true, true, false, true, false, true, true, true, false, false, false, false, false, false, false, false, true, false, true, false, false, false, true, true, false, true, true, false, true, false, false, true, true, false, false, false, true, false, true, true, false, false, true, true, false, false, true, true, false, false, false, true, true, false, false, true, true, false, false, false, false, false, false, true, false, true, true, false, false, true, true, false, true, true, true, false, true, false, false, true, false, true, true, false, false, false, true, false, true, false, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, true, false, false, true, false, true, true, true, false, false, true, true, false, true, true, false, false, true, false, false, false, true, false, false, false, false, false, true, true, false, true, true, false, false, false, true, true, false, true, true, false, true, true, false, false, false, true, false, false, true, true, false, false, false, false, false, false, false, true, true, false, true, false, true, false, false, false, false, true, true, true, true, false, false, false, true, false, true, true, false, false, false, false, true, false, false, true, false, true, false, true, false, false, true, false, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, false, false, true, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, false, true, false, false, true, false, true, true, true, false, false, true, true, false, true, true, false, false, true, false, false, false, true, false, false, false, false, false, true, true, false, true, true, false, false, false, true, true, false, true, true, false, true, true, false, false, false, true, false, false, true, true, false, false, false, false, false, false, false, true, true, false, true, false, true, false, false, false, false, true, true, true, true, false, false, false, true, false, true, true, false, false, false, false, true, false, false, true, false, true, false, true, true, false, false, true, false, false, false, true, false, false, true, false, false, false, true, true, true, true, true, false, false, true, false, false, false, true, true, true, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, true, false, false, true, false, true, true, true, false, false, true, true, false, true, true, false, false, true, false, false, false, true, false, false, false, false, false, true, true, false, true, true, false, false, false, true, true, false, true, true, false, true, true, false, false, false, true, false, false, true, true, false, false, false, false, false, false, false, true, true, false, true, false, true, false, false, false, false, true, true, true, true, false, false, false, true, false, true, true, false, false, false, false, true, false, false, true, false, true, false, true, true, false, false, true, false, false, false, true, false, true, true, false, false, false, true, true, true, true, true, false, false, true, false, false, false, true, true, true, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, false, false, true, false, true, true, false, true, true, false, false, true, false, true, false, false, true, true, false, true, false, false, true, false, true, true, false, true, true, true, false, false, false, true, false, false, false, true, false, true, false, false, true, false, false, true, false, true, true, true, true, false, true, true, true, true, false, false, false, false, true, true, true, true, true, false, true, false, true, false, false, true, false, false, false, true, true, true, false, true, false, false, true, false, true, false, true, false, false, true, true, false, false, true, true, false, true, false, false, true, false, false, false, true, true, true, true, true, false, true, false, false, true, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, false, true, false, false, true, false, true, true, false, true, true, false, false, true, false, true, false, false, true, true, false, true, false, false, true, false, true, true, false, true, true, true, false, false, false, true, false, false, false, true, false, true, false, false, true, false, false, true, false, true, true, true, true, false, true, true, true, true, false, false, false, false, true, true, true, true, true, false, true, false, true, false, false, true, false, false, false, true, true, true, false, true, false, false, true, false, true, false, true, false, false, true, false, true, false, false, true, true, false, true, false, false, true, false, false, false, true, true, false, true, true, true, false, true, false, false, false, true, true, false, true, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, false, false, true, false, true, true, false, true, true, false, false, true, false, true, false, false, true, true, false, true, false, false, true, false, true, true, false, true, true, true, false, false, false, true, false, false, false, true, false, true, false, false, true, false, false, true, false, true, true, true, true, false, true, true, true, true, false, false, false, false, true, true, true, true, true, false, true, false, true, false, false, true, false, false, false, false, true, true, false, true, false, false, true, false, true, false, true, false, false, true, false, true, false, false, true, true, false, true, false, false, true, false, false, false, true, true, false, true, true, true, false, true, false, false, false, true, true, false, true, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, true, true, false, true, false, false, false, false, true, true, true, true, true, false, false, false, true, false, false, true, false, true, true, false, true, true, true, true, true, false, false, false, true, false, false, true, true, false, false, true, true, false, true, false, true, false, true, true, false, false, true, true, true, false, true, false, false, true, true, true, true, false, true, true, true, false, false, true, true, true, false, true, false, false, true, true, false, true, true, false, false, false, false, true, false, false, true, false, false, false, false, true, true, true, false, true, false, false, false, true, true, false, false, false, true, true, true, true, true, true, false, true, true, true, false, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, true, true, false, true, false, false, false, false, true, true, true, true, true, false, false, false, true, false, false, true, false, true, true, false, true, true, true, true, true, false, false, false, true, false, false, true, true, false, false, true, true, false, true, false, true, false, true, true, false, false, true, true, true, false, true, false, false, true, true, true, true, false, true, true, true, false, false, true, true, true, false, true, false, false, true, true, false, true, true, false, false, false, false, true, false, false, true, false, false, false, false, false, true, true, true, false, true, false, false, false, true, true, false, false, false, true, true, true, true, true, true, true, false, true, false, true, true, false, true, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, true, true, false, true, false, false, false, false, true, true, true, true, true, false, false, false, true, false, false, true, false, true, true, false, true, true, true, true, true, false, false, false, true, false, false, true, true, false, false, true, true, false, true, false, true, false, true, true, false, false, true, true, true, false, true, false, false, true, true, true, true, false, true, true, true, false, false, true, true, true, false, true, false, false, true, true, false, true, true, false, false, false, false, true, false, false, true, false, false, false, false, false, true, true, true, false, true, false, false, false, true, true, false, false, false, true, true, true, true, true, true, true, false, false, false, true, true, false, true, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, true, false, true, false, false, true, true, false, true, true, true, true, true, false, false, false, true, false, true, true, true, true, true, true, true, false, false, false, true, true, false, false, true, true, true, true, false, true, true, false, false, false, true, true, true, true, false, true, false, false, true, true, true, false, true, false, false, false, true, true, false, true, true, false, true, false, true, false, false, true, true, true, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, false, true, true, false, true, true, false, true, true, false, false, true, true, false, false, true, true, true, true, true, false, true, false, true, true, false, true]);
            let encoded = BinVector::from_bools(&[false, false, true, true, true, false, true, false, false, true, true, false, true, true, true, true, true, false, false, false, true, false, true, true, true, true, true, true, true, false, false, false, true, true, false, false, true, true, true, true, false, true, true, false, false, false, true, true, true, true, false, true, false, false, true, true, true, false, true, false, false, false, true, true, false, true, true, false, true, false, true, false, false, true, true, true, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, false, false, true, true, false, true, true, false, true, true, false, false, true, true, false, false, true, false, true, true, true, true, false, true, false, true, true, true, false, true, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, true, false, true, false, false, true, true, false, true, true, true, true, true, false, false, false, true, false, true, true, true, true, true, true, true, false, false, false, true, true, false, false, true, true, true, true, false, true, true, false, false, false, true, true, true, true, false, true, false, false, true, true, true, false, true, false, false, false, true, true, false, true, true, false, true, false, true, false, false, true, true, true, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, false, false, true, true, false, true, true, false, true, true, false, false, true, true, false, false, true, false, true, true, true, true, false, false, false, true, true, true, false, true, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, false, false, false, false, false, false, false, false, true, false, false, false, false, true, false, false, false, true, true, false, true, false, true, true, true, true, false, true, true, true, false, false, false, true, true, false, true, false, true, false, true, false, true, true, true, false, false, true, true, true, true, false, false, false, true, false, true, false, true, false, false, false, true, true, false, false, false, false, true, false, true, true, false, true, false, false, false, true, true, false, false, true, false, true, false, false, true, false, true, false, false, false, true, false, false, false, false, false, false, true, true, false, true, false, true, true, false, false, false, true, true, true, false, true, false, true]);
            let encoded = BinVector::from_bools(&[false, false, false, true, false, false, false, false, false, false, false, false, true, false, false, false, false, true, false, false, false, true, true, false, true, false, true, true, true, true, false, true, true, true, false, false, false, true, true, false, true, false, true, false, true, false, true, true, true, false, false, true, true, true, true, false, false, false, true, false, true, false, true, false, false, false, true, true, false, false, false, false, true, false, true, true, false, true, false, false, false, true, true, false, false, true, false, true, false, false, true, false, true, false, false, false, false, true, false, false, false, false, false, false, true, true, false, true, false, true, false, true, false, false, false, true, true, true, true, false, true, false, true, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, false, false, false, false, false, false, false, false, true, false, false, false, false, true, false, false, false, true, true, false, true, false, false, true, true, true, false, true, true, true, false, false, false, true, true, false, true, false, true, false, true, false, true, true, true, false, false, true, true, true, true, false, false, false, true, false, true, false, true, false, false, false, true, true, false, false, false, false, true, false, true, true, false, true, false, false, false, true, true, false, false, true, false, true, false, false, true, false, true, false, false, false, false, true, false, false, false, false, false, false, true, true, false, true, false, true, false, true, false, false, false, true, true, true, true, false, true, false, true, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, false, false, false, false, true, false, false, true, false, false, true, false, false, false, false, true, true, true, false, true, false, false, false, false, false, false, false, true, true, true, false, false, false, true, false, false, false, false, false, false, true, true, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, true, true, false, true, false, true, false, false, true, false, true, false, false, false, true, true, true, false, true, false, false, false, true, true, true, false, true, false, true, true, false, true, true, true, true, false, true, true, true, false, true, true, true, false, true, true, false, false, true, true, false, true, false, true, false, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, false, false, false, false, true, false, false, true, false, false, true, false, false, false, false, true, true, true, false, true, false, false, false, false, false, false, false, true, true, true, false, false, false, true, false, false, false, false, false, false, true, true, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, true, true, false, true, false, true, false, false, true, false, true, false, false, false, true, true, true, false, true, false, false, false, true, true, true, false, true, false, true, true, false, false, true, true, true, true, false, true, true, true, false, true, true, true, false, true, false, true, false, false, true, true, false, true, false, false, true, false, false, false, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, false, false, false, false, true, false, false, true, false, false, true, false, false, false, false, true, true, true, false, true, false, false, false, false, false, false, false, true, true, true, false, false, false, true, false, false, false, false, false, false, true, true, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, true, true, false, true, false, true, false, false, true, false, true, false, false, false, true, true, true, false, true, false, false, false, true, true, true, false, true, false, true, true, false, false, true, true, true, true, false, true, true, true, false, true, true, true, false, true, false, false, false, false, true, true, false, true, false, false, true, false, false, false, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, false, false, true, false, true, false, false, false, true, false, true, true, false, true, true, false, false, false, true, true, true, false, false, true, false, true, false, false, true, true, false, false, false, true, false, true, true, true, true, true, true, false, false, true, true, false, false, true, false, false, false, false, true, false, true, true, true, true, true, false, true, false, true, true, false, true, false, false, true, true, false, true, true, false, false, true, false, false, false, true, false, false, false, false, true, false, true, false, true, true, false, false, true, false, false, false, true, true, false, true, true, true, true, true, true, false, true, true, true, true, false, false, false, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, false, false, true, false, true, false, false, false, true, false, true, true, false, true, true, false, false, false, true, true, true, false, false, true, false, true, false, false, true, true, false, false, false, true, false, true, true, true, true, true, true, false, false, true, true, false, false, true, false, false, false, false, true, false, true, true, true, true, true, false, true, false, true, true, false, true, false, false, true, true, false, true, true, false, false, true, false, false, false, true, false, false, false, false, true, false, true, false, true, true, true, false, false, true, false, false, false, true, true, false, true, true, true, true, true, true, true, false, true, true, true, true, false, false, false, false, false, true, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, false, false, true, false, true, false, false, false, true, false, true, true, false, true, true, false, false, false, true, true, true, false, false, true, false, true, false, false, true, true, false, false, false, true, false, true, true, true, true, true, true, false, false, true, true, false, false, true, false, false, false, false, true, false, true, true, true, true, true, false, true, false, true, true, false, true, false, false, true, true, false, true, true, false, false, true, false, false, false, true, false, false, false, false, true, false, true, false, true, true, true, false, false, true, false, false, false, true, true, false, true, true, true, true, true, true, true, false, true, true, true, true, false, false, false, false, false, true, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, true, false, false, false, true, true, false, false, false, false, false, false, false, false, true, false, false, true, true, true, true, true, false, true, true, false, false, false, false, false, false, true, true, false, false, true, true, true, false, false, true, true, true, true, false, true, true, false, true, false, false, true, false, false, true, false, false, true, false, true, true, false, false, true, true, false, false, true, false, false, true, true, true, true, true, false, false, false, true, false, true, true, true, true, false, true, true, false, false, false, true, true, false, true, true, false, false, false, false, false, false, true, false, true, true, true, false, true, false, false, true, false, true, true, false, true]);
            let encoded = BinVector::from_bools(&[false, false, true, true, true, false, false, false, true, true, false, false, false, false, false, false, false, false, true, false, false, true, true, true, true, true, false, true, true, false, false, false, false, false, false, true, true, false, false, true, true, true, false, false, true, true, true, true, false, true, true, false, true, false, false, true, false, false, true, false, false, true, false, true, true, false, false, true, true, false, false, true, false, false, true, true, true, true, true, false, false, false, true, false, true, true, true, true, false, true, true, false, false, false, false, true, true, false, true, true, false, false, false, false, false, false, true, false, true, true, false, true, false, true, false, false, true, false, true, true, true, false, true, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, true, false, false, false, true, true, false, false, false, false, false, false, false, false, true, true, false, true, true, true, true, true, false, true, true, false, false, false, false, false, false, true, true, false, false, true, true, true, false, false, true, true, true, true, false, true, true, false, true, false, false, true, false, false, true, false, false, true, false, true, true, false, false, true, true, false, false, true, false, false, true, true, true, true, true, false, false, false, true, false, true, true, true, true, false, true, true, false, false, false, false, true, true, false, true, true, false, false, false, false, false, false, true, false, true, true, false, true, false, true, false, false, true, false, true, true, true, false, true, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, true, false, false, false, true, true, false, false, true, true, true, false, true, false, false, false, true, false, true, true, false, false, false, false, false, false, true, true, true, true, false, true, false, false, true, false, true, true, false, true, false, false, false, false, true, true, false, true, true, true, true, false, true, true, false, true, false, false, false, false, true, true, true, false, true, false, false, true, false, false, false, true, false, false, true, false, false, true, true, true, true, false, true, false, true, false, true, true, true, false, true, false, false, true, false, true, false, false, false, false, false, true, true, false, false, true, false, false, false, false, true, false, false, false, true, true]);
            let encoded = BinVector::from_bools(&[false, true, true, false, true, false, false, false, true, true, false, false, true, true, true, false, true, false, false, false, true, false, true, true, false, false, false, false, false, false, true, true, true, true, false, true, false, false, true, false, true, true, false, true, false, false, false, false, true, true, false, true, true, true, true, false, true, true, false, true, false, false, false, false, true, true, true, false, true, false, false, true, false, false, false, true, false, false, true, false, false, true, true, true, true, false, true, false, true, false, true, true, true, false, true, true, false, false, true, false, true, false, false, false, false, false, true, true, false, false, false, true, false, false, false, false, true, false, true, false, false, true, false, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, true, false, false, false, true, true, false, false, true, true, true, false, true, false, false, false, true, false, true, true, false, false, false, false, false, false, true, true, true, true, false, true, false, false, true, false, true, true, false, true, false, false, false, false, true, true, false, true, true, false, true, false, true, true, false, true, false, false, false, false, true, true, true, false, true, false, false, true, false, false, false, true, false, false, true, false, false, true, true, true, true, false, true, false, true, false, true, true, true, false, true, true, false, false, true, false, true, false, false, false, false, false, true, true, false, false, false, true, false, false, false, false, true, false, true, false, false, true, false, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, true, false, false, false, true, true, false, false, true, false, true, true, true, true, false, false, true, false, true, true, true, false, true, true, true, true, false, false, false, true, false, true, false, false, false, true, true, false, true, false, false, false, false, true, true, false, true, true, true, true, true, true, false, false, true, false, false, false, false, false, true, true, true, true, false, true, false, true, false, false, false, false, false, false, true, true, false, true, true, false, false, true, true, true, false, true, false, true, false, true, true, false, true, false, false, false, false, true, false, false, false, false, true, false, false, true, false, true, true, true, true, false, false, false, true, true]);
            let encoded = BinVector::from_bools(&[false, true, false, true, true, false, false, false, true, true, false, false, true, false, true, true, true, true, false, false, true, false, true, true, true, false, true, true, true, true, false, false, false, true, false, true, false, false, false, true, true, false, true, false, false, false, false, true, true, false, true, true, true, true, true, true, false, false, true, false, false, false, false, false, true, true, true, true, false, true, false, true, false, false, false, false, false, false, true, true, false, true, true, false, false, true, true, true, false, true, false, true, false, true, false, true, false, true, false, false, false, false, true, false, false, false, false, true, false, false, true, true, false, true, true, true, true, false, true, false, false, true, true, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, true, false, false, false, true, true, false, false, true, false, true, true, true, true, false, false, true, false, true, true, true, false, true, true, true, true, false, false, false, true, false, true, false, true, false, true, true, false, true, false, false, false, false, true, true, false, true, true, true, true, true, true, false, false, true, false, false, false, false, false, true, true, true, true, false, true, false, true, false, false, false, false, false, false, true, true, false, true, true, false, false, true, true, true, false, true, false, true, false, true, false, true, false, true, false, false, false, false, true, false, false, false, false, true, false, false, true, true, false, true, true, true, true, false, true, false, false, true, true, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, true, false, true, true, true, true, true, false, true, false, false, false, false, false, false, true, true, false, true, true, true, false, true, false, true, true, true, true, false, true, false, true, true, false, false, true, true, true, true, false, true, true, true, false, true, false, true, false, true, false, true, true, true, true, true, true, true, true, true, false, false, false, true, false, false, false, true, false, true, true, true, false, true, false, true, true, true, true, true, false, false, false, true, true, true, true, false, true, false, true, false, false, true, true, false, true, false, true, true, false, false, true, false, true, false, true, true, true, false, true, true, false, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, true, false, true, true, true, true, true, false, true, false, false, false, false, false, false, true, true, false, true, true, true, false, true, false, true, true, true, true, false, true, false, true, true, false, false, true, true, true, true, false, true, true, true, false, true, false, true, false, true, false, true, true, true, true, true, true, true, true, true, false, false, false, true, false, false, false, true, false, true, true, true, false, true, false, true, true, true, true, true, false, false, false, true, true, true, true, false, true, false, false, true, false, false, true, true, false, true, false, true, true, false, false, true, false, true, true, false, true, true, true, false, true, true, false, false, true, false, false, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, true, false, true, true, true, true, true, false, true, false, false, false, false, false, false, true, true, false, true, true, true, false, true, false, true, true, true, true, false, true, false, true, true, false, false, true, true, true, true, false, true, true, true, false, true, false, true, false, true, false, true, true, true, true, true, true, true, false, true, false, false, false, true, false, false, false, true, false, true, true, true, false, true, false, true, true, true, true, true, false, false, false, true, true, true, true, false, true, false, false, true, false, false, true, true, false, true, false, true, true, false, false, true, false, true, true, false, true, true, true, false, true, true, false, false, true, false, false, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, true, true, true, false, true, false, false, true, true, true, true, false, false, true, false, false, false, false, true, true, true, false, true, true, true, false, true, false, true, true, true, true, true, false, false, false, true, true, false, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, true, false, true, false, true, false, false, false, false, true, false, true, true, false, true, false, false, false, false, false, true, false, true, true, true, false, false, true, true, true, false, false, true, true, false, false, true, true, true, false, true, true, true, true, false, false, true, false, true, false, false, true, true, false, true, true, false, false, true, false, false, true]);
            let encoded = BinVector::from_bools(&[false, false, false, true, true, true, true, false, true, false, false, true, true, true, true, false, false, true, false, false, false, false, true, true, true, false, true, true, true, false, true, false, true, true, true, true, true, false, false, false, true, true, false, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, true, false, true, false, true, false, false, false, false, true, false, true, true, false, true, false, false, false, false, false, true, false, true, true, true, false, false, true, true, true, false, false, true, true, false, false, true, true, true, true, false, true, true, true, true, false, false, true, false, true, false, false, true, true, true, false, true, true, false, false, false, true, false, false, true, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, true, true, true, false, true, false, false, true, true, true, true, false, false, true, false, false, false, false, true, true, true, false, true, true, true, false, true, false, true, true, true, true, true, false, false, false, true, true, false, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, true, false, true, false, true, false, false, false, false, true, false, true, true, false, true, false, false, false, false, false, true, false, true, true, true, false, false, true, true, true, false, false, true, true, false, false, true, true, true, true, false, true, true, true, true, false, false, true, false, true, false, false, true, true, true, false, true, true, false, false, false, true, false, false, true, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, true, true, true, false, false, false, false, false, true, true, false, false, false, true, false, false, true, true, true, true, false, true, false, true, false, false, false, true, true, false, false, true, true, false, false, true, false, true, false, false, true, false, true, true, true, false, false, true, true, false, false, true, true, false, false, false, false, false, false, false, true, false, true, false, true, true, false, false, true, false, true, false, false, true, false, false, true, false, false, true, true, false, false, true, false, false, false, true, false, false, false, true, true, false, false, false, false, false, true, false, false, true, true, true, false, false, true, true, false, false, true, true, true, false, false, false]);
            let encoded = BinVector::from_bools(&[false, false, true, false, true, true, true, false, false, false, false, false, true, true, false, false, false, true, false, false, true, true, true, true, false, true, false, true, false, false, false, true, true, false, false, true, true, false, false, true, false, true, false, false, true, false, true, true, true, false, false, true, true, false, false, true, true, false, false, false, false, false, false, false, true, false, true, false, true, true, false, false, true, false, true, false, false, true, false, false, true, false, false, true, true, false, false, true, false, false, false, true, false, false, false, false, true, true, false, false, false, false, false, true, false, false, true, true, true, false, false, false, true, true, false, false, true, true, false, true, false, false, false, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, true, true, true, false, false, false, false, false, true, true, false, false, false, true, false, false, true, true, true, true, false, true, false, true, false, false, false, true, true, false, false, true, true, false, false, true, false, true, false, false, true, false, true, true, true, false, false, true, true, false, false, true, true, false, false, false, false, false, false, false, true, false, true, false, true, true, false, false, true, false, true, false, false, true, false, false, true, false, false, true, true, false, false, true, false, false, false, true, false, false, false, false, true, true, false, false, false, true, false, true, false, false, true, true, true, false, false, false, true, true, false, false, true, true, false, true, false, false, false, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, true, false, false, true, true, true, true, true, true, true, true, false, true, true, false, true, false, true, false, true, true, true, true, false, true, true, false, false, false, true, false, true, false, true, true, true, true, true, true, false, true, true, false, true, true, true, true, false, true, false, false, true, true, true, true, true, true, false, false, false, true, false, true, true, true, true, false, true, true, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, true, false, true, true, true, true, true, false, true, true, false, true, true, true, false, false, false, false, true, false, true, false, false, false, false, true, false, true, true, false, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, true, false, false, true, true, true, true, true, true, true, true, false, true, true, false, true, false, true, false, true, true, true, true, false, true, true, false, false, false, true, false, true, false, true, true, true, true, true, true, false, true, true, false, true, true, true, true, false, true, false, false, true, true, true, true, true, true, false, false, false, true, false, true, true, true, true, false, true, true, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, true, false, true, true, true, true, true, true, false, true, true, false, true, true, true, false, false, false, false, true, false, true, true, false, false, false, false, true, false, true, true, true, false, true, false, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, true, false, false, true, true, true, true, true, true, true, true, false, true, true, false, true, false, true, false, true, true, true, true, false, true, true, false, false, false, true, false, true, false, true, true, true, true, true, true, false, true, true, false, true, true, true, true, false, true, false, false, true, true, true, true, true, true, false, false, false, true, false, true, true, true, true, false, true, true, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, true, false, true, true, true, true, true, true, false, true, true, false, true, true, true, false, false, false, false, true, false, true, true, false, false, false, false, true, false, false, true, true, false, true, false, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, false, false, false, false, true, false, false, false, true, true, false, false, true, false, false, true, true, false, true, true, false, false, true, true, false, false, true, false, false, true, true, true, true, true, false, false, false, true, true, false, false, true, false, false, true, true, true, true, true, false, true, true, true, false, true, true, false, true, true, false, false, false, false, false, true, false, false, false, false, true, true, true, true, true, false, true, true, false, false, false, false, false, true, false, false, false, true, true, false, false, true, false, false, false, false, false, true, false, false, false, false, true, false, false, false, true, true, true, true, true, false, false, false, false, false, false]);
            let encoded = BinVector::from_bools(&[false, false, false, true, false, false, false, false, true, false, false, false, true, true, false, false, true, false, false, true, true, false, true, true, false, false, true, true, false, false, true, false, false, true, true, true, true, true, false, false, false, true, true, false, false, true, false, false, true, true, true, true, true, false, true, true, true, false, true, true, false, true, true, false, false, false, false, false, true, false, false, false, false, true, true, true, true, true, false, true, true, false, false, false, false, false, true, false, false, false, true, true, false, false, true, true, false, false, false, false, false, true, false, false, false, false, true, false, false, false, true, true, true, true, true, true, false, false, true, false, false, false, true, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, false, false, false, false, true, false, false, false, true, true, false, false, true, false, false, true, true, false, true, true, false, false, true, true, false, false, true, false, false, true, true, true, true, true, false, false, false, true, true, false, false, true, false, false, true, true, true, true, true, false, true, true, true, false, true, true, false, true, true, false, false, false, false, false, true, false, false, false, false, true, true, true, true, true, false, true, true, false, false, false, false, false, true, false, false, false, true, true, false, false, true, true, false, false, false, true, false, true, false, false, false, false, true, false, false, false, true, true, true, true, true, true, false, false, true, false, false, false, true, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, false, false, false, false, false, false, true, true, false, false, false, false, false, true, false, false, false, true, false, false, false, false, false, false, true, true, false, false, false, true, false, false, true, false, true, true, false, true, true, false, true, false, true, false, true, true, false, false, true, true, false, false, false, false, true, false, false, false, false, false, true, true, true, true, false, false, true, false, false, true, true, false, false, true, false, false, false, true, true, true, false, false, true, false, true, true, false, true, true, true, false, true, true, true, true, true, true, true, false, true, false, true, false, false, true, true, false, true, false, false, false, false, true, false, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, false, false, false, false, false, false, true, true, false, false, false, false, false, true, false, false, false, true, false, false, false, false, false, false, true, true, false, false, false, true, false, false, true, false, true, true, false, true, true, false, true, false, true, false, true, true, false, false, true, true, false, false, false, false, true, false, false, false, false, false, true, true, true, true, false, false, true, false, false, true, true, false, false, true, false, false, false, true, true, true, false, false, true, false, true, true, false, true, true, true, false, false, true, true, true, true, true, true, true, false, true, false, true, false, false, true, true, true, false, true, false, false, false, false, false, true, false, true, false, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, false, false, false, false, false, false, true, true, false, false, false, false, false, true, false, false, false, true, false, false, false, false, false, false, true, true, false, false, false, true, false, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, true, false, false, false, false, true, false, false, false, false, false, true, true, true, true, false, false, true, false, false, true, true, false, false, true, false, false, false, true, true, true, false, false, true, false, true, true, false, true, true, true, false, false, true, true, true, true, true, true, true, false, true, false, true, false, false, true, true, true, false, true, false, false, false, false, false, true, false, true, false, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, true, false, true, true, true, false, true, false, false, false, true, true, false, false, false, false, false, false, false, true, true, true, true, true, false, true, true, true, false, false, true, true, true, true, true, false, true, true, true, false, false, false, false, false, true, false, true, true, false, true, true, false, false, true, true, true, true, false, false, true, true, true, false, false, true, false, true, false, true, true, true, true, true, true, true, false, true, true, true, true, false, true, false, true, true, true, true, false, false, false, false, false, false, true, false, false, false, true, false, true, false, false, false, false, true, true, true, true, true, false, true, true, false, false, true, true]);
            let encoded = BinVector::from_bools(&[true, false, false, false, true, false, true, true, true, false, true, false, false, false, true, true, false, false, false, false, false, false, false, true, true, true, true, true, false, true, true, true, false, false, true, true, true, true, true, false, true, true, true, false, false, false, false, false, true, false, true, true, false, true, true, false, false, true, true, true, true, false, false, true, true, true, false, false, true, false, true, false, true, true, true, true, true, true, true, false, true, true, true, true, false, true, false, true, true, true, true, false, false, false, true, false, false, false, true, false, false, false, true, false, true, false, false, false, false, true, true, true, true, true, true, false, true, true, false, false, false, true, true, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, true, false, true, true, true, false, true, false, false, false, true, true, false, false, false, false, false, false, false, true, true, true, true, true, false, true, true, true, false, false, true, true, true, true, true, false, true, true, true, false, false, false, false, false, true, false, true, true, false, true, true, false, false, true, true, true, true, false, false, true, true, true, false, false, true, false, true, false, true, true, true, true, false, true, true, false, true, true, true, true, false, true, false, true, true, true, true, false, false, false, true, false, false, false, true, false, false, false, true, false, true, false, false, false, false, true, true, true, true, true, true, false, true, true, false, false, false, true, true, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, false, false, true, true, false, true, false, false, true, false, false, false, true, false, false, true, true, true, true, true, false, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, false, true, false, true, true, false, false, false, true, false, false, false, true, false, false, false, true, true, true, true, false, true, false, true, false, true, true, false, false, true, true, true, true, false, true, false, true, true, false, false, true, true, false, false, false, false, true, false, true, true, false, false, false, true, false, false, true, true, false, false, false, true, true, false, false, false, true, true, false, false, false, false, true, true, false, true, true, true]);
            let encoded = BinVector::from_bools(&[false, true, false, true, false, false, true, true, false, true, false, false, true, false, false, false, true, false, false, true, true, true, true, true, false, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, false, true, false, true, true, false, false, false, true, false, false, false, true, false, false, false, true, true, true, true, false, true, false, true, false, true, true, false, false, true, true, true, true, false, true, false, true, true, false, false, true, true, false, false, false, false, true, false, true, true, false, false, false, false, true, false, false, true, true, false, false, false, true, true, false, false, false, true, true, true, false, false, false, false, true, true, false, false, true, true, false, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, false, false, true, true, false, true, false, false, true, false, false, false, true, false, false, true, true, true, true, true, false, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, false, false, true, false, true, true, false, false, true, true, false, false, false, true, false, false, false, true, true, true, true, false, true, false, true, false, true, true, false, false, true, true, true, true, false, true, false, true, true, false, false, true, true, false, false, false, false, true, false, true, true, false, false, false, false, true, false, false, true, true, false, false, false, true, true, false, false, false, true, true, true, false, false, false, false, true, true, false, false, true, true, false, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, false, false, false, true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, false, true, false, false, false, false, true, false, true, true, false, true, false, true, true, true, true, false, true, true, false, false, false, false, false, false, true, false, true, true, false, true, false, true, false, false, true, true, false, true, false, false, true, true, true, false, true, false, false, true, false, true, false, true, true, false, true, false, false, true, false, true, false, false, false, true, false, true, true, true, false, false, false, true, true, true, true, false, true, false, false, false, true, false, true, false, true, false, false, false, true, true, false, false, true, true, false, true]);
            let encoded = BinVector::from_bools(&[true, false, false, true, false, false, false, true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, false, true, false, false, false, false, true, false, true, true, false, true, false, true, true, true, true, false, true, true, false, false, false, false, false, false, true, false, true, true, false, true, false, true, false, false, true, true, false, true, false, false, true, true, true, false, true, false, false, true, false, true, false, true, true, false, true, false, false, true, false, true, false, false, false, true, false, true, true, true, false, false, true, false, true, true, true, true, false, true, false, false, false, true, false, true, false, true, true, false, false, false, true, true, false, false, true, true, true, false, false, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, false, false, false, true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, false, true, false, false, false, false, true, false, true, true, false, true, false, true, true, true, true, false, true, true, false, false, false, false, false, false, true, false, true, true, false, true, false, true, false, false, true, true, false, true, false, false, true, true, true, false, true, false, false, true, false, true, false, true, true, false, true, false, false, true, false, true, false, false, true, true, false, true, true, true, false, false, true, false, true, true, true, true, false, true, false, false, false, true, false, true, false, true, true, false, false, false, true, true, false, false, true, true, true, false, false, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, true, false, true, false, false, true, true, false, false, true, true, false, true, false, false, false, false, false, true, false, true, false, false, true, true, false, true, true, true, true, false, false, true, false, false, true, false, true, true, false, true, false, true, false, true, false, true, true, true, true, true, false, false, true, true, true, false, true, true, false, true, false, false, true, false, false, true, false, true, false, true, false, true, true, false, true, false, true, false, true, false, false, false, true, false, true, false, false, true, true, false, true, false, true, true, false, true, false, true, true, false, true, false, true, false, false, true, false, false, true, true, false, true, true, true, true]);
            let encoded = BinVector::from_bools(&[false, false, true, false, true, false, true, false, false, true, true, false, false, true, true, false, true, false, false, false, false, false, true, false, true, false, false, true, true, false, true, true, true, true, false, false, true, false, false, true, false, true, true, false, true, false, true, false, true, false, true, true, true, true, true, false, false, true, true, true, false, true, true, false, true, false, false, true, false, false, true, false, true, false, true, false, true, true, false, true, false, true, false, true, false, false, false, true, false, true, false, false, true, true, false, false, true, false, true, true, false, true, false, true, true, false, true, false, true, false, false, false, true, false, false, true, true, false, true, true, true, true, false, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, true, false, true, false, false, true, true, false, false, true, true, false, true, false, false, false, false, false, true, false, true, false, false, true, true, false, true, true, true, true, false, false, true, false, false, true, false, true, true, false, true, false, true, false, true, false, true, true, true, true, true, false, false, true, true, true, false, true, true, false, true, false, false, true, false, false, false, false, true, false, true, false, true, true, false, true, false, true, false, true, false, false, false, true, false, true, false, false, true, true, false, false, true, false, true, true, false, true, false, true, true, false, true, false, true, false, false, false, true, false, false, true, true, false, true, true, true, true, false, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, true, true, true, true, false, true, false, false, false, false, false, true, true, true, false, false, false, false, true, true, true, false, false, false, true, false, true, true, false, true, false, false, true, true, false, false, true, true, true, false, true, false, true, true, false, false, false, false, false, true, false, false, false, true, true, true, false, true, true, true, false, true, false, true, false, false, true, true, false, true, false, true, false, false, false, false, true, false, false, false, true, true, true, false, false, true, false, false, true, true, true, false, false, true, false, false, false, false, false, true, true, true, true, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, true, true, true, true, false, true, false, false, false, false, false, true, true, true, false, false, false, false, true, true, true, false, false, false, true, false, true, true, false, true, false, false, true, true, false, false, true, true, true, false, true, false, true, true, false, false, false, false, false, true, false, false, false, true, true, true, false, true, true, true, false, true, false, true, false, false, true, true, false, true, false, true, false, false, false, false, true, false, false, true, false, true, true, true, false, false, true, false, false, true, true, true, false, false, true, true, false, false, false, false, false, true, true, false, true, true, false, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, true, true, true, true, false, true, true, false, false, false, false, true, true, true, false, false, false, false, true, true, true, false, false, false, true, false, true, true, false, true, false, false, true, true, false, false, true, true, true, false, true, false, true, true, false, false, false, false, false, true, false, false, false, true, true, true, false, true, true, true, false, true, false, true, false, false, true, true, false, true, false, true, false, false, false, false, true, false, false, true, false, true, true, true, false, false, true, false, false, true, true, true, false, false, true, true, false, false, false, false, false, true, true, false, true, true, false, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, true, false, false, true, true, true, true, true, false, true, false, false, true, false, false, true, false, false, true, false, false, false, true, true, true, false, false, true, false, false, true, false, true, false, false, false, false, false, false, true, true, false, false, false, true, false, true, true, true, true, false, false, true, false, true, true, false, false, true, true, true, true, false, true, false, false, true, false, false, true, false, false, true, false, false, true, false, false, true, false, true, true, false, true, false, true, false, false, true, false, false, true, false, false, false, true, true, false, true, true, false, false, true, true, true, true, false, false, false, false, false, false, true, false, true, false]);
            let encoded = BinVector::from_bools(&[false, false, false, true, true, false, false, true, true, true, true, true, false, true, false, false, true, false, false, true, false, false, true, false, false, false, true, true, true, false, false, true, false, false, true, false, true, false, false, false, false, false, false, true, true, false, false, false, true, false, true, true, true, true, false, false, true, false, true, true, false, false, true, true, true, true, false, true, false, false, true, false, false, true, false, false, true, false, false, true, false, false, true, false, true, true, false, true, false, true, false, false, true, false, false, false, true, false, false, false, true, true, false, true, true, false, false, true, true, true, false, true, false, false, false, false, false, false, false, true, false, true, false, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, true, false, false, true, true, true, true, true, false, true, false, false, true, false, false, true, false, false, true, false, false, false, true, true, true, false, false, true, false, false, true, false, true, false, false, false, false, false, false, true, true, false, false, false, true, false, true, true, true, true, false, false, true, false, true, true, false, false, true, true, true, true, false, true, false, false, true, false, false, true, false, false, true, false, false, true, false, false, true, false, true, true, false, true, false, true, false, false, true, false, false, false, true, false, false, false, true, true, false, true, true, false, false, true, true, true, false, true, true, false, false, false, false, false, false, true, false, true, false, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, true, true, true, true, true, false, false, false, false, false, false, true, false, false, true, false, true, false, false, true, false, false, false, true, true, true, false, false, true, true, false, false, false, true, false, true, false, false, true, true, false, false, false, false, false, true, true, true, true, true, true, true, true, false, false, true, true, true, false, true, false, true, false, true, true, false, true, true, true, true, true, true, false, false, true, false, true, false, true, true, true, true, false, true, true, true, true, false, false, false, false, false, false, false, false, false, true, false, false, true, true, true, true, true, false, true, true, true, false, false, false, false, true, false, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, true, true, true, true, true, true, false, false, false, false, false, false, true, false, false, true, false, true, false, false, true, false, false, false, true, true, true, false, false, true, true, false, false, false, true, false, true, false, false, true, true, false, false, false, false, false, true, true, true, true, true, true, true, true, false, false, true, true, true, false, true, false, true, false, true, true, false, true, true, true, true, true, true, false, false, true, false, true, false, true, true, true, true, false, true, true, true, true, false, false, false, true, false, false, false, false, false, false, true, false, false, true, true, true, true, true, false, true, true, true, true, false, false, false, false, false, true, false, true, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, true, true, true, true, true, false, false, false, false, true, false, true, false, false, true, false, true, false, false, true, false, false, false, true, true, true, false, false, true, true, false, false, false, true, false, true, false, false, true, true, false, false, false, false, false, true, true, true, true, true, true, true, true, false, false, true, true, true, false, true, false, true, false, true, true, false, true, true, true, true, true, true, false, false, true, false, true, false, true, true, true, true, false, true, true, true, true, false, false, false, true, false, false, false, false, false, false, true, false, false, true, true, true, true, true, false, true, true, true, true, false, false, false, false, false, true, false, true, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, true, true, true, true, false, true, false, true, false, false, true, false, true, false, true, false, false, false, false, true, false, true, true, false, false, true, false, true, false, false, true, true, false, true, true, false, false, true, true, false, false, true, true, false, true, true, true, false, true, false, false, true, true, false, true, true, true, true, false, false, true, false, false, false, true, false, false, true, false, true, true, false, true, false, false, true, true, false, true, false, false, true, true, true, false, false, true, true, true, true, false, true, true, true, false, true, false, false, true, false, true, true, true, true, true, false, false, true, true, true, true, false, false, true, false, true]);
            let encoded = BinVector::from_bools(&[false, false, true, false, true, true, true, true, false, true, false, true, false, false, true, false, true, false, true, false, false, false, false, true, false, true, true, false, false, true, false, true, false, false, true, true, false, true, true, false, false, true, true, false, false, true, true, false, true, true, true, false, true, false, false, true, true, false, true, true, true, true, false, false, true, false, false, false, true, false, false, true, false, true, true, false, true, false, false, true, true, false, true, false, false, true, true, true, false, false, true, true, true, true, true, false, true, true, true, false, true, false, false, true, false, true, true, true, true, true, false, false, false, true, true, true, true, false, true, false, true, false, true, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, true, true, true, true, false, true, false, true, false, false, true, false, true, false, true, false, false, false, false, true, false, true, true, false, false, true, false, true, false, false, true, true, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, true, false, false, true, true, false, true, true, true, true, false, false, true, false, false, false, true, false, false, true, false, true, true, false, true, false, false, true, true, false, true, false, false, true, true, true, false, false, true, true, true, true, true, false, true, true, true, false, true, false, false, true, false, true, true, true, true, true, false, false, false, true, true, true, true, false, true, false, true, false, true, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, true, false, false, true, false, true, true, false, true, false, false, false, true, false, false, false, true, false, true, true, false, true, true, false, true, true, true, true, true, true, true, false, true, true, false, false, true, false, true, false, false, true, false, true, false, true, false, true, false, false, false, true, false, true, true, true, false, false, false, true, true, true, true, true, true, true, true, true, false, true, false, false, false, false, false, true, false, false, false, false, false, false, true, false, false, false, false, true, true, false, true, false, false, false, true, false, false, true, false, true, false, true, false, false, false, true, false, true, false, true, true, false, false, false, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, true, false, false, true, false, true, true, false, true, false, false, false, true, false, false, false, true, false, true, true, false, true, true, false, true, true, true, true, true, true, true, false, true, true, false, false, true, false, true, false, false, true, false, true, false, true, false, true, false, false, false, true, false, true, true, true, false, false, false, true, true, true, true, true, true, true, true, true, false, true, false, false, false, false, false, true, false, false, false, false, false, false, true, false, false, false, false, true, true, false, false, true, false, false, false, true, false, false, true, false, true, false, true, false, false, false, true, true, false, true, false, true, true, false, false, false, false, true, true, false, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, true, false, false, true, false, true, true, false, true, false, false, false, true, false, false, false, false, false, true, true, false, true, true, false, true, true, true, true, true, true, true, false, true, true, false, false, true, false, true, false, false, true, false, true, false, true, false, true, false, false, false, true, false, true, true, true, false, false, false, true, true, true, true, true, true, true, true, true, false, true, false, false, false, false, false, true, false, false, false, false, false, false, true, false, false, false, false, true, true, false, false, true, false, false, false, true, false, false, true, false, true, false, true, false, false, false, true, true, false, true, false, true, true, false, false, false, false, true, true, false, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, false, true, false, false, false, false, false, false, true, true, true, true, false, false, true, false, true, true, false, true, false, true, false, false, true, true, true, true, true, false, true, false, false, true, true, true, false, true, true, true, false, false, true, false, false, false, true, false, true, true, true, false, true, false, true, true, false, false, true, false, false, false, false, false, false, false, false, false, true, false, true, true, true, false, true, false, true, true, false, true, false, true, false, true, false, true, false, false, false, false, false, true, true, true, true, false, false, false, true, true, true, false, false, false, false, false, false, false, true, true, false, false, true, false, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, true, false, true, false, false, false, false, false, false, true, true, true, true, false, false, true, false, true, true, false, true, false, true, false, false, true, true, true, true, true, false, true, false, false, true, true, true, false, true, true, true, false, false, true, false, false, false, true, false, true, true, true, false, true, false, true, true, false, false, true, false, false, false, false, false, false, false, false, false, true, false, true, true, true, false, true, false, true, true, false, true, false, true, false, true, false, true, false, false, false, false, true, false, true, true, true, true, false, false, false, true, true, true, false, false, false, false, true, false, false, false, true, true, false, false, true, true, false, true, false, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, false, false, false, false, false, false, false, false, true, true, true, true, false, false, true, false, true, true, false, true, false, true, false, false, true, true, true, true, true, false, true, false, false, true, true, true, false, true, true, true, false, false, true, false, false, false, true, false, true, true, true, false, true, false, true, true, false, false, true, false, false, false, false, false, false, false, false, false, true, false, true, true, true, false, true, false, true, true, false, true, false, true, false, true, false, true, false, false, false, false, true, false, true, true, true, true, false, false, false, true, true, true, false, false, false, false, true, false, false, false, true, true, false, false, true, true, false, true, false, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, false, true, false, false, true, true, false, false, false, false, false, true, true, true, false, false, false, false, false, true, true, true, true, true, true, false, true, false, true, true, true, true, false, false, true, true, false, true, true, true, false, false, true, false, true, true, true, true, false, true, true, false, false, false, true, false, false, false, false, false, true, false, false, false, true, false, true, true, false, true, false, true, false, false, false, false, true, false, true, true, false, true, true, false, false, true, true, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, false, true, true, true, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, false, true, false, false, true, true, false, false, false, false, false, true, true, true, false, false, false, false, false, true, true, true, true, true, true, false, true, false, true, true, true, true, false, false, true, true, false, true, true, true, false, false, true, false, true, true, true, true, false, true, true, false, false, false, true, false, false, false, false, false, true, false, false, false, true, false, true, true, false, true, false, true, false, false, false, false, true, false, true, true, false, true, true, false, false, true, true, false, false, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, true, true, true, true, true, false, false, true, true, true, true, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, false, true, false, false, true, true, false, false, false, false, false, true, true, true, false, true, false, false, false, true, true, true, true, true, true, false, true, false, true, true, true, true, false, false, true, true, false, true, true, true, false, false, true, false, true, true, true, true, false, true, true, false, false, false, true, false, false, false, false, false, true, false, false, false, true, false, true, true, false, true, false, true, false, false, false, false, true, false, true, true, false, true, true, false, false, true, true, false, false, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, true, true, true, true, true, false, false, true, true, true, true, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, false, true, false, true, true, false, false, false, true, true, false, true, false, false, false, true, false, false, false, false, false, true, false, true, false, false, false, false, true, true, true, false, true, true, false, false, false, true, true, true, false, false, false, true, false, false, true, true, true, true, false, false, false, false, true, true, false, false, false, true, false, true, false, false, false, false, false, false, false, true, true, false, false, true, false, true, false, true, true, false, true, true, false, true, false, true, true, false, true, false, true, false, true, true, false, true, false, false, true, false, false, false, true, true, false, false, true, true, false, false, false, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, false, true, false, true, false, true, true, false, false, false, true, true, false, true, false, false, false, true, false, false, false, false, false, true, false, true, false, false, false, false, true, true, true, false, true, true, false, false, false, true, true, true, false, false, false, true, false, false, true, true, true, true, false, false, false, false, true, true, false, false, false, true, false, true, false, false, false, false, false, false, false, true, true, false, false, true, false, true, false, true, true, false, true, true, false, true, false, true, true, false, true, false, true, true, false, true, true, false, true, false, false, true, false, false, false, true, true, false, true, false, true, true, false, false, false, false, false, false, true, false, false, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, false, true, false, true, true, false, false, false, true, true, false, true, false, false, false, true, false, false, false, false, false, true, false, true, false, false, false, false, true, true, true, false, true, true, false, false, false, true, true, true, false, false, false, true, false, false, true, true, true, true, false, false, false, false, true, true, false, false, false, true, false, true, false, false, false, false, false, false, false, true, true, false, false, true, false, true, false, true, true, false, true, true, false, true, false, true, true, false, true, false, true, true, false, true, true, false, true, false, false, true, false, false, false, true, true, false, true, false, true, true, false, false, false, false, false, false, true, false, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, true, false, false, false, false, true, true, false, false, false, false, true, true, true, false, true, true, true, false, true, true, false, true, true, true, false, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, true, false, true, false, false, true, false, true, true, false, true, true, true, true, false, true, true, true, true, true, false, false, false, true, true, true, true, true, true, false, true, false, false, true, true, true, false, false, false, false, true, false, false, true, true, true, true, true, false, false, true, true, true, true, true, false, true, false, false, false, true, false, false, true, false, false, false, false, true, false, true, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, true, false, false, false, false, true, true, false, false, false, false, true, true, true, false, true, true, true, false, true, true, false, true, true, true, false, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, true, false, true, false, false, true, false, true, true, false, true, true, true, true, false, true, true, true, true, true, false, false, false, true, true, true, true, true, true, false, true, false, false, true, true, true, false, false, false, false, true, false, false, true, true, true, true, true, true, false, false, true, true, true, true, true, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, true, true, true, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, true, false, false, false, false, true, true, false, false, false, false, true, true, true, false, true, true, true, false, true, true, false, true, true, true, false, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, true, false, true, false, false, true, false, true, true, false, true, true, true, true, false, true, true, true, true, true, false, false, false, true, true, true, true, true, true, true, true, false, false, true, true, true, false, false, false, false, true, false, false, true, true, true, true, true, true, false, false, true, true, true, true, true, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, true, true, true, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, true, true, true, false, true, false, false, true, true, false, true, true, false, false, true, false, true, false, true, true, false, false, true, true, false, true, false, false, true, false, true, true, true, true, false, true, false, false, true, false, true, false, false, false, false, false, false, false, true, false, false, true, true, false, true, true, true, true, false, false, false, false, true, true, true, false, true, false, true, false, false, false, false, false, false, true, true, false, true, false, false, true, false, true, true, true, false, false, false, false, true, true, false, true, true, true, true, false, false, false, true, false, true, false, false, false, false, false, false, true, true, false, false, false, false, false]);
            let encoded = BinVector::from_bools(&[true, true, true, true, true, true, true, false, true, false, false, true, true, false, true, true, false, false, true, false, true, false, true, true, false, false, true, true, false, true, false, false, true, false, true, true, true, true, false, true, false, false, true, false, true, false, false, false, false, false, false, false, true, false, false, true, true, false, true, true, true, true, false, false, false, false, true, true, true, false, true, false, true, false, false, false, false, false, false, true, true, false, true, false, false, true, false, true, true, true, false, false, false, false, true, true, true, false, true, true, true, true, false, false, false, true, false, true, false, false, false, false, false, false, false, true, true, false, true, false, false, false, true, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, true, true, true, false, true, false, false, true, true, false, true, true, false, false, true, false, true, false, true, true, false, false, true, true, false, true, false, false, true, false, true, true, true, true, false, true, false, false, true, false, true, false, false, false, false, false, false, false, true, false, false, true, true, false, true, true, true, true, false, false, false, false, true, true, true, false, true, false, true, false, false, false, true, false, false, true, true, false, true, false, false, true, false, true, true, true, false, false, false, false, true, true, true, false, true, true, true, true, false, false, false, true, false, true, false, false, false, false, false, false, false, true, true, false, true, false, false, false, true, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, true, false, false, false, false, true, true, false, true, true, false, false, false, true, false, true, false, true, true, false, false, false, true, true, false, true, false, false, true, false, false, true, true, true, true, false, true, true, false, false, false, false, true, true, false, true, false, true, true, true, true, false, false, false, true, true, true, true, false, false, true, false, false, true, false, false, false, true, false, true, true, false, false, false, true, false, true, true, true, false, true, true, true, true, true, true, false, true, true, false, true, true, false, true, false, false, false, false, false, false, true, true, false, true, true, true, true, true, true, false, false, false, true, false, false, true]);
            let encoded = BinVector::from_bools(&[false, false, false, false, true, false, false, false, false, true, true, false, true, true, false, false, false, true, false, true, false, true, true, false, false, false, true, true, false, true, false, false, true, false, false, true, true, true, true, false, true, true, false, false, false, false, true, true, false, true, false, true, true, true, true, false, false, false, true, true, true, true, false, false, true, false, false, true, false, false, false, true, false, true, true, false, false, false, true, false, true, true, true, false, true, true, true, true, true, true, false, true, true, false, true, true, true, false, true, false, false, false, false, false, false, true, true, false, true, true, false, true, true, true, true, false, false, false, true, true, false, false, false, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, true, false, false, false, false, true, true, false, true, true, false, false, false, true, false, true, false, true, true, false, false, false, true, true, false, true, false, false, true, false, false, true, true, true, true, false, true, true, false, false, false, false, true, true, false, true, false, true, true, true, true, false, false, false, true, true, true, true, false, false, true, false, false, true, false, false, false, true, false, true, true, false, false, false, true, true, true, true, true, false, true, true, true, true, true, true, false, true, true, false, true, true, true, false, true, false, false, false, false, false, false, true, true, false, true, true, false, true, true, true, true, false, false, false, true, true, false, false, false, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, true, true, false, false, true, false, false, false, true, false, true, false, false, true, false, false, false, true, true, true, false, false, false, false, false, true, false, false, false, false, false, false, true, false, true, true, false, true, true, true, true, false, true, true, false, false, false, true, false, false, true, true, true, false, false, true, false, true, true, false, false, false, false, false, false, true, true, true, true, false, true, true, false, false, false, false, false, true, true, false, false, false, true, false, true, true, false, true, false, false, false, false, false, true, true, false, true, false, false, false, true, false, true, false, true, false, true, false, true, true, true, false, true, false, true, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, true, true, false, false, true, false, false, false, true, false, true, false, false, true, false, false, false, true, true, true, false, false, false, false, false, true, false, false, false, false, false, false, true, false, true, true, false, true, true, true, true, false, true, true, false, false, false, true, false, false, true, true, true, false, false, true, false, true, true, false, false, false, false, false, false, true, true, true, true, false, true, true, false, false, false, false, false, true, true, false, false, false, true, false, true, true, false, true, false, false, false, false, false, false, true, true, false, true, false, false, false, true, false, true, false, true, true, false, true, false, true, true, true, false, false, true, false, true, false, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, true, true, false, false, true, false, false, false, true, false, true, false, false, true, false, false, false, true, true, true, false, false, false, false, false, true, false, false, false, false, false, false, true, false, true, true, false, true, true, true, true, false, true, true, false, false, false, true, false, false, true, true, true, false, false, true, false, true, false, false, false, false, false, false, false, true, true, true, true, false, true, true, false, false, false, false, false, true, true, false, false, false, true, false, true, true, false, true, false, false, false, false, false, false, true, true, false, true, false, false, false, true, false, true, false, true, true, false, true, false, true, true, true, false, false, true, false, true, false, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, true, true, false, true, false, true, false, false, true, true, true, false, true, true, false, true, true, false, true, false, false, false, false, false, true, true, false, true, false, false, true, false, false, false, true, true, true, false, false, false, false, true, true, false, false, false, false, true, false, true, false, true, true, false, false, false, true, true, true, true, false, false, false, false, false, true, true, false, true, true, true, false, true, false, true, false, false, false, true, true, false, true, true, false, false, true, false, true, false, true, false, true, false, false, true, true, true, false, false, true, true, false, false, false, false, true, true, false, true, false, true, true, false, false, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, false, true, true, false, true, false, true, false, false, true, true, true, false, true, true, false, true, true, false, true, false, false, false, false, false, true, true, false, true, false, false, true, false, false, false, true, true, true, false, false, false, false, true, true, false, false, false, false, true, false, true, false, true, true, false, false, false, true, true, true, true, false, false, false, false, false, true, true, false, true, true, true, false, true, false, true, false, false, false, true, true, false, true, true, false, false, true, false, true, false, true, true, false, true, false, false, true, true, true, false, false, true, true, false, false, false, false, false, true, true, false, true, false, true, true, false, false, false, false, false, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, true, true, false, true, false, true, false, false, true, true, true, false, true, true, false, true, true, false, true, false, false, false, false, false, true, true, false, true, false, false, true, false, false, false, true, true, true, false, false, false, false, true, true, false, false, false, false, true, false, true, false, true, true, false, false, false, true, true, true, true, false, false, false, false, false, false, true, false, true, true, true, false, true, false, true, false, false, false, true, true, false, true, true, false, false, true, false, true, false, true, true, false, true, false, false, true, true, true, false, false, true, true, false, false, false, false, false, true, true, false, true, false, true, true, false, false, false, false, false, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, false, false, false, false, false, true, true, true, true, true, true, false, true, false, false, false, false, false, true, false, false, false, false, false, true, false, false, false, false, false, true, false, false, true, true, true, false, false, false, true, false, true, false, false, true, false, true, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, true, true, true, true, false, false, false, false, true, false, true, true, true, false, true, true, true, true, false, true, false, true, false, true, true, false, true, false, true, false, true, true, true, false, true, true, false, true, false, false, true, true, true, false, false, true, false, true, false, false, true, true, false, true]);
            let encoded = BinVector::from_bools(&[true, true, false, true, false, false, false, false, false, true, true, true, true, true, true, false, true, false, false, false, false, false, true, false, false, false, false, false, true, false, false, false, false, false, true, false, false, true, true, true, false, false, false, true, false, true, false, false, true, false, true, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, true, true, true, true, false, false, false, false, true, false, true, true, true, false, true, true, true, true, false, true, false, true, false, true, true, false, true, false, false, true, false, true, true, true, false, true, true, false, true, false, false, true, true, true, false, false, false, true, false, true, false, false, false, true, true, false, false, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, false, false, false, false, false, true, false, true, true, true, true, false, true, false, false, false, false, false, true, false, false, false, false, false, true, false, false, false, false, false, true, false, false, true, true, true, false, false, false, true, false, true, false, false, true, false, true, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, true, true, true, true, false, false, false, false, true, false, true, true, true, false, true, true, true, true, false, true, false, true, false, true, true, false, true, false, false, true, false, true, true, true, false, true, true, false, true, false, false, true, true, true, false, false, false, true, false, true, false, false, false, true, true, false, false, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, true, true, true, true, true, true, false, true, false, false, false, false, true, false, false, false, false, true, false, false, true, true, true, true, false, true, true, false, true, false, false, true, false, true, true, true, false, true, false, false, true, false, true, false, false, false, false, false, true, true, false, true, true, true, true, false, false, true, false, true, true, false, false, true, true, false, true, true, false, true, true, false, false, true, true, true, false, true, true, true, false, true, true, true, true, false, false, true, false, false, false, false, false, false, true, false, true, true, false, false, false, true, true, false, false, false, true, true, false, true, true, true, true, true, false, true]);
            let encoded = BinVector::from_bools(&[false, false, false, false, true, true, true, true, true, true, false, true, false, false, false, false, true, false, false, false, false, true, false, false, true, true, true, true, false, true, true, false, true, false, false, true, false, true, true, true, false, true, false, false, true, false, true, false, false, false, false, false, true, true, false, true, true, true, true, false, false, true, false, true, true, false, false, true, true, false, true, true, false, true, true, false, false, true, true, true, false, true, true, true, false, true, true, true, true, false, false, true, false, false, false, false, false, false, false, true, false, true, true, false, false, false, true, true, false, false, false, false, true, true, false, true, true, true, false, true, true, false, true, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, true, true, true, true, true, true, false, true, false, false, false, false, true, false, true, false, false, true, false, false, true, true, true, true, false, true, true, false, true, false, false, true, false, true, true, true, false, true, false, false, true, false, true, false, false, false, false, false, true, true, false, true, true, true, true, false, false, true, false, true, true, false, false, true, true, false, true, true, false, true, true, false, false, true, true, true, false, true, true, true, false, true, true, true, true, false, false, true, false, false, false, false, false, false, false, true, false, true, true, false, false, false, true, true, false, false, false, false, true, true, false, true, true, true, false, true, true, false, true, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, false, false, true, true, false, false, true, false, true, true, false, true, true, true, false, false, true, false, false, true, false, false, true, false, false, true, false, false, false, false, true, true, false, false, false, false, true, false, false, false, true, false, true, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, true, false, true, false, true, true, false, false, false, false, false, false, true, false, true, true, false, false, false, true, false, true, true, true, false, false, false, true, true, true, false, true, true, true, true, false, true, true, true, true, true, true, true, false, false, true, true, false, true, true, false, false, false, true, true, true, true, false]);
            let encoded = BinVector::from_bools(&[false, false, false, true, false, false, true, true, false, false, true, false, true, true, false, true, true, true, false, false, true, false, false, true, false, false, true, false, false, true, false, false, false, false, true, true, false, false, false, false, true, false, false, false, true, false, true, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, true, false, true, false, true, true, false, false, false, false, false, false, true, false, true, true, false, false, false, true, false, true, true, true, false, false, false, true, true, true, false, true, false, true, true, true, false, true, true, true, true, true, true, true, false, false, true, true, false, false, true, true, false, false, false, true, false, true, true, true, false, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, false, false, true, true, false, false, true, false, true, true, false, true, true, true, false, false, true, false, false, true, false, false, true, false, false, true, false, false, false, true, true, true, false, false, false, false, true, false, false, false, true, false, true, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, true, false, true, false, true, true, false, false, false, false, false, false, true, false, true, true, false, false, false, true, false, true, true, true, false, false, false, true, true, true, false, true, false, true, true, true, false, true, true, true, true, true, true, true, false, false, true, true, false, false, true, true, false, false, false, true, false, true, true, true, false, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, true, true, false, true, true, false, true, true, true, true, true, true, false, true, false, true, false, true, true, false, true, false, false, true, true, false, false, false, false, true, true, true, true, false, true, false, true, true, true, true, false, false, true, true, false, false, true, true, true, true, true, true, true, true, false, true, false, true, false, true, true, false, true, false, false, false, true, false, true, false, false, false, true, false, false, false, false, true, false, false, false, false, false, false, false, false, false, true, true, true, false, true, true, true, true, true, true, false, false, true, true, false, false, false, true, false, true, true, false, false, false, false, true, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, false, true, true, true, false, true, true, false, true, true, true, true, true, true, false, true, false, true, false, true, true, false, true, false, false, true, true, false, false, false, false, true, true, true, true, false, true, false, true, true, true, true, false, false, true, true, false, false, true, true, true, true, true, true, true, true, false, true, false, true, false, true, true, false, true, false, false, false, true, false, true, false, false, false, true, false, false, false, false, true, false, false, false, false, false, false, false, false, false, true, true, true, true, false, true, true, true, true, true, true, false, false, true, true, false, false, false, true, false, false, true, true, false, false, false, false, true, true, true, false, true, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, true, true, false, true, true, false, true, true, true, true, true, true, false, true, false, true, false, true, true, false, true, false, false, true, true, false, false, false, false, true, true, true, true, false, true, false, true, true, true, true, false, false, true, true, false, false, true, true, true, true, true, true, true, true, false, true, false, true, false, true, true, true, true, false, false, false, true, false, true, false, false, false, true, false, false, false, false, true, false, false, false, false, false, false, false, false, false, true, true, true, true, false, true, true, true, true, true, true, false, false, true, true, false, false, false, true, false, false, true, true, false, false, false, false, true, true, true, false, true, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, true, false, true, true, false, true, true, true, false, true, true, true, false, true, true, false, true, false, false, true, true, false, true, false, true, false, false, false, false, true, true, true, false, false, false, false, false, true, false, false, true, false, false, true, false, true, true, true, false, true, true, true, false, true, false, true, true, true, true, true, true, false, false, false, false, true, true, true, false, false, false, false, true, false, true, false, true, true, true, false, true, false, true, true, true, true, false, false, false, false, false, true, true, true, false, true, false, false, true, true, true, true, true, true, true, false, false, true, false, true, false, false, false, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, true, true, true, false, true, true, false, true, true, true, false, true, true, true, false, true, true, false, true, false, false, true, true, false, true, false, true, false, false, false, false, true, true, true, false, false, false, false, false, true, false, false, true, false, false, true, false, true, true, true, false, true, true, true, false, true, false, true, true, true, true, true, true, false, false, false, false, true, true, true, false, false, false, false, true, false, true, false, true, true, true, false, true, false, true, true, true, true, false, false, false, false, false, false, true, true, true, false, true, false, false, true, true, true, true, true, true, true, false, false, false, true, false, true, false, false, true, false, true, false, true, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, true, false, true, true, false, true, false, true, false, true, true, true, false, true, true, false, true, false, false, true, true, false, true, false, true, false, false, false, false, true, true, true, false, false, false, false, false, true, false, false, true, false, false, true, false, true, true, true, false, true, true, true, false, true, false, true, true, true, true, true, true, false, false, false, false, true, true, true, false, false, false, false, true, false, true, false, true, true, true, false, true, false, true, true, true, true, false, false, false, false, false, false, true, true, true, false, true, false, false, true, true, true, true, true, true, true, false, false, false, true, false, true, false, false, true, false, true, false, true, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, false, false, false, false, true, false, true, true, true, true, false, true, false, true, true, true, false, false, true, false, false, false, false, true, false, true, true, false, true, false, false, false, true, false, false, true, false, true, true, true, true, true, false, true, false, true, true, true, false, false, false, false, false, true, true, true, true, true, false, false, false, true, false, true, true, true, true, true, false, false, true, false, true, false, false, true, false, true, false, false, true, true, true, false, true, true, true, false, true, true, false, false, false, true, true, false, true, false, true, false, true, false, false, true, true, false, false, true, false, false, false, true, false, true, true, true]);
            let encoded = BinVector::from_bools(&[true, false, false, false, false, false, false, false, true, false, true, true, true, true, false, true, false, true, true, true, false, false, true, false, false, false, false, true, false, true, true, false, true, false, false, false, true, false, false, true, false, true, true, true, true, true, false, true, false, true, true, true, false, false, false, false, false, true, true, true, true, true, false, false, false, true, false, true, true, true, true, true, false, false, true, false, true, false, false, true, false, true, false, false, true, true, true, false, true, true, true, false, true, true, true, false, false, false, true, true, false, true, false, true, false, true, false, false, true, true, false, false, false, true, false, false, false, true, false, false, true, true, false, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, false, false, false, false, true, false, true, true, true, true, false, true, false, true, true, true, false, false, true, false, false, false, false, true, false, true, true, false, true, false, false, false, true, false, false, true, false, true, true, true, true, true, false, true, false, true, true, true, false, false, false, false, false, true, true, true, true, true, false, false, false, true, false, true, true, true, true, true, false, false, true, false, true, false, false, true, false, true, false, false, true, true, true, false, true, true, true, false, true, true, true, false, false, false, true, true, false, true, false, true, false, true, false, false, true, true, true, false, false, true, false, false, false, true, false, false, true, true, false, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, false, false, false, false, true, true, false, true, true, true, false, true, true, false, true, true, false, false, false, false, true, false, true, true, false, false, false, false, true, true, false, false, true, false, false, true, false, false, false, true, true, false, false, true, true, false, true, false, false, true, false, true, true, true, true, false, true, true, true, true, false, true, false, false, false, true, true, false, false, false, true, true, true, false, true, false, true, true, false, false, true, false, true, false, false, true, true, true, true, true, true, false, true, true, false, true, true, false, true, false, true, true, false, true, true, false, false, true, true, false, false, true, false, false, true, false]);
            let encoded = BinVector::from_bools(&[true, false, true, true, false, false, false, false, true, true, false, true, true, true, false, true, true, false, true, true, false, false, false, false, true, false, true, true, false, false, false, false, true, true, false, false, true, false, false, true, false, false, false, true, true, false, false, true, true, false, true, false, false, true, false, true, true, true, true, false, true, true, true, true, false, true, false, false, false, true, true, false, false, false, true, true, true, false, true, false, true, true, false, false, true, false, true, false, false, true, true, true, true, true, false, true, false, true, true, false, true, true, false, true, false, true, true, false, true, true, false, false, false, true, true, false, false, true, false, false, false, true, true, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, false, false, false, false, false, true, false, true, true, true, false, true, true, false, true, true, false, false, false, false, true, false, true, true, false, false, false, false, true, true, false, false, true, false, false, true, false, false, false, true, true, false, false, true, true, false, true, false, false, true, false, true, true, true, true, false, true, true, true, true, false, true, false, false, false, true, true, false, false, false, true, true, true, false, true, false, true, true, false, false, true, false, true, false, false, true, true, true, true, true, false, true, false, true, true, false, true, true, false, true, false, true, true, false, true, true, false, false, false, true, true, false, false, true, false, false, false, true, true, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, true, false, false, false, false, false, true, true, false, true, false, false, false, true, true, false, false, true, false, false, true, true, false, false, false, true, false, true, false, false, true, false, false, false, true, true, false, true, true, false, true, false, false, true, true, false, true, false, true, true, true, true, true, false, false, false, false, true, false, true, true, false, false, false, true, false, false, true, true, true, true, false, true, true, false, false, true, true, false, true, false, false, false, false, false, false, false, true, true, true, false, true, false, false, false, false, true, true, true, true, false, false, true, true, true, false, false, true, false, true, false, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[true, true, true, true, true, false, false, false, false, false, true, true, false, true, false, false, false, true, true, false, false, true, false, false, true, true, false, false, false, true, false, true, false, false, true, false, false, false, true, true, false, true, true, false, true, false, false, true, true, false, true, false, true, true, true, true, true, false, false, false, false, true, false, true, true, false, false, false, true, false, false, true, true, true, true, false, true, true, false, false, true, true, false, true, false, false, false, false, false, false, false, true, true, true, true, false, true, false, false, false, false, true, true, true, true, false, false, true, true, true, false, false, false, true, false, true, false, true, true, true, true, false, false, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, true, false, false, false, false, false, true, true, false, true, false, false, false, true, true, false, false, true, false, false, true, false, false, false, false, true, false, true, false, false, true, false, false, false, true, true, false, true, true, false, true, false, false, true, true, false, true, false, true, true, true, true, true, false, false, false, false, true, false, true, true, false, false, false, true, false, false, true, true, true, true, false, true, true, false, false, true, true, false, true, false, false, false, false, false, false, false, true, true, true, true, false, true, false, false, false, false, true, true, true, true, false, false, true, true, true, false, false, false, true, false, true, false, true, true, true, true, false, false, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, true, true, true, false, true, false, true, false, true, true, true, false, true, true, false, false, false, true, false, false, true, true, true, true, false, false, false, false, true, true, false, true, false, true, true, true, false, false, true, true, false, true, true, true, false, true, false, false, false, false, false, false, false, false, true, false, true, true, true, true, true, false, true, true, false, true, false, false, false, false, true, false, false, true, true, true, true, true, true, true, false, true, true, false, true, true, false, false, false, true, false, false, true, false, true, true, false, false, false, true, false, false, false, true, false, true, false, false, true, false, true, true, true, false, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, false, true, true, true, false, true, false, true, false, true, true, true, false, true, true, false, false, false, true, false, false, true, true, true, true, false, false, false, false, true, true, false, true, false, true, true, true, false, false, true, true, false, true, true, true, false, true, false, false, false, false, false, false, false, false, true, false, true, true, true, true, true, false, true, true, false, true, false, false, false, false, true, false, false, true, true, true, true, true, true, true, false, true, true, false, true, true, false, false, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, false, true, false, false, true, false, false, true, false, true, true, true, true, false, true, true, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, true, true, true, false, true, false, true, false, true, true, true, false, true, true, false, false, false, true, false, false, true, true, true, true, false, false, false, false, true, true, false, true, false, true, true, true, false, false, true, true, false, true, false, true, false, true, false, false, false, false, false, false, false, false, true, false, true, true, true, true, true, false, true, true, false, true, false, false, false, false, true, false, false, true, true, true, true, true, true, true, false, true, true, false, true, true, false, false, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, false, true, false, false, true, false, false, true, false, true, true, true, true, false, true, true, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, false, false, true, true, false, true, false, false, false, false, true, false, false, false, false, true, true, true, false, true, true, false, true, true, false, true, false, true, true, false, false, false, true, false, true, true, false, false, true, true, true, false, false, true, true, true, false, false, true, true, true, false, false, false, true, true, true, false, false, false, false, false, false, false, false, false, false, true, true, false, false, true, true, true, true, true, true, true, true, false, false, false, true, true, false, true, false, true, false, false, false, false, true, true, true, false, true, true, false, false, true, true, true, false, true, false, false, true, true, false, false, true, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, false, false, false, false, false, true, true, false, true, false, false, false, false, true, false, false, false, false, true, true, true, false, true, true, false, true, true, false, true, false, true, true, false, false, false, true, false, true, true, false, false, true, true, true, false, false, true, true, true, false, false, true, true, true, false, false, false, true, true, true, false, false, false, false, false, false, false, false, false, false, true, true, false, false, true, true, true, true, true, true, true, true, false, false, false, true, true, false, true, false, true, false, false, true, false, false, true, true, true, false, true, true, false, false, true, true, true, false, true, false, false, false, true, true, false, false, true, false, false, true, false, true, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, false, false, true, true, false, true, false, false, false, false, true, false, false, false, false, true, true, true, false, true, true, false, true, true, false, true, false, true, true, false, false, false, true, false, true, true, false, false, true, true, true, false, false, true, true, true, false, false, true, true, true, false, false, false, true, true, true, false, true, false, false, false, false, false, false, false, false, true, true, false, false, true, true, true, true, true, true, true, true, false, false, false, true, true, false, true, false, true, false, false, true, false, false, true, true, true, false, true, true, false, false, true, true, true, false, true, false, false, false, true, true, false, false, true, false, false, true, false, true, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, false, true, true, false, false, false, true, true, false, true, false, false, true, true, false, true, false, false, true, true, true, false, true, true, false, false, true, false, false, true, true, true, true, false, false, true, true, true, true, false, true, true, false, false, false, true, false, true, true, false, false, true, false, true, false, false, true, true, false, false, false, false, true, false, true, true, true, false, true, true, true, true, true, false, true, true, false, true, false, true, false, false, false, true, false, false, true, true, true, false, true, false, false, true, true, true, true, false, true, false, false, true, true, false, true, true, false, true, true, true, true, false, true, false, true, true]);
            let encoded = BinVector::from_bools(&[false, false, true, true, false, true, true, false, false, false, true, true, false, true, false, false, true, true, false, true, false, false, true, true, true, false, true, true, false, false, true, false, false, true, true, true, true, false, false, true, true, true, true, false, true, true, false, false, false, true, false, true, true, false, false, true, false, true, false, false, true, true, false, false, false, false, true, false, true, true, true, false, true, true, true, true, true, false, true, true, false, true, false, true, false, false, false, true, false, false, true, true, true, false, false, true, false, false, true, true, true, true, false, true, false, false, true, true, false, true, true, true, false, true, true, true, true, false, true, true, false, true, false, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, false, true, true, false, false, false, true, true, false, true, false, false, true, true, false, true, false, false, true, true, true, false, true, true, false, false, true, false, false, true, true, true, true, false, false, true, true, true, true, false, true, true, false, false, false, true, false, true, false, false, false, true, false, true, false, false, true, true, false, false, false, false, true, false, true, true, true, false, true, true, true, true, true, false, true, true, false, true, false, true, false, false, false, true, false, false, true, true, true, false, false, true, false, false, true, true, true, true, false, true, false, false, true, true, false, true, true, true, false, true, true, true, true, false, true, true, false, true, false, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, true, false, true, true, false, true, false, false, true, true, false, false, true, true, false, true, false, true, false, false, false, true, true, true, false, false, false, true, false, true, false, false, true, true, false, false, true, false, true, true, false, true, false, false, true, true, true, true, true, true, true, false, false, true, true, true, false, false, true, false, false, true, false, true, false, false, false, true, false, false, false, false, true, true, true, false, true, true, false, false, false, false, false, false, true, true, false, true, false, true, true, true, false, true, false, false, false, true, true, true, true, true, true, false, true, true, true, false, false, false, false, false, true, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, false, false, true, false, true, true, false, true, false, false, true, true, false, false, true, true, false, true, false, true, false, false, false, true, true, true, false, false, false, true, false, true, false, false, true, true, false, false, true, false, true, true, false, true, false, false, true, true, true, true, true, true, true, false, false, true, true, true, false, false, true, false, false, true, false, true, false, false, false, true, false, false, false, false, true, true, true, false, true, true, false, false, false, false, false, false, true, true, false, true, false, true, true, true, true, false, true, false, false, false, true, true, true, true, true, true, false, true, false, true, true, false, false, false, false, false, true, true, true, false, false, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, true, false, true, true, false, true, false, false, true, true, false, false, true, true, false, true, false, true, false, false, false, true, true, true, false, false, false, true, false, true, false, false, true, true, false, false, true, false, true, true, false, true, false, false, true, true, true, true, true, true, true, false, false, true, true, true, true, false, true, false, false, true, false, true, false, false, false, true, false, false, false, false, true, true, true, false, true, true, false, false, false, false, false, false, true, true, false, true, false, true, true, true, true, false, true, false, false, false, true, true, true, true, true, true, false, true, false, true, true, false, false, false, false, false, true, true, true, false, false, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, false, false, false, true, true, true, false, false, true, false, false, false, true, false, true, true, false, false, false, false, false, false, true, false, true, false, true, true, false, true, false, true, true, true, false, false, false, false, true, false, true, true, false, false, true, false, true, true, true, false, false, false, false, true, false, true, false, false, false, true, false, false, false, false, true, true, false, false, true, true, true, true, true, true, true, true, false, true, true, true, true, false, true, true, false, false, false, true, true, true, true, false, false, false, true, true, false, false, true, false, false, true, false, true, true, true, false, true, false, true, true, false, false, false, true, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, false, false, false, true, true, true, false, false, true, false, false, false, true, false, true, true, false, false, false, false, false, false, true, false, true, false, true, true, false, true, false, true, true, true, false, false, false, false, true, false, true, true, false, false, true, false, true, true, true, false, false, false, false, true, false, true, false, false, false, true, false, false, false, false, true, true, false, false, true, true, true, true, true, true, true, true, false, true, true, true, true, false, true, true, false, false, false, true, true, true, false, true, false, false, false, true, true, false, false, true, false, false, true, false, true, true, true, true, false, true, false, true, true, false, false, false, false, true, false, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, false, false, false, true, true, true, false, false, true, false, false, false, true, false, true, true, false, false, false, false, false, false, true, false, true, false, true, true, false, true, false, true, true, true, false, false, false, false, true, false, true, true, false, false, true, false, true, true, true, false, false, false, false, true, false, true, false, false, false, true, false, false, false, false, true, true, false, false, true, true, true, true, true, false, true, true, false, true, true, true, true, false, true, true, false, false, false, true, true, true, false, true, false, false, false, true, true, false, false, true, false, false, true, false, true, true, true, true, false, true, false, true, true, false, false, false, false, true, false, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, false, false, true, true, true, true, false, true, true, false, true, false, false, true, false, false, false, false, true, true, false, false, true, false, true, false, false, false, true, true, false, false, true, true, true, true, false, true, true, true, true, true, true, true, false, false, false, false, false, false, true, true, false, true, true, false, true, false, false, true, true, false, true, true, false, false, true, false, false, false, true, false, true, true, false, false, false, false, true, false, true, false, false, false, true, true, true, false, false, false, false, false, false, true, false, false, false, false, false, true, false, true, false, true, true, true, true, false, true, false, true, false, true, false, false, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, false, false, true, true, true, true, false, true, true, false, true, false, false, true, false, false, false, false, true, true, false, false, true, false, true, false, false, false, true, true, false, false, true, true, true, true, false, true, true, true, true, true, true, true, false, false, false, false, false, false, true, true, false, true, true, false, true, false, false, true, true, false, true, true, false, false, true, false, false, false, true, false, true, true, false, false, false, false, true, false, true, false, false, false, true, true, true, false, false, false, true, false, false, false, true, false, false, false, false, false, true, false, true, false, true, true, false, true, true, false, true, false, true, false, false, true, false, false, false, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, false, false, true, true, true, true, false, true, true, false, true, false, false, true, false, false, false, false, true, true, false, false, true, false, true, false, false, false, true, true, false, false, true, true, true, true, false, true, true, true, true, true, true, true, false, false, false, false, false, false, true, true, false, true, true, false, true, false, false, true, true, false, true, true, false, false, true, false, false, false, true, false, true, true, false, false, false, false, true, false, true, false, false, false, true, false, true, false, false, false, true, false, false, false, true, false, false, false, false, false, true, false, true, false, true, true, false, true, true, false, true, false, true, false, false, true, false, false, false, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, false, true, true, false, true, true, true, false, false, true, false, true, true, true, true, true, false, false, false, false, false, true, true, false, false, false, false, false, true, false, true, true, false, false, true, false, false, true, true, false, true, true, true, true, true, false, true, true, true, true, false, false, false, false, false, true, false, false, true, true, true, true, false, true, true, true, true, false, true, true, false, true, true, true, false, true, false, false, false, false, true, true, false, true, true, false, false, false, true, true, false, false, false, true, false, true, true, false, true, false, true, true, true, false, true, true, false, false, false, true, false, false, true, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, false, false, false, true, true, false, true, true, true, false, false, true, false, true, true, true, true, true, false, false, false, false, false, true, true, false, false, false, false, false, true, false, true, true, false, false, true, false, false, true, true, false, true, true, true, true, true, false, true, true, true, true, false, false, false, false, false, true, false, false, true, true, true, true, false, true, true, true, true, false, true, true, false, true, true, true, false, true, false, false, false, false, true, true, false, true, true, false, false, false, true, true, false, false, false, false, true, false, true, true, false, true, false, true, true, true, false, true, true, true, false, false, false, true, false, false, false, true, true, false, true, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, false, true, true, false, true, true, true, false, false, true, false, true, true, true, true, true, false, false, false, false, false, true, true, false, false, false, false, false, true, false, true, true, false, false, true, false, false, true, false, false, true, true, true, true, true, false, true, true, true, true, false, false, false, false, false, true, false, false, true, true, true, true, false, true, true, true, true, false, true, true, false, true, true, true, false, true, false, false, false, false, true, true, false, true, true, false, false, false, true, true, false, false, false, false, true, false, true, true, false, true, false, true, true, true, false, true, true, true, false, false, false, true, false, false, false, true, true, false, true, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, true, true, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, true, false, true, true, false, false, false, false, false, false, true, false, false, true, true, true, false, false, true, false, false, true, false, false, true, false, true, true, true, false, false, false, false, true, false, false, true, true, false, true, false, true, true, true, true, false, true, true, false, true, true, false, true, false, false, true, false, true, false, false, false, false, true, true, false, false, true, false, true, false, true, true, true, false, true, true, true, true, true, true, false, true, true, false, false, true, true, false, false, true, false, false, true, true, false, true, false, true, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, true, true, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, true, false, true, true, false, false, false, false, false, false, true, false, false, true, true, true, false, false, true, false, false, true, false, false, true, false, true, true, true, false, false, false, false, true, false, false, true, true, false, true, false, true, true, true, true, false, true, true, false, true, true, false, true, false, false, true, false, true, false, false, false, false, true, true, false, false, true, false, true, false, true, true, true, false, false, true, true, true, true, true, true, false, true, true, false, false, true, true, false, true, false, true, false, false, true, true, false, false, true, false, true, false, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, true, true, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, true, false, true, true, false, false, false, false, false, false, true, false, false, true, true, true, false, false, true, false, false, true, false, false, true, false, true, true, true, false, false, false, false, true, false, false, true, true, false, true, false, true, true, true, true, false, true, true, false, true, true, false, true, false, false, true, false, true, false, false, false, false, true, true, false, true, true, false, true, false, true, true, true, false, false, true, true, true, true, true, true, false, true, true, false, false, true, true, false, true, false, true, false, false, true, true, false, false, true, false, true, false, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, true, true, true, false, false, false, false, true, true, true, true, true, false, true, false, true, false, false, true, true, true, true, false, false, false, true, true, true, false, true, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, true, false, false, true, true, false, true, false, false, false, false, false, false, true, true, true, true, true, true, false, false, true, false, true, false, true, true, true, false, true, false, false, false, false, false, false, false, true, false, true, false, true, true, true, true, false, false, true, true, true, true, true, false, false, true, true, false, true, true, false, true, false, true, false, true, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, true, true, true, false, false, false, false, true, true, true, true, true, false, true, false, true, false, false, true, true, true, true, false, false, false, true, true, true, false, true, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, true, false, false, true, true, false, true, false, false, false, false, false, false, true, true, true, true, true, true, false, false, true, false, true, false, true, true, true, false, true, false, false, false, false, false, false, false, true, false, true, false, true, true, true, true, true, false, false, true, true, true, true, true, false, false, true, true, false, false, true, true, false, true, false, true, true, false, true, true, false, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, true, true, true, false, false, false, false, true, true, true, true, true, false, true, false, true, false, false, true, true, true, true, false, false, false, true, true, true, false, true, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, true, false, false, true, true, false, true, false, false, false, false, false, false, true, true, true, true, true, true, false, false, true, false, true, false, true, true, true, false, true, false, false, true, false, false, false, false, true, false, true, false, true, true, true, true, true, false, false, true, true, true, true, true, false, false, true, true, false, false, true, true, false, true, false, true, true, false, true, true, false, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, true, false, true, false, true, true, false, true, true, false, false, true, false, false, false, false, true, false, false, true, false, false, false, true, false, true, true, true, false, false, false, false, false, false, false, true, true, false, true, true, true, false, true, false, false, false, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, false, true, true, true, true, true, false, true, true, true, true, true, true, true, false, true, true, false, false, true, false, true, true, true, true, true, true, true, false, true, false, false, true, true, false, false, true, true, true, true]);
            let encoded = BinVector::from_bools(&[true, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, true, false, true, false, true, true, false, true, true, false, false, true, false, false, false, false, true, false, false, true, false, false, false, true, false, true, true, true, false, false, false, false, false, false, false, true, true, false, true, true, true, false, true, false, false, false, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, false, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, true, true, false, false, true, false, true, true, true, true, true, true, true, false, true, true, false, false, true, true, false, false, true, true, true, true, true, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, true, false, true, false, true, true, false, true, true, false, false, true, false, false, false, false, true, false, false, true, false, false, false, true, false, true, true, true, false, false, false, false, false, false, false, true, true, false, true, true, true, false, true, false, false, false, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, true, true, false, false, true, false, true, true, true, true, true, true, true, false, true, true, false, false, true, true, false, false, true, true, true, true, true, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, true, false, false, true, false, false, true, true, true, false, true, false, true, true, true, false, true, true, true, false, true, true, true, false, true, true, true, false, true, false, true, false, false, true, false, true, false, false, false, true, false, true, false, true, true, false, true, true, false, true, true, false, false, false, true, true, true, false, true, false, true, true, true, true, true, true, true, true, true, false, true, false, false, true, false, false, true, false, false, false, true, false, false, false, true, false, true, false, true, true, false, true, false, false, false, false, true, true, true, false, true, false, false, false, false, true, false, false, false, false, true, false, false, true, true, true]);
            let encoded = BinVector::from_bools(&[false, true, false, true, true, false, false, true, false, false, true, true, true, false, true, false, true, true, true, false, true, true, true, false, true, true, true, false, true, true, true, false, true, false, true, false, false, true, false, true, false, false, false, true, false, true, false, true, true, false, true, true, false, true, true, false, false, false, true, true, true, false, true, false, true, true, true, true, true, true, true, true, true, false, true, false, false, true, false, false, true, false, false, false, true, false, false, false, true, false, true, false, true, true, true, false, true, false, false, false, false, true, true, true, false, true, false, false, false, false, false, true, false, false, false, false, true, false, false, false, true, true, true, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, true, false, false, true, false, false, true, true, true, false, true, false, true, true, true, false, true, true, true, false, true, true, true, false, true, true, true, false, true, false, true, false, false, true, false, true, false, false, false, true, false, true, false, true, true, false, true, true, false, true, true, false, false, false, true, true, true, false, true, false, true, true, true, true, true, true, true, true, true, false, true, false, false, true, false, false, true, false, false, false, true, false, false, false, true, false, true, false, true, true, true, false, true, false, false, false, false, true, true, true, false, true, true, false, false, false, false, true, false, false, false, false, true, false, false, false, true, true, true, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, false, false, true, false, true, true, false, true, false, true, false, true, true, true, true, false, true, false, false, true, true, true, true, true, false, true, false, true, true, true, true, true, false, false, false, false, true, false, true, false, true, false, false, true, true, false, false, true, false, false, false, true, true, false, false, true, true, true, false, false, true, true, true, false, true, true, true, false, false, true, true, false, true, false, false, true, true, false, true, true, false, false, false, true, false, false, true, false, true, true, false, false, true, false, true, false, true, true, true, true, true, false, false, false, false, true, false, true, false, true, true, true, true, false, true, false]);
            let encoded = BinVector::from_bools(&[true, true, true, false, false, false, true, false, true, true, false, true, false, true, false, true, true, true, true, false, true, false, false, true, true, true, true, true, false, true, false, true, true, true, true, true, false, false, false, false, true, false, true, false, true, false, false, true, true, false, false, true, false, false, false, true, true, false, false, true, true, true, false, false, true, true, true, false, true, true, true, false, false, true, true, false, true, false, false, true, true, false, true, true, false, false, false, true, false, false, true, false, true, true, true, false, false, true, false, true, false, true, true, true, true, true, false, false, false, false, true, true, false, true, false, true, true, true, true, true, false, true, false, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, false, false, true, false, true, true, false, true, false, true, false, true, true, true, true, false, true, false, false, true, true, true, true, true, false, true, false, true, true, true, true, true, false, false, false, false, true, false, true, false, true, false, false, true, true, false, false, true, false, false, false, true, true, false, false, true, true, true, false, false, true, true, true, false, true, true, false, false, false, true, true, false, true, false, false, true, true, false, true, true, false, false, false, true, false, false, true, false, true, true, true, false, false, true, false, true, false, true, true, true, true, true, false, false, false, false, true, true, false, true, false, true, true, true, true, true, false, true, false, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, false, true, false, false, true, true, false, true, true, true, true, true, false, true, true, false, true, false, false, true, false, false, false, false, false, false, false, false, false, true, true, true, false, false, true, false, false, false, true, false, true, true, false, true, true, true, true, true, true, false, true, false, false, true, false, false, true, true, false, false, false, true, false, true, true, false, false, true, true, true, false, true, true, false, false, false, true, true, true, true, true, false, true, false, false, false, true, true, true, false, false, false, false, false, false, false, false, false, true, false, false, false, true, true, true, false, true, false, false, true, true, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, false, true, false, false, true, true, false, true, true, true, true, true, false, true, true, false, true, false, false, true, false, false, false, false, false, false, false, false, false, true, true, true, false, false, true, false, false, false, true, false, true, true, false, true, true, true, true, true, true, false, true, false, false, true, false, false, true, true, false, false, false, true, false, true, true, false, false, true, true, true, false, true, true, false, false, false, true, true, true, true, true, false, true, false, false, false, true, true, true, false, false, false, false, false, false, false, false, false, false, true, false, false, false, true, true, true, true, false, true, false, false, true, true, false, true, false, true, false, false, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, false, true, false, false, true, true, false, true, true, true, true, true, false, true, true, false, true, false, false, true, false, false, false, false, false, false, false, false, false, true, true, true, false, false, true, false, false, false, true, false, true, true, false, true, true, true, true, true, true, false, true, false, false, false, false, false, true, true, false, false, false, true, false, true, true, false, false, true, true, true, false, true, true, false, false, false, true, true, true, true, true, false, true, false, false, false, true, true, true, false, false, false, false, false, false, false, false, false, false, true, false, false, false, true, true, true, true, false, true, false, false, true, true, false, true, false, true, false, false, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, false, false, false, false, true, true, true, true, false, true, false, true, true, true, true, true, true, false, false, false, true, true, true, false, false, true, false, true, false, true, false, false, true, true, true, true, false, false, true, false, false, true, false, true, false, false, false, true, false, true, true, true, true, true, true, false, true, true, true, false, false, false, false, false, true, false, true, false, false, true, false, false, true, true, true, true, true, true, false, false, true, true, true, false, false, true, true, false, true, false, false, true, false, true, true, true, true, true, true, true, false, false, true, false, true, false, false, false, false, false, false, false, true, true, false, true]);
            let encoded = BinVector::from_bools(&[true, false, false, true, false, false, false, false, true, true, true, true, false, true, false, true, true, true, true, true, true, false, false, false, true, true, true, false, false, true, false, true, false, true, false, false, true, true, true, true, false, false, true, false, false, true, false, true, false, false, false, true, false, true, true, true, true, true, true, false, true, true, true, false, false, false, false, false, true, false, true, false, false, true, false, false, true, true, true, true, true, true, false, false, true, true, true, false, false, true, true, false, true, false, false, false, true, false, true, true, true, true, true, true, true, false, false, true, false, true, true, false, false, false, false, false, false, false, true, true, true, false, false, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, false, false, false, false, false, true, true, true, false, true, false, true, true, true, true, true, true, false, false, false, true, true, true, false, false, true, false, true, false, true, false, false, true, true, true, true, false, false, true, false, false, true, false, true, false, false, false, true, false, true, true, true, true, true, true, false, true, true, true, false, false, false, false, false, true, false, true, false, false, true, false, false, true, true, true, true, true, true, false, false, true, true, true, false, false, true, true, false, true, false, false, false, true, false, true, true, true, true, true, true, true, false, false, true, false, true, true, false, false, false, false, false, false, false, true, true, true, false, false, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, true, false, false, false, true, false, false, false, true, true, false, false, false, false, false, false, true, false, false, false, true, true, true, true, true, false, false, true, true, true, true, true, false, false, false, false, true, true, false, false, false, false, false, true, true, true, true, false, true, true, false, true, false, true, false, true, true, false, true, true, false, false, true, false, false, true, true, false, true, false, true, false, true, false, false, true, true, false, true, false, true, true, false, true, false, true, false, false, false, true, false, false, true, false, false, false, true, true, true, true, true, false, true, true, true, false, false, false, false, true, false, false, true, false, true, false]);
            let encoded = BinVector::from_bools(&[false, false, true, false, true, false, false, false, true, false, false, false, true, true, false, false, false, false, false, false, true, false, false, false, true, true, true, true, true, false, false, true, true, true, true, true, false, false, false, false, true, true, false, false, false, false, false, true, true, true, true, false, true, true, false, true, false, true, false, true, true, false, true, true, false, false, true, false, false, true, true, false, true, false, true, false, true, false, false, true, true, false, true, false, true, true, false, true, false, true, false, false, false, true, true, false, false, true, false, false, false, true, true, true, true, true, false, true, true, true, true, false, false, false, false, true, false, false, false, true, false, true, true, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, true, false, false, false, true, false, false, false, true, true, false, false, false, false, false, false, true, false, false, false, true, true, true, true, true, false, false, true, true, true, true, true, false, false, false, false, true, true, false, false, false, false, false, true, true, true, true, false, true, true, false, true, false, true, false, true, true, false, true, true, false, false, true, false, false, true, true, false, true, false, true, false, true, false, false, true, true, false, true, false, true, true, false, true, false, true, true, false, false, true, true, false, false, true, false, false, false, true, true, true, true, true, false, true, true, true, true, false, false, false, false, true, false, false, false, true, false, true, true, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, false, false, false, true, true, true, false, false, true, true, true, false, true, true, true, false, false, false, false, true, true, false, true, true, true, true, true, true, false, false, false, true, false, true, false, true, false, true, false, false, false, false, true, true, false, false, true, false, true, false, false, true, false, false, true, true, true, true, true, true, false, false, true, false, true, false, false, true, true, true, false, false, true, false, true, false, false, false, true, true, true, true, false, true, true, true, false, false, true, false, true, true, true, true, true, false, false, false, false, false, false, false, false, false, true, true, true, false, true, false, false, true, false, false, true, false]);
            let encoded = BinVector::from_bools(&[false, false, true, true, false, false, false, true, true, true, false, false, true, true, true, false, true, true, true, false, false, false, false, true, true, false, true, true, true, true, true, true, false, false, false, true, false, true, false, true, false, true, false, false, false, false, true, true, false, false, true, false, true, false, false, true, false, false, true, true, true, true, true, true, false, false, true, false, true, false, false, true, true, true, false, false, true, false, true, false, false, false, true, true, true, true, false, true, true, true, false, false, true, false, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, true, true, true, true, false, true, false, false, true, false, false, false, true, true, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, false, false, false, true, true, true, false, false, true, true, true, false, true, true, true, false, false, false, false, true, true, false, true, true, true, true, true, true, false, false, false, true, false, true, false, true, false, true, false, false, false, false, true, true, false, false, true, false, true, false, false, true, false, false, true, true, true, true, true, true, false, false, true, false, true, false, false, true, true, true, false, false, true, false, true, false, false, false, true, true, true, true, false, true, true, true, false, false, true, false, true, true, true, true, true, true, false, false, false, false, false, false, false, false, true, true, true, true, true, false, true, false, false, true, false, false, false, true, true, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, false, false, true, true, true, false, false, true, false, false, true, true, true, true, true, true, false, false, true, false, false, true, true, false, true, false, false, true, false, false, false, true, true, true, true, false, false, false, false, false, false, true, true, false, false, false, false, true, true, true, true, true, false, true, true, false, false, true, false, true, true, true, false, true, true, false, false, false, false, false, false, false, true, false, false, true, false, true, true, true, false, true, true, false, false, false, true, true, true, true, true, false, false, false, false, true, true, false, true, false, false, true, false, true, true, true, true, false, false, false, true, false, false, false, false, true]);
            let encoded = BinVector::from_bools(&[false, true, false, false, false, false, true, true, true, false, false, true, false, false, true, true, true, true, true, true, false, false, true, false, false, true, true, false, true, false, false, true, false, false, false, true, true, true, true, false, false, false, false, false, false, true, true, false, false, false, false, true, true, true, true, true, false, true, true, false, false, true, false, true, true, true, false, true, true, false, false, false, false, false, false, false, true, false, false, true, false, true, true, true, false, true, true, false, false, false, true, true, true, true, true, true, false, false, false, false, true, true, false, true, false, false, true, false, true, true, false, true, true, false, false, false, true, false, false, false, false, false, true, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, false, false, true, true, true, false, true, true, false, false, true, true, true, true, true, true, false, false, true, false, false, true, true, false, true, false, false, true, false, false, false, true, true, true, true, false, false, false, false, false, false, true, true, false, false, false, false, true, true, true, true, true, false, true, true, false, false, true, false, true, true, true, false, true, true, false, false, false, false, false, false, false, true, false, false, true, false, true, true, true, false, true, true, false, false, false, true, true, true, true, true, true, false, false, false, false, true, true, false, true, false, false, true, false, true, true, false, true, true, false, false, false, true, false, false, false, false, false, true, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, true, true, true, false, false, false, true, false, false, true, true, true, true, false, false, false, true, false, false, false, true, false, false, false, false, true, true, false, false, true, true, false, true, true, false, false, true, true, true, true, true, false, false, false, false, true, false, true, false, false, true, false, true, true, false, true, true, false, true, true, true, false, true, true, true, false, false, false, false, true, true, false, true, false, true, false, true, false, true, true, false, true, false, true, true, false, false, true, false, true, false, false, false, true, true, true, false, false, false, true, false, false, false, true, true, true, true, true, true, true, true, true, true, true, false, true]);
            let encoded = BinVector::from_bools(&[true, true, true, true, true, true, true, false, false, false, true, false, false, true, true, true, true, false, false, false, true, false, false, false, true, false, false, false, false, true, true, false, false, true, true, false, true, true, false, false, true, true, true, true, true, false, false, false, false, true, false, true, false, false, true, false, true, true, false, true, true, false, true, true, true, false, true, true, true, false, false, false, false, true, true, false, true, false, true, false, true, false, true, true, false, true, false, true, true, false, false, true, false, true, false, false, false, false, true, true, true, false, false, false, true, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, true, true, true, false, false, false, true, false, false, true, true, true, true, false, false, false, true, false, false, false, true, false, false, false, false, true, true, false, false, true, true, false, true, true, false, false, true, true, false, true, true, false, false, false, false, true, false, true, false, false, true, false, true, true, false, true, true, false, true, true, true, false, true, true, true, false, false, false, false, true, true, false, true, false, true, false, true, false, true, true, false, true, false, true, true, false, false, true, false, true, false, false, false, false, true, true, true, false, false, false, true, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, false, true, false, true, true, false, true, false, true, true, false, false, false, false, true, false, false, false, true, false, false, false, false, true, true, false, true, true, true, true, true, true, false, true, false, true, true, false, false, false, false, true, false, false, true, false, false, true, true, false, true, false, false, false, false, false, true, false, true, true, true, true, true, false, false, false, false, true, false, false, true, true, true, false, true, false, true, false, false, false, false, true, false, false, false, false, false, false, false, false, true, true, false, false, true, false, false, false, false, true, false, false, false, true, false, true, false, true, true, false, true, true, true, true, true, false]);
            let encoded = BinVector::from_bools(&[false, false, true, true, false, true, false, true, true, false, true, false, true, true, false, false, false, false, true, false, false, false, true, false, false, false, false, true, true, false, true, true, true, true, true, true, false, true, false, true, true, false, false, false, false, true, false, false, true, false, false, true, true, false, true, false, false, false, false, false, true, false, true, true, true, true, true, false, false, false, false, true, false, false, true, true, true, false, true, false, true, false, false, false, false, true, false, false, false, false, false, false, false, false, false, true, true, false, false, true, false, false, false, false, true, false, false, false, true, false, true, true, false, true, true, false, true, true, true, true, true, true, false, false, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, false, true, false, true, true, false, true, false, true, true, false, false, false, false, true, false, false, false, true, false, false, false, false, true, true, false, true, true, true, true, true, true, false, true, false, true, true, false, false, false, false, true, false, false, true, false, false, true, true, false, true, false, false, false, false, false, true, false, true, true, true, true, true, false, false, false, false, true, false, false, true, true, true, false, true, false, true, false, false, false, false, true, false, false, false, false, false, false, false, false, false, true, true, false, false, true, false, false, false, false, true, false, false, false, true, false, true, true, false, false, true, false, true, true, true, true, true, true, false, false, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, false, false, false, false, false, false, false, true, false, false, false, true, true, true, true, true, true, false, false, true, true, false, false, false, true, false, true, false, false, false, false, true, true, true, true, true, false, false, true, false, true, true, true, true, true, true, false, true, true, false, true, true, false, false, true, false, false, true, false, false, true, true, true, true, true, false, false, true, false, true, true, false, true, false, true, false, true, false, true, true, true, true, true, true, false, false, true, false, false, false, false, false, false, false, true, true, true, true, false, true, true, false, true, false, false, false, true, false, true, false, false, false, false, true, true, true]);
            let encoded = BinVector::from_bools(&[true, true, false, false, false, false, false, false, false, false, false, true, false, false, false, true, true, true, true, true, true, false, false, true, true, false, false, false, true, false, true, false, false, false, false, true, true, true, true, true, false, false, true, false, true, true, true, true, true, true, false, true, true, false, true, true, false, false, true, false, false, true, false, false, true, true, true, true, true, false, false, true, false, true, true, false, true, false, true, false, true, false, true, true, true, true, true, true, false, false, true, false, false, false, false, false, false, false, false, true, true, true, true, false, true, true, false, true, false, false, false, false, true, false, true, false, false, false, false, false, true, true, false, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, false, false, false, false, false, false, false, true, false, false, false, true, true, true, true, true, true, false, false, true, true, false, false, false, true, false, true, false, false, false, false, true, true, true, true, true, false, false, true, false, true, true, true, true, true, true, false, true, true, false, true, true, false, false, true, false, false, true, false, false, true, true, true, true, true, false, false, true, false, true, true, false, true, false, true, false, true, false, true, true, true, true, true, true, false, false, true, false, true, false, false, false, false, false, false, true, true, true, true, false, true, true, false, true, false, false, false, false, true, false, true, false, false, false, false, false, true, true, false, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, false, false, false, true, true, true, false, true, true, true, true, false, false, true, false, true, false, true, false, false, false, true, true, false, true, true, true, false, false, false, true, false, false, true, true, false, false, true, false, false, false, false, true, false, false, false, false, true, true, false, true, true, false, true, false, true, false, false, false, false, false, false, true, true, false, true, true, true, false, false, false, true, false, false, true, true, false, true, true, false, true, false, false, true, true, true, true, true, false, true, true, true, true, true, true, true, false, true, false, false, false, true, false, false, true, true, true, false, true, true, false, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, false, true, false, false, false, true, true, true, false, true, true, true, true, false, false, true, false, true, false, true, false, false, false, true, true, false, true, true, true, false, false, false, true, false, false, true, true, false, false, true, false, false, false, false, true, false, false, false, false, true, true, false, true, true, false, true, false, true, false, false, false, false, false, false, true, true, false, true, true, true, false, false, false, true, false, false, true, true, false, true, true, false, true, false, false, true, true, true, true, true, false, true, false, true, true, true, true, true, true, false, true, false, false, false, true, false, false, true, false, true, true, false, true, true, false, true, true, true, true, false, false, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, false, false, false, true, true, true, false, true, true, true, true, false, false, true, false, true, false, true, false, false, false, true, true, false, true, true, true, false, false, false, true, false, false, true, true, false, false, true, false, false, false, false, true, false, false, false, false, true, true, false, true, true, false, true, false, true, false, false, false, false, true, false, true, true, false, true, true, true, false, false, false, true, false, false, true, true, false, true, true, false, true, false, false, true, true, true, true, true, false, true, false, true, true, true, true, true, true, false, true, false, false, false, true, false, false, true, false, true, true, false, true, true, false, true, true, true, true, false, false, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, true, false, false, true, true, false, true, false, true, true, true, true, true, true, false, true, false, true, true, false, true, false, false, true, true, false, true, true, false, true, false, false, false, true, true, false, false, false, true, false, true, false, false, false, true, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, true, false, false, false, false, false, false, false, true, true, false, true, true, true, false, true, false, true, false, true, true, false, false, false, true, true, false, true, true, false, false, true, false, false, false, false, true, true, true, false, false, true, true, true, false, true, false, true, true, true, true, true, false, true, false, true]);
            let encoded = BinVector::from_bools(&[false, false, true, false, true, false, false, true, true, false, true, false, true, true, true, true, true, true, false, true, false, true, true, false, true, false, false, true, true, false, true, true, false, true, false, false, false, true, true, false, false, false, true, false, true, false, false, false, true, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, true, false, false, false, false, false, false, false, true, true, false, true, true, true, false, true, false, true, false, true, true, false, false, false, true, true, false, true, true, false, true, false, true, false, false, false, false, true, true, true, false, false, true, true, true, false, false, true, false, true, true, true, true, true, false, false, true, false, true, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, true, false, false, true, true, false, true, false, true, true, true, false, true, true, false, true, false, true, true, false, true, false, false, true, true, false, true, true, false, true, false, false, false, true, true, false, false, false, true, false, true, false, false, false, true, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, true, false, false, false, false, false, false, false, true, true, false, true, true, true, false, true, false, true, false, true, true, false, false, false, true, true, false, true, true, false, true, false, true, false, false, false, false, true, true, true, false, false, true, true, true, false, false, true, false, true, true, true, true, true, false, false, true, false, true, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, false, true, false, true, true, true, false, true, false, true, true, true, false, true, true, true, false, false, false, false, true, false, true, false, false, true, false, true, true, false, false, true, true, true, false, true, true, true, false, true, false, false, false, true, true, false, false, false, false, false, false, false, true, false, true, true, false, false, false, false, false, true, false, true, false, true, false, false, true, true, true, true, true, false, true, true, true, false, false, true, true, false, false, true, true, false, false, true, true, true, true, true, false, true, true, false, true, false, false, false, true, false, false, false, false, true, true, true, true, true, false, false, false, false, true, false]);
            let encoded = BinVector::from_bools(&[false, false, true, true, false, true, false, true, true, true, false, true, false, true, true, true, false, true, true, true, false, false, false, false, true, false, true, false, false, true, false, true, true, false, false, true, true, true, false, true, true, true, false, true, false, false, false, true, true, false, false, false, false, false, false, false, true, false, true, true, false, false, false, false, false, true, false, true, false, true, false, false, true, true, true, true, true, false, true, true, true, false, false, true, true, false, false, true, true, false, false, true, true, true, false, true, true, false, true, true, false, true, false, false, false, true, false, false, false, false, true, true, true, true, true, true, false, false, true, false, false, true, true, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, false, true, false, true, true, true, false, true, false, true, true, true, false, true, true, true, false, false, false, false, true, false, true, false, false, true, false, true, true, false, false, true, true, true, false, true, true, true, false, true, false, false, false, true, false, false, false, false, false, false, false, false, true, false, true, true, false, false, false, false, false, true, false, true, false, true, false, false, true, true, true, true, true, false, true, true, true, false, false, true, true, false, false, true, true, false, false, true, true, true, false, true, true, false, true, true, false, true, false, false, false, true, false, false, false, false, true, true, true, true, true, true, false, false, true, false, false, true, true, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, false, false, true, true, true, false, false, true, true, false, true, true, true, true, true, false, false, true, false, true, true, true, true, false, false, false, false, false, true, true, true, false, true, true, true, true, false, false, false, true, false, false, true, true, false, true, true, false, false, false, false, false, true, false, false, true, true, true, false, true, true, false, false, true, true, false, false, true, true, false, false, false, false, false, true, false, false, true, false, false, false, false, true, true, true, true, false, false, true, true, true, true, true, false, false, true, false, true, true, true, false, true, true, false, false, false, false, false, true, false, true, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, false, true, true, false, false, true, true, true, false, false, true, true, false, true, true, true, true, true, false, false, true, false, true, true, true, true, false, false, false, false, false, true, true, true, false, true, true, true, true, false, false, false, true, false, false, true, true, false, true, true, false, false, false, false, false, true, false, false, true, true, true, false, true, true, false, false, true, true, false, false, true, true, false, false, false, false, false, true, false, false, true, false, false, false, false, true, true, true, true, false, false, true, true, false, true, true, true, false, false, true, false, true, true, true, false, true, true, false, false, false, false, false, false, true, false, true, false, true, false, true, false, false, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, false, false, true, true, true, false, false, true, true, false, true, true, true, true, true, false, false, true, false, true, true, true, true, false, false, false, false, false, true, true, true, false, true, true, true, true, false, false, false, true, false, false, true, true, false, true, true, false, false, false, false, false, true, false, false, true, true, true, false, true, true, true, false, true, true, false, false, true, true, false, false, false, false, false, true, false, false, true, false, false, false, false, true, true, true, true, false, false, true, true, false, true, true, true, false, false, true, false, true, true, true, false, true, true, false, false, false, false, false, false, true, false, true, false, true, false, true, false, false, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, true, false, true, true, true, false, true, true, true, false, false, true, false, true, true, false, false, false, false, false, false, true, true, true, false, false, true, true, false, false, false, true, true, true, false, true, false, false, false, true, false, false, false, false, false, true, true, false, false, true, true, false, false, true, false, true, false, true, false, false, true, true, false, false, true, true, false, true, true, false, true, false, false, false, false, true, false, true, false, true, true, true, false, true, false, true, false, false, true, false, true, false, true, true, false, true, true, false, false, false, false, true, true, true, true, false, false, false, true, false, true, false, false, false, false, false]);
            let encoded = BinVector::from_bools(&[true, false, true, false, true, false, true, true, true, false, true, true, true, false, false, true, false, true, true, false, false, false, false, false, false, true, true, true, false, false, true, true, false, false, false, true, true, true, false, true, false, false, false, true, false, false, false, false, false, true, true, false, false, true, true, false, false, true, false, true, false, true, false, false, true, true, false, false, true, true, false, true, true, false, true, false, false, false, false, true, false, true, false, true, true, true, false, true, false, true, false, false, true, false, false, true, false, true, true, false, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, false, true, false, false, false, false, false, false, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, true, false, true, true, true, false, true, true, true, false, false, true, false, true, true, false, false, false, false, false, false, true, true, true, false, false, true, true, false, false, false, true, true, true, false, true, false, false, false, true, false, false, false, false, false, true, true, false, false, true, true, false, false, true, false, true, false, true, false, false, true, true, false, false, true, true, false, true, false, false, true, false, false, false, false, true, false, true, false, true, true, true, false, true, false, true, false, false, true, false, false, true, false, true, true, false, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, false, true, false, false, false, false, false, false, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, true, true, false, false, true, true, false, true, true, true, false, false, true, true, true, false, true, true, true, true, true, true, true, false, false, false, true, false, false, false, false, false, true, false, true, true, true, false, false, false, false, false, true, false, false, true, true, true, false, false, false, true, true, false, false, true, true, false, true, false, false, false, false, false, true, false, true, true, false, false, false, true, false, true, false, true, false, true, true, true, true, true, false, false, false, true, true, true, true, true, false, false, true, false, false, false, true, true, false, true, false, true, true, false, true, true, false, false, true, true, true, true, false, true, true, false]);
            let encoded = BinVector::from_bools(&[true, false, false, true, true, true, false, false, true, true, false, true, true, true, false, false, true, true, true, false, true, true, true, true, true, true, true, false, false, false, true, false, false, false, false, false, true, false, true, true, true, false, false, false, false, false, true, false, false, true, true, true, false, false, false, true, true, false, false, true, true, false, true, false, false, false, false, false, true, false, true, true, false, false, false, true, false, true, false, true, false, true, true, true, true, true, false, false, false, true, true, true, true, true, true, false, false, true, false, false, false, true, true, false, true, false, true, true, false, true, true, true, false, false, true, true, true, true, false, false, true, true, false, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, true, true, false, false, true, true, false, true, true, true, false, false, true, true, true, false, true, true, true, true, true, false, true, false, false, false, true, false, false, false, false, false, true, false, true, true, true, false, false, false, false, false, true, false, false, true, true, true, false, false, false, true, true, false, false, true, true, false, true, false, false, false, false, false, true, false, true, true, false, false, false, true, false, true, false, true, false, true, true, true, true, true, false, false, false, true, true, true, true, true, true, false, false, true, false, false, false, true, true, false, true, false, true, true, false, true, true, true, false, false, true, true, true, true, false, false, true, true, false, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, false, false, true, false, true, true, false, false, false, true, false, true, true, true, true, true, false, true, true, false, false, false, true, true, true, false, false, true, false, false, false, true, false, true, false, false, false, false, false, false, false, false, true, true, true, true, false, true, true, true, true, true, false, true, false, false, false, true, true, false, false, true, false, true, true, true, true, true, false, true, true, true, false, true, true, false, false, true, true, false, false, true, true, true, false, true, true, false, false, false, false, false, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, false, true, false, true, false, false, false, false]);
            let encoded = BinVector::from_bools(&[true, false, false, false, false, false, true, false, true, true, false, false, false, true, false, true, true, true, true, true, false, true, true, false, false, false, true, true, true, false, false, true, false, false, false, true, false, true, false, false, false, false, false, false, false, false, true, true, true, true, false, true, true, true, true, true, false, true, false, false, false, true, true, false, false, true, false, true, true, true, true, true, false, true, true, true, false, true, true, false, false, true, true, false, false, true, true, true, false, true, true, false, false, false, true, false, false, true, true, true, false, false, false, false, true, true, true, true, false, false, true, false, false, true, false, true, false, true, false, false, false, false, true, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, false, false, true, false, true, true, false, false, false, true, false, true, true, true, true, true, false, true, true, false, false, false, true, true, true, false, false, true, false, false, false, true, false, true, false, false, false, false, false, false, false, false, true, true, true, true, false, true, true, true, true, true, false, true, false, false, false, true, true, false, false, true, false, true, true, true, true, true, false, true, true, true, false, true, true, false, false, true, true, false, false, true, true, true, false, true, true, false, true, false, true, false, false, true, true, true, false, false, false, false, true, true, true, true, false, false, true, false, false, true, false, true, false, true, false, false, false, false, true, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, false, true, false, true, false, false, true, false, true, true, true, true, false, true, true, true, true, false, false, false, true, true, false, false, true, false, true, false, true, true, false, true, true, false, false, true, false, true, true, false, false, false, false, false, true, true, false, false, false, true, false, false, true, false, true, false, false, false, false, false, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, false, false, true, true, true, false, false, true, false, false, false, false, false, true, true, false, true, false, true, false, false, true, true, true, true, false, false, false]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, false, true, false, true, false, false, true, false, true, true, true, true, false, true, true, true, true, false, false, false, true, true, false, false, true, false, true, false, true, true, false, true, true, false, false, true, false, true, true, false, false, false, false, false, true, true, false, false, false, true, false, false, true, false, true, false, false, false, false, false, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, false, false, false, false, false, true, true, false, true, true, false, true, false, false, true, true, true, false, true, false, false, true, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, false, true, false, true, false, false, true, false, true, true, true, true, false, true, true, true, true, false, false, false, true, true, false, false, true, false, true, false, false, true, false, true, true, false, false, true, false, true, true, false, false, false, false, false, true, true, false, false, false, true, false, false, true, false, true, false, false, false, false, false, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, false, false, true, true, true, true, false, false, true, false, false, false, false, false, true, true, false, true, true, false, true, false, false, true, true, true, false, true, false, false, true, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, false, true, false, true, false, false, true, false, true, true, false, true, false, false, false, false, true, true, false, true, true, false, false, false, false, false, true, true, true, false, false, false, false, false, true, false, true, false, false, true, true, false, true, true, true, false, true, false, false, true, true, false, false, true, false, false, true, false, false, false, true, true, true, false, false, true, false, false, true, true, false, false, false, false, true, false, true, false, false, true, true, true, false, true, false, true, true, true, false, false, true, false, true, false, true, true, false, true, true, true, false, false, true, false, true, false, true, false, true, false, true, false, false, true, true, true]);
            let encoded = BinVector::from_bools(&[false, false, true, false, false, true, false, true, false, false, true, false, true, true, false, true, false, false, false, false, true, true, false, true, true, false, false, false, false, false, true, true, true, false, false, false, false, false, true, false, true, false, false, true, true, false, true, true, true, false, true, false, false, true, true, false, false, true, false, false, true, false, false, false, true, true, true, false, false, true, false, false, true, true, false, false, false, false, true, false, true, false, false, true, true, true, false, true, false, true, true, true, false, false, true, true, false, true, false, true, true, false, true, true, true, false, false, true, false, true, true, false, true, false, true, false, true, false, true, false, true, true, false, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, false, true, false, true, false, false, true, false, true, true, false, true, false, false, false, false, true, true, false, true, true, false, false, false, false, false, true, true, true, false, false, false, false, false, true, false, true, false, false, true, true, false, true, true, true, false, true, false, false, true, true, false, false, true, false, false, true, false, false, false, true, true, false, false, false, true, false, false, true, true, false, false, false, false, true, false, true, false, false, true, true, true, false, true, false, true, true, true, false, false, true, true, false, true, false, true, true, false, true, true, true, false, false, true, false, true, true, false, true, false, true, false, true, false, true, false, true, true, false, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, false, true, true, true, true, false, false, true, false, false, true, false, false, false, false, false, true, false, true, true, false, true, false, false, false, false, false, false, false, true, true, false, false, true, false, false, true, true, false, false, true, true, false, true, true, false, true, false, true, true, true, false, false, true, false, false, false, true, false, false, true, false, true, false, false, false, false, true, false, true, false, true, false, true, false, false, true, false, false, false, true, true, false, true, false, true, false, true, true, true, true, false, true, true, true, false, true, false, false, false, true, true, false, true, false, true, true, true, true, false, false, true, false, true, false, true]);
            let encoded = BinVector::from_bools(&[true, false, false, false, false, true, true, true, true, false, false, true, false, false, true, false, false, false, false, false, true, false, true, true, false, true, false, false, false, false, false, false, false, true, true, false, false, true, false, false, true, true, false, false, true, true, false, true, true, false, true, false, true, true, true, false, false, true, false, false, false, true, false, false, true, false, true, false, false, false, false, true, false, true, false, true, false, true, false, false, true, false, false, false, true, true, false, true, false, true, false, true, true, true, true, true, false, true, true, true, false, true, false, false, false, true, true, false, true, false, false, true, true, true, true, false, false, true, true, false, true, false, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, false, true, true, true, true, false, false, true, false, false, true, false, false, false, false, false, true, false, true, true, false, true, false, false, false, false, false, false, false, true, true, false, false, true, true, false, true, true, false, false, true, true, false, true, true, false, true, false, true, true, true, false, false, true, false, false, false, true, false, false, true, false, true, false, false, false, false, true, false, true, false, true, false, true, false, false, true, false, false, false, true, true, false, true, false, true, false, true, true, true, true, true, false, true, true, true, false, true, false, false, false, true, true, false, true, false, false, true, true, true, true, false, false, true, true, false, true, false, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, true, false, false, true, false, true, false, false, true, false, true, true, false, false, true, true, false, true, false, true, true, true, true, false, false, true, true, true, false, true, false, false, true, true, true, false, false, true, true, false, true, true, false, true, false, true, false, true, false, true, true, true, false, false, true, true, true, false, true, false, true, true, true, false, true, true, false, true, true, false, false, true, true, true, false, true, true, false, true, false, false, true, false, true, true, false, false, true, true, false, false, true, true, false, false, false, false, true, false, false, true, true, false, false, false, false, false, true, false, false, true, true, false, false, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, true, true, false, false, true, false, true, false, false, true, false, true, true, false, false, true, true, false, true, false, true, true, true, true, false, false, true, true, true, false, true, false, false, true, true, true, false, false, true, true, false, true, true, false, true, false, true, false, true, false, true, true, true, false, false, true, true, true, false, true, false, true, true, true, false, true, true, false, true, true, false, false, true, true, true, false, true, true, false, true, false, false, true, false, true, true, false, false, true, true, false, true, false, true, true, false, false, false, false, true, false, false, true, true, false, false, false, true, false, false, true, false, false, true, true, false, false, false, false, false, false, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, true, false, false, true, false, true, false, false, true, false, true, true, false, false, true, true, false, true, false, true, true, true, true, false, false, true, true, true, false, true, false, false, true, true, true, false, false, true, true, false, true, true, false, true, false, true, false, true, false, true, true, true, false, false, true, true, true, false, true, false, true, true, true, false, true, true, false, true, true, false, false, true, true, true, false, true, true, false, true, false, false, true, false, true, true, false, false, true, true, false, true, false, true, true, false, false, false, false, true, false, false, true, true, false, false, false, true, false, false, true, false, false, true, true, false, false, false, false, false, false, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, true, true, true, true, true, true, false, true, true, true, false, false, true, false, true, false, false, true, false, false, true, true, true, true, false, false, false, true, true, true, true, false, true, true, false, true, true, false, true, false, false, false, true, false, false, true, true, true, true, true, true, false, true, false, true, true, true, true, true, false, false, false, false, true, true, false, true, false, true, false, false, true, true, true, false, false, false, true, false, false, false, true, false, true, false, true, false, false, false, false, false, true, false, false, true, true, false, true, false, true, true, true, false, true, false, false, true, true, false, true, false, true, false, false, false]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, true, true, true, true, true, true, false, true, true, true, false, false, true, false, true, false, false, true, false, false, true, true, true, true, false, false, false, true, true, true, true, false, true, true, false, true, true, false, true, false, false, false, true, false, false, true, true, true, true, true, true, false, true, false, true, true, true, true, true, false, false, false, false, true, true, false, true, false, true, false, false, true, true, true, false, false, false, true, false, false, false, true, false, true, false, true, false, false, false, true, false, false, true, false, false, true, true, false, true, false, true, true, true, false, true, true, false, false, true, true, false, true, false, true, true, false, false, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, true, true, true, true, true, true, false, true, true, true, false, false, true, true, true, false, false, true, false, false, true, true, true, true, false, false, false, true, true, true, true, false, true, true, false, true, true, false, true, false, false, false, true, false, false, true, true, true, true, true, true, false, true, false, true, true, true, true, true, false, false, false, false, true, true, false, true, false, true, false, false, true, true, true, false, false, false, true, false, false, false, true, false, true, false, true, false, false, false, true, false, false, true, false, false, true, true, false, true, false, true, true, true, false, true, true, false, false, true, true, false, true, false, true, true, false, false, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, false, false, false, false, false, false, true, true, false, true, false, false, false, false, false, true, false, true, true, true, true, false, false, false, true, false, false, false, false, true, false, true, true, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, true, false, true, false, true, false, false, true, false, true, false, false, true, false, true, false, true, true, false, true, true, true, false, true, true, false, false, false, true, true, true, true, false, true, false, true, false, false, true, true, false, false, false, false, true, true, true, false, false, true, false, false, true, true, true, true, false, false, false, false, false, true, true, true, false, false, false]);
            let encoded = BinVector::from_bools(&[false, false, true, false, false, false, false, false, false, false, true, true, false, true, false, false, false, false, false, true, false, true, true, true, true, false, false, false, true, false, false, false, false, true, false, true, true, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, true, false, true, false, true, false, false, true, false, true, false, false, true, false, true, false, true, true, false, true, true, true, false, true, true, false, false, false, true, true, true, true, false, true, false, true, false, false, true, true, false, true, false, false, false, true, true, true, false, false, true, false, false, true, true, true, true, true, false, false, false, false, false, true, true, false, true, false, false, false, false, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, false, false, false, false, false, false, true, true, false, true, false, false, false, false, false, true, false, true, true, true, true, false, false, false, true, false, false, false, false, true, false, true, true, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, true, false, true, false, true, false, false, true, false, true, false, false, true, false, true, false, true, true, false, true, true, true, false, true, true, false, false, false, true, true, true, true, false, true, true, true, false, false, true, true, false, true, false, false, false, true, true, true, false, false, true, false, false, true, true, true, true, true, false, false, false, false, false, true, true, false, true, false, false, false, false, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, false, true, false, true, false, true, true, false, true, false, true, true, false, true, false, true, true, true, true, false, false, false, true, false, true, false, false, false, true, false, true, false, true, true, true, false, false, true, true, true, false, true, false, true, false, false, true, true, false, false, true, false, false, false, false, false, true, true, true, false, false, true, false, true, false, true, false, true, true, false, false, false, false, false, true, false, true, true, true, true, true, false, true, false, true, true, false, true, false, false, false, false, false, true, false, true, true, false, true, true, true, false, true, false, false, true, false, false, true, false, false, true, true, true, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, false, true, false, true, false, true, true, false, true, false, true, true, false, true, false, true, true, true, true, false, false, false, true, false, true, false, false, false, true, false, true, false, true, true, true, false, false, true, true, true, false, true, false, true, false, false, true, true, false, false, true, false, false, false, false, false, true, true, true, false, false, true, false, true, false, true, false, true, true, false, false, false, false, false, true, false, true, true, true, true, true, false, true, false, true, true, false, true, false, false, true, false, false, false, true, false, true, true, false, true, true, true, false, true, false, false, false, true, false, false, true, false, false, true, true, true, true, true, true, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, false, true, false, true, false, true, true, false, true, false, true, true, false, true, false, true, true, true, true, false, false, false, true, false, true, false, false, false, true, false, true, false, true, true, true, false, false, true, true, true, false, true, false, true, false, false, true, true, false, false, true, false, false, false, false, false, true, true, true, false, false, true, false, true, false, true, false, true, true, false, false, false, false, false, true, false, true, true, true, true, true, false, true, false, true, true, false, true, false, false, true, false, false, false, true, false, true, true, false, true, true, true, true, true, false, false, false, true, false, false, true, false, false, true, true, true, true, true, true, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, false, false, true, true, false, false, true, true, false, false, false, false, false, true, true, false, false, true, true, true, true, true, true, false, false, true, true, true, false, true, false, true, false, true, false, false, true, true, false, false, false, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, true, true, true, true, false, true, true, true, true, false, false, true, false, true, false, false, true, true, false, true, true, false, true, false, true, true, false, true, true, true, true, true, true, true, true, false, true, false, true, false, true, true, false, true, false, true, true, true, false, true, true, false, false, false, true, true, false, false, false]);
            let encoded = BinVector::from_bools(&[false, false, true, false, false, false, true, true, false, false, true, true, false, false, false, false, false, true, true, false, false, true, true, true, true, true, true, false, false, true, true, true, false, true, false, true, false, true, false, false, true, true, false, false, false, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, true, true, true, true, false, true, true, true, true, false, false, true, false, true, false, false, true, true, false, true, true, false, true, false, true, true, false, true, true, true, true, true, true, false, true, true, false, true, false, true, false, true, true, false, true, false, true, true, true, false, false, true, true, false, false, false, true, true, true, false, false, true, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, false, false, true, true, false, false, true, true, false, false, false, false, false, true, true, true, false, true, true, true, true, true, true, false, false, true, true, true, false, true, false, true, false, true, false, false, true, true, false, false, false, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, true, true, true, true, false, true, true, true, true, false, false, true, false, true, false, false, true, true, false, true, true, false, true, false, true, true, false, true, true, true, true, true, true, false, true, true, false, true, false, true, false, true, true, false, true, false, true, true, true, false, false, true, true, false, false, false, true, true, true, false, false, true, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, true, false, true, true, false, true, false, false, true, false, true, true, true, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, true, false, true, true, false, true, true, false, false, false, false, true, true, false, false, true, true, true, false, true, false, true, false, false, true, false, false, true, true, true, false, true, true, false, false, false, false, true, false, true, false, false, true, true, false, true, true, true, true, true, true, true, true, true, false, true, true, true, false, true, true, false, false, false, false, false, false, true, false, true, false, true, true, true]);
            let encoded = BinVector::from_bools(&[false, true, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, true, false, true, true, false, true, false, false, true, false, true, true, true, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, true, false, true, true, false, true, true, false, false, false, false, true, true, false, false, true, true, true, false, true, false, true, false, false, true, false, false, true, true, true, false, true, true, false, false, false, false, true, false, true, false, false, true, true, false, true, true, true, true, true, true, true, true, true, true, false, true, true, true, false, true, true, false, false, true, false, false, false, false, true, false, true, true, false, true, true, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, true, false, true, true, false, true, false, false, true, false, true, true, true, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, true, false, true, true, false, true, true, true, false, false, false, true, true, false, false, true, true, true, false, true, false, true, false, false, true, false, false, true, true, true, false, true, true, false, false, false, false, true, false, true, false, false, true, true, false, true, true, true, true, true, true, true, true, true, true, false, true, true, true, false, true, true, false, false, true, false, false, false, false, true, false, true, true, false, true, true, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, false, true, true, true, true, true, false, true, true, false, true, true, true, false, false, true, false, false, false, true, true, true, true, true, false, false, true, true, true, true, false, false, true, false, true, true, true, true, true, false, true, false, true, false, false, true, true, true, false, true, false, true, false, false, false, false, false, false, true, true, false, true, true, true, true, true, false, true, false, true, true, true, false, true, false, false, false, true, true, true, false, false, true, true, false, false, true, true, true, false, false, false, false, true, false, true, false, true, true, false, true, true, true, false, false, true, false, true, true, true, true, false, false, false, false, false]);
            let encoded = BinVector::from_bools(&[false, false, false, false, false, true, true, true, true, true, false, true, true, false, true, true, true, false, false, true, false, false, false, true, true, true, true, true, false, false, true, true, true, true, false, false, true, false, true, true, true, true, true, false, true, false, true, false, false, true, true, true, false, true, false, true, false, false, false, false, false, false, true, true, false, true, true, true, true, true, false, true, false, true, true, true, false, true, false, false, false, true, true, true, false, false, true, true, false, false, true, true, true, false, false, false, false, false, true, false, true, false, true, true, false, true, true, true, false, false, true, true, false, true, true, true, true, false, false, false, false, false, false, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, false, true, true, true, true, true, false, true, true, false, true, true, true, false, false, true, false, false, false, true, true, true, true, true, true, false, true, true, true, true, false, false, true, false, true, true, true, true, true, false, true, false, true, false, false, true, true, true, false, true, false, true, false, false, false, false, false, false, true, true, false, true, true, true, true, true, false, true, false, true, true, true, false, true, false, false, false, true, true, true, false, false, true, true, false, false, true, true, true, false, false, false, false, false, true, false, true, false, true, true, false, true, true, true, false, false, true, true, false, true, true, true, true, false, false, false, false, false, false, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, true, false, true, true, true, false, true, true, true, true, false, true, false, false, true, true, true, false, false, false, true, true, false, true, false, true, true, false, false, false, true, false, false, true, true, false, true, true, true, true, false, true, true, true, false, false, false, true, true, true, false, false, true, true, true, true, false, true, false, true, true, false, true, true, true, true, false, false, true, true, false, false, true, false, true, false, true, false, true, true, false, true, true, true, false, false, true, true, true, false, false, true, true, false, false, false, true, false, false, false, true, false, false, false, false, false, true, true, false, true, true, true, false, true, true]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, true, false, true, true, true, false, true, true, true, true, false, true, false, false, true, true, true, false, false, false, true, true, false, true, false, true, true, false, false, false, true, false, false, true, true, false, true, true, true, true, false, true, true, true, false, false, false, true, true, true, false, false, true, true, true, true, false, true, false, true, true, false, true, true, true, true, false, false, true, true, false, false, true, false, true, false, true, false, true, true, false, true, true, true, false, false, true, true, true, false, false, false, true, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, true, true, false, true, true, false, true, false, true, false, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, true, true, false, true, true, true, false, true, true, true, true, false, true, false, false, true, true, true, false, false, false, true, true, false, true, false, true, true, false, false, false, true, false, false, true, true, false, true, true, true, true, false, true, true, true, false, false, false, true, true, true, false, false, true, true, true, true, false, true, false, true, true, false, true, true, true, true, false, false, true, true, false, false, true, false, true, false, true, false, true, true, false, true, true, true, false, false, true, true, true, false, false, false, true, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, true, true, false, true, true, false, true, false, false, false, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, false, true, false, true, false, false, false, true, true, true, true, true, false, false, false, true, false, false, false, false, false, false, true, false, false, true, true, true, false, false, true, false, true, true, false, false, false, false, true, false, false, true, false, true, false, true, false, false, false, true, true, true, true, true, false, false, false, false, false, false, true, true, false, true, true, true, false, false, false, false, false, false, false, true, true, false, false, false, false, true, true, false, true, false, true, true, false, true, true, false, false, true, true, true, true, false, false, false, false, true, true, true, false, false, true, false, true, true, true, false, false, true, true, true, false, true]);
            let encoded = BinVector::from_bools(&[true, true, false, true, false, true, false, true, false, false, false, true, true, true, true, true, false, false, false, true, false, false, false, false, false, false, true, false, false, true, true, true, false, false, true, false, true, true, false, false, false, false, true, false, false, true, false, true, false, true, false, false, false, true, true, true, true, true, false, false, false, false, false, false, true, true, false, true, true, true, false, false, false, false, false, false, false, true, true, false, false, false, false, true, true, false, true, false, true, true, false, true, true, false, true, false, true, true, true, true, false, false, false, false, true, true, true, false, false, true, true, false, true, true, true, false, false, true, true, true, true, false, true, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, false, true, false, true, false, false, false, true, true, true, true, true, false, false, false, true, false, false, false, false, false, false, true, false, false, true, true, true, false, false, true, false, true, true, false, false, false, false, true, false, false, true, false, true, false, true, false, false, false, true, true, true, true, true, false, false, false, false, false, false, true, true, false, true, true, true, false, false, false, false, false, false, false, true, true, false, false, false, false, true, true, false, true, false, true, true, false, true, true, false, true, false, true, true, true, true, false, false, false, false, true, true, true, false, false, true, true, false, true, true, true, false, false, true, true, true, true, false, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, false, false, true, false, false, false, true, false, true, true, false, true, true, false, true, true, true, false, false, true, false, false, true, false, false, false, false, true, false, false, true, true, true, false, true, true, true, false, true, true, true, false, true, true, false, false, true, true, false, false, false, false, false, true, false, true, true, false, false, true, false, true, true, false, false, true, false, true, false, true, true, false, true, true, false, false, false, false, true, false, false, true, true, false, true, false, false, true, false, false, false, false, true, true, false, false, false, true, true, false, true, true, true, false, true, true, true, false, true, true, false, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[true, true, true, false, false, false, true, false, false, false, true, false, true, true, false, true, true, false, true, true, true, false, false, true, false, false, true, false, false, false, false, true, false, false, true, true, true, false, true, true, true, false, true, true, true, false, true, true, false, false, true, true, false, false, false, false, false, true, false, true, true, false, false, true, false, true, true, false, false, true, false, true, false, true, true, false, true, true, false, false, false, false, true, false, false, true, true, false, true, false, false, true, false, false, true, false, false, true, true, false, false, false, true, true, false, true, true, true, false, true, false, true, true, false, true, true, false, false, false, false, true, false, true, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, false, false, true, false, false, false, true, false, true, true, false, true, true, false, true, true, true, false, false, true, false, false, true, false, false, false, false, true, false, false, true, true, false, false, true, true, true, false, true, true, true, false, true, true, false, false, true, true, false, false, false, false, false, true, false, true, true, false, false, true, false, true, true, false, false, true, false, true, false, true, true, false, true, true, false, false, false, false, true, false, false, true, true, false, true, false, false, true, false, false, true, false, false, true, true, false, false, false, true, true, false, true, true, true, false, true, false, true, true, false, true, true, false, false, false, false, true, false, true, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, false, false, false, false, false, true, true, true, true, true, false, true, true, true, false, false, false, false, true, false, true, false, false, false, true, false, false, true, false, true, false, true, false, true, true, false, true, false, false, true, true, false, true, false, false, false, true, false, true, true, false, false, true, false, true, true, true, false, true, false, false, false, false, false, true, false, false, true, true, true, true, true, true, false, true, true, true, true, false, true, false, false, false, false, true, true, false, false, true, false, true, false, true, true, true, true, false, true, true, false, true, true, false, false, false, false, true, true, false, false, false, true, false, false, false]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, false, false, false, false, false, true, true, true, true, true, false, true, true, true, false, false, false, false, true, false, true, false, false, false, true, false, false, true, false, true, false, true, false, true, true, false, true, false, false, true, true, false, true, false, false, false, true, false, true, true, false, false, true, false, true, true, true, false, true, false, false, false, false, false, true, false, false, true, true, true, true, true, true, false, true, true, true, true, false, true, false, false, false, false, true, true, false, false, true, false, false, true, false, true, true, true, true, false, true, true, false, true, true, false, false, true, false, false, true, true, false, false, false, false, true, false, false, true, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, false, false, false, false, false, true, true, true, true, true, false, true, true, true, false, false, false, false, true, false, true, false, false, false, true, false, false, true, false, true, false, true, false, true, true, false, true, false, false, true, true, false, true, false, false, false, true, false, true, true, false, false, true, false, true, true, true, false, true, false, false, false, false, false, true, false, false, true, true, true, true, true, true, false, true, true, true, true, false, true, false, false, false, false, true, true, false, false, true, false, false, true, false, true, true, true, true, false, true, true, false, false, true, false, false, true, false, false, true, true, false, false, false, false, true, false, false, true, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, false, true, false, false, false, true, false, false, true, true, true, false, false, true, false, true, false, false, false, false, true, false, false, false, true, true, false, false, false, true, true, false, false, true, false, true, false, false, true, true, false, true, false, false, false, true, true, true, true, true, true, true, false, true, false, true, false, true, true, true, true, false, false, false, false, false, true, false, false, true, false, true, true, false, false, true, false, true, true, false, false, false, false, false, false, true, true, true, false, false, true, true, true, true, false, false, false, true, true, true, false, false, false, false, true, true, false, true, true, true, false, false, false, true, true, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, false, true, false, false, false, true, false, false, true, true, true, false, false, true, false, true, false, false, false, false, true, false, false, false, true, true, false, false, false, true, true, false, false, true, false, true, false, false, true, true, false, true, false, false, false, true, true, true, true, true, true, true, false, true, false, true, false, true, true, true, true, false, false, false, false, false, true, false, false, true, false, true, true, false, false, true, false, true, true, false, false, false, false, false, false, true, true, true, false, false, false, true, true, true, true, false, false, false, true, true, true, false, false, false, false, true, false, true, false, true, true, true, false, false, true, false, true, true, false, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, false, true, false, false, false, true, false, false, true, true, true, false, false, true, false, true, false, false, false, false, true, false, false, false, true, true, true, false, false, true, true, false, false, true, false, true, false, false, true, true, false, true, false, false, false, true, true, true, true, true, true, true, false, true, false, true, false, true, true, true, true, false, false, false, false, false, true, false, false, true, false, true, true, false, false, true, false, true, true, false, false, false, false, false, false, true, true, true, false, false, false, true, true, true, true, false, false, false, true, true, true, false, false, false, false, true, false, true, false, true, true, true, false, false, true, false, true, true, false, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, false, false, false, false, false, false, false, true, true, false, true, false, false, true, true, true, true, false, true, false, false, true, false, true, true, true, true, true, true, true, false, true, true, true, true, false, true, false, true, true, true, true, false, false, false, true, true, false, true, false, true, true, false, false, false, true, false, true, true, false, false, false, false, true, true, false, false, false, false, false, false, true, false, true, false, true, true, false, true, true, true, true, false, false, true, false, false, true, false, true, false, true, true, false, true, true, true, false, false, true, true, true, true, false, false, false, true, true, false, true, false, true, false, false, false, true]);
            let encoded = BinVector::from_bools(&[false, false, false, true, false, false, false, false, false, false, false, true, true, false, true, false, false, true, true, true, true, false, true, false, false, true, false, true, true, true, true, true, true, true, false, true, true, true, true, false, true, false, true, true, true, true, false, false, false, true, true, false, true, false, true, true, false, false, false, true, false, true, true, false, false, false, false, true, true, false, false, false, false, false, false, true, false, true, false, true, true, false, true, true, true, true, false, false, true, false, false, true, false, true, true, false, true, true, false, true, true, true, false, false, true, true, true, true, false, false, true, false, true, true, false, true, false, true, false, false, false, false, false, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, false, false, false, false, false, false, false, true, true, false, true, false, false, true, true, true, true, false, true, false, false, true, false, true, true, true, true, true, true, true, false, true, true, true, true, false, true, false, true, true, true, true, false, false, false, true, true, false, true, false, true, true, false, false, false, true, false, true, true, false, false, false, false, true, true, false, false, false, false, false, false, true, false, true, false, true, true, false, true, true, true, true, false, false, true, false, false, true, false, true, true, false, true, true, false, true, true, true, false, false, true, true, true, true, false, false, true, false, true, true, false, true, false, false, false, false, false, false, false, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, true, true, true, true, true, true, false, true, true, true, false, true, false, false, false, false, false, true, true, false, false, false, false, true, true, false, true, false, true, true, true, true, true, false, true, true, false, true, false, true, false, true, true, false, true, false, true, true, false, false, false, false, false, false, true, true, true, false, true, false, false, true, false, false, false, false, false, false, true, true, false, false, true, false, true, false, false, true, true, false, true, false, true, true, true, true, true, true, true, true, false, true, true, false, true, true, false, true, false, true, false, false, false, true, true, false, false, false, false, false, true, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, false, true, true, true, true, true, true, false, true, true, true, false, true, false, false, false, false, false, true, true, false, false, false, false, true, true, false, true, false, true, true, true, true, true, false, true, true, false, true, false, true, false, true, true, false, true, false, true, true, false, false, false, false, false, false, true, true, true, false, true, false, false, true, false, false, false, false, false, false, true, true, false, false, true, false, true, false, false, true, true, false, true, false, true, true, true, true, true, true, true, true, false, false, true, true, false, true, true, false, true, false, true, false, false, false, true, true, false, false, false, false, false, false, true, false, true, false, true, false, false, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, true, true, true, true, true, true, false, true, true, true, false, true, false, false, false, false, false, true, true, false, false, false, false, true, true, false, true, false, true, true, true, true, true, false, true, true, false, true, false, true, false, true, true, false, true, false, true, true, false, false, false, true, false, false, true, true, true, false, true, false, false, true, false, false, false, false, false, false, true, true, false, false, true, false, true, false, false, true, true, false, true, false, true, true, true, true, true, true, true, true, false, false, true, true, false, true, true, false, true, false, true, false, false, false, true, true, false, false, false, false, false, false, true, false, true, false, true, false, false, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, false, true, true, true, true, false, false, true, true, false, true, true, true, false, true, true, true, true, true, true, true, true, false, false, false, false, false, false, true, false, true, true, true, true, true, true, false, true, false, false, true, true, true, true, true, true, true, true, true, false, true, false, false, false, true, true, false, false, true, false, false, false, false, true, false, false, false, true, false, true, true, false, true, true, true, true, false, true, true, true, false, true, true, true, false, true, false, true, false, true, false, true, true, true, false, false, false, true, true, true, true, false, false, false, true, true, true, true, false, false, false, true, true, false, false, false]);
            let encoded = BinVector::from_bools(&[true, true, false, true, false, true, true, true, true, false, false, true, true, false, true, true, true, false, true, true, true, true, true, true, true, true, false, false, false, false, false, false, true, false, true, true, true, true, true, true, false, true, false, false, true, true, true, true, true, true, true, true, true, false, true, false, false, false, true, true, false, false, true, false, false, false, false, true, false, false, false, true, false, true, true, false, true, true, true, true, false, true, true, true, false, true, true, true, false, true, false, true, false, true, false, false, true, true, true, false, false, false, true, true, true, true, false, false, false, true, true, true, true, true, false, false, false, true, true, true, false, false, false, false, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, false, true, true, true, true, false, false, true, true, false, true, true, true, false, true, true, true, true, true, true, true, true, false, false, false, false, false, false, true, false, true, true, true, true, true, true, false, true, false, false, true, true, true, true, true, true, true, true, true, false, true, false, false, false, true, true, false, false, true, false, false, false, false, true, false, false, false, true, false, true, true, false, true, true, true, true, false, true, true, true, false, true, true, true, false, true, false, true, false, true, false, false, true, true, true, false, false, false, true, true, true, true, false, false, false, true, true, true, true, true, false, false, false, true, true, true, false, false, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, false, false, false, true, true, true, true, false, false, false, true, true, false, false, true, false, false, true, false, true, false, true, true, false, true, true, true, true, false, false, false, false, true, false, false, true, false, false, false, false, true, true, false, false, true, true, false, true, false, false, true, false, false, true, true, true, true, true, true, true, false, true, false, false, false, true, false, false, false, false, false, false, true, true, false, true, false, true, false, false, true, true, false, true, true, false, false, false, false, false, false, true, true, true, false, true, true, false, true, false, true, false, false, false, false, true, true, true, false, true, true, true, false, true, false, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, false, false, false, true, true, true, true, false, false, false, true, true, false, false, true, false, false, true, false, true, false, true, true, false, true, true, true, true, false, false, false, false, true, false, false, true, false, false, false, false, true, true, false, false, true, true, false, true, false, false, true, false, false, true, true, true, true, true, true, true, false, true, false, false, false, true, false, false, false, false, false, false, true, true, false, true, false, true, false, false, true, true, false, true, true, false, false, false, false, false, false, false, true, true, true, false, true, true, false, true, false, true, false, false, false, false, true, true, true, true, false, true, true, true, false, false, true, false, true, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, false, false, false, true, true, true, true, false, false, false, true, true, false, false, true, false, false, true, false, true, false, true, true, false, true, true, true, true, false, false, false, false, true, false, false, true, false, false, false, false, true, true, false, false, true, true, false, true, false, false, true, false, false, true, true, true, true, true, true, true, false, true, false, false, false, true, false, false, false, false, false, false, true, true, false, true, false, true, false, false, true, true, false, true, true, false, false, false, false, false, false, false, true, true, true, false, true, true, false, true, false, true, false, false, true, false, true, true, true, true, false, true, true, true, false, false, true, false, true, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, true, false, true, false, false, false, true, true, false, false, true, true, false, true, false, false, false, true, false, false, false, true, false, true, true, true, true, false, false, true, true, true, false, false, true, false, false, false, true, true, false, true, false, false, false, true, true, true, false, true, false, true, false, true, false, true, false, true, true, true, false, false, true, false, false, true, true, true, false, true, true, true, true, true, true, false, false, false, false, false, false, true, true, false, true, false, true, false, true, false, false, true, false, true, true, false, false, false, false, false, false, true, true, true, true, true, true, false, true, false, false, false, true, true, true, true]);
            let encoded = BinVector::from_bools(&[true, false, false, false, true, false, true, false, false, false, true, true, false, false, true, true, false, true, false, false, false, true, false, false, false, true, false, true, true, true, true, false, false, true, true, true, false, false, true, false, false, false, true, true, false, true, false, false, false, true, true, true, false, true, false, true, false, true, false, true, false, true, true, true, false, false, true, false, false, true, true, true, false, true, true, true, true, true, true, false, false, false, false, false, false, true, true, false, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, false, false, false, true, true, true, true, true, true, true, false, true, false, false, false, false, true, true, true, false, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, true, false, true, false, false, false, true, true, false, false, true, true, false, true, false, false, false, true, false, false, false, true, false, true, true, true, true, false, false, true, true, true, false, false, true, false, false, false, true, true, false, true, false, false, false, true, true, true, false, true, false, true, false, true, false, true, false, true, true, true, false, false, true, false, false, true, true, true, false, true, true, true, true, true, true, false, false, false, false, false, false, true, true, false, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, true, true, true, true, true, true, true, false, true, false, false, false, false, true, true, true, false, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, true, false, true, true, true, true, true, true, false, false, false, true, true, false, true, true, true, false, true, true, true, true, true, false, false, false, false, false, false, true, true, false, true, true, true, false, false, false, true, false, false, false, true, true, true, false, true, true, false, false, false, true, true, false, false, false, true, true, false, true, true, true, false, false, true, true, true, true, true, false, false, true, true, false, false, false, false, false, false, true, false, true, true, false, true, false, false, true, false, false, true, true, false, false, true, true, false, true, true, true, true, false, false, false, false, true, true, true, false, true, true, false, true, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, false, true, true, false, true, true, true, true, true, true, false, false, false, true, true, false, true, true, true, false, true, true, true, true, true, false, false, false, false, false, false, true, true, false, true, true, true, false, false, false, true, false, false, false, true, true, true, false, true, true, false, false, false, true, true, false, false, false, true, true, false, true, true, true, false, false, true, true, true, true, true, false, false, true, true, false, false, false, false, false, false, true, false, true, true, false, true, false, false, true, false, false, false, true, true, false, false, true, true, false, true, true, true, true, false, false, false, false, false, true, true, true, false, true, true, false, false, true, true, false, false, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, true, false, true, true, true, true, true, true, false, false, false, true, true, false, true, true, true, false, true, true, true, true, true, false, false, false, false, false, false, true, true, false, true, true, true, false, false, false, true, false, false, false, true, true, true, false, true, true, false, false, false, true, true, false, false, false, true, true, false, true, true, true, false, false, true, true, true, true, true, false, false, true, true, false, false, false, false, false, false, true, false, true, true, false, true, false, false, true, false, false, false, true, true, false, false, true, true, false, true, true, true, true, false, true, false, false, false, true, true, true, false, true, true, false, false, true, true, false, false, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, false, false, true, false, false, true, false, true, true, true, false, false, false, false, false, true, false, false, true, false, true, true, false, true, false, false, false, true, true, true, false, true, false, false, true, false, true, false, false, true, true, true, false, false, false, false, true, false, false, false, true, true, false, false, false, true, true, false, false, false, false, false, true, true, false, true, false, true, false, true, true, true, true, false, false, false, false, true, true, true, false, true, false, true, true, true, false, false, true, true, false, true, false, false, false, true, false, true, true, false, false, true, false, false, false, true, false, false, true, true, false, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, true, true, false, false, true, false, false, true, false, true, true, true, false, false, false, false, false, true, false, false, true, false, true, true, false, true, false, false, false, true, true, true, false, true, false, false, true, false, true, false, false, true, true, true, false, false, false, false, true, false, false, false, true, true, false, false, false, true, true, false, false, false, false, false, true, true, false, true, false, true, false, true, true, true, true, false, false, false, false, true, true, true, false, true, false, true, true, true, false, false, true, true, true, false, true, false, false, false, true, false, true, true, false, false, true, false, false, false, true, true, false, false, true, true, false, true, false, true, true, false, false, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, false, false, true, false, false, true, false, true, true, true, false, false, false, false, false, true, false, false, true, false, true, true, false, true, false, false, false, true, true, true, false, true, false, false, true, false, true, false, false, true, true, true, false, false, false, false, true, false, false, false, true, true, false, false, false, true, true, false, false, false, false, false, true, true, false, true, false, true, false, true, true, true, true, false, false, false, false, true, true, true, false, true, false, true, true, true, false, false, true, true, true, false, true, false, false, true, true, false, true, true, false, false, true, false, false, false, true, true, false, false, true, true, false, true, false, true, true, false, false, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, true, false, false, false, false, true, false, true, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, true, false, true, true, true, false, true, false, false, true, true, true, true, false, true, true, true, true, false, true, false, false, true, true, false, true, false, true, true, false, false, true, false, true, false, false, true, true, true, false, true, false, false, true, true, false, true, true, false, true, true, true, true, false, true, true, false, false, true, false, false, false, true, false, false, true, false, true, false, false, true, false, true, true, false, false, true, true, true, false, false, false, false, false, true, false, true, false, false, false, false, true, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, true, false, false, false, false, true, false, true, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, true, false, true, true, true, false, true, false, false, true, true, true, true, false, true, true, true, true, false, true, false, false, true, true, false, true, false, true, true, false, false, true, false, true, false, false, true, true, true, false, true, false, false, true, true, false, true, true, false, true, true, true, true, false, true, true, false, false, true, false, false, false, true, false, false, true, false, true, true, false, false, true, false, true, true, false, false, true, true, true, false, false, false, false, false, false, true, false, true, false, false, true, false, false, true, false, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, true, false, false, false, false, true, false, true, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, true, false, true, true, true, false, true, false, false, true, true, true, true, false, true, true, true, true, false, true, false, false, true, true, false, true, false, true, true, false, false, true, false, true, false, false, true, true, true, false, true, false, false, true, true, false, true, true, false, true, true, true, true, false, true, true, false, false, true, false, false, false, true, false, false, true, false, true, true, false, false, true, true, true, true, false, false, true, true, true, false, false, false, false, false, false, true, false, true, false, false, true, false, false, true, false, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, false, false, true, false, false, true, true, true, true, false, false, false, true, true, false, true, false, false, true, false, false, true, true, true, false, true, false, true, false, false, true, true, false, true, false, true, true, false, true, false, false, true, false, true, false, false, false, false, false, true, true, true, true, true, false, false, false, false, false, true, true, true, true, true, true, false, true, true, true, false, false, true, false, false, false, true, true, true, true, true, true, false, true, true, true, false, true, false, false, true, false, true, true, false, false, true, false, false, false, true, false, false, true, false, false, true, false, true, true, false, false, false, false, true, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, false, false, true, false, false, true, true, true, true, false, false, false, true, true, false, true, false, false, true, false, false, true, true, true, false, true, false, true, false, false, true, true, false, true, false, true, true, false, true, false, false, true, false, true, false, false, false, false, false, true, true, true, true, true, false, false, false, false, false, true, true, true, true, true, true, false, true, true, true, false, false, true, false, false, false, true, true, true, true, true, true, false, true, true, true, false, true, false, false, true, true, false, true, true, false, false, true, false, false, false, true, false, false, true, false, false, true, true, false, true, true, false, false, false, true, false, true, true, true, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, false, false, true, false, false, true, true, true, true, false, false, false, true, true, false, true, true, false, true, false, false, true, true, true, false, true, false, true, false, false, true, true, false, true, false, true, true, false, true, false, false, true, false, true, false, false, false, false, false, true, true, true, true, true, false, false, false, false, false, true, true, true, true, true, true, false, true, true, true, false, false, true, false, false, false, true, true, true, true, true, true, false, true, true, true, false, true, false, false, true, true, false, true, true, false, false, true, false, false, false, true, false, false, true, false, false, true, true, false, true, true, false, false, false, true, false, true, true, true, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, true, false, true, true, true, false, true, true, true, false, true, true, false, true, false, true, true, true, true, false, true, true, false, false, true, true, false, true, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, true, false, true, false, true, true, false, false, true, true, true, true, true, true, true, true, false, true, true, true, false, true, true, true, true, true, false, false, false, true, true, false, true, false, false, true, false, false, true, true, false, true, false, true, false, false, true, false, true, false, false, true, true, false, false, false, false, true, false, true, true, true, false, false, false, false, true, true, true, true, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, true, true, true, false, true, true, true, false, true, true, true, false, true, true, false, true, false, true, true, true, true, false, true, true, false, false, true, true, false, true, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, true, false, true, false, true, true, false, false, true, true, true, true, true, true, true, true, false, true, true, true, false, true, true, true, true, true, false, false, false, true, true, false, true, false, false, true, false, false, true, true, false, true, false, true, false, false, true, false, false, true, false, false, true, true, false, false, false, false, true, false, true, true, true, true, false, false, false, false, true, true, true, true, true, true, false, false, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, true, false, true, true, true, false, true, true, true, false, true, true, false, true, false, true, true, true, true, false, true, true, false, false, true, true, false, true, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, true, false, true, false, true, true, false, false, true, true, true, true, true, true, true, true, false, true, true, true, false, true, true, true, true, true, false, false, false, true, false, false, true, false, false, true, false, false, true, true, false, true, false, true, false, false, true, false, false, true, false, false, true, true, false, false, false, false, true, false, true, true, true, true, false, false, false, false, true, true, true, true, true, true, false, false, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, true, false, false, true, false, false, false, false, false, false, false, false, true, false, true, false, true, true, false, true, true, true, true, true, false, false, true, false, true, false, false, true, true, false, true, true, false, false, false, false, true, true, false, false, false, true, false, false, false, false, false, true, false, true, false, false, true, true, false, true, false, false, false, false, true, false, true, true, false, false, true, false, true, true, false, false, false, false, true, true, false, false, false, false, true, true, false, false, true, true, false, false, true, false, true, true, false, true, true, true, false, true, false, true, false, true, true, false, false, true, true, false, true, false, false, false]);
            let encoded = BinVector::from_bools(&[true, false, false, true, true, false, false, true, false, false, false, false, false, false, false, false, true, false, true, false, true, true, false, true, true, true, true, true, false, false, true, false, true, false, false, true, true, false, true, true, false, false, false, false, true, true, false, false, false, true, false, false, false, false, false, true, false, true, false, false, true, true, false, true, false, false, false, false, true, false, true, true, false, false, true, false, true, true, false, false, false, false, true, true, false, false, false, false, true, true, false, false, true, true, true, false, false, true, false, true, true, false, true, true, true, false, true, false, true, false, false, true, true, false, false, true, true, false, true, true, false, false, false, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, true, false, false, true, false, false, false, false, false, false, false, false, true, false, true, false, true, true, false, true, true, true, true, true, false, false, true, false, true, false, false, true, true, false, true, true, false, false, false, false, true, true, false, false, false, true, false, false, false, false, false, true, false, true, false, false, true, true, false, true, false, false, false, false, true, false, true, true, false, false, true, false, true, true, false, false, false, false, true, true, false, false, false, false, true, true, false, false, true, true, true, true, false, true, false, true, true, false, true, true, true, false, true, false, true, false, false, true, true, false, false, true, true, false, true, true, false, false, false, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, false, true, false, true, false, false, true, false, true, true, false, false, true, false, true, false, false, false, false, true, false, true, true, true, false, true, true, false, false, true, false, false, false, false, false, true, false, true, true, true, true, false, false, false, false, true, false, true, false, true, false, true, false, true, false, true, true, true, false, false, false, false, false, false, true, true, false, true, true, false, true, true, false, true, true, false, true, false, true, true, false, true, false, false, true, true, false, true, true, false, true, false, false, true, false, false, false, true, false, false, false, false, false, true, false, false, true, false, true, false, true, true, true, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, false, false, false, true, false, true, false, false, true, false, true, true, false, false, true, false, true, false, false, false, false, true, false, true, true, true, false, true, true, false, false, true, false, false, false, false, false, true, false, true, true, true, true, false, false, false, false, true, false, true, false, true, false, true, false, true, false, true, true, true, false, false, false, false, false, false, true, true, false, true, true, false, true, true, false, true, true, false, true, false, true, true, false, true, false, false, true, true, false, true, true, false, false, true, false, false, true, false, false, false, true, false, false, false, false, false, true, false, false, false, true, false, true, false, true, true, true, true, true, false, false, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, false, true, false, true, false, false, true, false, true, true, false, false, true, false, true, false, false, false, false, true, false, true, true, false, false, true, true, false, false, true, false, false, false, false, false, true, false, true, true, true, true, false, false, false, false, true, false, true, false, true, false, true, false, true, false, true, true, true, false, false, false, false, false, false, true, true, false, true, true, false, true, true, false, true, true, false, true, false, true, true, false, true, false, false, true, true, false, true, true, false, false, true, false, false, true, false, false, false, true, false, false, false, false, false, true, false, false, false, true, false, true, false, true, true, true, true, true, false, false, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, false, true, true, true, false, false, false, false, false, false, true, true, true, true, false, false, false, true, false, false, false, false, true, false, false, true, true, false, false, true, true, true, true, false, false, false, true, true, false, false, false, true, true, true, false, true, false, false, true, true, true, false, false, false, false, true, true, false, true, true, false, true, true, false, true, false, false, false, false, true, false, false, false, true, true, true, true, false, true, true, true, false, true, true, false, false, false, false, true, true, true, true, true, true, true, false, true, true, false, false, true, false, false, false, false, true, true, true, true, false, true, false, false, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, false, true, true, true, false, false, false, false, false, false, true, true, true, true, false, false, false, true, false, false, false, false, true, false, false, true, true, false, false, true, true, true, true, false, false, false, true, true, false, false, false, true, true, true, false, true, false, false, true, true, true, false, false, false, false, true, true, false, true, true, false, true, true, false, true, false, false, false, false, true, false, false, false, true, true, true, true, false, true, true, true, false, true, true, false, false, false, false, true, false, true, true, true, true, true, true, false, true, true, false, false, true, false, false, false, true, false, true, true, true, true, false, true, true, false, false, false, false, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, true, false, true, true, true, false, false, false, false, false, false, true, true, true, true, false, false, false, true, false, false, false, false, true, false, false, true, true, false, false, true, true, true, true, false, false, false, true, true, false, false, false, true, true, true, false, true, false, false, true, true, true, false, false, false, false, true, true, false, true, true, false, true, true, false, true, false, false, false, false, true, false, false, false, true, true, true, true, false, true, true, true, false, true, true, false, false, false, false, true, false, true, true, true, true, true, true, false, true, true, false, false, true, false, false, false, true, true, true, true, true, true, false, true, true, false, false, false, false, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, false, true, false, true, true, false, true, true, true, true, true, true, true, false, true, true, true, true, false, false, true, true, false, true, true, true, true, true, false, false, true, false, true, true, true, false, false, false, false, false, true, true, false, false, true, false, false, false, false, true, true, true, false, true, true, true, false, false, false, false, true, true, true, true, true, true, true, false, true, true, true, false, false, false, true, false, false, false, false, true, true, true, true, true, false, true, true, true, false, true, false, true, false, true, false, false, true, false, false, true, false, true, false, false, false, false, false, true, false, false, false, true, true, true, true]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, false, true, false, true, true, false, true, true, true, true, true, true, true, false, true, true, true, true, false, false, true, true, false, true, true, true, true, true, false, false, true, false, true, true, true, false, false, false, false, false, true, true, false, false, true, false, false, false, false, true, true, true, false, true, true, true, false, false, false, false, true, true, true, true, true, true, true, false, true, true, true, false, false, false, true, false, false, false, false, true, true, true, true, true, false, true, true, true, false, false, true, false, true, false, true, false, false, true, false, false, true, false, true, false, false, true, false, false, false, true, false, false, false, false, true, true, true, true, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, false, true, false, true, true, false, true, true, true, true, true, true, true, false, true, true, true, true, false, false, true, true, false, true, true, true, true, true, false, false, true, false, true, true, true, false, false, false, false, false, true, true, false, false, true, false, false, false, false, true, true, true, false, true, true, true, false, false, false, false, true, true, true, true, true, true, true, false, true, true, true, false, false, false, true, false, false, false, false, true, true, true, true, true, false, true, true, true, false, false, true, false, true, false, true, false, false, true, false, false, true, false, true, false, false, true, true, false, false, true, false, false, false, false, true, true, true, true, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, true, false, true, false, false, true, false, true, false, false, false, true, true, true, false, false, true, false, false, true, true, true, false, true, true, false, true, false, false, false, true, false, true, true, false, true, true, false, false, false, true, false, true, false, true, true, false, false, true, false, false, false, true, true, false, true, false, false, false, false, false, true, true, false, true, false, false, false, true, false, false, true, false, true, true, false, false, false, true, false, true, false, false, false, true, true, true, true, false, true, true, false, false, false, true, true, false, false, false, true, false, false, true, false, true, false, true, false, true, true, true, true, false, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, true, true, true, false, true, false, false, true, false, true, false, false, false, true, true, true, false, false, true, false, false, true, true, true, false, true, true, false, true, false, false, false, true, false, true, true, false, true, true, false, false, false, true, false, true, false, true, true, false, false, true, false, false, false, true, true, false, true, false, false, false, false, false, true, true, false, true, false, false, false, true, false, false, true, false, true, true, false, false, false, true, false, true, false, false, false, true, true, true, true, false, true, true, true, false, false, false, true, true, false, false, false, true, false, false, true, false, true, true, false, true, false, true, true, true, true, false, false, true, false, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, true, false, true, false, false, true, false, true, false, false, false, true, true, true, false, false, true, false, false, true, true, true, false, true, true, false, true, false, false, false, true, false, true, true, false, true, true, false, false, false, true, false, true, false, true, false, false, false, true, false, false, false, true, true, false, true, false, false, false, false, false, true, true, false, true, false, false, false, true, false, false, true, false, true, true, false, false, false, true, false, true, false, false, false, true, true, true, true, false, true, true, true, false, false, false, true, true, false, false, false, true, false, false, true, false, true, true, false, true, false, true, true, true, true, false, false, true, false, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, false, true, true, true, true, true, true, false, true, true, true, false, true, false, true, true, false, true, true, false, false, true, true, true, false, true, true, false, true, true, true, false, false, false, true, false, true, true, true, false, true, true, false, true, true, false, false, true, true, true, false, true, true, true, false, true, false, false, true, false, true, false, true, false, false, true, true, true, false, false, true, false, true, false, false, true, false, true, false, true, true, false, false, false, true, true, false, true, false, false, true, true, false, true, true, false, true, true, false, true, false, false, true, false, true, false, true, false, false, false, true, false, true, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, false, true, true, true, true, true, true, false, true, true, true, false, true, false, true, true, false, true, true, false, false, true, true, true, false, true, true, false, true, true, true, false, false, false, true, false, true, true, true, false, true, true, false, true, true, false, false, true, true, true, false, true, true, true, false, true, false, false, true, false, true, false, true, false, false, true, true, true, false, false, true, false, true, false, false, true, false, true, false, true, true, false, false, false, true, true, false, true, false, false, false, true, true, false, true, true, false, true, true, false, true, false, false, true, false, true, true, false, true, false, false, false, true, false, false, true, false, true, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, true, false, true, true, true, true, true, true, false, true, true, true, false, true, false, true, true, false, true, true, false, false, true, true, true, false, true, true, false, true, true, true, false, false, false, true, false, true, true, true, false, true, true, false, true, true, false, false, true, true, true, false, true, true, true, false, true, false, false, true, false, true, false, true, false, false, true, true, true, false, false, true, false, true, false, false, true, false, true, false, true, true, false, false, false, true, true, false, true, false, false, false, true, true, false, false, true, false, true, true, false, true, false, false, true, false, true, true, false, true, false, false, false, true, false, false, true, false, true, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, false, false, false, false, false, false, true, true, true, false, true, false, false, true, false, true, false, false, true, false, true, false, false, false, true, true, false, false, true, false, true, false, false, true, false, true, false, false, true, false, true, false, true, true, false, false, false, true, true, false, false, true, true, true, false, false, false, true, true, true, false, true, false, false, false, false, false, false, true, false, false, true, false, true, false, true, true, true, true, true, false, true, true, true, false, true, true, false, false, true, false, false, true, true, false, true, true, false, true, false, false, true, false, false, false, false, false, false, true, true, true, true, false, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, true, true, false, false, false, false, false, false, true, true, true, false, true, false, false, true, false, true, false, false, true, false, true, false, false, false, true, true, false, false, true, false, true, false, false, true, false, true, false, false, true, false, true, false, true, true, false, false, false, true, true, false, false, true, true, true, false, false, false, true, true, true, false, true, false, false, false, false, false, false, true, false, false, true, false, true, false, true, true, true, true, true, false, true, true, true, false, true, true, false, false, true, true, false, false, true, true, false, true, true, false, true, false, false, true, false, false, false, true, false, false, false, true, true, true, true, true, false, true, false, true, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, false, false, false, false, false, false, true, true, true, false, true, false, false, true, false, true, false, false, true, false, true, false, false, false, true, true, false, false, true, false, true, false, false, true, false, true, false, false, true, false, true, false, true, true, false, false, false, true, true, false, true, true, true, true, false, false, false, true, true, true, false, true, false, false, false, false, false, false, true, false, false, true, false, true, false, true, true, true, true, true, false, true, true, true, false, true, true, false, false, true, true, false, false, true, true, false, true, true, false, true, false, false, true, false, false, false, true, false, false, false, true, true, true, true, true, false, true, false, true, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, true, false, false, true, true, true, false, false, false, true, false, false, false, true, true, false, false, false, false, false, false, false, true, false, true, true, true, false, true, false, true, true, false, false, true, false, false, true, true, true, true, false, true, false, true, true, true, true, false, true, true, true, true, true, false, false, false, false, true, true, false, false, false, true, false, true, false, true, true, true, true, false, true, true, false, true, false, true, false, true, true, false, false, false, true, true, true, false, false, false, false, false, false, true, false, true, true, false, true, true, false, true, false, false, true, false, false, false, true, false, true, true, true, true, false, true]);
            let encoded = BinVector::from_bools(&[false, false, true, true, true, false, false, true, true, true, false, false, false, true, false, false, false, true, true, false, false, false, false, false, false, false, true, false, true, true, true, false, true, false, true, true, false, false, true, false, false, true, true, true, true, false, true, false, true, true, true, true, false, true, true, true, true, true, false, false, false, false, true, true, false, false, false, true, false, true, false, true, true, true, true, false, true, true, false, true, false, true, false, true, true, false, false, false, true, true, true, false, false, false, true, false, false, false, true, false, true, true, false, true, true, false, true, false, false, true, false, false, false, false, true, false, true, true, false, true, true, false, false, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, true, false, false, true, true, true, false, false, false, true, false, false, false, true, true, false, false, false, false, false, false, false, true, false, true, true, true, false, true, false, true, false, false, false, true, false, false, true, true, true, true, false, true, false, true, true, true, true, false, true, true, true, true, true, false, false, false, false, true, true, false, false, false, true, false, true, false, true, true, true, true, false, true, true, false, true, false, true, false, true, true, false, false, false, true, true, true, false, false, false, true, false, false, false, true, false, true, true, false, true, true, false, true, false, false, true, false, false, false, false, true, false, true, true, false, true, true, false, false, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, false, true, true, true, false, true, true, true, true, false, true, false, false, false, true, false, false, false, true, false, false, true, false, true, false, true, false, false, true, false, true, true, true, false, false, true, false, true, true, true, true, true, false, false, false, false, false, false, false, true, false, true, false, false, false, true, true, false, true, false, true, true, true, true, false, true, false, false, false, true, false, true, true, true, false, true, false, true, true, false, false, true, false, false, true, false, true, true, false, true, false, true, false, true, false, true, false, false, true, false, false, false, true, false, false, true, true, false, true, true, true, false, false, false, true, false]);
            let encoded = BinVector::from_bools(&[true, true, true, true, false, true, true, true, false, true, true, true, true, false, true, false, false, false, true, false, false, false, true, false, false, true, false, true, false, true, false, false, true, false, true, true, true, false, false, true, false, true, true, true, true, true, false, false, false, false, false, false, false, true, false, true, false, false, false, true, true, false, true, false, true, true, true, true, false, true, false, false, false, true, false, true, true, true, false, true, false, true, true, false, false, true, false, false, true, false, true, true, false, true, false, false, true, false, true, false, true, false, false, true, false, false, false, true, false, false, false, true, true, false, true, true, true, false, false, false, false, true, false, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, false, true, true, true, false, true, true, true, true, false, true, false, false, false, true, false, false, false, true, false, false, true, true, true, false, true, false, false, true, false, true, true, true, false, false, true, false, true, true, true, true, true, false, false, false, false, false, false, false, true, false, true, false, false, false, true, true, false, true, false, true, true, true, true, false, true, false, false, false, true, false, true, true, true, false, true, false, true, true, false, false, true, false, false, true, false, true, true, false, true, false, false, true, false, true, false, true, false, false, true, false, false, false, true, false, false, false, true, true, false, true, true, true, false, false, false, false, true, false, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, false, true, true, true, true, false, true, true, true, true, false, false, false, true, false, false, false, false, false, false, false, true, false, true, false, false, true, true, true, false, true, true, false, false, false, true, false, false, true, false, true, true, true, true, true, false, false, true, false, false, false, true, true, false, true, false, true, true, true, false, false, true, false, true, false, true, true, false, true, false, true, false, true, true, false, false, false, false, false, false, false, false, false, true, false, false, true, true, true, false, true, true, true, true, false, false, true, false, true, true, true, true, true, true, false, true, true, true, true, true, false, true, false, true, true, true]);
            let encoded = BinVector::from_bools(&[false, true, false, false, false, true, true, true, true, false, true, true, true, true, false, false, false, true, false, false, false, false, false, false, false, true, false, true, false, false, true, true, true, false, true, true, false, false, false, true, false, false, true, false, true, true, true, true, true, false, false, true, false, false, false, true, true, false, true, false, true, true, true, false, false, true, false, true, false, true, true, false, true, false, true, false, true, true, false, false, false, false, false, false, false, false, false, true, false, false, true, true, true, false, false, true, true, true, true, false, false, true, false, true, true, true, true, true, true, false, false, true, true, true, true, true, false, true, true, false, true, true, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, false, true, true, true, true, false, true, true, true, true, false, false, false, true, false, false, false, false, false, false, false, true, false, true, false, false, true, true, true, false, true, true, false, false, false, true, false, false, true, false, true, true, true, false, true, false, false, true, false, false, false, true, true, false, true, false, true, true, true, false, false, true, false, true, false, true, true, false, true, false, true, false, true, true, false, false, false, false, false, false, false, false, false, true, false, false, true, true, true, false, false, true, true, true, true, false, false, true, false, true, true, true, true, true, true, false, false, true, true, true, true, true, false, true, true, false, true, true, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, false, false, true, false, false, false, false, true, false, true, true, false, false, true, false, true, true, true, false, true, true, false, false, false, true, false, false, true, false, false, false, true, false, false, true, false, true, false, false, true, true, true, true, false, false, false, false, true, false, true, false, false, false, false, true, false, false, true, false, false, true, false, false, true, true, true, true, true, true, false, true, false, true, true, true, true, true, false, true, true, true, true, false, true, true, true, false, false, false, true, false, false, false, false, true, false, true, true, true, false, false, true, false, false, true, true, false, true, false, true, false, true, true, true, false, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, false, false, true, false, false, false, false, true, false, true, true, false, false, true, false, true, true, true, false, true, true, false, false, false, true, false, false, true, false, false, false, true, false, false, true, false, true, false, false, true, true, true, true, false, false, false, false, true, false, true, false, false, false, false, true, false, false, true, false, false, true, false, false, true, true, true, true, true, true, false, true, false, true, true, true, true, true, false, true, true, true, true, false, true, true, true, false, false, false, true, true, false, false, false, false, true, false, true, true, true, false, false, true, false, false, true, false, true, false, true, false, true, false, true, true, true, true, false, true, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, false, false, true, false, false, false, false, true, false, true, true, false, false, true, false, true, true, true, false, true, true, false, false, false, true, false, false, true, false, false, false, true, false, false, true, false, true, false, false, true, true, true, true, false, false, false, false, true, false, true, false, false, false, false, true, false, false, true, false, false, true, false, false, true, true, true, true, true, true, false, true, false, true, false, true, true, true, false, true, true, true, true, false, true, true, true, false, false, false, true, true, false, false, false, false, true, false, true, true, true, false, false, true, false, false, true, false, true, false, true, false, true, false, true, true, true, true, false, true, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, false, true, true, true, false, false, true, false, true, false, false, false, false, false, false, true, true, true, true, false, false, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, false, true, true, false, true, false, false, false, false, true, true, false, false, false, true, false, true, true, true, false, true, false, true, false, false, false, true, false, false, false, false, false, true, false, false, true, true, false, false, true, true, false, true, true, true, false, true, false, false, true, false, false, true, false, false, true, false, false, true, false, false, true, true, false, false, true, true, true, true, true, false, false, true, true, true, false, true, true, true, false]);
            let encoded = BinVector::from_bools(&[false, false, true, false, false, true, true, true, false, false, true, false, true, false, false, false, false, false, false, true, true, true, true, false, false, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, false, true, true, false, true, false, false, false, false, true, true, false, false, false, true, false, true, true, true, false, true, false, true, false, false, false, true, false, false, false, false, false, true, false, false, true, true, false, false, true, true, false, true, true, true, false, true, false, false, true, false, false, true, false, true, false, true, false, false, true, false, false, true, true, false, false, true, true, true, true, false, true, false, false, true, true, true, false, false, true, true, true, false, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, false, true, true, true, false, false, true, false, true, false, false, false, false, false, false, true, true, true, true, false, false, true, false, false, false, false, true, false, true, true, true, true, true, true, true, false, false, true, true, false, true, false, false, false, false, true, true, false, false, false, true, false, true, true, true, false, true, false, true, false, false, false, true, false, false, false, false, false, true, false, false, true, true, false, false, true, true, false, true, true, true, false, true, false, false, true, false, false, true, false, true, false, true, false, false, true, false, false, true, true, false, false, true, true, true, true, false, true, false, false, true, true, true, false, false, true, true, true, false, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, false, true, true, true, false, false, false, true, false, false, false, true, false, true, false, false, false, true, false, false, false, false, false, true, false, false, false, true, true, true, true, true, true, true, false, true, false, false, false, true, false, true, true, true, false, true, true, true, true, true, true, false, false, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, false, false, false, true, true, true, true, false, false, false, false, true, false, true, true, true, false, true, false, true, false, false, false, false, true, true, true, false, true, true, false, false, false, false, false, true, false, false, true, false, true, true, true, false, false, false, false, false]);
            let encoded = BinVector::from_bools(&[true, false, false, false, false, true, true, true, false, false, false, true, false, false, false, true, false, true, false, false, false, true, false, false, false, false, false, true, false, false, false, true, true, true, true, true, true, true, false, true, false, false, false, true, false, true, true, true, false, true, true, true, true, true, true, false, false, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, false, false, false, true, true, true, true, false, false, false, false, true, false, true, true, true, false, true, false, true, false, false, false, false, false, true, true, true, false, true, true, false, false, false, false, false, true, false, true, false, true, false, true, true, true, false, true, false, false, false, false, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, false, true, true, true, false, false, false, true, false, false, false, true, false, true, false, false, false, true, false, false, false, false, false, true, false, false, false, true, true, true, true, true, true, true, false, true, false, false, false, true, false, true, true, true, false, true, true, false, true, true, true, false, false, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, false, false, false, true, true, true, true, false, false, false, false, true, false, true, true, true, false, true, false, true, false, false, false, false, false, true, true, true, false, true, true, false, false, false, false, false, true, false, true, false, true, false, true, true, true, false, true, false, false, false, false, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, true, false, false, true, false, false, true, true, false, true, false, false, false, true, false, false, true, true, false, false, false, true, false, true, true, true, false, true, true, true, false, true, true, false, true, true, true, false, true, true, false, false, false, true, true, true, true, true, true, false, true, false, false, true, false, false, false, false, false, true, false, true, false, false, false, true, false, true, false, false, false, true, false, true, true, true, false, false, false, false, true, false, false, false, true, false, true, false, true, true, false, true, false, false, true, true, false, false, true, true, false, true, false, true, false, false, true, false, true, true, false, true, false, false, true, true]);
            let encoded = BinVector::from_bools(&[true, false, false, false, true, false, false, true, false, false, true, true, false, true, false, false, false, true, false, false, true, true, false, false, false, true, false, true, true, true, false, true, true, true, false, true, true, false, true, true, true, false, true, true, false, false, false, true, true, true, true, true, true, false, true, false, false, true, false, false, false, false, false, true, false, true, false, false, false, true, false, true, false, false, false, true, false, true, true, true, false, false, false, false, true, false, false, false, true, false, true, false, true, true, true, false, true, false, false, true, true, false, false, true, true, false, true, false, true, false, true, false, true, false, true, true, false, true, true, false, false, true, false, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, true, false, false, true, false, false, true, true, false, true, false, false, false, true, false, false, true, true, false, false, false, true, false, true, true, true, false, true, true, true, false, true, true, false, true, true, true, false, true, true, false, false, false, true, true, true, true, true, true, false, true, false, false, true, false, false, false, false, false, true, false, true, false, false, false, true, false, true, false, false, false, true, false, true, true, true, false, false, false, false, true, false, false, false, true, false, true, false, true, true, true, false, true, false, false, true, true, false, false, true, true, false, true, false, true, false, true, false, true, false, true, true, false, true, true, false, false, true, false, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, true, false, true, false, false, false, true, true, true, true, false, true, false, false, false, true, false, false, true, true, true, false, true, false, true, false, false, false, true, true, false, true, true, true, true, true, true, true, true, false, true, false, false, true, false, true, false, false, false, true, false, false, false, false, false, false, true, true, true, false, true, true, true, false, false, false, true, false, true, false, true, false, false, true, false, false, false, false, true, true, true, false, false, false, true, true, false, false, true, true, true, false, false, false, false, false, true, true, false, false, false, false, false, false, false, false, true, true, true, false, true, false, false, true, true, true]);
            let encoded = BinVector::from_bools(&[true, false, false, false, true, false, true, false, false, false, true, true, true, true, false, true, false, false, false, true, false, false, true, true, true, false, true, false, true, false, false, false, true, true, false, true, true, true, true, true, true, true, true, false, true, false, false, true, false, true, false, false, false, true, false, false, false, false, false, false, true, true, true, false, true, true, true, false, false, false, true, false, true, false, true, false, false, true, false, false, false, false, true, true, true, false, false, false, true, true, false, false, true, true, true, true, false, false, false, false, false, true, true, false, false, false, false, false, false, false, true, false, true, true, true, false, true, false, false, false, true, true, true, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, true, false, true, false, false, false, true, true, true, true, false, true, false, false, false, true, false, false, true, true, true, false, true, false, true, false, false, false, true, false, false, true, true, true, true, true, true, true, true, false, true, false, false, true, false, true, false, false, false, true, false, false, false, false, false, false, true, true, true, false, true, true, true, false, false, false, true, false, true, false, true, false, false, true, false, false, false, false, true, true, true, false, false, false, true, true, false, false, true, true, true, true, false, false, false, false, false, true, true, false, false, false, false, false, false, false, true, false, true, true, true, false, true, false, false, false, true, true, true, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, true, false, false, true, true, false, false, false, true, false, false, true, false, false, false, false, true, true, false, false, true, false, true, false, false, true, false, true, false, true, false, true, true, false, true, true, false, true, true, false, true, true, false, false, false, true, false, true, true, false, false, true, false, true, false, false, true, false, false, false, true, false, false, false, false, true, true, true, false, true, true, true, false, false, true, false, true, true, true, true, false, true, false, false, false, true, true, true, false, true, true, true, false, false, true, true, false, false, false, false, true, false, false, false, true, true, true, false, false, true, true, false, true, true, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, true, true, false, false, true, true, false, false, false, true, false, false, true, false, false, false, false, true, true, false, false, true, false, true, false, false, true, false, true, false, true, false, true, true, false, true, true, false, true, true, false, true, true, false, false, false, true, false, true, true, false, false, true, false, true, false, false, true, false, false, false, true, false, false, false, false, true, true, true, false, true, true, true, false, false, true, false, true, true, true, true, false, true, false, false, false, true, true, true, false, true, true, true, true, false, false, true, true, false, false, false, false, true, false, false, false, true, false, true, true, false, false, true, true, false, false, true, true, true, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, true, false, false, true, true, false, false, false, true, false, false, true, false, false, false, false, true, true, false, false, true, false, true, false, false, true, false, true, false, true, false, true, true, false, true, true, false, true, true, false, true, true, false, false, false, true, false, true, true, false, false, true, false, true, false, false, true, false, false, false, true, false, false, false, false, true, true, true, false, true, true, true, false, false, true, false, true, true, true, true, false, true, false, false, false, true, true, true, false, true, true, true, true, false, false, true, true, false, false, false, false, true, false, false, false, true, false, true, true, false, false, true, true, false, false, true, true, true, true, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, true, false, false, true, true, true, true, true, false, false, false, true, false, false, true, false, false, false, true, false, true, false, false, true, true, true, false, false, false, false, true, false, false, true, true, true, false, false, true, false, true, true, true, true, false, false, false, false, true, false, false, false, false, true, true, false, false, false, false, true, true, false, false, false, false, true, true, false, true, true, true, true, true, false, true, false, true, false, false, false, false, false, true, true, true, false, false, false, false, false, true, true, false, true, false, false, false, true, true, false, true, false, true, true, true, false, true, false, false, false, false, false, true, true, false, true]);
            let encoded = BinVector::from_bools(&[true, true, false, false, true, false, false, true, true, true, true, true, false, false, false, true, false, false, true, false, false, false, true, false, true, false, false, true, true, true, false, false, false, false, true, false, false, true, true, true, false, false, true, false, true, true, true, true, false, false, false, false, true, false, false, false, false, true, true, false, false, false, false, true, true, false, false, false, false, true, true, false, true, true, true, true, true, false, true, false, true, false, false, false, false, false, true, true, true, false, false, false, false, false, false, true, true, false, true, false, false, false, true, true, false, true, false, true, true, true, false, false, true, false, false, false, false, false, true, true, true, false, false, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, true, false, false, true, true, true, true, true, false, false, false, true, false, false, true, false, false, false, true, false, true, false, false, true, true, true, true, false, false, false, true, false, false, true, true, true, false, false, true, false, true, true, true, true, false, false, false, false, true, false, false, false, false, true, true, false, false, false, false, true, true, false, false, false, false, true, true, false, true, true, true, true, true, false, true, false, true, false, false, false, false, false, true, true, true, false, false, false, false, false, false, true, true, false, true, false, false, false, true, true, false, true, false, true, true, true, false, false, true, false, false, false, false, false, true, true, true, false, false, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, false, false, true, false, false, true, false, true, true, true, true, false, false, false, false, true, false, false, true, false, false, false, false, false, false, true, false, false, false, false, true, false, false, false, false, true, true, true, false, true, false, true, false, true, true, false, true, false, false, false, true, true, true, false, true, true, true, false, true, false, false, false, false, false, true, true, true, true, true, true, false, true, false, true, false, false, false, false, false, true, false, true, true, false, true, true, true, true, false, false, true, true, true, false, false, true, true, true, false, false, false, false, true, true, true, false, false, false, true, false, false, false, true, true, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, false, false, true, false, false, true, false, true, true, true, true, false, false, false, false, true, false, false, true, false, false, false, false, false, false, true, false, false, false, false, true, false, false, false, false, true, true, true, false, true, false, true, false, true, true, false, true, false, false, false, true, true, true, false, true, true, true, false, true, false, false, false, false, false, true, true, true, true, true, true, false, true, false, true, false, false, false, false, false, true, false, true, true, false, true, true, true, true, false, false, true, true, true, true, false, false, true, true, true, false, false, false, false, true, true, true, false, false, false, false, true, false, false, false, false, true, true, true, true, false, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, false, false, true, false, false, true, false, true, true, true, true, false, false, false, false, true, false, false, true, false, false, false, false, false, false, true, false, false, false, false, true, false, false, false, false, true, true, true, false, true, false, true, false, true, true, false, true, false, false, false, true, true, true, false, true, true, true, false, true, false, false, false, false, false, true, true, true, true, true, true, false, true, false, true, false, false, false, false, false, true, false, true, true, false, true, true, true, true, false, false, true, true, true, true, false, false, true, true, true, false, false, false, false, true, true, true, false, false, true, false, true, false, false, false, false, true, true, true, true, false, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, true, true, true, true, true, false, true, false, true, false, true, true, false, true, false, false, false, false, true, false, false, false, false, true, false, true, true, true, false, false, true, false, true, false, false, true, false, false, false, false, false, false, false, false, true, true, false, false, false, false, false, false, false, true, false, true, false, false, false, true, false, false, true, false, false, false, true, true, true, false, false, true, false, true, false, false, true, false, false, true, true, true, false, false, true, true, false, false, false, false, true, true, false, false, false, false, true, true, true, false, false, false, false, true, true, true, false, true, true, false, true, true, false, false, false, false]);
            let encoded = BinVector::from_bools(&[false, true, true, true, true, true, true, true, true, false, true, false, true, false, true, true, false, true, false, false, false, false, true, false, false, false, false, true, false, true, true, true, false, false, true, false, true, false, false, true, false, false, false, false, false, false, false, false, true, true, false, false, false, false, false, false, false, true, false, true, false, false, false, true, false, false, true, false, false, false, true, true, true, false, false, true, false, true, false, false, true, false, false, true, true, true, false, false, true, true, false, false, false, false, true, true, true, false, false, false, false, true, true, true, false, false, false, false, true, true, false, true, false, true, true, false, true, true, true, false, false, false, true, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, true, true, true, true, true, false, true, false, true, false, true, true, false, true, false, false, false, false, true, false, false, false, false, true, false, true, true, true, false, false, true, false, true, false, false, true, false, false, false, false, false, false, false, false, true, true, false, false, false, false, false, false, false, true, false, true, false, false, false, true, false, false, true, false, false, false, true, true, true, false, false, true, false, true, false, false, true, false, false, true, true, true, false, false, true, true, false, false, false, false, true, true, true, false, false, false, false, true, true, true, false, true, false, false, true, true, false, true, false, true, true, false, true, true, true, false, false, false, true, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, true, false, true, false, true, true, false, false, true, false, false, false, true, false, false, false, true, false, true, false, false, true, false, true, true, false, true, true, true, true, true, false, false, true, false, true, true, false, false, true, true, false, true, true, false, false, true, false, true, true, false, false, false, true, true, true, false, false, false, true, false, true, true, false, false, false, true, true, true, false, false, true, true, true, true, true, true, false, false, true, true, false, false, true, true, true, false, false, true, true, true, false, false, false, true, true, false, true, true, false, true, true, true, false, true, false, false, false, true, false, false, false, false, false, true, true]);
            let encoded = BinVector::from_bools(&[false, true, true, false, true, false, true, false, true, true, false, false, true, false, false, false, true, false, false, false, true, false, true, false, false, true, false, true, true, false, true, true, true, true, true, false, false, true, false, true, true, false, false, true, true, false, true, true, false, false, true, false, true, true, false, false, false, true, true, true, false, false, false, true, false, true, true, false, false, false, true, true, true, false, false, true, true, true, true, true, true, false, false, true, true, false, false, true, true, true, false, false, true, true, false, true, false, false, false, true, true, false, true, true, false, true, true, true, false, true, true, false, false, false, true, false, false, false, false, false, false, true, true, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, true, false, true, false, true, true, false, false, true, false, false, false, true, false, false, false, true, false, true, false, true, true, false, true, true, false, true, true, true, true, true, false, false, true, false, true, true, false, false, true, true, false, true, true, false, false, true, false, true, true, false, false, false, true, true, true, false, false, false, true, false, true, true, false, false, false, true, true, true, false, false, true, true, true, true, true, true, false, false, true, true, false, false, true, true, true, false, false, true, true, false, true, false, false, false, true, true, false, true, true, false, true, true, true, false, true, true, false, false, false, true, false, false, false, false, false, false, true, true, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, true, true, true, true, true, false, false, true, true, true, true, true, true, false, true, false, true, false, false, true, false, true, false, false, true, false, true, true, false, true, true, false, true, false, false, false, false, false, true, false, false, false, false, true, false, true, true, false, true, true, true, false, false, false, true, false, false, false, true, true, false, false, true, true, false, true, true, false, false, false, false, true, true, true, true, false, true, false, true, false, false, true, true, true, false, true, false, true, true, true, true, false, false, false, true, false, false, true, true, false, true, false, true, false, false, true, false, false, false, true, false, false, true, true, false, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, true, true, true, true, true, false, false, true, true, true, true, true, true, false, true, false, true, false, false, true, false, true, false, false, true, false, true, true, false, true, true, false, true, false, false, false, false, false, true, false, false, false, false, true, false, true, true, false, true, true, true, false, false, false, true, false, false, false, true, true, false, false, true, true, false, true, true, false, false, false, false, true, true, true, true, false, true, false, true, false, false, true, true, true, false, true, false, true, true, true, true, true, false, false, false, true, false, false, true, true, false, true, false, true, false, false, true, true, false, false, false, true, false, false, true, true, true, false, true, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, true, true, true, true, true, false, false, true, true, true, true, true, true, false, true, false, true, false, false, true, false, true, false, false, true, false, true, true, false, true, true, false, true, false, false, false, false, false, true, false, false, false, false, true, false, true, true, false, true, true, true, false, false, false, true, false, false, false, true, true, false, false, true, true, false, true, true, false, false, false, false, true, true, true, true, false, true, false, true, false, false, true, true, true, true, true, false, true, true, true, true, true, false, false, false, true, false, false, true, true, false, true, false, true, false, false, true, true, false, false, false, true, false, false, true, true, true, false, true, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, true, false, false, true, true, true, false, false, false, false, false, false, true, false, true, true, true, true, true, true, true, true, false, true, true, true, true, false, false, false, false, true, false, false, true, true, false, false, true, true, true, true, false, true, false, false, true, false, false, true, true, true, true, true, true, true, true, false, false, false, true, false, true, true, false, true, false, false, true, true, true, true, true, true, false, true, false, true, false, false, true, false, false, true, true, true, false, false, true, false, true, false, false, false, true, true, true, false, false, true, true, true, true, true, false, true, true, false, false, false, true, false, false, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, true, false, false, true, true, true, false, false, false, false, false, false, true, false, true, true, true, true, true, true, true, true, false, true, true, true, true, false, false, false, false, true, false, false, true, true, false, false, true, true, true, true, false, true, false, false, true, false, false, true, true, true, true, true, true, true, true, false, false, false, true, false, true, true, false, true, false, false, true, true, true, true, true, true, false, true, false, true, false, false, true, false, false, true, true, true, false, false, true, true, false, true, false, false, false, true, true, true, false, false, true, true, true, true, true, true, false, true, true, false, false, false, true, true, false, false, false, true, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, true, false, false, true, true, true, false, false, false, false, false, false, true, false, true, true, true, true, true, true, true, false, false, true, true, true, true, false, false, false, false, true, false, false, true, true, false, false, true, true, true, true, false, true, false, false, true, false, false, true, true, true, true, true, true, true, true, false, false, false, true, false, true, true, false, true, false, false, true, true, true, true, true, true, false, true, false, true, false, false, true, false, false, true, true, true, false, false, true, true, false, true, false, false, false, true, true, true, false, false, true, true, true, true, true, true, false, true, true, false, false, false, true, true, false, false, false, true, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, true, false, false, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, true, false, false, false, false, false, true, true, true, true, false, false, true, true, true, true, true, false, true, false, false, false, false, false, false, false, true, true, false, false, false, false, false, false, true, false, true, true, false, false, true, false, true, true, false, true, false, false, false, false, true, true, true, false, false, true, false, true, true, false, false, true, false, false, true, false, false, false, false, true, false, false, false, false, false, true, false, true, false, true, true, false, true, true, true, true, false, false, true, false, false, true, true, true, true, true, true]);
            let encoded = BinVector::from_bools(&[false, true, true, true, true, false, false, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, true, false, false, false, false, false, true, true, true, true, false, false, true, true, true, true, true, false, true, false, false, false, false, false, false, false, true, true, false, false, false, false, false, false, true, false, true, true, false, false, true, false, true, true, false, true, false, false, false, false, true, true, true, false, false, true, false, true, true, false, false, true, false, false, true, false, false, false, false, true, false, false, false, false, false, false, true, false, true, false, true, true, false, true, true, true, true, true, false, false, true, false, false, true, true, true, true, true, true, true, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, true, false, false, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, true, false, false, false, false, false, true, true, true, true, false, false, true, true, true, true, true, false, true, false, false, false, false, false, false, false, true, true, false, false, false, false, false, false, true, false, true, true, false, false, false, false, true, true, false, true, false, false, false, false, true, true, true, false, false, true, false, true, true, false, false, true, false, false, true, false, false, false, false, true, false, false, false, false, false, false, true, false, true, false, true, true, false, true, true, true, true, true, false, false, true, false, false, true, true, true, true, true, true, true, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, true, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, false, true, true, true, true, false, false, true, true, true, false, true, true, true, true, false, true, false, true, false, false, false, false, true, false, true, false, false, true, true, false, false, false, true, false, true, true, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, false, true, true, false, false, true, true, false, false, true, false, true, true, true, true, false, true, true, false, true, true, true, false, false, false, true, true, true, true, false, true, false, true, false, true, true, false, false, false, false, true, false, true, false, true, true, true, false]);
            let encoded = BinVector::from_bools(&[false, true, false, true, true, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, false, true, true, true, true, false, false, true, true, true, false, true, true, true, true, false, true, false, true, false, false, false, false, true, false, true, false, false, true, true, false, false, false, true, false, true, true, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, false, true, true, false, false, true, true, false, false, true, false, true, true, true, true, false, true, true, false, true, true, true, false, false, false, false, true, true, true, true, false, true, false, true, false, true, true, false, true, false, false, false, true, false, true, false, true, true, true, true, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, true, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, false, true, true, true, true, false, false, true, true, true, false, true, true, true, true, false, true, false, true, false, false, false, false, true, false, true, false, false, true, true, false, false, false, true, false, true, true, false, true, true, false, false, false, false, true, false, false, false, true, false, false, false, false, true, true, false, false, true, true, false, false, true, false, true, true, true, true, false, true, true, false, true, true, true, false, false, false, false, true, true, true, true, false, true, false, true, false, true, true, false, true, false, false, false, true, false, true, false, true, true, true, true, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, false, false, true, true, true, true, true, false, false, true, false, false, false, true, true, true, false, true, false, false, true, true, true, false, true, true, false, true, false, false, true, false, true, true, true, true, false, true, true, false, false, false, false, false, false, true, false, true, true, true, false, false, false, true, false, true, false, true, false, true, true, true, true, false, false, true, false, false, false, false, false, true, false, true, false, false, true, true, false, true, true, true, true, false, false, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, true, true, false, false, true, false, false, false, true, false, false, false, true, true]);
            let encoded = BinVector::from_bools(&[false, false, true, true, false, false, true, true, true, true, true, false, false, true, false, false, false, true, true, true, false, true, false, false, true, true, true, false, true, true, false, true, false, false, true, false, true, true, true, true, false, true, true, false, false, false, false, false, false, true, false, true, true, true, false, false, false, true, false, true, false, true, false, true, true, true, true, false, false, true, false, false, false, false, false, true, false, true, false, false, true, true, false, true, true, true, true, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, true, true, true, true, false, true, true, false, false, false, true, false, false, false, true, false, true, false, false, true, true, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, false, false, true, true, true, true, true, false, false, true, false, false, false, true, true, true, false, true, false, false, true, true, true, false, true, true, false, true, false, false, true, false, true, true, true, true, false, true, true, false, true, false, false, false, false, true, false, true, true, true, false, false, false, true, false, true, false, true, false, true, true, true, true, false, false, true, false, false, false, false, false, true, false, true, false, false, true, true, false, true, true, true, true, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, true, true, true, true, false, true, true, false, false, false, true, false, false, false, true, false, true, false, false, true, true, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, true, true, false, false, true, false, false, false, true, false, false, true, true, false, true, false, true, true, false, false, true, false, true, true, true, false, false, false, true, false, false, true, false, false, false, false, true, true, false, false, true, true, true, false, true, true, false, false, true, true, true, true, false, false, false, false, false, false, false, false, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, true, true, false, false, true, false, true, true, true, false, true, true, false, false, true, false, false, true, true, true, false, false, false, true, false, true, true, true, true, false, false, false, false, false, false, true, true, false, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, true, true, false, false, true, false, false, false, true, false, false, true, true, false, true, false, true, true, false, false, true, false, true, true, true, false, false, false, true, false, false, true, false, false, false, false, true, true, false, false, true, true, true, false, true, true, false, false, true, true, true, true, false, false, false, false, false, false, false, false, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, true, true, false, false, true, false, true, true, true, false, true, true, false, false, true, true, false, false, true, true, true, false, false, false, true, false, true, true, true, true, false, false, false, false, false, false, false, true, true, true, false, true, false, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, true, true, true, false, true, false, false, false, true, false, false, true, true, false, true, false, true, true, false, false, true, false, true, true, true, false, false, false, true, false, false, true, false, false, false, false, true, true, false, false, true, true, true, false, true, true, false, false, true, true, true, true, false, false, false, false, false, false, false, false, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, true, true, false, false, true, false, true, true, true, false, true, true, false, false, true, true, false, false, true, true, true, false, false, false, true, false, true, true, true, true, false, false, false, false, false, false, false, true, true, true, false, true, false, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, false, true, true, true, false, true, true, false, false, true, true, false, false, false, false, false, true, false, true, true, false, false, false, true, true, true, false, false, true, true, true, false, true, false, false, false, false, false, false, true, true, false, true, true, false, true, false, false, true, true, false, false, false, true, false, false, true, true, true, false, true, false, true, true, true, true, false, true, false, false, true, true, false, false, true, false, true, true, true, true, true, true, false, true, true, false, false, true, true, false, true, true, true, false, false, true, false, false, false, true, false, false, false, true, true, false, false, false, true, true, false, false, true, false, false, true]);
            let encoded = BinVector::from_bools(&[false, true, false, false, false, true, true, true, false, true, true, false, false, true, true, false, false, false, false, false, true, false, true, true, false, false, false, true, true, true, false, false, true, true, true, false, true, false, false, false, false, false, false, true, true, false, true, true, false, true, false, false, true, true, false, false, false, true, false, false, true, true, true, false, true, false, true, true, true, true, false, true, false, false, true, true, false, false, true, false, true, true, true, true, true, true, false, true, true, false, false, true, true, false, false, true, true, true, false, false, true, false, false, false, true, false, false, false, true, true, false, false, false, false, true, true, false, false, true, true, false, false, true, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, false, true, true, true, false, true, true, false, false, true, true, false, false, false, false, false, true, false, true, true, false, false, false, true, true, true, false, false, true, true, true, false, true, false, false, false, false, false, false, true, true, false, true, true, false, true, false, false, true, true, false, false, false, true, false, false, true, true, true, false, true, false, true, true, true, true, false, true, false, false, true, true, false, false, true, false, true, true, true, true, true, true, false, true, true, false, false, true, true, false, false, true, true, true, false, true, true, false, false, false, true, false, false, false, true, true, false, false, false, false, true, true, false, false, true, true, false, false, true, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, true, true, true, true, true, true, true, true, true, false, true, false, true, true, true, false, false, false, true, false, true, true, true, true, false, true, true, true, false, true, false, true, false, true, false, true, true, true, false, true, true, true, true, false, true, false, true, false, true, false, false, false, true, false, true, false, false, true, true, false, true, true, true, false, true, false, false, true, true, false, false, true, true, false, true, true, false, false, false, true, true, true, true, false, true, false, true, true, true, false, true, true, true, false, false, true, true, false, false, true, true, true, true, false, true, true, false, false, true, false, true, false, true, true, false, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, true, true, true, true, true, true, true, true, true, false, true, false, true, true, true, false, false, false, true, false, true, true, true, true, false, true, true, true, false, true, false, true, false, true, false, true, true, true, false, true, true, true, true, false, true, false, true, false, true, false, false, false, true, false, true, false, false, true, true, false, true, true, true, false, true, false, false, true, true, false, false, true, true, false, true, true, false, false, false, true, true, true, true, false, true, false, true, true, true, false, false, true, true, true, false, false, true, true, false, false, true, true, true, true, false, true, false, true, false, false, true, false, true, false, true, true, true, false, true, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, true, true, true, true, true, true, true, true, true, false, true, false, true, true, true, false, false, false, true, false, true, true, true, true, false, true, true, true, false, true, false, true, false, true, false, true, true, true, false, true, true, true, true, false, true, false, true, false, true, false, false, false, true, false, false, false, false, true, true, false, true, true, true, false, true, false, false, true, true, false, false, true, true, false, true, true, false, false, false, true, true, true, true, false, true, false, true, true, true, false, false, true, true, true, false, false, true, true, false, false, true, true, true, true, false, true, false, true, false, false, true, false, true, false, true, true, true, false, true, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, true, true, true, false, true, true, false, false, false, true, false, false, false, false, false, false, false, false, false, true, true, false, false, true, false, true, true, false, true, false, false, false, false, true, true, false, false, false, false, false, true, true, false, true, true, true, true, false, false, true, true, true, true, true, true, true, false, true, false, true, false, false, true, true, true, false, true, false, true, false, true, false, false, true, false, true, true, false, false, true, false, false, true, false, true, false, false, false, true, false, false, false, false, false, false, false, true, true, false, false, true, false, true, true, false, false, false, true, false, true, true, true, true, false, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, false, true, true, true, false, true, true, false, false, false, true, false, false, false, false, false, false, false, false, false, true, true, false, false, true, false, true, true, false, true, false, false, false, false, true, true, false, false, false, false, false, true, true, false, true, true, true, true, false, false, true, true, true, true, true, true, true, false, true, false, true, false, false, true, true, true, false, true, false, true, false, true, false, false, true, false, true, true, false, false, true, false, false, true, false, true, false, false, false, true, false, true, false, false, false, false, false, false, true, true, false, false, true, false, true, true, false, false, false, false, true, false, true, true, true, true, true, false, true, false, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, true, true, true, false, true, true, false, false, false, true, false, false, false, false, false, false, false, false, false, true, true, false, false, true, false, true, true, false, true, false, false, false, false, true, true, false, false, false, false, false, true, true, false, true, true, true, true, false, false, true, true, true, true, true, true, true, false, true, false, true, false, false, true, true, true, false, true, false, true, false, true, false, false, true, false, true, true, false, false, true, false, false, true, false, true, false, false, false, true, false, true, false, false, false, false, false, false, true, true, false, false, false, false, true, true, false, false, false, false, true, false, true, true, true, true, true, false, true, false, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, true, true, true, false, true, false, true, true, false, false, true, false, true, true, false, true, true, true, true, true, true, true, false, true, false, false, false, true, true, true, true, true, true, true, false, true, true, true, true, false, true, false, false, false, false, false, false, true, false, false, false, false, true, true, true, true, false, false, true, false, false, true, true, false, true, true, true, true, true, false, false, true, true, true, true, false, true, true, false, false, true, false, true, false, false, true, true, false, true, true, true, false, false, true, true, false, false, false, false, true, true, true, false, true, true, false, true, true, true, true, true, false, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, true, true, true, false, true, false, true, true, false, false, true, false, true, true, false, true, true, true, true, true, true, true, false, true, false, false, false, true, true, true, true, true, true, true, false, true, true, true, true, false, true, false, false, false, false, false, false, true, false, false, false, false, true, true, true, true, false, false, true, false, false, true, true, false, true, true, true, true, true, false, false, true, true, true, true, false, true, true, false, false, true, false, true, false, false, true, true, false, true, false, true, true, false, false, true, true, false, false, false, false, true, true, true, false, true, true, true, false, true, true, true, true, true, true, false, true, false, false, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, true, true, true, false, true, false, true, true, false, false, true, false, true, true, false, true, true, true, true, true, true, true, false, true, false, false, false, true, true, true, true, true, true, true, false, true, true, true, true, false, true, false, false, false, false, false, false, true, false, false, false, false, true, true, true, true, false, false, true, false, false, true, true, false, true, true, true, true, true, false, false, true, true, true, true, false, true, true, false, false, false, false, true, false, false, true, true, false, true, false, true, true, false, false, true, true, false, false, false, false, true, true, true, false, true, true, true, false, true, true, true, true, true, true, false, true, false, false, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, true, true, false, false, false, true, false, false, false, false, true, false, false, true, true, true, false, true, false, false, true, true, true, false, false, false, false, true, true, true, false, false, false, true, false, false, true, true, true, false, true, true, true, false, true, true, true, false, false, false, true, false, false, true, false, false, true, false, false, true, true, true, false, true, false, true, false, false, false, false, false, false, false, false, false, false, true, true, false, true, false, false, true, true, true, true, false, true, true, true, true, true, false, false, true, false, false, false, true, false, true, true, true, true, true, false, false, true, false, true, true, false, false, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, true, true, false, false, false, true, false, false, false, false, true, false, false, true, true, true, false, true, false, false, true, true, true, false, false, false, false, true, true, true, false, false, false, true, false, false, true, true, true, false, true, true, true, false, true, true, true, false, false, false, true, false, false, true, false, false, true, false, false, true, true, true, false, true, false, true, false, false, false, false, false, false, false, false, false, false, true, true, false, true, false, false, true, true, true, true, false, true, true, false, true, true, true, false, false, true, false, false, false, true, false, true, true, true, true, true, true, false, false, true, false, true, true, false, false, false, true, false, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, false, true, true, false, false, false, true, false, false, false, false, true, false, false, true, true, true, false, true, false, false, true, true, true, false, false, false, false, true, true, true, false, false, false, true, false, false, true, true, true, false, true, true, true, false, true, true, true, false, false, false, true, false, false, true, false, false, true, false, false, true, true, true, false, true, false, true, false, false, false, false, false, false, false, false, false, false, true, true, false, true, false, false, true, true, true, true, false, true, true, false, true, true, true, false, false, true, false, false, false, true, false, true, true, true, true, true, true, false, false, true, false, true, true, false, false, false, true, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, false, false, true, false, false, true, false, false, false, true, false, true, true, true, false, false, false, true, true, true, true, false, true, true, false, false, true, false, false, false, false, true, false, false, true, false, true, true, true, true, false, true, false, false, false, false, true, true, false, false, false, true, false, false, false, false, true, false, false, false, true, true, false, true, true, true, true, false, false, true, true, false, true, false, false, true, true, true, false, false, false, false, false, false, true, true, true, true, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, false, false, false, true, true, true, true, true, true, true, true]);
            let encoded = BinVector::from_bools(&[true, false, false, false, false, false, true, false, false, true, false, false, false, true, false, true, true, true, false, false, false, true, true, true, true, false, true, true, false, false, true, false, false, false, false, true, false, false, true, false, true, true, true, true, false, true, false, false, false, false, true, true, false, false, false, true, false, false, false, false, true, false, false, false, true, true, false, true, true, true, true, false, false, true, true, false, true, false, false, true, true, true, false, false, false, false, false, false, true, true, true, true, true, false, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, false, true, true, true, true, true, true, true, true, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, false, false, true, false, false, true, false, false, false, true, false, true, true, true, false, false, false, true, true, true, true, false, true, true, false, false, true, false, false, false, false, true, false, false, true, false, true, true, true, true, false, true, false, false, false, false, true, true, false, false, false, true, false, false, false, false, true, false, false, false, true, true, false, true, true, true, true, false, false, true, true, true, true, false, false, true, true, true, false, false, false, false, false, false, true, true, true, true, true, false, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, false, true, true, true, true, true, true, true, true, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, true, false, true, true, true, true, false, false, false, true, false, true, true, false, false, true, true, true, false, false, true, true, false, false, false, false, true, true, false, false, true, true, true, true, false, true, true, false, true, false, true, true, true, false, false, false, true, true, false, false, false, true, true, false, false, true, false, true, false, false, false, false, false, true, true, true, true, true, false, false, true, true, false, true, false, false, false, false, true, true, false, false, true, true, false, true, false, false, false, false, false, false, true, true, true, false, false, false, false, false, true, false, true, true, true, true, false, false, false, false, true, true, true, false, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, false, true, false, true, true, true, true, false, false, false, true, false, true, true, false, false, true, true, true, false, false, true, true, false, false, false, false, true, true, false, false, true, true, true, true, false, true, true, false, true, false, true, true, true, false, false, false, true, true, false, false, false, true, true, false, false, true, false, true, false, false, false, false, false, true, true, true, true, true, false, false, true, true, false, true, false, false, false, false, true, true, false, false, true, true, false, true, false, false, false, false, false, false, false, true, true, true, false, false, false, false, false, true, false, true, true, true, true, true, false, false, false, false, true, true, false, true, false, false, false, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, true, false, true, true, true, true, false, false, false, true, false, true, true, false, false, true, true, true, false, false, true, true, false, false, false, false, true, true, false, false, true, true, true, true, false, true, true, false, true, false, true, true, true, false, false, false, true, true, false, false, false, true, true, false, false, true, false, true, false, false, false, false, false, true, true, true, true, true, false, false, true, true, false, true, false, false, false, false, true, true, false, false, true, true, false, true, false, false, false, false, false, false, true, true, true, true, false, false, false, false, false, true, false, true, true, true, true, true, false, false, false, false, true, true, false, true, false, false, false, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, true, false, true, false, false, true, true, true, false, false, true, false, false, false, false, true, false, false, true, false, false, false, true, false, false, false, false, true, false, true, false, true, true, false, false, false, true, false, false, true, true, true, false, false, true, true, false, false, false, false, false, false, true, true, true, true, true, true, false, false, false, true, true, true, true, true, false, true, false, true, true, true, true, false, false, true, true, false, true, false, true, true, false, true, false, false, true, false, false, false, true, false, false, true, false, false, true, false, true, true, false, false, true, true, false, true, false, true, true, true, false, true, false, true, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, true, true, false, true, false, false, true, true, true, false, false, true, false, false, false, false, true, false, false, true, false, false, false, true, false, false, false, false, true, false, true, false, true, true, false, false, false, true, false, false, true, true, true, false, false, true, true, false, false, false, false, false, false, true, true, true, true, true, true, false, false, false, true, true, true, true, true, false, true, false, true, true, true, true, false, false, true, true, false, true, false, true, true, false, true, false, false, true, false, false, false, true, true, false, false, true, false, false, true, false, true, true, false, false, true, true, false, false, true, false, true, true, true, false, true, true, false, true, true, false, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, true, false, true, false, false, true, true, true, false, false, true, false, false, false, false, true, false, false, true, false, false, false, true, false, false, false, false, true, false, true, false, true, true, false, false, false, true, false, false, true, true, true, false, false, true, true, false, false, false, false, false, false, true, true, true, true, true, true, false, false, false, true, true, true, true, true, false, true, false, true, true, true, true, false, false, true, true, false, true, false, true, true, true, true, false, false, true, false, false, false, true, true, false, false, true, false, false, true, false, true, true, false, false, true, true, false, false, true, false, true, true, true, false, true, true, false, true, true, false, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, true, false, true, true, true, true, false, false, false, true, true, false, true, false, false, false, true, false, false, true, true, true, false, true, true, true, false, false, false, false, true, false, false, true, true, true, true, true, false, false, true, false, true, false, true, true, true, false, true, false, false, false, false, true, true, true, false, false, true, false, true, true, false, false, false, false, true, true, true, true, true, true, false, true, true, false, false, true, false, true, false, false, true, false, false, true, true, true, false, false, true, true, false, true, true, true, true, false, true, true, false, false, true, false, false, true, false, true, false, true, false, true, false, true, false]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, true, false, true, true, true, true, false, false, false, true, true, false, true, false, false, false, true, false, false, true, true, true, false, true, true, true, false, false, false, false, true, false, false, true, true, true, true, true, false, false, true, false, true, false, true, true, true, false, true, false, false, false, false, true, true, true, false, false, true, false, true, true, false, false, false, false, true, true, true, true, true, true, false, true, true, false, false, true, false, true, false, false, true, false, false, true, true, true, false, false, false, true, true, false, true, true, true, true, false, true, true, false, false, true, false, false, false, true, false, true, false, true, false, false, true, false, true, false, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, true, true, false, true, true, true, true, false, false, false, true, true, false, true, false, false, false, true, false, false, true, true, true, false, true, true, true, false, false, false, false, true, false, false, true, true, true, true, true, false, false, true, false, true, false, true, true, true, false, true, false, false, false, false, true, true, true, false, false, true, false, true, true, false, false, false, false, true, true, true, true, true, true, false, true, true, false, false, true, false, true, false, false, true, false, false, true, true, true, false, false, false, true, true, false, true, true, true, true, false, true, true, false, false, true, false, false, false, true, false, true, false, true, false, false, true, false, true, false, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, true, false, true, false, false, true, false, false, true, false, true, true, false, false, false, false, false, false, false, true, true, false, true, false, false, true, false, false, true, false, false, true, false, true, false, false, false, true, false, false, true, false, true, false, false, false, false, false, true, true, false, true, false, false, true, true, false, false, false, false, true, true, false, true, false, true, true, true, false, false, true, false, true, true, false, true, false, true, true, true, true, false, true, true, true, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, true, false, true, false, false, false, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, false, true, false, true, false, false, true, false, false, true, false, true, true, false, false, false, false, false, false, false, true, true, false, true, false, false, true, false, false, true, false, false, true, false, true, false, false, false, true, false, false, true, false, true, false, false, false, false, false, true, true, false, true, false, false, true, true, false, false, false, false, true, true, false, true, false, true, true, true, false, false, true, false, true, true, false, true, false, true, true, true, true, false, true, true, true, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, true, false, true, false, true, false, false, false, true, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, true, false, true, false, false, true, false, false, true, false, true, true, false, false, false, false, false, false, false, true, true, false, true, false, false, true, false, false, true, true, false, true, false, true, false, false, false, true, false, false, true, false, true, false, false, false, false, false, true, true, false, true, false, false, true, true, false, false, false, false, true, true, false, true, false, true, true, true, false, false, true, false, true, true, false, true, false, true, true, true, true, false, true, true, true, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, true, false, true, false, true, false, false, false, true, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, true, true, false, false, false, false, false, true, false, false, true, false, false, false, true, true, false, false, true, true, false, true, true, true, false, true, false, true, true, true, true, false, true, false, false, true, true, true, false, true, false, true, true, true, false, false, false, false, true, true, true, false, true, true, true, false, true, true, false, true, false, false, true, false, true, true, false, true, true, false, true, false, false, true, true, false, false, false, true, true, false, true, false, true, false, false, true, true, true, false, true, false, true, true, true, true, true, true, true, true, false, false, false, false, false, false, true, true, false, false, false, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, true, false, true, true, false, false, false, false, false, true, false, false, true, false, false, false, true, true, false, false, true, true, false, true, true, true, false, true, false, true, true, true, true, false, true, false, false, true, true, true, false, true, false, true, true, true, false, false, false, false, true, true, true, false, true, true, true, false, true, true, false, true, false, false, true, false, true, true, false, true, true, false, true, false, false, true, true, false, false, false, true, true, false, true, false, true, false, false, true, true, true, false, false, true, false, true, true, true, true, true, true, true, true, false, false, false, false, false, true, false, true, true, false, false, false, false, false, false, true, false, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, true, true, false, false, false, false, false, true, false, false, true, false, false, false, true, true, false, false, true, true, false, true, true, true, false, true, false, true, true, true, true, false, true, false, false, true, true, true, false, false, false, true, true, true, false, false, false, false, true, true, true, false, true, true, true, false, true, true, false, true, false, false, true, false, true, true, false, true, true, false, true, false, false, true, true, false, false, false, true, true, false, true, false, true, false, false, true, true, true, false, false, true, false, true, true, true, true, true, true, true, true, false, false, false, false, false, true, false, true, true, false, false, false, false, false, false, true, false, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, false, false, true, true, true, false, true, true, true, false, false, true, false, false, false, false, true, false, false, false, false, false, false, true, true, true, true, false, true, false, false, false, true, false, true, true, false, false, true, false, false, false, false, true, true, true, false, true, false, true, false, true, true, false, false, false, true, true, false, false, true, false, true, true, true, false, false, false, false, false, false, true, true, false, true, false, true, true, true, false, true, true, false, false, true, false, true, true, false, false, false, true, true, true, false, true, false, false, false, false, false, true, false, false, false, false, true, true, false, true, false, false, false, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, false, false, true, true, true, false, true, true, true, false, false, true, false, false, false, false, true, false, false, false, false, false, false, true, true, true, true, false, true, false, false, false, true, false, true, true, false, false, true, false, false, false, false, true, true, true, false, true, false, true, false, true, true, false, false, false, true, true, false, false, true, false, true, true, true, false, false, false, false, false, false, true, true, false, true, false, true, true, true, false, true, true, false, false, true, false, true, true, false, false, false, false, true, true, true, false, true, false, false, false, false, false, true, false, false, true, false, false, true, true, false, true, false, true, false, false, true, false, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, false, false, true, true, true, false, true, true, true, false, false, true, false, false, false, false, true, false, false, false, false, false, false, true, true, true, true, false, true, false, false, false, true, false, true, true, false, false, true, false, false, false, false, true, true, true, false, true, false, true, false, true, true, false, false, false, true, true, false, false, true, false, true, true, true, false, false, false, false, false, false, true, true, false, true, false, true, true, true, false, true, true, false, false, true, false, true, true, false, false, false, false, true, true, true, false, true, false, false, false, false, false, true, false, false, true, false, false, true, true, false, true, true, true, false, false, true, false, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, true, false, true, true, true, false, false, false, false, false, false, true, false, true, true, true, true, true, false, true, true, false, true, true, false, false, false, false, true, false, false, true, true, true, true, false, true, false, true, true, false, true, true, false, false, true, false, false, true, false, false, true, true, true, false, true, true, false, true, true, false, false, false, true, true, false, true, false, true, false, true, true, false, false, true, false, false, false, false, true, false, false, false, true, false, true, false, false, true, false, true, false, false, true, true, false, true, false, false, false, false, false, true, false, true, true, true, true, true, false, false, false, true, true, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, false, true, false, true, true, true, false, false, false, false, false, false, true, false, true, true, true, true, true, false, true, true, false, true, true, false, false, false, false, true, false, false, true, true, true, true, false, true, false, true, true, false, true, true, false, false, true, false, false, true, false, false, true, true, true, false, true, true, false, true, true, false, false, false, true, true, false, true, false, true, false, true, true, false, false, true, false, false, false, false, true, false, false, false, true, false, true, false, false, true, false, false, true, false, false, true, true, false, true, false, false, false, false, false, true, false, true, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, true, false, true, true, true, false, false, false, false, false, false, true, false, true, true, true, true, true, false, true, true, false, true, true, false, false, false, false, true, false, false, true, true, true, true, false, true, false, true, true, false, true, true, false, false, true, false, false, true, false, false, true, true, true, false, true, true, false, true, true, false, false, false, true, true, false, true, false, true, false, true, true, false, true, true, false, false, false, false, true, false, false, false, true, false, true, false, false, true, false, false, true, false, false, true, true, false, true, false, false, false, false, false, true, false, true, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, true, true, true, false, true, true, false, false, false, true, false, true, false, true, false, false, false, false, false, false, false, true, true, false, false, false, true, false, false, true, false, false, false, true, false, true, false, false, true, false, true, false, false, true, false, false, true, true, true, true, true, false, false, true, false, false, false, false, false, true, true, false, false, true, true, true, false, true, false, false, true, false, true, true, false, true, false, true, true, false, false, false, false, false, true, false, true, false, true, true, false, false, false, false, true, false, false, false, false, true, true, true, true, true, false, false, false, true, true, false, false, false, true, false, false, false]);
            let encoded = BinVector::from_bools(&[false, true, true, false, true, true, true, false, true, true, false, false, false, true, false, true, false, true, false, false, false, false, false, false, false, true, true, false, false, false, true, false, false, true, false, false, false, true, false, true, false, false, true, false, true, false, false, true, false, false, true, true, true, true, true, false, false, true, false, false, false, false, false, true, true, false, false, true, true, true, false, true, false, false, true, false, true, true, false, true, false, true, true, false, false, false, false, false, true, false, true, false, true, true, false, false, false, false, false, true, false, false, false, false, true, true, true, true, true, false, true, false, false, true, true, false, false, false, true, true, false, false, false, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, true, true, true, false, true, true, false, false, false, true, false, true, false, true, false, false, false, false, false, false, false, true, true, false, false, false, true, false, false, true, false, false, false, true, false, true, false, false, true, false, true, false, false, true, false, false, true, true, true, false, true, false, false, true, false, false, false, false, false, true, true, false, false, true, true, true, false, true, false, false, true, false, true, true, false, true, false, true, true, false, false, false, false, false, true, false, true, false, true, true, false, false, false, false, false, true, false, false, false, false, true, true, true, true, true, false, true, false, false, true, true, false, false, false, true, true, false, false, false, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, false, false, true, true, true, false, true, true, false, true, false, false, true, true, false, false, true, false, false, false, false, false, false, false, true, true, true, false, false, true, true, true, true, true, true, true, true, false, true, true, false, true, false, false, true, false, false, true, true, false, true, false, true, true, false, true, false, false, true, true, true, true, false, true, true, true, false, true, false, false, true, true, false, true, false, false, false, false, true, false, false, true, true, true, true, true, false, true, false, true, true, false, false, false, false, true, false, false, true, true, true, true, false, false, false, true, false, false, true, true, false, false, true, false, true, false]);
            let encoded = BinVector::from_bools(&[true, true, true, false, false, false, true, true, true, false, true, true, false, true, false, false, true, true, false, false, true, false, false, false, false, false, false, false, true, true, true, false, false, true, true, true, true, true, true, true, true, false, true, true, false, true, false, false, true, false, false, true, true, false, true, false, true, true, false, true, false, false, true, true, true, true, false, true, true, true, false, true, false, false, true, true, false, true, false, false, false, false, true, false, false, true, true, true, true, true, false, true, false, true, true, true, false, false, false, false, true, false, false, true, true, true, true, false, false, false, false, true, false, false, true, true, false, false, true, true, false, true, false, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, false, false, true, true, true, false, true, true, false, true, false, false, true, true, false, false, true, false, false, false, false, false, false, false, true, true, true, false, false, true, true, true, true, true, true, true, true, false, true, true, false, true, false, false, true, false, false, true, true, false, true, false, true, true, false, true, false, false, true, true, true, true, false, true, true, true, false, true, false, false, true, true, false, true, false, false, false, false, true, false, false, true, true, true, true, true, false, true, false, true, true, true, false, false, false, false, true, false, false, true, true, true, false, false, false, false, false, true, false, false, true, true, false, false, true, true, false, true, false, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, true, false, true, false, true, true, false, true, true, true, true, true, false, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, true, true, true, false, false, false, true, false, true, false, false, false, false, false, true, false, false, false, true, false, false, true, true, true, true, true, true, true, false, false, true, true, false, true, false, false, true, false, false, false, false, true, false, true, false, false, true, true, true, true, true, false, false, false, true, true, false, false, false, true, false, false, true, false, false, true, false, true, true, false, false, true, true, true, false, true, true, true, false, true, true, false, true, false, true, true, false]);
            let encoded = BinVector::from_bools(&[false, true, false, true, true, false, true, false, true, true, false, true, true, true, true, true, false, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, true, true, true, false, false, false, true, false, true, false, false, false, false, false, true, false, false, false, true, false, false, true, true, true, true, true, true, true, false, false, true, true, false, true, false, false, true, false, false, false, false, true, false, true, false, false, true, true, true, true, true, false, false, false, true, true, false, false, false, true, false, false, false, true, false, false, true, false, true, true, false, false, true, true, true, false, true, false, true, true, false, true, true, false, true, false, false, true, true, false, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, true, false, true, false, false, true, false, true, true, true, true, true, false, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, true, true, true, false, false, false, true, false, true, false, false, false, false, false, true, false, false, false, true, false, false, true, true, true, true, true, true, true, false, false, true, true, false, true, false, false, true, false, false, false, false, true, false, true, false, false, true, true, true, true, true, false, false, false, true, true, false, false, false, true, false, false, false, true, false, false, true, false, true, true, false, false, true, true, true, false, true, false, true, true, false, true, true, false, true, false, false, true, true, false, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, false, false, true, true, false, true, true, true, false, false, false, false, true, true, false, false, true, true, false, false, false, false, false, false, false, false, true, true, false, true, true, false, false, true, false, true, true, true, true, false, false, true, true, false, true, false, false, true, false, true, false, true, true, false, false, false, true, true, true, false, false, true, false, true, false, false, false, false, true, false, false, false, false, true, true, true, true, true, true, true, false, true, true, false, false, false, true, true, true, true, false, true, true, true, true, true, true, true, false, true, false, false, false, true, true, false, true, true, true, true, true, true, true, true, true, false]);
            let encoded = BinVector::from_bools(&[false, true, false, true, false, false, true, true, false, true, true, true, false, false, false, false, true, true, false, false, true, true, false, false, false, false, false, false, false, false, true, true, false, true, true, false, false, true, false, true, true, true, true, false, false, true, true, false, true, false, false, true, false, true, false, true, true, false, false, false, true, true, true, false, false, true, false, true, false, false, false, false, true, false, false, false, false, true, true, true, true, true, true, true, false, true, true, false, false, false, true, true, true, true, false, false, true, true, true, true, true, true, true, false, true, false, false, false, true, true, false, false, true, true, true, true, true, true, false, true, true, true, true, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, false, false, true, true, false, true, true, true, false, false, false, false, true, true, false, false, true, true, false, false, false, false, false, false, false, false, true, true, false, true, true, false, false, true, false, true, true, true, true, false, false, true, true, false, false, false, false, true, false, true, false, true, true, false, false, false, true, true, true, false, false, true, false, true, false, false, false, false, true, false, false, false, false, true, true, true, true, true, true, true, false, true, true, false, false, false, true, true, true, true, false, false, true, true, true, true, true, true, true, false, true, false, false, false, true, true, false, false, true, true, true, true, true, true, false, true, true, true, true, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, true, false, true, false, false, false, true, true, false, true, false, false, false, false, false, false, true, true, true, false, true, true, true, false, false, false, false, true, true, true, true, false, true, false, false, true, true, true, false, false, true, true, false, true, false, true, true, false, true, false, false, true, true, true, false, true, false, false, false, false, true, false, true, false, false, true, false, true, false, false, false, false, true, false, true, true, false, true, true, false, true, false, false, true, false, false, true, true, false, false, false, true, true, true, true, true, true, false, false, true, true, true, true, false, true, false, true, true, false, false, false, true, false, true, true, false]);
            let encoded = BinVector::from_bools(&[false, false, false, true, true, false, true, false, false, false, true, true, false, true, false, false, false, false, false, false, true, true, true, false, true, true, true, false, false, false, false, true, true, true, true, false, true, false, false, true, true, true, false, false, true, true, false, true, false, true, true, false, true, false, false, true, true, true, false, true, false, false, false, false, true, false, true, false, false, true, false, true, false, false, false, false, true, false, true, true, false, true, true, false, true, false, false, true, false, false, true, true, false, false, true, false, true, true, true, true, true, true, false, false, true, true, true, true, false, true, true, false, true, true, false, false, false, true, true, false, true, true, true, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, true, false, true, false, false, false, true, true, false, true, false, false, false, false, false, false, true, true, true, false, true, true, true, false, false, false, false, true, true, true, true, false, true, false, false, true, true, true, false, false, true, true, false, true, false, true, true, false, true, false, false, true, true, true, false, true, false, false, false, false, true, false, true, true, false, true, false, true, false, false, false, false, true, false, true, true, false, true, true, false, true, false, false, true, false, false, true, true, false, false, true, false, true, true, true, true, true, true, false, false, true, true, true, true, false, true, true, false, true, true, false, false, false, true, true, false, true, true, true, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, true, false, true, false, true, false, false, false, true, true, false, true, true, true, false, false, true, false, true, true, false, true, false, false, true, true, false, false, true, true, false, false, true, false, true, false, false, true, true, false, true, true, false, true, false, false, true, true, false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, true, false, false, false, false, false, false, true, true, false, true, true, false, false, false, true, true, true, true, false, true, false, false, true, false, true, true, true, false, false, true, true, true, true, true, true, false, false, true, false, false, false, false, true, false, false, false, true, true, true, true, false, true]);
            let encoded = BinVector::from_bools(&[true, false, false, false, true, false, true, false, true, false, false, false, true, true, false, true, true, true, false, false, true, false, true, true, false, true, false, false, true, true, false, false, true, true, false, false, true, false, true, false, false, true, true, false, true, true, false, true, false, false, true, true, false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, true, false, false, false, false, false, false, true, true, false, true, true, false, false, false, true, true, true, true, false, true, false, false, true, false, true, true, false, true, false, false, true, true, true, true, true, true, false, false, true, false, false, false, true, false, true, false, false, false, true, true, true, true, true, false, false, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, true, false, true, false, true, false, false, false, true, true, false, true, true, true, false, false, true, false, true, true, false, true, false, false, true, true, false, false, true, true, false, false, true, false, true, false, false, true, true, false, true, true, false, true, false, false, true, true, false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, true, false, false, false, false, false, false, true, true, false, true, true, false, false, false, true, true, true, true, true, true, false, false, true, false, true, true, false, true, false, false, true, true, true, true, true, true, false, false, true, false, false, false, true, false, true, false, false, false, true, true, true, true, true, false, false, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, true, false, false, true, true, true, true, true, true, true, false, false, false, false, true, true, false, false, true, false, true, true, true, true, true, false, false, false, false, false, false, false, false, true, true, false, true, false, true, true, true, true, false, true, false, true, false, false, true, true, true, false, false, true, false, false, false, true, false, false, false, true, false, true, true, true, true, false, false, true, true, false, false, false, false, true, false, false, false, true, true, true, true, false, true, false, false, true, true, true, true, false, true, false, false, false, true, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, false, true, true, false]);
            let encoded = BinVector::from_bools(&[false, false, false, false, true, false, false, true, true, true, true, true, true, true, false, false, false, false, true, true, false, false, true, false, true, true, true, true, true, false, false, false, false, false, false, false, false, true, true, false, true, false, true, true, true, true, false, true, false, true, false, false, true, true, true, false, false, true, false, false, false, true, false, false, false, true, false, true, true, true, true, false, false, true, true, false, false, false, false, true, false, false, false, true, true, true, true, false, true, false, false, true, true, true, false, true, false, true, false, false, false, true, false, true, false, false, false, true, true, true, true, true, false, false, true, true, false, true, false, false, true, true, true, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, true, false, false, true, true, true, true, true, true, true, true, false, false, false, true, true, false, false, true, false, true, true, true, true, true, false, false, false, false, false, false, false, false, true, true, false, true, false, true, true, true, true, false, true, false, true, false, false, true, true, true, false, false, true, false, false, false, true, false, false, false, true, false, true, true, true, true, false, false, true, true, false, false, false, false, true, false, false, false, true, true, true, true, false, true, false, false, true, true, true, false, true, false, true, false, false, false, true, false, true, false, false, false, true, true, true, true, true, false, false, true, true, false, true, false, false, true, true, true, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, true, false, false, true, true, false, false, false, true, false, false, false, true, true, false, false, true, false, false, true, true, false, false, false, true, true, true, true, false, true, false, false, true, true, false, false, false, true, true, false, false, true, true, false, true, false, false, false, false, false, true, false, false, false, true, true, true, true, true, false, true, true, false, false, false, false, true, true, false, false, false, true, false, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, false, false, false, true, false, false, false, false, true, true, true, true, true, false, true, true, true, false, false, false, false, false, true, false, true, false, true, false]);
            let encoded = BinVector::from_bools(&[true, false, false, true, true, false, false, true, true, false, false, false, true, false, false, false, true, true, false, false, true, false, false, true, true, false, false, false, true, true, true, true, false, true, false, false, true, true, false, false, false, true, true, false, false, true, true, false, true, false, false, false, false, false, true, false, false, false, true, true, true, true, true, false, true, true, false, false, false, false, true, true, false, false, false, true, false, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, false, false, false, false, true, false, false, false, false, true, true, true, true, true, false, true, true, true, false, false, false, false, false, false, true, false, false, true, false, true, true, false, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, true, false, false, true, true, false, false, false, true, false, false, false, true, true, false, false, true, false, false, true, true, false, false, false, true, true, true, true, false, true, false, false, true, true, false, false, false, true, true, false, false, true, true, false, true, false, false, false, false, false, true, false, false, false, true, true, true, true, true, false, true, true, false, false, false, false, true, true, false, false, false, true, false, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, false, false, false, false, true, false, false, false, false, false, true, true, true, true, false, true, true, true, false, false, false, false, false, false, true, false, false, true, false, true, true, false, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, true, true, false, false, false, true, false, true, true, false, false, false, true, false, true, true, false, false, false, true, false, true, false, true, true, false, false, false, false, false, false, true, true, false, false, false, true, false, false, false, false, true, true, true, false, true, true, false, false, true, false, true, false, false, true, false, false, true, true, false, true, false, true, true, true, false, true, true, false, false, true, false, false, true, true, true, false, true, false, false, true, false, false, false, false, false, false, true, false, false, false, false, true, false, false, false, true, false, true, true, false, false, false, true, true, true, true, true, false, false, false, false, false, true, false, true]);
            let encoded = BinVector::from_bools(&[false, false, true, true, true, true, false, false, false, true, false, true, true, false, false, false, true, false, true, true, false, false, false, true, false, true, false, true, true, false, false, false, false, false, false, true, true, false, false, false, true, false, false, false, false, true, true, true, false, true, true, false, false, true, false, true, false, false, true, false, false, true, true, false, true, false, true, true, true, false, true, true, false, false, true, false, false, true, true, true, false, true, false, false, true, false, false, false, false, false, false, true, false, false, false, false, false, true, false, false, false, true, false, true, true, false, false, false, true, true, false, true, true, true, false, false, false, false, true, false, true, false, false, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, true, true, false, false, false, true, false, true, true, false, false, false, true, false, true, true, false, false, false, true, false, true, false, true, true, false, false, false, false, false, false, true, true, false, false, false, true, false, false, false, false, true, true, true, false, true, true, false, false, true, false, true, false, false, true, false, false, true, true, false, true, false, true, true, true, false, true, true, false, false, true, false, false, true, true, true, false, true, false, false, true, false, false, false, false, false, false, true, false, false, false, false, false, true, false, false, false, true, false, true, true, false, false, false, true, true, false, true, true, true, true, false, false, false, true, false, true, false, false, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, false, true, false, true, true, true, true, true, true, false, true, true, false, true, false, true, true, false, false, true, true, false, true, false, true, false, false, true, true, false, true, false, false, true, false, false, true, true, true, true, false, true, false, false, false, false, true, true, true, false, false, false, true, false, true, false, true, true, false, true, true, true, false, true, true, true, true, false, false, false, false, false, true, false, false, true, false, false, false, false, false, true, true, false, true, false, true, true, false, false, false, false, true, false, false, true, true, true, false, false, false, true, false, false, false, false, true, true, true, true, false, false, false, false, false, false]);
            let encoded = BinVector::from_bools(&[false, false, true, false, false, true, false, true, true, true, true, true, true, false, true, true, false, true, false, true, true, false, false, true, true, false, true, false, true, false, false, true, true, false, true, false, false, true, false, false, true, true, true, true, false, true, false, false, false, false, true, true, true, false, false, false, true, false, true, false, true, true, false, true, true, true, false, true, true, true, true, false, false, false, false, false, true, false, false, true, false, false, false, false, false, true, true, false, true, false, true, true, false, false, false, false, false, true, false, false, true, true, true, false, false, false, true, false, false, false, false, false, true, true, true, true, false, false, false, false, false, false, true, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, false, true, false, true, true, true, true, true, true, false, true, true, false, true, false, true, true, false, false, true, true, false, true, false, true, false, false, true, true, false, true, false, false, true, false, false, true, true, true, true, false, true, false, false, false, false, true, true, true, false, false, false, true, false, true, false, true, true, false, true, true, true, false, true, true, true, true, false, false, false, false, false, true, false, false, true, false, false, false, false, false, true, true, false, true, false, true, false, false, false, false, false, false, true, false, false, true, true, true, false, false, false, true, false, false, false, false, false, true, true, true, true, false, false, false, false, false, false, true, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, true, false, true, true, true, true, true, true, false, false, false, false, false, false, true, true, true, true, true, false, true, true, true, false, false, true, true, false, true, true, false, true, true, false, false, false, true, true, false, true, false, false, false, true, true, false, true, true, false, true, true, true, false, true, false, true, false, true, false, true, true, false, true, false, true, false, false, false, true, false, true, false, true, false, true, false, true, true, true, true, false, true, false, true, false, true, false, false, true, true, false, true, true, true, true, false, false, true, false, false, true, true, false, true, false, true, false, false, false, false, false, true, true, true, true, false]);
            let encoded = BinVector::from_bools(&[false, true, false, true, true, false, true, true, true, true, true, true, false, false, false, false, false, false, true, true, true, true, true, false, true, true, true, false, false, true, true, false, true, true, false, true, true, false, false, false, true, true, false, true, false, false, false, true, true, false, true, true, false, true, true, true, false, true, false, true, false, true, false, true, true, false, true, false, true, false, false, false, true, false, true, false, true, false, true, false, true, true, true, true, false, true, false, true, false, true, false, false, true, true, false, false, true, true, true, true, false, false, true, false, false, true, true, false, true, false, false, true, false, false, false, false, false, true, true, true, true, true, true, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, true, false, true, true, true, true, true, true, false, false, false, false, false, false, true, true, true, true, true, false, true, true, true, false, false, true, true, false, true, false, false, true, true, false, false, false, true, true, false, true, false, false, false, true, true, false, true, true, false, true, true, true, false, true, false, true, false, true, false, true, true, false, true, false, true, false, false, false, true, false, true, false, true, false, true, false, true, true, true, true, false, true, false, true, false, true, false, false, true, true, false, false, true, true, true, true, false, false, true, false, false, true, true, false, true, false, false, true, false, false, false, false, false, true, true, true, true, true, true, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, true, false, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, true, false, false, false, false, false, true, false, true, false, true, false, false, true, true, false, true, false, false, false, true, true, true, false, false, true, true, true, false, true, true, false, true, false, true, true, true, false, false, true, true, true, true, false, true, true, true, false, false, false, true, false, false, true, true, false, true, false, true, false, true, true, true, false, false, false, true, true, true, false, false, true, true, true, false, true, false, false, true, false, true, false, true, false, true, true, false, false, false, false, false, true, false, false, false, true, true, true, false]);
            let encoded = BinVector::from_bools(&[true, false, false, true, true, false, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, true, false, false, false, false, false, true, false, true, false, true, false, false, true, true, false, true, false, false, false, true, true, true, false, false, true, true, true, false, true, true, false, true, false, true, true, true, false, false, true, true, true, true, false, true, true, true, false, false, false, true, false, false, true, true, false, true, false, true, false, true, true, true, false, false, false, true, true, true, false, false, true, true, false, true, false, true, false, false, true, false, true, false, true, false, true, true, false, false, false, false, false, false, true, false, false, false, true, true, true, true, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, true, false, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, true, false, false, false, false, false, true, false, true, false, false, false, false, true, true, false, true, false, false, false, true, true, true, false, false, true, true, true, false, true, true, false, true, false, true, true, true, false, false, true, true, true, true, false, true, true, true, false, false, false, true, false, false, true, true, false, true, false, true, false, true, true, true, false, false, false, true, true, true, false, false, true, true, false, true, false, true, false, false, true, false, true, false, true, false, true, true, false, false, false, false, false, false, true, false, false, false, true, true, true, true, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, false, true, true, true, true, false, false, true, false, true, false, false, false, false, true, false, true, true, true, false, true, true, true, true, true, false, false, false, false, true, true, true, true, true, false, true, true, true, true, true, true, false, false, false, false, false, false, false, false, true, false, false, true, false, true, true, false, false, true, true, true, true, false, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false, true, false, true, false, true, false, false, false, false, false, false, true, true, false, true, false, true, true, false, true, true, true, true, true, true, false, true, false, false, false, true, false, false, false, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, false, true, true, true, true, false, false, true, false, true, false, false, false, false, true, false, true, true, true, false, true, true, true, true, true, false, false, false, false, true, true, true, true, true, false, true, true, true, true, true, true, false, false, false, false, false, false, false, false, true, false, false, true, false, true, true, false, false, true, true, true, true, false, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false, true, false, true, false, true, false, false, false, false, false, false, false, true, true, false, true, false, true, true, false, true, true, true, true, true, true, false, true, true, false, false, false, true, false, false, false, false, true, false, true, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, false, true, true, true, true, false, false, true, false, true, false, false, false, false, true, false, true, true, true, false, true, true, true, true, true, false, false, false, false, true, true, true, false, true, false, true, true, true, true, true, true, false, false, false, false, false, false, false, false, true, false, false, true, false, true, true, false, false, true, true, true, true, false, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false, true, false, true, false, true, false, false, false, false, false, false, false, true, true, false, true, false, true, true, false, true, true, true, true, true, true, false, true, true, false, false, false, true, false, false, false, false, true, false, true, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, true, false, true, true, false, true, true, true, false, true, true, true, false, false, false, false, false, true, false, true, false, true, false, false, true, false, true, true, true, false, false, false, true, true, false, false, false, true, true, true, true, false, true, true, true, true, false, false, true, true, false, false, false, true, false, false, false, true, true, false, true, true, false, false, true, false, false, false, false, true, false, false, false, true, true, false, false, false, true, false, true, false, false, false, true, true, true, false, true, false, true, false, true, true, false, true, false, false, false, true, true, true, false, false, true, true, true, false, false, false, false, true, true, false, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, true, true, false, true, true, false, true, true, true, false, true, true, true, false, false, false, false, false, true, false, true, false, true, false, false, true, false, true, true, true, false, false, false, true, true, false, false, false, true, true, true, true, false, true, true, true, true, false, false, true, true, false, false, false, true, false, false, false, true, true, false, true, true, false, false, true, false, false, false, false, true, false, false, false, true, true, false, false, false, true, false, true, false, false, false, true, true, true, false, true, false, true, true, false, true, true, false, true, false, false, false, true, true, true, false, false, true, false, true, true, false, false, false, false, true, false, true, false, true, true, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, true, false, true, false, false, true, true, true, false, true, true, true, false, false, false, false, false, true, false, true, false, true, false, false, true, false, true, true, true, false, false, false, true, true, false, false, false, true, true, true, true, false, true, true, true, true, false, false, true, true, false, false, false, true, false, false, false, true, true, false, true, true, false, false, true, false, false, false, false, true, false, false, false, true, true, false, false, false, true, false, true, false, false, false, true, true, true, false, true, false, true, true, false, true, true, false, true, false, false, false, true, true, true, false, false, true, false, true, true, false, false, false, false, true, false, true, false, true, true, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, false, false, true, false, true, true, true, true, false, false, true, false, false, false, true, true, true, true, true, true, false, false, false, false, false, false, true, true, false, true, true, true, false, false, true, false, true, true, false, false, true, true, false, true, true, true, true, true, false, true, true, false, false, false, false, true, true, true, true, true, false, false, true, false, true, false, false, true, false, true, true, false, true, false, false, true, true, false, true, true, true, false, true, false, true, false, false, false, true, false, false, false, true, true]);
            let encoded = BinVector::from_bools(&[true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, false, false, true, false, true, true, true, true, false, false, true, false, false, false, true, true, true, true, true, true, false, false, false, false, false, false, true, true, false, true, true, true, false, false, true, false, true, true, false, false, true, true, false, true, true, true, true, true, false, true, true, false, false, false, false, true, true, true, true, true, false, false, true, false, true, false, false, true, true, false, true, true, false, true, false, false, true, true, false, true, true, true, false, true, true, false, true, false, false, false, true, false, true, false, false, true, true, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, false, false, true, false, true, true, true, true, false, false, true, false, false, false, true, true, true, true, true, true, false, false, false, false, false, false, true, true, false, true, true, true, false, false, true, false, true, true, false, false, true, true, false, true, true, true, true, true, false, true, true, false, false, false, false, true, true, true, true, true, false, false, true, false, true, false, false, true, true, false, true, true, false, true, false, false, true, true, false, false, true, true, false, true, true, false, true, false, false, false, true, false, true, false, false, true, true, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, false, true, true, false, false, true, true, false, false, false, false, true, false, true, false, true, false, false, true, true, false, true, true, false, true, false, false, true, false, false, false, true, false, true, true, true, false, true, true, true, false, true, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, false, true, true, false, false, false, false, false, false, false, false, true, true, false, true, true, false, true, false, true, true, true, false, true, true, true, false, false, true, true, true, false, false, true, false, false, true, true, true, true, false, false, true, true, false, false, true, true, false, true, true, true, false, true, false, true, true, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, false, true, true, false, false, true, true, false, false, false, false, true, false, true, false, true, false, false, true, true, false, true, true, false, true, false, false, true, false, false, false, true, false, true, true, true, false, true, true, true, false, true, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, false, true, true, false, false, false, false, false, false, false, false, true, true, false, true, true, false, true, false, true, true, true, false, true, true, true, false, false, true, true, true, false, true, false, true, false, false, true, true, true, true, false, false, true, true, false, false, true, true, true, false, true, true, true, false, true, true, false, true, true, true, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, false, true, true, false, false, true, true, false, false, false, false, true, false, true, false, true, false, false, true, true, false, true, true, false, true, false, false, true, false, false, false, true, false, true, true, true, false, true, true, true, false, true, true, true, false, false, true, true, false, false, true, true, false, false, true, true, false, false, false, true, true, false, false, false, false, false, false, false, false, true, true, false, true, true, false, true, false, true, true, true, false, true, true, true, false, false, true, true, true, false, true, false, false, false, false, true, true, true, true, false, false, true, true, false, false, true, true, true, false, true, true, true, false, true, true, false, true, true, true, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, false, false, false, false, false, false, false, true, true, false, false, false, false, true, false, true, false, true, true, true, true, false, true, false, true, true, true, true, false, false, true, true, true, true, false, false, true, false, false, true, false, false, true, false, true, false, false, false, false, true, false, true, true, true, true, false, true, false, true, false, true, false, true, true, false, true, true, false, false, false, false, true, true, false, true, true, true, false, true, true, false, false, true, false, false, true, false, true, false, true, true, false, false, false, false, true, false, false, false, true, true, false, false, false, false, false, false, true, false, false, true, false, true, false, false, true]);
            let encoded = BinVector::from_bools(&[false, false, false, true, false, false, false, false, false, false, false, true, true, false, false, false, false, true, false, true, false, true, true, true, true, false, true, false, true, true, true, true, false, false, true, true, true, true, false, false, true, false, false, true, false, false, true, false, true, false, false, false, false, true, false, true, true, true, true, false, true, false, true, false, true, false, true, true, false, true, true, false, false, false, false, true, true, false, true, true, true, false, true, true, false, false, true, false, false, true, false, true, false, true, false, true, false, false, false, false, true, false, false, false, true, true, false, false, false, false, false, false, false, true, false, false, true, false, true, true, false, false, false, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, false, false, false, false, false, false, false, true, true, false, false, false, false, true, false, false, false, true, true, true, true, false, true, false, true, true, true, true, false, false, true, true, true, true, false, false, true, false, false, true, false, false, true, false, true, false, false, false, false, true, false, true, true, true, true, false, true, false, true, false, true, false, true, true, false, true, true, false, false, false, false, true, true, false, true, true, true, false, true, true, false, false, true, false, false, true, false, true, false, true, false, true, false, false, false, false, true, false, false, false, true, true, false, false, false, false, false, false, false, true, false, false, true, false, true, true, false, false, false, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, false, true, true, true, false, true, true, false, false, false, true, true, true, false, true, false, true, false, false, true, false, true, true, true, true, true, true, false, true, true, false, false, true, true, true, false, false, true, true, true, true, false, false, false, false, false, false, true, false, true, true, false, false, false, true, true, true, false, false, false, true, false, true, true, true, false, false, true, false, false, true, true, true, false, false, false, true, false, true, true, true, false, true, false, true, false, true, true, false, false, true, true, false, true, true, true, false, true, true, false, true, true, false, false, true, true, true, false, true, false, false, true, false, false, true, false]);
            let encoded = BinVector::from_bools(&[false, false, true, true, false, true, true, true, false, true, true, false, false, false, true, true, true, false, true, false, true, false, false, true, false, true, true, true, true, true, true, false, true, true, false, false, true, true, true, false, false, true, true, true, true, false, false, false, false, false, false, true, false, true, true, false, false, false, true, true, true, false, false, false, true, false, true, true, true, false, false, true, false, false, true, true, true, false, false, false, true, false, true, true, true, false, true, false, true, false, true, true, false, false, true, true, true, false, true, true, true, false, true, true, false, true, true, false, false, true, true, true, true, false, true, false, false, true, true, false, false, true, true, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, false, true, true, true, false, true, true, false, false, false, true, true, true, false, true, false, true, false, false, true, false, true, true, true, true, true, true, false, true, true, false, false, true, true, true, false, false, true, true, true, true, false, false, false, false, false, false, true, false, true, true, false, false, false, true, true, true, false, false, false, true, false, true, true, true, false, false, true, false, false, true, true, true, false, false, false, true, false, true, true, true, false, true, false, true, false, true, true, false, false, true, true, true, false, true, true, true, false, true, true, false, true, true, false, false, true, true, true, true, true, true, false, false, true, true, false, false, true, true, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, true, false, true, true, true, false, true, true, false, false, true, true, false, true, false, true, false, true, false, false, true, true, false, true, true, true, false, true, true, false, false, true, false, false, false, true, true, false, false, true, true, true, true, true, false, false, true, false, true, true, true, true, true, true, true, false, true, false, false, true, true, false, true, true, true, false, false, true, false, false, true, true, false, false, false, false, false, false, false, true, false, true, false, false, false, true, false, false, false, true, true, true, false, true, false, true, false, true, false, true, false, true, false, false, false, true, false, false, false, true, true, false, false, false, false, true]);
            let encoded = BinVector::from_bools(&[true, true, false, false, true, false, true, true, true, false, true, true, false, false, true, true, false, true, false, true, false, true, false, false, true, true, false, true, true, true, false, true, true, false, false, true, false, false, false, true, true, false, false, true, true, true, true, true, false, false, true, false, true, true, true, true, true, true, true, false, true, false, false, true, true, false, true, true, true, false, false, true, false, false, true, true, false, false, false, false, false, false, false, true, false, true, false, false, false, true, false, false, false, true, true, true, true, false, true, false, true, false, true, false, true, false, true, false, false, false, false, true, false, false, false, true, true, false, false, false, false, false, false, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, true, false, true, true, true, false, true, true, false, false, true, true, false, true, false, true, false, true, false, false, true, true, false, true, true, true, false, true, true, false, false, true, false, false, false, true, true, false, false, true, true, true, true, true, false, false, true, false, true, true, true, true, true, true, true, false, true, false, false, true, true, false, true, true, true, false, false, true, false, false, true, true, false, false, false, false, false, false, false, true, true, true, false, false, false, true, false, false, false, true, true, true, true, false, true, false, true, false, true, false, true, false, true, false, false, false, false, true, false, false, false, true, true, false, false, false, false, false, false, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, true, false, true, false, false, false, true, true, true, false, true, true, true, false, false, true, false, false, true, false, false, false, false, false, true, true, false, true, false, false, true, true, false, false, false, false, false, true, true, true, true, false, true, true, false, true, true, true, true, true, false, false, true, true, true, true, true, false, true, false, true, true, true, true, false, false, true, true, false, false, true, true, true, false, true, false, true, true, false, true, true, true, true, false, true, true, true, true, true, false, false, true, false, false, true, true, false, true, false, true, false, true, true, true, false, false, true, false, true, false, false, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, false, false, true, false, true, false, false, false, true, true, true, false, true, true, true, false, false, true, false, false, true, false, false, false, false, false, true, true, false, true, false, false, true, true, false, false, false, false, false, true, true, true, true, false, true, true, false, true, true, true, true, true, false, false, true, true, true, true, true, false, true, false, true, true, true, true, false, false, true, true, false, false, true, true, true, false, true, false, true, true, false, true, true, true, true, false, true, true, true, true, true, false, true, false, true, false, false, true, true, false, true, false, true, false, true, true, true, false, false, false, true, false, true, false, false, false, false, false, true, false, true, false, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, true, false, true, false, false, false, true, true, true, false, true, true, true, false, false, true, false, false, true, false, false, false, false, false, true, true, false, true, false, false, true, true, false, false, false, false, false, true, true, true, true, false, true, true, false, true, true, true, true, true, false, false, true, true, true, false, true, false, true, false, true, true, true, true, false, false, true, true, false, false, true, true, true, false, true, false, true, true, false, true, true, true, true, false, true, true, true, true, true, false, true, false, true, false, false, true, true, false, true, false, true, false, true, true, true, false, false, false, true, false, true, false, false, false, false, false, true, false, true, false, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, false, true, true, true, true, true, true, false, false, true, false, true, false, false, true, true, false, false, false, true, false, false, false, false, true, true, true, false, true, false, true, true, true, false, false, false, true, true, true, true, true, false, false, false, true, false, false, true, false, true, true, true, true, false, false, false, false, true, false, true, true, true, true, true, true, false, false, true, false, true, false, true, false, true, false, false, false, false, false, false, true, true, true, false, true, true, false, false, true, false, false, true, true, true, false, false, false, true, false, false, false, true, true, true, false, false, false, true, true, true, false, true, false, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, true, false, false, true, true, true, true, true, true, false, false, true, false, true, false, false, true, true, false, false, false, true, false, false, false, false, true, true, true, false, true, false, true, true, true, false, false, false, true, true, true, true, true, false, false, false, true, false, false, true, false, true, true, true, true, false, false, false, false, true, false, true, true, true, true, true, true, false, false, true, false, true, false, true, false, true, false, false, false, false, false, false, true, true, true, false, true, true, false, false, true, false, false, false, true, true, true, false, false, false, true, false, false, false, true, true, true, false, true, false, false, true, true, true, false, true, false, false, true, false, false, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, false, true, true, true, true, true, true, false, false, true, false, true, false, false, true, true, false, false, false, true, false, false, false, false, true, true, true, false, true, false, true, true, true, false, false, false, true, true, true, true, true, false, false, false, true, false, false, true, false, true, true, true, true, false, false, false, false, true, false, true, true, true, true, true, true, false, false, true, false, true, false, true, false, true, false, false, false, false, false, false, true, true, true, false, true, true, false, false, true, false, false, false, true, true, true, false, false, false, true, false, false, false, true, false, true, false, true, false, false, true, true, true, false, true, false, false, true, false, false, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, true, false, false, true, false, true, true, false, false, false, true, true, false, false, true, true, false, false, false, false, false, false, true, true, false, false, false, true, true, false, true, false, false, false, false, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, false, false, true, false, true, false, true, false, true, true, true, true, false, false, false, true, false, true, false, true, false, true, false, true, true, false, false, false, false, true, false, true, false, true, true, false, false, false, false, true, false, true, false, false, true, false, false, false, false, false, false, true, false, true, true, false, true, true, false, false, false, true, true, false]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, true, false, false, true, false, true, true, false, false, false, true, true, false, false, true, true, false, false, false, false, false, false, true, true, false, false, false, true, true, false, true, false, false, false, false, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, false, false, true, false, true, false, true, false, true, true, true, true, false, false, false, true, false, true, false, true, false, true, false, true, true, false, false, false, false, true, false, true, false, true, true, false, false, false, true, false, true, false, true, false, false, true, false, false, false, false, false, false, true, false, true, true, true, false, true, true, false, false, true, false, true, true, false, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, true, true, false, false, true, false, true, true, false, false, false, true, true, false, false, true, true, false, false, false, false, false, false, true, true, false, false, false, true, true, false, true, false, false, false, false, false, true, false, true, false, true, false, true, true, false, true, false, true, false, true, false, false, false, true, false, true, false, true, false, true, true, true, true, false, false, false, true, false, true, false, true, false, true, false, true, true, false, false, false, false, true, false, true, false, true, true, false, false, false, true, false, true, false, true, false, false, true, false, false, false, false, false, false, true, false, true, true, true, false, true, true, false, false, true, false, true, true, false, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, true, true, true, true, false, true, false, true, false, true, false, false, true, true, false, true, false, false, false, true, false, false, true, true, false, true, true, false, false, true, false, false, true, true, false, false, true, true, false, true, true, true, true, false, true, true, true, true, false, true, true, true, false, true, false, false, false, true, false, false, true, false, true, true, false, true, true, false, true, true, false, false, true, true, true, false, false, true, true, true, false, false, true, true, true, true, false, false, false, true, false, false, false, true, true, true, false, true, true, true, true, false, false, true, true, true, false, false, true, false, true, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[false, true, true, false, true, true, true, true, false, true, false, true, false, true, false, false, true, true, false, true, false, false, false, true, false, false, true, true, false, true, true, false, false, true, false, false, true, true, false, false, true, true, false, true, true, true, true, false, true, true, true, true, false, true, true, true, false, true, false, false, false, true, false, false, true, false, true, true, false, true, true, false, true, true, false, false, true, true, true, false, false, true, true, true, false, false, true, true, true, true, false, false, false, true, false, false, false, false, true, true, true, false, true, true, true, true, false, false, true, true, false, true, false, false, true, false, true, true, true, true, true, false, false, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, true, true, true, true, false, true, false, true, false, true, false, false, true, true, false, true, false, false, false, true, false, false, true, true, false, true, true, false, false, true, false, false, true, true, false, false, true, true, false, true, true, true, true, false, true, true, true, true, false, true, true, true, false, true, false, false, false, true, false, false, true, false, true, true, false, true, true, false, true, false, false, false, true, true, true, false, false, true, true, true, false, false, true, true, true, true, false, false, false, true, false, false, false, false, true, true, true, false, true, true, true, true, false, false, true, true, false, true, false, false, true, false, true, true, true, true, true, false, false, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, false, true, false, false, false, true, false, false, true, false, false, false, true, false, true, true, true, false, true, true, true, false, true, true, true, true, false, false, true, true, true, false, false, false, false, true, true, false, false, false, false, false, true, false, true, true, true, true, true, true, true, true, true, false, true, false, true, false, false, true, true, false, true, true, true, false, true, true, true, true, true, true, false, true, true, false, false, false, false, false, true, false, false, true, true, false, false, false, false, true, false, false, true, true, true, false, false, true, false, true, false, false, false, true, true, true, true, false, false, false, true, true, false, false, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, true, false, true, false, false, false, true, false, false, true, false, false, false, true, false, true, true, true, false, true, true, true, false, true, true, true, true, false, false, true, true, true, false, false, false, false, true, true, false, false, false, false, false, true, false, true, true, true, true, true, true, true, true, true, false, true, false, true, false, false, true, true, false, true, true, true, false, true, true, true, true, true, true, false, true, true, false, false, false, false, false, true, false, false, true, true, false, false, false, false, true, false, false, false, true, true, true, false, false, true, false, true, false, false, false, true, true, false, true, true, false, false, false, true, true, false, false, false, false, true, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, false, true, false, false, false, true, false, false, true, false, false, false, true, false, true, true, true, false, true, true, true, false, true, true, true, true, false, false, true, true, true, false, false, false, false, true, true, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, false, true, false, true, false, false, true, true, false, true, true, true, false, true, true, true, true, true, true, false, true, true, false, false, false, false, false, true, false, false, true, true, false, false, false, false, true, false, false, false, true, true, true, false, false, true, false, true, false, false, false, true, true, false, true, true, false, false, false, true, true, false, false, false, false, true, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, false, true, true, true, false, false, true, true, false, true, false, false, true, true, false, false, true, true, true, true, false, true, true, true, false, true, true, false, false, true, true, false, true, true, false, true, false, false, true, true, true, false, false, true, false, false, false, false, false, true, false, true, true, false, true, false, false, true, false, true, true, true, true, true, true, false, false, false, true, false, false, false, false, true, false, true, true, true, false, false, true, true, true, false, false, true, false, false, false, true, true, false, true, true, false, false, false, true, false, false, false, true, false, false, false, true, false, true, true, true, false, false, true, true, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, false, false, true, true, true, false, false, true, true, false, true, false, false, true, true, false, false, true, true, true, true, false, true, true, true, false, true, true, false, false, true, true, false, true, true, false, true, false, false, true, true, true, false, false, true, false, false, false, false, false, true, false, true, true, false, true, false, false, true, false, true, true, true, true, true, true, false, false, false, true, false, false, false, false, true, false, true, true, true, false, false, true, true, true, false, false, true, false, false, false, true, false, true, false, true, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, true, true, true, false, false, false, true, true, true, true, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, false, true, true, true, false, false, true, true, false, true, false, false, true, true, false, false, true, true, true, true, false, true, true, true, false, true, true, false, false, true, true, false, true, true, false, true, false, false, true, true, true, false, false, true, false, false, false, false, true, true, false, true, true, false, true, false, false, true, false, true, true, true, true, true, true, false, false, false, true, false, false, false, false, true, false, true, true, true, false, false, true, true, true, false, false, true, false, false, false, true, false, true, false, true, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, true, true, true, false, false, false, true, true, true, true, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, false, false, true, false, true, false, true, true, false, true, true, true, false, false, true, false, false, true, true, true, true, false, true, false, false, true, false, true, true, false, false, true, true, true, false, true, false, true, false, true, true, false, true, false, false, true, false, false, true, false, true, false, false, true, false, true, false, false, false, false, false, true, true, false, false, true, true, true, true, false, true, true, true, false, false, true, true, true, true, true, false, true, false, false, false, true, true, false, true, false, true, true, false, true, true, false, false, false, true, true, true, true, true, false, false, true, true, true, false, true, true, false, true, true, true, true]);
            let encoded = BinVector::from_bools(&[false, false, false, true, false, false, true, false, true, false, true, true, false, true, true, true, false, false, true, false, false, true, true, true, true, false, true, false, false, true, false, true, true, false, false, true, true, true, false, true, false, true, false, true, true, false, true, false, false, true, false, false, true, false, true, false, false, true, false, true, false, false, false, false, false, true, true, false, false, true, true, true, true, false, true, true, true, false, false, true, true, true, true, true, false, true, false, false, false, true, true, false, true, false, true, true, true, false, true, true, false, false, false, true, true, true, true, true, false, false, true, true, true, true, false, true, true, false, true, true, true, true, true, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, false, false, true, false, true, false, true, true, false, true, true, true, false, false, true, false, false, true, true, true, true, false, true, false, false, true, false, true, true, false, false, true, true, true, false, true, false, true, false, true, true, false, true, false, false, true, false, false, true, false, true, false, false, true, false, true, false, false, false, false, false, true, true, false, false, true, true, true, false, false, true, true, true, false, false, true, true, true, true, true, false, true, false, false, false, true, true, false, true, false, true, true, true, false, true, true, false, false, false, true, true, true, true, true, false, false, true, true, true, true, false, true, true, false, true, true, true, true, true, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, false, false, false, true, false, false, true, false, true, true, false, false, true, false, true, false, true, true, true, true, false, false, false, true, false, true, true, true, true, true, false, true, true, false, true, false, false, true, true, true, true, true, true, false, false, true, true, false, true, true, false, true, false, true, false, true, false, false, true, true, true, true, true, true, false, true, false, true, false, true, false, true, false, true, true, true, false, true, false, true, false, false, false, false, false, false, false, false, false, true, true, true, false, false, false, true, false, true, true, false, false, true, false, false, true, true, false, true, false, false, false, true, true, false, true, false]);
            let encoded = BinVector::from_bools(&[true, false, true, true, false, false, false, true, false, false, true, false, true, true, false, false, true, false, true, false, true, true, true, true, false, false, false, true, false, true, true, true, true, true, false, true, true, false, true, false, false, true, true, true, true, true, true, false, false, true, true, false, true, true, false, true, false, true, false, true, false, false, true, true, true, true, true, true, false, true, false, true, false, true, false, true, false, true, true, true, false, true, false, true, false, false, false, false, false, false, false, false, false, true, true, true, true, false, false, false, true, false, true, true, false, false, true, false, false, true, true, true, false, true, false, false, false, true, false, true, false, true, false, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, false, false, false, true, false, false, true, false, true, true, false, false, true, false, true, false, true, true, true, true, false, false, false, true, false, true, true, true, true, true, false, true, true, false, true, false, false, true, true, true, true, true, true, false, false, true, true, false, true, true, false, true, false, true, false, true, false, false, true, true, true, true, true, true, false, true, false, true, false, true, false, true, false, true, true, true, false, true, false, true, false, false, false, false, false, false, false, false, false, true, true, true, true, false, true, false, true, false, true, true, false, false, true, false, false, true, true, true, false, true, false, false, false, true, false, true, false, true, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, true, false, true, false, false, false, true, true, false, true, true, true, true, false, true, true, false, false, false, true, true, true, false, true, false, true, false, false, false, true, true, false, false, false, true, false, true, true, false, false, true, false, false, false, false, false, true, true, false, false, true, false, true, false, true, true, true, true, false, false, true, false, false, true, true, true, false, false, true, true, true, false, false, false, false, false, false, true, false, false, true, true, false, true, false, true, false, false, false, true, true, true, false, true, true, true, true, true, true, false, true, false, true, false, false, false, false, true, false, true, false, true, false, false, true, true]);
            let encoded = BinVector::from_bools(&[false, false, true, false, true, false, true, false, false, false, true, true, false, true, true, true, true, false, true, true, false, false, false, true, true, true, false, true, false, true, false, false, false, true, true, false, false, false, true, false, true, true, false, false, true, false, false, false, false, false, true, true, false, false, true, false, true, false, true, true, true, true, false, false, true, false, false, true, true, true, false, false, true, true, true, false, false, false, false, false, false, true, false, false, true, true, false, true, false, true, false, false, false, true, true, true, true, false, true, true, true, true, true, true, false, true, false, true, false, false, false, false, false, true, false, true, false, true, false, false, false, true, true, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, true, false, true, false, false, false, true, true, false, true, true, true, true, false, true, true, false, false, false, true, true, true, false, true, false, true, false, false, false, true, true, false, false, false, true, false, true, true, false, false, true, false, false, false, false, false, true, false, false, false, true, false, true, false, true, true, true, true, false, false, true, false, false, true, true, true, false, false, true, true, true, false, false, false, false, false, false, true, false, false, true, true, false, true, false, true, false, false, false, true, true, true, true, false, true, true, true, true, true, true, false, true, false, true, false, false, false, false, false, true, false, true, false, true, false, false, false, true, true, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, false, true, true, false, false, true, false, false, true, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, false, true, false, false, false, false, false, true, true, true, false, false, false, true, true, true, false, true, true, true, false, false, false, false, false, true, false, false, true, true, true, true, false, true, false, true, true, true, true, true, false, false, true, false, false, false, false, true, true, false, true, true, true, true, true, false, true, false, false, false, true, true, true, false, true, true, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false, false, false, true, true, false, true, false, false]);
            let encoded = BinVector::from_bools(&[true, true, false, true, false, true, true, false, false, true, false, false, true, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, false, true, false, false, false, false, false, true, true, true, false, false, false, true, true, true, false, true, true, true, false, false, false, false, false, true, false, false, true, true, true, true, false, true, false, true, true, true, true, true, false, false, true, false, false, false, false, true, true, false, true, true, true, true, true, false, true, false, false, false, true, true, true, false, true, true, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false, false, true, true, true, false, true, false, true, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, false, true, true, false, false, true, false, false, true, false, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, false, false, true, true, false, false, false, false, true, true, true, false, false, false, true, true, true, false, true, true, true, false, false, false, false, false, true, false, false, true, true, true, true, false, true, false, true, true, true, true, true, false, false, true, false, false, false, false, true, true, false, true, true, true, true, true, false, true, false, false, false, true, true, true, false, true, true, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false, false, true, true, true, false, true, false, true, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, false, true, true, true, true, true, false, true, true, false, false, false, true, true, false, false, false, false, false, false, true, true, false, false, false, false, true, false, true, false, true, true, false, false, false, true, true, false, false, true, false, true, false, false, true, true, true, false, true, true, false, false, true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, true, true, false, true, true, true, true, false, false, false, true, true, false, true, true, true, true, true, true, true, true, false, true, true, true, false, false, false, false, true, true, true, false, true, true, false, false, true, false, true, false, false, false, false, false, true]);
            let encoded = BinVector::from_bools(&[false, false, true, false, false, true, true, true, true, true, false, true, true, false, false, false, true, true, false, false, false, false, false, false, true, true, false, false, false, false, true, false, true, false, true, true, false, false, false, true, true, false, false, true, false, true, false, false, true, true, true, false, true, true, false, false, true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, true, true, false, true, true, true, true, false, false, false, true, true, false, true, true, true, true, true, true, true, true, true, false, true, true, true, false, false, false, false, true, true, true, false, true, true, true, false, false, true, false, true, false, false, true, false, false, false, true, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, false, true, true, true, true, true, false, true, true, false, false, false, true, true, false, false, false, false, false, false, true, true, false, false, false, false, true, false, true, false, true, true, false, false, false, true, true, false, false, true, false, true, false, false, true, true, true, false, true, true, false, false, true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, true, true, true, false, true, true, true, true, false, false, false, true, true, false, true, true, true, true, true, true, true, true, true, false, true, true, true, false, false, false, false, true, true, true, false, true, true, true, false, false, true, false, true, false, false, true, false, false, false, true, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, true, false, false, false, true, true, true, false, false, false, true, false, true, true, true, false, true, true, false, true, true, false, false, false, true, false, false, false, true, false, false, true, true, true, false, false, true, false, false, true, false, true, false, false, false, false, false, false, false, true, true, false, true, false, true, false, false, false, true, true, false, true, true, true, true, true, true, false, true, false, true, false, true, true, true, false, true, true, true, false, true, true, true, false, true, true, false, false, true, false, true, true, true, false, true, false, true, false, true, true, true, false, true, false, true, false, false, false, true, false, false, true, false, true, true, false]);
            let encoded = BinVector::from_bools(&[true, false, false, true, true, false, false, false, true, true, true, false, false, false, true, false, true, true, true, false, true, true, false, true, true, false, false, false, true, false, false, false, true, false, false, true, true, true, false, false, true, false, false, true, false, true, false, false, false, false, false, false, false, true, true, false, true, false, true, false, false, false, true, true, false, true, true, true, true, true, true, false, true, false, true, false, true, true, true, false, true, true, true, false, true, true, true, false, true, true, false, false, true, false, true, true, true, true, false, true, false, true, false, true, true, true, false, true, false, true, true, false, false, false, true, false, false, true, true, false, true, true, true, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, true, false, true, false, true, true, true, false, false, false, true, false, true, true, true, false, true, true, false, true, true, false, false, false, true, false, false, false, true, false, false, true, true, true, false, false, true, false, false, true, false, true, false, false, false, false, false, false, false, true, true, false, true, false, true, false, false, false, true, true, false, true, true, true, true, true, true, false, true, false, true, false, true, true, true, false, true, true, true, false, true, true, true, false, true, true, false, false, true, false, true, true, true, true, false, true, false, true, false, true, true, true, false, true, false, true, true, false, false, false, true, false, false, true, true, false, true, true, true, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, true, false, true, true, true, false, true, true, true, true, true, true, false, true, false, true, false, true, true, true, true, true, false, true, true, true, true, false, false, false, false, false, false, true, false, true, false, false, true, true, true, false, false, true, false, false, false, true, true, true, true, false, true, true, true, false, true, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, true, false, true, true, false, false, true, false, false, false, false, true, false, false, true, true, false, false, true, false, false, false, false, true, false, false, true, true, true, false, true, true, false, false, true, true, false, true, false, true, true, false, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, true, true, false, true, true, true, false, true, true, true, true, true, true, false, true, false, true, false, true, true, true, true, true, false, true, true, true, true, false, false, false, false, false, false, true, false, true, false, false, true, true, true, false, false, true, false, false, false, true, true, true, true, false, true, true, true, false, true, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, true, false, true, true, false, false, true, false, false, false, false, true, false, false, true, true, false, false, true, true, false, false, false, false, true, false, false, true, true, true, false, true, true, false, false, false, true, true, false, true, false, true, false, true, false, true, false, false, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, true, false, true, true, true, false, true, true, true, true, true, true, false, true, false, true, false, true, true, true, true, true, false, true, true, true, true, false, false, false, false, false, false, true, false, true, false, false, true, true, true, false, false, true, false, false, false, true, true, true, true, false, true, true, true, false, true, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, true, false, true, true, false, false, true, false, false, false, false, true, false, false, true, true, false, false, true, true, false, false, false, false, true, false, false, true, false, true, false, true, true, false, false, false, true, true, false, true, false, true, false, true, false, true, false, false, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, false, false, false, true, false, false, true, false, false, false, true, false, false, false, true, true, false, true, true, false, false, true, true, false, false, false, false, true, true, false, false, false, false, true, false, true, true, false, false, true, false, true, true, true, true, true, false, true, false, false, false, true, true, true, true, true, false, true, true, true, true, false, true, true, false, true, true, true, false, true, false, true, true, false, true, false, false, true, true, true, true, false, true, false, false, false, true, true, true, true, false, true, false, true, true, false, false, true, false, true, true, false, false, true, true, false, true, false, false, false, true, true, true, true, true, true]);
            let encoded = BinVector::from_bools(&[false, false, true, true, false, false, false, true, false, false, true, false, false, false, true, false, false, false, true, true, false, true, true, false, false, true, true, false, false, false, false, true, true, false, false, false, false, true, false, true, true, false, false, true, false, true, true, true, true, true, false, true, false, false, false, true, true, true, true, true, false, true, true, true, true, false, true, true, false, true, true, true, false, true, false, true, true, false, true, false, false, true, true, true, true, false, true, false, false, false, true, true, true, true, true, false, true, false, true, true, false, false, true, false, true, true, false, false, true, true, false, false, true, false, false, false, true, true, true, true, true, true, true, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, false, false, false, true, false, false, true, false, false, false, true, false, false, false, true, true, false, true, true, false, false, true, true, false, false, false, false, true, true, false, false, false, false, true, false, true, true, false, false, true, false, true, true, true, true, true, false, true, false, false, false, true, true, true, true, true, false, true, true, true, true, false, true, true, false, true, true, true, false, true, false, true, true, false, true, false, false, true, true, true, true, false, true, false, false, false, true, true, true, true, true, false, true, false, true, true, false, false, true, false, true, true, false, false, true, true, false, false, true, false, false, false, true, true, true, true, true, true, false, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, false, false, false, true, true, true, true, true, true, false, false, false, true, true, true, false, false, true, false, true, false, true, false, false, true, true, true, false, false, true, true, false, true, false, false, false, true, false, false, false, true, true, false, true, true, true, true, true, false, true, true, true, true, false, false, true, false, true, false, true, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, true, true, false, false, false, true, true, false, false, true, true, false, false, false, true, false, true, true, false, true, false, false, false, true, true, true, false, false, false, false, false, false, false, true, false, false, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, false, true, false, false, false, true, true, true, true, true, true, false, false, false, true, true, true, false, false, true, false, true, false, true, false, false, true, true, true, false, false, true, true, false, true, false, false, false, true, false, false, false, true, true, false, true, true, true, true, true, false, true, true, true, true, false, false, true, false, true, false, true, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, true, true, false, false, false, true, true, false, false, true, true, false, false, false, true, true, false, true, true, false, true, false, false, false, true, true, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, true, false, true, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, false, false, false, true, true, true, true, true, true, false, false, false, true, true, true, false, false, true, false, true, false, true, false, false, true, true, false, false, false, true, true, false, true, false, false, false, true, false, false, false, true, true, false, true, true, true, true, true, false, true, true, true, true, false, false, true, false, true, false, true, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, true, true, false, false, false, true, true, false, false, true, true, false, false, false, true, true, false, true, true, false, true, false, false, false, true, true, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, true, false, true, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, false, false, true, false, false, true, true, false, true, true, true, true, false, false, false, true, true, false, true, true, false, false, false, true, true, false, false, true, true, true, false, false, false, false, true, true, false, true, false, false, false, true, true, true, false, false, false, false, false, true, false, false, true, true, true, true, false, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, false, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, false, false, true, false, false, true, true, true, true, false, false, true, false, true, false, false, true, true, false, true, false, false, false, false, false]);
            let encoded = BinVector::from_bools(&[false, true, true, false, false, false, true, false, false, true, true, false, true, true, true, true, false, false, false, true, true, false, true, true, false, false, false, true, true, false, false, true, true, true, false, false, false, false, true, true, false, true, false, false, false, true, true, true, false, false, false, false, false, true, false, false, true, true, true, true, false, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, false, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, false, true, false, false, true, false, false, true, true, true, true, false, false, true, false, true, true, false, false, true, true, false, true, false, true, false, false, false, false, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, false, false, true, false, false, true, true, false, true, true, true, true, false, false, false, true, true, false, true, true, false, false, false, true, true, false, false, true, true, true, false, false, false, false, true, true, false, true, false, false, false, true, true, true, false, false, false, false, false, true, false, false, true, true, true, true, false, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, false, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, false, true, false, false, true, false, false, true, true, true, true, false, false, true, false, true, true, false, false, false, true, false, true, false, true, false, false, false, false, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, true, true, true, true, true, true, true, true, false, true, true, false, true, true, true, false, true, true, false, false, false, false, false, true, false, true, true, false, false, true, true, false, false, true, true, false, true, false, false, false, true, true, true, false, false, true, false, false, false, true, true, true, false, false, false, false, true, false, false, true, false, false, false, false, true, false, false, false, false, false, false, false, true, true, true, false, true, true, false, true, true, true, true, true, false, true, true, false, false, false, true, false, true, false, true, false, true, true, false, true, true, false, false, false, false, true, false, false, false, true, true, true, false, true, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, true, true, true, true, true, true, true, true, false, true, true, false, true, true, true, false, true, true, false, false, false, false, false, true, false, true, true, false, false, true, true, false, false, true, true, false, true, false, false, false, true, true, true, false, false, true, false, false, false, true, true, true, false, false, false, false, true, false, false, true, false, false, false, false, true, false, false, false, false, false, false, false, true, true, true, false, true, true, false, true, true, true, true, true, false, true, true, false, false, false, false, true, false, true, false, true, false, true, true, false, true, true, false, false, false, true, false, true, false, false, false, true, true, true, true, false, true, true, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, true, true, true, true, true, true, true, true, false, true, true, false, true, true, true, false, true, true, false, false, false, false, false, true, false, true, true, false, false, true, true, false, false, true, true, true, true, false, false, false, true, true, true, false, false, true, false, false, false, true, true, true, false, false, false, false, true, false, false, true, false, false, false, false, true, false, false, false, false, false, false, false, true, true, true, false, true, true, false, true, true, true, true, true, false, true, true, false, false, false, false, true, false, true, false, true, false, true, true, false, true, true, false, false, false, true, false, true, false, false, false, true, true, true, true, false, true, true, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, true, false, false, false, true, true, true, false, false, true, true, false, true, true, true, true, false, true, true, true, true, false, false, true, false, false, false, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, false, false, false, false, true, true, true, false, true, false, false, false, false, true, false, true, false, false, false, false, true, true, true, true, false, false, true, false, true, true, false, false, true, false, true, false, false, false, true, true, false, false, false, false, false, false, false, true, false, true, true, true, false, false, true, true, true, true, false, false, true, true, false, false, false, false, true, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, true, true, false, false, false, true, true, true, false, false, true, true, false, true, true, true, true, false, true, true, true, true, false, false, true, false, false, false, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, false, false, false, false, true, true, true, false, true, false, false, false, false, true, false, true, false, false, false, false, true, true, true, true, false, false, true, false, true, true, false, false, true, false, true, false, false, false, true, true, false, false, false, false, false, false, false, false, true, false, true, true, true, false, false, true, true, true, true, false, false, false, true, true, false, false, false, false, false, true, true, true, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, true, false, false, false, true, true, true, false, false, true, true, false, true, true, true, true, false, true, true, true, true, false, false, true, false, false, false, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, false, false, false, false, true, true, true, false, true, false, false, false, false, true, false, true, false, false, false, false, true, true, true, true, false, false, true, false, true, true, false, false, true, false, true, false, false, false, true, true, false, false, false, false, false, false, false, false, true, false, true, true, true, false, false, true, true, true, true, false, false, false, true, true, false, false, false, false, false, true, true, true, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, false, false, true, false, true, true, false, false, true, false, false, false, false, true, false, true, false, false, true, false, false, false, false, false, false, false, true, true, true, false, true, true, false, true, false, true, false, true, true, false, true, false, true, false, false, true, false, false, true, true, true, false, true, true, true, false, true, true, false, true, false, false, true, false, false, false, false, true, true, true, false, true, false, false, true, false, false, true, false, true, true, true, false, true, false, true, false, false, true, false, false, false, false, true, false, true, false, true, false, true, true, true, true, false, true, true, true, false, true, false, false, true, true, true, false, true]);
            let encoded = BinVector::from_bools(&[false, false, false, false, false, false, true, false, true, true, false, false, true, false, false, false, false, true, false, true, false, false, true, false, false, false, false, false, false, false, true, true, true, false, true, true, false, true, false, true, false, true, true, false, true, false, true, false, false, true, false, false, true, true, true, false, true, true, true, false, true, true, false, true, false, false, true, false, false, false, false, true, true, true, false, true, false, false, true, false, false, true, false, true, true, true, false, true, false, true, false, false, true, false, true, false, false, false, true, false, true, false, true, false, true, true, true, true, false, true, false, true, true, false, true, false, false, true, true, true, true, false, true, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, false, false, true, false, true, true, false, false, true, false, false, false, false, true, false, true, false, false, true, false, false, false, false, false, false, false, true, true, true, false, true, true, false, true, false, true, false, true, true, false, true, false, true, false, false, true, false, false, true, true, true, false, true, true, true, false, true, true, false, true, false, false, true, false, false, false, false, true, true, true, false, true, false, false, true, false, false, true, false, true, true, true, false, true, false, true, false, false, true, false, true, false, false, false, true, false, true, false, true, false, true, true, true, true, false, false, false, true, true, false, true, false, false, true, true, true, true, false, true, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, false, false, true, true, false, true, true, true, true, true, false, true, true, true, false, true, true, true, false, true, true, false, true, false, false, true, false, true, false, true, false, true, false, true, true, false, true, false, false, false, true, false, true, false, true, true, false, false, true, false, true, false, false, true, false, false, false, true, true, true, true, false, false, false, false, false, true, false, false, false, false, true, false, true, true, false, true, true, true, true, true, true, true, false, true, true, true, false, false, true, true, false, true, false, false, true, true, true, true, true, true, false, false, true, true, false, true, true, true, false, false, false, false, true, true, false]);
            let encoded = BinVector::from_bools(&[true, true, true, true, false, false, true, true, false, true, true, true, true, true, false, true, true, true, false, true, true, true, false, true, true, false, true, false, false, true, false, true, false, true, false, true, false, true, true, false, true, false, false, false, true, false, true, false, true, true, false, false, true, false, true, false, false, true, false, false, false, true, true, true, true, false, false, false, false, false, true, false, false, false, false, true, false, true, true, false, true, true, true, true, true, true, true, false, true, true, true, false, false, true, false, true, false, true, false, false, true, true, true, true, true, true, false, false, true, true, true, false, true, true, true, false, false, false, false, false, true, true, false, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, false, false, true, true, false, true, true, true, true, true, false, true, true, true, false, true, true, true, false, true, true, false, true, false, true, true, false, true, false, true, false, true, false, true, true, false, true, false, false, false, true, false, true, false, true, true, false, false, true, false, true, false, false, true, false, false, false, true, true, true, true, false, false, false, false, false, true, false, false, false, false, true, false, true, true, false, true, true, true, true, true, true, true, false, true, true, true, false, false, true, false, true, false, true, false, false, true, true, true, true, true, true, false, false, true, true, true, false, true, true, true, false, false, false, false, false, true, true, false, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, true, false, false, false, false, true, false, false, true, true, true, false, false, true, true, true, false, false, false, true, true, false, true, false, false, false, false, false, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, true, true, false, false, false, true, false, true, true, true, true, false, false, true, false, false, false, true, true, false, false, false, false, false, true, true, false, true, false, true, true, true, true, true, true, false, false, false, true, false, true, false, false, true, true, true, false, false, true, false, true, false, true, true, true, false, true, false, true, false, false, true, true, false, false, false, true, false, false, false, true, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, true, false, false, false, false, true, false, false, true, true, true, false, false, true, true, true, false, false, false, true, true, false, true, false, false, false, false, false, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, true, true, false, false, false, true, false, true, true, true, true, false, false, true, false, false, false, true, true, false, false, false, false, false, true, true, false, true, false, true, true, true, true, true, true, false, false, false, true, false, true, false, false, true, true, true, true, false, false, true, false, true, false, true, true, true, false, true, false, true, false, false, true, true, true, false, false, false, true, false, false, false, false, true, true, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, true, false, false, false, false, true, false, false, true, true, true, false, false, true, true, true, false, false, false, true, true, false, true, false, false, false, false, false, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, true, true, false, false, false, true, false, true, true, true, true, false, false, true, false, false, false, true, true, false, false, false, false, false, true, true, false, true, false, true, true, true, true, true, true, false, false, false, true, false, true, false, false, true, true, true, true, false, false, true, false, true, false, true, true, true, false, true, false, true, false, false, true, true, true, false, false, true, true, false, false, false, false, true, true, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, false, true, false, true, false, true, true, true, false, false, false, true, true, false, true, true, false, false, false, false, false, false, false, false, true, true, true, false, false, true, true, false, false, true, true, true, true, false, true, true, true, true, true, true, false, true, true, false, true, true, false, true, false, false, false, true, true, false, false, true, true, true, false, true, true, false, false, false, false, false, true, false, false, false, false, true, true, true, true, true, true, false, false, false, false, false, true, true, true, false, false, true, true, false, true, true, true, false, false, false, false, false, false, false, true, true, false, false, true, false, true, false, false, false, true, true]);
            let encoded = BinVector::from_bools(&[false, false, true, false, false, true, false, true, false, true, true, true, false, false, false, true, true, false, true, true, false, false, false, false, false, false, false, false, true, true, true, false, false, true, true, false, false, true, true, true, true, false, true, true, true, true, true, true, false, true, true, false, true, true, false, true, false, false, false, true, true, false, false, true, true, true, false, true, true, false, false, false, false, false, true, false, false, false, false, true, true, true, true, true, true, false, false, false, false, false, true, true, true, false, false, false, true, true, false, true, true, true, false, false, false, false, false, false, false, true, true, true, false, false, true, false, true, false, false, false, false, true, false, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, false, true, false, true, false, true, true, true, false, false, false, true, true, false, true, true, false, false, false, false, false, false, false, false, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, true, true, true, true, true, false, true, true, false, true, true, false, true, false, false, false, true, true, false, false, true, true, true, false, true, true, false, false, false, false, false, true, false, false, false, false, true, true, true, true, true, true, false, false, false, false, false, true, true, true, false, false, false, true, true, false, true, true, true, false, false, false, false, false, false, false, true, true, true, false, false, true, false, true, false, false, false, false, true, false, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, false, false, false, false, false, false, true, true, true, true, true, false, true, false, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, true, false, false, false, true, true, true, true, false, true, true, true, false, true, true, true, false, false, true, true, false, false, true, false, true, true, false, false, true, true, true, true, true, true, true, false, false, false, false, true, false, false, true, true, false, false, false, false, true, false, true, true, false, true, true, true, false, true, false, true, false, true, true, false, true, true, true, true, false, true, false, true, true, true, true, true, false, false, false, false, false, false, false, false, false, true]);
            let encoded = BinVector::from_bools(&[false, false, false, true, false, false, false, false, false, false, true, true, true, true, true, false, true, false, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, true, false, false, false, true, true, true, true, false, true, true, true, false, true, true, true, false, false, true, true, false, false, true, false, true, true, false, false, true, true, true, true, true, true, true, false, false, false, false, true, false, false, true, true, false, false, false, false, true, false, true, true, false, true, true, true, false, true, false, true, true, false, true, true, false, true, true, true, true, false, true, false, true, true, true, true, false, true, false, false, false, false, false, false, true, false, false, false, false, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, false, false, false, false, false, false, true, true, true, true, true, false, true, false, false, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, true, false, false, false, true, true, true, true, false, true, true, true, false, true, true, true, false, false, true, true, false, false, true, false, true, true, false, false, true, true, true, true, true, true, true, false, false, false, false, true, false, false, true, true, false, false, false, false, true, false, false, true, false, true, true, true, false, true, false, true, true, false, true, true, false, true, true, true, true, false, true, false, true, true, true, true, false, true, false, false, false, false, false, false, true, false, false, false, false, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, true, false, true, false, true, true, false, false, false, false, false, true, true, true, false, true, false, true, false, true, false, false, true, true, true, false, false, false, false, false, false, false, false, true, true, false, true, true, false, false, false, true, true, true, true, false, false, true, false, false, false, true, true, true, false, true, true, true, true, true, true, false, false, false, true, true, true, false, true, true, true, true, true, false, false, false, true, false, false, true, false, false, true, true, true, true, false, true, false, true, false, true, false, true, true, true, true, true, true, false, false, true, false, true, true, false, false, true, true, false, true, false, true, false, true, false]);
            let encoded = BinVector::from_bools(&[false, true, false, false, true, false, true, false, true, true, false, false, false, false, false, true, true, true, false, true, false, true, false, true, false, false, true, true, true, false, false, false, false, false, false, false, false, true, true, false, true, true, false, false, false, true, true, true, true, false, false, true, false, false, false, true, true, true, false, true, true, true, true, true, true, false, false, false, true, true, true, false, true, true, true, true, true, false, false, false, true, false, false, true, false, false, true, true, true, true, false, true, false, true, false, false, true, false, true, true, true, true, true, true, false, false, true, false, true, true, true, false, false, true, true, false, true, false, false, true, false, true, false, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, true, false, true, false, true, true, false, false, false, false, false, true, true, true, false, true, false, true, false, true, false, false, true, true, true, false, false, false, false, false, false, false, false, true, true, false, true, true, false, false, false, true, true, true, false, false, false, true, false, false, false, true, true, true, false, true, true, true, true, true, true, false, false, false, true, true, true, false, true, true, true, true, true, false, false, false, true, false, false, true, false, false, true, true, true, true, false, true, false, true, false, false, true, false, true, true, true, true, true, true, false, false, true, false, true, true, true, false, false, true, true, false, true, false, false, true, false, true, false, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, false, true, true, true, true, true, true, true, false, true, true, true, true, false, false, true, false, false, true, true, true, true, false, true, false, false, false, false, true, false, false, true, false, true, true, true, false, false, true, false, false, true, false, false, true, true, true, true, false, false, true, true, true, true, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, false, true, false, false, false, true, false, false, false, false, false, false, false, true, true, true, false, false, true, false, false, true, true, true, true, false, false, true, true, false, false, false, false, true, false, false, true, true, false, true, false, true, true, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, false, true, true, true, true, true, true, true, false, true, true, true, true, false, false, true, false, false, true, true, true, true, false, true, false, false, false, false, true, false, false, true, false, true, true, true, false, false, true, false, false, true, false, false, true, true, true, true, false, false, true, true, true, true, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, false, true, false, false, false, true, false, false, false, false, false, false, false, true, true, true, false, false, false, true, false, false, true, true, true, true, false, false, true, true, false, false, false, false, false, true, false, false, true, true, false, true, true, false, true, true, false, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, false, true, true, true, true, true, true, true, false, true, true, true, true, false, false, true, false, false, true, true, true, true, false, true, false, false, false, false, true, false, false, true, false, true, true, true, false, false, true, false, false, true, false, false, true, true, true, true, false, false, true, true, true, true, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, false, true, false, false, false, true, false, false, false, false, false, false, false, true, true, true, false, false, false, true, false, false, false, true, true, true, false, false, true, true, false, false, false, false, false, true, false, false, true, true, false, true, true, false, true, true, false, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, false, true, false, false, true, false, true, false, false, false, true, false, true, false, true, false, true, true, true, false, false, false, true, true, true, false, false, false, false, false, false, true, true, false, true, true, false, false, false, false, true, false, true, false, true, true, false, true, false, true, false, false, true, false, false, true, false, false, true, true, true, true, false, true, true, true, true, true, false, false, false, true, false, false, true, true, true, true, false, false, true, true, false, false, true, false, false, true, true, false, true, true, false, true, false, false, true, false, true, true, true, true, true, false, true, false, false, false, false, true, false, false, true, false, true, true]);
            let encoded = BinVector::from_bools(&[true, true, true, true, false, true, false, false, true, false, true, false, false, false, true, false, true, false, true, false, true, true, true, false, false, false, true, true, true, false, false, false, false, false, false, true, true, false, true, true, false, false, false, false, true, false, true, false, true, true, false, true, false, true, false, false, true, false, false, true, false, false, true, true, true, true, false, true, true, true, true, true, false, false, false, true, false, false, true, true, true, true, false, false, true, true, false, false, true, false, false, true, true, false, true, true, true, false, true, false, false, true, false, true, true, true, true, true, false, true, true, false, false, false, false, true, false, false, true, true, false, true, false, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, false, true, false, false, true, false, true, false, false, false, true, false, true, false, true, false, true, true, true, false, false, false, true, true, true, false, false, false, false, false, false, true, true, false, true, true, false, false, false, false, true, false, true, false, true, true, false, true, false, true, false, false, true, false, false, true, false, false, true, true, true, true, false, true, true, true, true, true, false, false, false, true, false, false, true, true, true, true, false, false, true, true, false, false, true, false, false, true, true, false, true, true, true, false, true, false, false, true, false, true, true, true, true, true, false, true, true, false, false, false, false, true, false, false, true, true, true, true, false, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, true, false, false, true, false, true, true, true, false, true, false, false, true, false, false, false, false, true, true, false, true, true, true, false, true, false, true, true, false, false, true, true, false, false, false, false, true, false, true, true, false, false, true, false, true, true, true, true, true, false, false, true, true, true, false, true, false, true, true, true, true, false, false, true, false, false, false, false, true, true, true, false, false, false, true, true, false, true, true, false, false, false, true, false, true, false, true, false, true, false, false, true, true, false, true, false, false, true, false, true, true, false, true, true, false, false, true, true, true, false, true, false, false, true, false, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, true, false, false, true, false, true, true, true, false, true, false, false, true, false, false, false, false, true, true, false, true, true, true, false, true, false, true, true, false, false, true, true, false, false, false, false, true, false, true, true, false, false, true, false, true, true, true, true, true, false, false, true, true, true, false, true, false, true, true, true, true, false, false, true, false, false, false, false, true, true, true, false, false, false, true, true, false, true, true, false, false, false, true, false, true, false, true, false, true, false, false, false, true, true, false, true, false, false, true, false, true, true, false, true, true, false, false, false, true, true, true, false, true, false, true, false, true, false, true, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, true, false, false, false, false, true, true, true, false, true, false, false, true, false, false, false, false, true, true, false, true, true, true, false, true, false, true, true, false, false, true, true, false, false, false, false, true, false, true, true, false, false, true, false, true, true, true, true, true, false, false, true, true, true, false, true, false, true, true, true, true, false, false, true, false, false, false, false, true, true, true, false, false, false, true, true, false, true, true, false, false, false, true, false, true, false, true, false, true, false, false, false, true, true, false, true, false, false, true, false, true, true, false, true, true, false, false, false, true, true, true, false, true, false, true, false, true, false, true, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, false, false, false, false, true, true, false, true, true, false, false, false, true, false, false, false, true, false, false, true, false, false, false, true, true, false, false, true, false, false, false, false, true, false, false, false, true, true, true, false, false, false, false, true, true, false, false, true, false, false, false, false, true, false, false, true, false, false, false, false, false, true, false, false, false, false, true, false, true, true, false, false, true, false, true, false, true, false, true, false, false, true, true, false, true, false, true, true, true, false, false, false, false, false, true, false, true, false, false, false, true, false, false, false, false, true, true, false, false, true, true, false, true, true, true, false]);
            let encoded = BinVector::from_bools(&[false, true, false, false, false, false, false, false, true, true, false, true, true, false, false, false, true, false, false, false, true, false, false, true, false, false, false, true, true, false, false, true, false, false, false, false, true, false, false, false, true, true, true, false, false, false, false, true, true, false, false, true, false, false, false, false, true, false, false, true, false, false, false, false, false, true, false, false, false, false, true, false, true, true, false, false, true, false, true, false, true, false, true, false, false, true, true, false, true, false, true, true, true, false, false, false, false, false, false, true, false, true, false, false, false, true, false, false, false, false, true, true, true, false, false, true, true, false, false, true, true, true, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, false, false, false, false, true, true, false, true, true, false, false, false, true, false, false, false, true, false, true, true, false, false, false, true, true, false, false, true, false, false, false, false, true, false, false, false, true, true, true, false, false, false, false, true, true, false, false, true, false, false, false, false, true, false, false, true, false, false, false, false, false, true, false, false, false, false, true, false, true, true, false, false, true, false, true, false, true, false, true, false, false, true, true, false, true, false, true, true, true, false, false, false, false, false, false, true, false, true, false, false, false, true, false, false, false, false, true, true, true, false, false, true, true, false, false, true, true, true, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, true, true, true, false, true, true, false, true, false, false, true, false, true, true, false, true, false, true, false, true, true, false, true, false, true, false, false, false, false, true, true, false, false, true, true, false, false, false, false, true, true, true, false, false, true, false, false, true, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false, true, false, true, false, false, true, true, false, false, false, false, true, true, true, true, true, false, false, false, true, false, true, true, false, true, true, false, true, false, true, true, false, true, true, true, true, true, false, false, false, false, false, false, false, false, true, true, false, true, true, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, true, true, true, false, true, true, false, true, false, false, true, false, true, true, false, true, false, true, false, true, true, false, true, false, true, false, false, false, false, true, true, false, false, true, true, false, false, false, false, true, true, true, false, false, true, false, false, true, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false, true, false, true, false, false, true, true, false, false, false, false, true, true, true, true, true, false, false, false, true, false, true, true, false, true, false, true, false, true, false, true, true, false, true, true, true, true, true, false, false, false, true, false, false, false, false, false, true, true, false, false, true, true, true, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, true, true, true, false, true, true, false, true, false, false, true, false, true, true, false, true, false, true, false, true, true, false, true, false, true, false, false, false, false, true, true, false, false, true, true, false, false, false, false, true, true, true, false, false, true, false, false, true, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false, true, false, true, false, false, true, true, false, false, false, false, true, true, true, true, true, false, false, false, true, false, true, true, false, true, false, true, false, true, false, true, true, false, true, true, true, true, true, false, false, false, true, false, true, false, false, false, true, true, false, false, true, true, true, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, true, true, true, false, false, false, false, false, true, true, false, false, true, true, false, true, true, true, false, false, true, true, false, false, false, true, true, true, false, false, false, false, true, false, true, true, true, false, true, false, false, true, false, false, false, true, true, true, true, true, true, true, true, false, false, true, true, true, true, false, false, true, false, false, true, false, true, false, true, true, false, false, false, true, false, true, true, false, true, false, true, true, true, true, true, true, true, false, false, true, true, true, false, false, false, true, true, false, true, false, true, false, false, false, false]);
            let encoded = BinVector::from_bools(&[false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, true, true, true, false, false, false, false, false, true, true, false, false, true, true, false, true, true, true, false, false, true, true, false, false, false, true, true, true, false, false, false, false, true, false, true, true, true, false, true, false, false, true, false, false, false, true, true, true, true, true, true, true, true, false, false, true, true, true, true, false, false, true, false, false, true, false, true, false, true, true, false, false, false, true, false, true, true, false, true, false, false, true, true, true, true, true, true, true, false, false, true, true, true, false, false, true, false, true, true, false, true, false, true, true, false, false, false, false, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, true, true, true, false, false, false, false, false, true, true, false, false, true, true, false, true, true, true, false, false, true, true, false, false, false, true, true, true, false, false, true, false, true, false, true, true, true, false, true, false, false, true, false, false, false, true, true, true, true, true, true, true, true, false, false, true, true, true, true, false, false, true, false, false, true, false, true, false, true, true, false, false, false, true, false, true, true, false, true, false, false, true, true, true, true, true, true, true, false, false, true, true, true, false, false, true, false, true, true, false, true, false, true, true, false, false, false, false, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, false, true, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, true, false, true, false, true, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, false, false, true, true, true, false, false, false, true, true, false, true, true, false, false, true, true, false, false, true, true, false, false, true, false, true, false, true, true, true, false, false, true, false, true, true, false, true, true, false, true, true, true, true, false, false, false, false, true, true, true, true, true, false, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, false, false, true, false, true, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, true, false, true, false, true, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, false, false, true, true, true, false, false, false, true, true, false, true, true, false, false, true, true, false, false, true, true, false, false, true, false, true, false, true, true, true, false, false, true, false, true, true, false, true, true, false, true, true, true, true, false, false, false, false, false, true, true, true, true, true, false, true, true, true, true, false, false, false, false, true, false, false, false, false, false, false, false, false, false, true, false, false, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, true, false, true, false, true, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, false, false, true, true, true, false, false, false, true, true, false, true, true, false, false, true, true, false, false, true, true, false, false, true, false, true, false, true, true, true, false, false, true, false, true, true, false, true, true, false, true, true, true, true, false, false, false, false, false, true, true, true, true, true, false, true, true, true, true, false, false, false, false, true, false, false, false, false, false, false, false, false, false, true, false, false, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, true, false, true, true, true, false, true, false, false, true, false, false, false, true, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, true, false, false, true, true, true, false, false, false, false, true, false, true, false, true, true, true, false, true, false, false, true, true, true, false, true, true, false, true, false, true, false, true, false, true, false, true, false, false, false, true, false, true, false, true, true, true, true, true, false, false, true, false, false, true, true, false, true, false, false, true, false, false, false, false, false, false, false, false, true, true, false, false, false, false, true, false, true, true, true, true, false, false, false, true]);
            let encoded = BinVector::from_bools(&[false, false, true, false, true, false, true, true, true, false, true, false, false, true, false, false, false, true, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, true, false, false, true, true, true, false, false, false, false, true, false, true, false, true, true, true, false, true, false, false, true, true, true, false, true, true, false, true, false, true, false, true, false, true, false, true, false, false, false, true, false, true, false, true, true, true, true, true, false, false, true, false, false, true, true, false, true, false, false, false, true, false, false, false, false, false, false, false, false, true, true, false, false, false, true, false, true, false, true, true, true, true, true, false, false, false, false, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, true, false, true, true, true, false, true, false, false, true, false, false, false, true, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, true, false, false, true, true, true, false, false, false, false, true, false, true, false, true, true, true, false, true, false, false, true, true, true, false, true, true, false, true, false, true, false, true, true, true, false, true, false, false, false, true, false, true, false, true, true, true, true, true, false, false, true, false, false, true, true, false, true, false, false, false, true, false, false, false, false, false, false, false, false, true, true, false, false, false, true, false, true, false, true, true, true, true, true, false, false, false, false, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, true, true, true, true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, true, true, true, false, false, true, false, false, true, false, false, false, false, false, false, true, false, true, true, true, false, true, true, false, true, false, false, true, false, true, true, true, true, false, true, false, true, true, true, false, true, true, true, false, false, true, true, true, true, false, false, true, false, true, false, false, true, false, true, false, false, false, true, false, true, true, false, true, false, true, false, false, false, true, true, false, false, true, false, false, true, true, false, false, false, false, true, false, false, false, false, false, false, false, false, true, false, true]);
            let encoded = BinVector::from_bools(&[true, true, false, false, true, true, true, true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, true, true, true, false, false, true, false, false, true, false, false, false, false, false, false, true, false, true, true, true, false, true, true, false, true, false, false, true, false, true, true, true, true, false, true, false, true, true, true, false, true, true, true, false, false, true, true, true, true, false, false, true, false, true, false, false, true, false, true, false, false, false, true, false, true, true, false, true, false, true, false, false, false, false, true, true, false, false, true, false, false, true, true, false, false, false, false, true, true, false, false, false, false, false, false, false, false, false, true, false, true, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, true, true, true, true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, true, true, true, false, false, true, false, false, true, false, false, false, false, false, false, true, false, true, true, true, false, true, true, false, true, false, false, true, false, true, true, true, true, false, true, false, true, true, true, false, true, true, true, false, false, true, true, false, true, false, false, true, false, true, false, false, true, false, true, false, false, false, true, false, true, true, false, true, false, true, false, false, false, false, true, true, false, false, true, false, false, true, true, false, false, false, false, true, true, false, false, false, false, false, false, false, false, false, true, false, true, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, true, false, true, true, false, true, false, false, false, true, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false, true, false, false, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, true, false, false, true, true, true, false, false, true, true, true, false, true, true, true, false, false, true, false, false, false, false, true, false, false, true, true, true, true, false, true, true, true, false, false, false, false, true, false, false, true, true, false, false, true, true, true, true, false, false, true, false, false, true, true, false, true, false, false, false, true, false, false, true, false, false, true, true, false, false, false, true]);
            let encoded = BinVector::from_bools(&[false, true, false, false, true, false, true, true, false, true, false, false, false, true, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false, true, false, false, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, true, false, false, true, true, true, false, false, true, true, true, false, true, true, true, false, false, true, false, false, false, false, true, false, false, true, true, true, true, false, true, true, true, false, false, false, false, true, false, false, true, true, false, false, true, true, true, true, true, false, false, true, false, false, true, true, false, true, false, false, false, true, false, false, false, true, false, false, true, true, false, false, false, false, false, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, true, false, true, true, false, true, false, false, false, true, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false, true, false, false, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, true, false, false, true, true, true, false, false, true, true, true, false, true, true, true, false, false, true, false, false, false, false, true, false, false, true, true, true, true, false, true, true, true, false, false, false, false, true, false, false, true, true, false, false, true, true, true, true, true, false, false, true, false, false, true, true, false, true, false, false, false, true, false, false, false, true, false, true, true, true, false, false, false, false, false, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, true, false, true, false, false, false, false, true, false, true, true, true, false, false, true, true, true, true, true, false, true, false, true, true, true, true, true, false, false, true, true, true, false, false, true, false, true, true, false, true, true, true, false, false, true, true, true, true, false, true, false, true, false, false, true, true, false, true, true, false, false, true, true, false, false, false, false, true, false, false, false, true, false, true, true, false, false, true, true, true, false, false, false, false, true, false, false, false, false, false, false, false, false, true, true, false, false, true, true, true, false, true, false, true, false, false, false, false, false, false, false, true, false, false, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, true, true, false, true, false, false, false, false, true, false, true, true, true, false, false, true, true, true, true, true, false, true, false, true, true, true, true, true, false, false, true, true, true, false, false, true, false, true, true, false, true, true, true, false, false, true, true, true, true, false, true, false, true, false, false, true, true, false, true, true, false, false, true, true, false, false, false, false, true, false, false, false, true, false, true, true, false, false, true, true, true, false, false, false, false, true, false, false, false, false, false, true, false, false, false, true, true, false, false, true, true, true, false, true, false, true, false, true, false, false, false, false, false, false, true, false, false, false, true, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, true, false, true, false, false, false, false, true, false, true, true, true, false, false, true, true, true, true, true, false, false, false, true, true, true, true, true, false, false, true, true, true, false, false, true, false, true, true, false, true, true, true, false, false, true, true, true, true, false, true, false, true, false, false, true, true, false, true, true, false, false, true, true, false, false, false, false, true, false, false, false, true, false, true, true, false, false, true, true, true, false, false, false, false, true, false, false, false, false, false, true, false, false, false, true, true, false, false, true, true, true, false, true, false, true, false, true, false, false, false, false, false, false, true, false, false, false, true, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, true, true, true, false, false, true, true, true, true, true, true, true, false, false, false, false, false, true, false, false, false, false, true, false, false, true, true, false, false, true, false, true, true, false, true, true, false, false, false, false, false, false, true, false, true, false, false, false, true, true, true, true, true, false, true, true, false, false, false, true, true, true, false, false, false, true, false, false, true, true, true, true, true, true, true, true, false, true, false, false, true, true, false, true, false, true, true, false, false, false, false, true, true, true, false, true, true, false, true, true, false, true, false, true, true, false, true, true, false, false, false, true, false, true, true]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, true, true, true, false, false, true, true, true, true, true, true, true, false, false, false, false, false, true, false, false, false, false, true, false, false, true, true, false, false, true, false, true, true, false, true, true, false, false, false, false, false, false, true, false, true, false, false, false, true, true, true, true, true, false, true, true, false, false, false, true, true, true, false, false, false, true, false, false, true, true, true, true, true, true, true, true, false, true, false, false, true, true, false, true, false, true, true, false, false, true, false, false, true, true, true, false, true, true, false, true, true, false, true, false, true, true, true, false, true, true, false, false, false, false, true, false, true, false, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, true, true, true, true, false, false, true, true, true, true, true, true, true, false, false, false, false, false, true, false, false, false, false, true, false, false, true, true, false, false, true, false, true, true, false, true, true, false, false, false, false, false, false, true, false, true, false, false, false, true, true, true, true, true, false, true, true, false, false, false, true, true, true, false, false, false, true, true, false, true, true, true, true, true, true, true, true, false, true, false, false, true, true, false, true, false, true, true, false, false, true, false, false, true, true, true, false, true, true, false, true, true, false, true, false, true, true, true, false, true, true, false, false, false, false, true, false, true, false, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, false, true, false, true, true, true, false, true, false, false, false, false, false, false, true, true, false, true, false, false, false, false, false, false, false, true, false, true, true, true, true, false, false, false, true, false, true, false, true, false, false, false, false, true, true, false, true, false, false, false, false, true, false, false, false, true, false, true, false, true, false, true, true, true, false, false, true, false, false, false, false, false, true, false, true, false, false, true, false, false, true, true, false, false, false, false, false, true, true, true, false, true, true, true, false, true, true, false, false, false, true, true, true, false, true, true, false, false, true, true, false, false, true, true, false, false]);
            let encoded = BinVector::from_bools(&[false, false, true, true, false, true, false, true, true, true, false, true, false, false, false, false, false, false, true, true, false, true, false, false, false, false, false, false, false, true, false, true, true, true, true, false, false, false, true, false, true, false, true, false, false, false, false, true, true, false, true, false, false, false, false, true, false, false, false, true, false, true, false, true, false, true, true, true, false, false, true, false, false, false, false, false, true, false, true, false, false, true, false, false, true, true, false, false, false, false, false, true, true, true, false, false, true, true, true, false, true, true, false, false, false, true, true, true, false, true, false, true, false, false, true, true, false, false, false, true, true, false, false, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, false, true, false, true, true, true, true, true, false, false, false, false, false, false, true, true, false, true, false, false, false, false, false, false, false, true, false, true, true, true, true, false, false, false, true, false, true, false, true, false, false, false, false, true, true, false, true, false, false, false, false, true, false, false, false, true, false, true, false, true, false, true, true, true, false, false, true, false, false, false, false, false, true, false, true, false, false, true, false, false, true, true, false, false, false, false, false, true, true, true, false, false, true, true, true, false, true, true, false, false, false, true, true, true, false, true, false, true, false, false, true, true, false, false, false, true, true, false, false, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, true, false, true, true, false, false, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, true, false, true, false, true, true, true, true, true, true, false, true, true, false, false, false, true, false, false, true, false, true, false, true, true, false, true, true, false, true, false, false, true, false, true, false, false, false, false, true, false, false, true, false, true, true, false, true, true, false, false, false, false, true, true, true, true, false, true, true, true, false, true, false, true, true, true, true, false, true, false, true, true, true, false, false, true, false, true, true, false, true, false, false, true, false, true, true, false]);
            let encoded = BinVector::from_bools(&[true, true, true, true, true, false, true, true, false, false, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, true, false, true, false, true, true, true, true, true, true, false, true, true, false, false, false, true, false, false, true, false, true, false, true, true, false, true, true, false, true, false, false, true, false, true, false, false, false, false, true, false, false, true, false, true, true, false, true, true, false, false, false, false, true, true, true, true, false, true, true, true, false, true, false, false, true, true, true, true, false, true, false, true, true, true, false, false, true, false, false, true, true, false, true, false, false, true, true, false, true, true, false, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, true, false, true, true, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, false, true, false, true, true, true, true, true, true, false, true, true, false, false, false, true, false, false, true, false, true, false, true, true, false, true, true, false, true, false, false, true, false, true, false, false, false, false, true, false, false, true, false, true, true, false, true, true, false, false, false, false, true, true, true, true, false, true, true, true, false, true, false, false, true, true, true, true, false, true, false, true, true, true, false, false, true, false, false, true, true, false, true, false, false, true, true, false, true, true, false, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, true, false, false, false, true, true, true, true, true, true, false, true, false, false, false, true, true, true, true, true, false, true, true, true, true, true, false, false, true, false, true, true, true, true, true, false, true, false, false, true, true, true, true, true, false, true, true, true, true, false, true, true, false, true, false, true, true, true, false, false, false, true, true, false, false, true, false, false, true, false, false, false, false, false, false, false, true, true, true, true, true, true, false, false, false, false, true, false, false, false, true, true, true, true, false, false, true, false, true, true, false, true, true, true, false, true, true, true, true, false, true, false, false, true, true, true]);
            let encoded = BinVector::from_bools(&[false, true, false, true, true, false, false, false, true, true, true, true, true, true, false, true, false, false, false, true, true, true, true, true, false, true, true, true, true, true, false, false, true, false, true, true, true, true, true, false, true, false, false, true, true, true, true, true, false, true, true, true, true, false, true, true, false, true, false, true, true, true, false, false, false, true, true, false, false, true, false, false, true, false, false, false, false, false, false, false, true, true, true, true, true, true, false, false, false, false, true, false, false, false, true, true, true, true, true, false, false, true, false, true, true, false, true, true, true, false, false, true, true, true, true, false, true, false, true, false, true, true, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, true, false, false, false, true, false, true, true, true, true, false, true, false, false, false, true, true, true, true, true, false, true, true, true, true, true, false, false, true, false, true, true, true, true, true, false, true, false, false, true, true, true, true, true, false, true, true, true, true, false, true, true, false, true, false, true, true, true, false, false, false, true, true, false, false, true, false, false, true, false, false, false, false, false, false, false, true, true, true, true, true, true, false, false, false, false, true, false, false, false, true, true, true, true, true, false, false, true, false, true, true, false, true, true, true, false, false, true, true, true, true, false, true, false, true, false, true, true, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, false, false, false, false, false, true, false, false, false, true, true, true, true, true, true, false, false, false, false, false, false, true, false, true, false, false, true, true, false, false, true, false, false, true, false, true, false, true, true, true, true, false, false, false, false, false, false, true, true, false, false, true, false, true, false, false, false, false, true, false, false, false, false, false, true, true, true, true, false, true, false, true, false, true, false, false, true, false, false, true, false, true, true, true, true, true, false, true, true, true, false, false, true, false, true, true, true, true, true, true, false, true, true, true, true, false, false, true, false, true, true, true, true, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, false, false, false, false, false, true, false, false, false, true, true, true, true, true, true, false, false, false, false, false, false, true, false, true, false, false, true, true, false, false, true, false, false, true, false, true, false, true, true, true, true, false, false, false, false, false, false, true, true, false, false, true, false, true, false, false, false, false, true, false, false, false, false, false, true, true, true, true, false, true, false, true, false, true, false, false, true, false, false, true, false, true, true, true, true, true, false, true, true, false, true, false, false, true, false, true, true, true, true, true, true, false, true, true, true, false, true, false, false, true, false, true, true, false, true, true, false, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, true, true, false, false, false, false, false, false, true, false, true, false, false, true, true, false, false, true, false, false, true, false, true, false, true, true, true, true, false, false, false, false, false, false, true, true, false, false, true, false, true, false, false, false, false, true, false, false, false, false, false, true, true, true, true, false, true, false, true, false, true, false, false, true, false, false, true, false, true, true, true, true, true, false, true, true, false, true, false, false, true, false, true, true, true, true, true, true, false, true, true, true, false, true, false, false, true, false, true, true, false, true, true, false, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, true, true, true, false, true, true, true, false, true, true, true, true, false, true, false, false, true, false, true, false, false, false, true, false, true, false, false, false, true, false, true, false, true, false, false, true, false, false, true, true, false, false, false, false, false, false, true, true, true, false, true, false, true, true, false, false, false, false, true, true, false, true, true, false, false, true, false, false, false, false, false, false, false, false, false, false, true, false, false, true, true, false, true, true, false, true, true, false, true, false, true, true, false, true, false, true, false, true, true, true, false, true, true, false, false, true, true, true, false, true, true, true, false, true, false, true]);
            let encoded = BinVector::from_bools(&[true, true, false, true, true, true, true, false, true, true, true, false, true, true, true, true, false, true, false, false, true, false, true, false, false, false, true, false, true, false, false, false, true, false, true, false, true, false, false, true, false, false, true, true, false, false, false, false, false, false, true, true, true, false, true, false, true, true, false, false, false, false, true, true, false, true, true, false, false, true, false, false, false, false, false, false, false, false, false, false, true, false, false, true, true, false, true, true, false, true, true, false, true, false, true, true, true, false, true, false, true, false, true, true, true, false, true, true, false, false, false, true, true, true, false, true, true, true, true, false, true, false, true, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, true, false, true, false, true, true, true, false, true, true, true, true, false, true, false, false, true, false, true, false, false, false, true, false, true, false, false, false, true, false, true, false, true, false, false, true, false, false, true, true, false, false, false, false, false, false, true, true, true, false, true, false, true, true, false, false, false, false, true, true, false, true, true, false, false, true, false, false, false, false, false, false, false, false, false, false, true, false, false, true, true, false, true, true, false, true, true, false, true, false, true, true, true, false, true, false, true, false, true, true, true, false, true, true, false, false, false, true, true, true, false, true, true, true, true, false, true, false, true, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, false, false, false, false, true, true, false, false, true, false, false, true, false, true, true, true, true, false, false, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, true, false, false, true, false, false, false, true, true, true, true, false, false, false, true, false, true, true, false, true, true, true, true, false, false, true, false, false, true, true, true, true, true, true, false, true, true, false, true, true, true, false, false, false, true, false, false, false, true, true, false, false, true, true, true, false, true, false, true, false, false, true, false, false, false, true, false, true, true, true, true, true, true, true, true, true, true]);
            let encoded = BinVector::from_bools(&[true, true, false, false, false, false, false, false, true, true, false, false, true, false, false, true, false, true, true, true, true, false, false, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, true, false, false, true, false, false, false, true, true, true, true, false, false, false, true, false, true, true, false, true, true, true, true, false, false, true, false, false, true, true, true, true, true, true, false, true, true, false, true, true, true, false, false, false, true, false, false, false, true, true, false, true, false, true, true, true, false, true, false, true, false, false, true, false, false, false, true, false, false, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, false, false, false, false, true, true, false, false, true, false, false, true, false, true, true, true, true, false, false, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, true, false, false, true, false, false, false, true, true, true, true, false, false, false, true, false, true, true, false, true, true, true, true, false, false, true, false, false, true, true, true, true, false, true, false, true, true, false, true, true, true, false, false, false, true, false, false, false, true, true, false, true, false, true, true, true, false, true, false, true, false, false, true, false, false, false, true, false, false, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, true, false, true, true, false, false, false, true, true, true, true, false, false, true, false, false, false, true, true, false, false, false, true, false, true, true, false, false, false, true, true, true, false, false, false, true, true, true, true, true, true, false, false, true, true, false, false, false, false, false, true, true, true, false, false, false, true, true, false, false, false, false, true, true, true, true, true, true, false, true, false, false, false, false, true, true, true, true, true, true, true, false, true, true, false, false, false, true, false, false, true, true, true, true, false, false, false, false, true, false, true, true, true, false, false, false, true, false, false, true, false, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, true, true, false, true, true, false, false, false, true, true, true, true, false, false, true, false, false, false, true, true, false, false, false, true, false, true, true, false, false, false, true, true, true, false, false, false, true, true, true, true, true, true, false, false, true, true, false, false, false, false, false, true, true, true, false, false, false, true, true, false, false, false, false, true, true, true, true, true, true, false, true, false, false, false, false, true, true, true, true, true, true, true, false, true, true, false, false, false, true, false, false, true, true, true, true, true, false, false, false, false, true, false, true, true, true, false, false, true, false, true, false, false, true, false, false, false, false, true, false, false, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, true, false, true, true, false, false, false, true, true, true, true, false, false, true, false, false, false, true, true, false, false, false, true, false, true, true, false, false, false, true, true, true, false, false, false, true, true, true, true, true, true, false, false, true, true, false, false, false, false, false, true, false, true, false, false, false, true, true, false, false, false, false, true, true, true, true, true, true, false, true, false, false, false, false, true, true, true, true, true, true, true, false, true, true, false, false, false, true, false, false, true, true, true, true, true, false, false, false, false, true, false, true, true, true, false, false, true, false, true, false, false, true, false, false, false, false, true, false, false, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, false, true, false, false, true, true, true, false, true, true, false, true, false, true, true, true, false, false, false, false, true, true, true, false, true, false, false, false, false, false, true, false, true, false, true, true, true, true, true, true, true, false, true, false, false, false, false, false, true, false, false, false, false, false, true, false, true, false, false, false, false, true, false, true, true, false, true, true, true, true, false, true, true, true, false, true, true, false, false, false, false, true, true, true, true, false, false, true, true, true, true, false, true, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, false, true, true, false, true, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, false, false, false, true, false, false, true, true, true, false, true, true, false, true, false, true, true, true, false, false, false, false, true, true, true, false, true, false, false, false, false, false, true, false, true, false, true, true, true, true, true, true, true, false, true, false, false, false, false, false, true, false, false, false, false, false, true, false, true, false, false, false, false, true, false, true, true, false, true, true, true, true, false, true, true, true, false, true, true, false, false, false, false, true, true, true, true, false, false, true, true, true, false, true, false, true, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, false, false, true, true, false, true, true, true, false, true, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, false, true, false, false, true, true, true, false, true, true, false, true, false, true, true, true, false, false, false, false, true, true, true, false, true, false, false, false, false, false, true, false, true, false, true, true, true, true, true, true, true, false, true, false, false, false, false, false, true, false, false, false, false, false, true, false, true, false, false, false, false, true, false, true, true, false, true, true, true, true, false, true, true, true, false, true, true, false, false, false, false, true, true, true, true, false, false, true, true, true, false, true, false, true, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, false, false, true, true, false, true, true, true, false, true, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, true, true, false, false, false, false, false, false, false, true, true, true, false, true, false, true, false, true, false, false, true, false, false, true, false, false, true, true, true, false, false, false, false, true, false, true, true, false, false, false, true, true, false, false, false, true, false, true, false, false, false, false, false, false, false, true, true, true, true, true, true, false, true, true, false, true, true, false, false, false, true, true, true, false, false, true, false, false, false, true, true, true, false, true, false, false, true, false, false, false, false, true, true, false, false, true, false, true, false, false, false, false, false, false, false, true, false, false, true, false, true, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[true, true, false, true, true, true, false, false, false, false, false, false, false, true, true, true, false, true, false, true, false, true, false, false, true, false, false, true, false, false, true, true, true, false, false, false, false, true, false, true, true, false, false, false, true, true, false, false, false, true, false, true, false, false, false, false, false, false, false, true, true, true, true, true, true, false, true, true, false, true, true, false, false, false, true, true, true, false, false, true, false, false, false, true, true, true, false, true, false, false, true, false, false, false, false, false, true, true, false, false, true, false, true, false, false, false, false, false, false, false, false, true, false, false, true, false, true, true, true, true, true, false, false, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, true, true, false, false, false, false, false, false, false, true, true, true, false, true, false, true, false, true, false, false, true, false, false, true, false, false, true, true, true, false, false, false, false, true, false, true, true, false, false, false, true, true, false, false, false, true, false, true, false, false, false, false, false, false, false, true, true, true, true, true, true, false, true, true, false, true, true, false, false, false, true, true, true, false, false, true, false, false, false, true, true, true, false, true, false, false, true, false, false, false, false, false, true, true, false, false, true, false, true, false, false, false, true, false, false, false, false, true, false, false, true, false, true, true, true, true, true, false, false, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, false, true, true, true, true, true, false, false, true, false, false, true, true, true, false, true, false, true, true, true, true, false, true, true, false, false, true, false, true, false, true, true, false, true, false, false, true, true, true, false, true, true, true, false, true, false, false, false, true, false, false, false, true, false, false, false, false, false, true, true, false, false, false, true, false, true, false, true, true, true, false, false, true, true, false, false, true, false, false, false, false, true, false, false, true, true, true, true, true, true, false, false, true, false, true, false, true, false, true, false, false, true, false, false, false, false, true, true, false, false, false, false, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, false, true, true, true, true, true, false, false, true, false, false, true, true, true, false, true, false, true, true, true, true, false, true, true, false, false, true, false, true, false, true, true, false, true, false, false, true, true, true, false, true, true, true, false, true, false, false, false, true, false, false, false, true, false, false, false, false, false, true, true, false, false, false, true, false, true, false, true, true, true, false, false, true, true, false, false, true, false, false, false, false, true, false, false, true, true, true, true, true, false, true, false, false, true, false, true, false, true, false, true, false, false, true, false, false, true, false, false, true, true, false, false, false, false, false, true, false, false, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, false, true, true, true, true, true, false, false, true, false, false, true, true, true, false, true, false, true, true, true, true, false, true, true, false, false, true, false, true, false, true, true, false, true, false, false, true, true, true, false, true, true, true, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, true, true, false, false, false, true, false, true, false, true, true, true, false, false, true, true, false, false, true, false, false, false, false, true, false, false, true, true, true, true, true, false, true, false, false, true, false, true, false, true, false, true, false, false, true, false, false, true, false, false, true, true, false, false, false, false, false, true, false, false, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, false, true, true, false, true, false, true, false, true, false, true, true, true, false, false, false, true, true, true, false, false, true, false, false, true, false, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, false, false, true, false, true, false, true, false, false, true, true, true, true, true, true, false, true, true, true, true, false, false, false, true, false, true, false, false, true, false, false, true, true, false, true, true, true, true, false, true, true, true, true, false, true, false, false, true, true, true, false, false, false, true, false, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, true, true, true]);
            let encoded = BinVector::from_bools(&[false, true, false, false, false, true, true, false, true, false, true, false, true, false, true, true, true, false, false, false, true, true, true, false, false, true, false, false, true, false, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, false, false, true, false, true, false, true, false, false, true, true, true, true, true, true, false, true, true, true, true, false, false, false, true, false, true, false, false, true, false, false, true, true, false, true, true, true, true, false, true, true, true, true, false, true, false, false, true, true, false, true, false, false, false, true, false, true, false, false, false, false, false, false, false, true, true, false, false, false, false, false, false, false, true, false, true, true, false, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, false, true, true, false, true, false, true, false, true, false, true, true, true, false, false, false, true, true, true, false, false, true, false, false, true, false, false, false, false, true, false, false, true, true, true, true, true, false, false, false, false, false, false, true, false, true, false, true, false, false, true, true, true, true, true, true, false, true, true, true, true, false, false, false, true, false, true, false, false, true, false, false, true, true, false, true, true, true, true, false, true, true, true, true, false, true, false, false, true, true, false, true, false, false, false, true, false, true, false, false, false, false, false, false, false, true, true, false, false, false, false, false, false, false, true, false, true, true, false, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, true, false, false, true, true, false, true, true, false, true, true, false, true, false, true, true, false, true, true, true, true, true, true, true, false, false, true, true, false, false, true, false, true, true, true, false, true, false, false, false, true, false, false, true, true, true, true, true, false, true, false, true, false, false, false, false, false, true, false, false, true, false, true, true, true, true, false, false, false, false, false, true, true, true, true, true, false, true, true, true, true, false, false, false, true, false, true, true, false, false, false, true, true, true, true, false, false, true, true, false, false, false, true, false, false, true, true, true, false, true, false, false, false, false, true, true]);
            let encoded = BinVector::from_bools(&[false, false, false, false, true, false, false, true, true, false, true, true, false, true, true, false, true, false, true, true, false, true, true, true, true, true, true, true, false, false, true, true, false, false, true, false, true, true, true, false, true, false, false, false, true, false, false, true, true, true, true, true, false, true, false, true, false, false, false, false, false, true, false, false, true, false, true, true, true, true, false, false, false, false, false, true, true, true, true, true, false, true, true, true, true, false, false, false, true, false, true, true, false, false, false, false, true, true, true, true, false, false, true, true, false, false, false, true, false, false, true, true, true, true, false, true, false, false, true, false, false, true, true, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, true, false, false, true, true, false, true, true, false, true, true, false, true, false, true, true, false, true, true, true, true, true, true, true, false, false, true, true, false, false, true, false, true, true, true, false, true, false, false, false, true, false, false, true, true, true, true, true, false, true, false, true, false, false, false, false, false, true, false, false, true, false, true, true, true, true, false, false, false, false, false, true, true, false, true, true, false, true, true, true, true, false, false, false, true, false, true, true, false, false, false, false, true, true, true, true, false, false, true, true, false, false, false, true, false, false, true, true, true, true, false, true, false, false, true, false, false, true, true, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, false, false, true, false, true, true, false, true, false, false, false, false, true, true, true, false, false, false, true, true, true, true, true, true, false, true, true, false, true, true, true, true, false, false, true, false, false, false, true, true, false, true, false, false, false, false, false, false, false, false, true, true, false, true, true, false, false, true, false, true, true, true, false, false, true, false, true, true, true, true, false, false, false, false, false, false, true, true, true, true, false, true, true, false, true, false, true, false, true, true, true, false, false, false, false, true, true, true, false, false, false, true, false, false, true, true, true, true, true, false, false, false, true, true, true, true]);
            let encoded = BinVector::from_bools(&[false, false, false, false, false, false, true, false, true, true, false, true, false, false, false, false, true, true, true, false, false, false, true, true, true, true, true, true, false, true, true, false, true, true, true, true, false, false, true, false, false, false, true, true, false, true, false, false, false, false, false, false, false, false, true, true, false, true, true, false, false, true, false, true, true, true, false, false, true, false, true, true, true, true, false, false, false, false, false, false, true, true, true, true, false, true, true, false, true, false, true, false, true, true, true, true, false, false, false, false, true, true, true, false, false, false, true, false, false, true, false, true, true, true, true, false, false, false, false, true, true, true, false, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, false, false, true, false, true, true, false, true, true, false, false, false, true, true, true, false, false, false, true, true, true, true, true, true, false, true, true, false, true, true, true, true, false, false, true, false, false, false, true, true, false, true, false, false, false, false, false, false, false, false, true, true, false, true, true, false, false, true, false, true, true, true, false, false, true, false, true, true, true, true, false, false, false, false, false, false, true, true, true, true, false, true, true, false, true, false, true, false, true, true, true, true, false, false, false, false, true, true, true, false, false, false, true, false, false, true, false, true, true, true, true, false, false, false, false, true, true, true, false, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, false, true, true, false, true, true, false, true, true, true, false, true, false, true, false, true, true, true, false, true, false, false, false, false, false, false, true, false, true, true, true, true, false, true, true, false, true, true, true, true, true, false, true, true, false, true, true, true, true, true, false, false, false, true, false, false, true, false, true, true, false, true, true, false, true, false, true, true, false, true, true, true, true, false, true, true, false, false, false, false, true, false, false, true, false, true, false, true, false, false, true, true, true, false, true, true, true, false, false, true, true, false, false, true, true, false, true, true, false, true, true, true, false, false, false, true]);
            let encoded = BinVector::from_bools(&[false, false, false, false, false, true, true, false, true, true, false, true, true, true, false, true, false, true, false, true, true, true, false, true, false, false, false, false, false, false, true, false, true, true, true, true, false, true, true, false, true, true, true, true, true, false, true, true, false, true, true, true, true, true, false, false, false, true, false, false, true, false, true, true, false, true, true, false, true, false, true, true, false, true, true, true, true, false, true, true, false, false, false, false, true, false, false, true, false, true, false, true, false, false, true, true, true, true, false, true, true, true, false, false, true, true, false, false, true, true, true, false, true, true, false, true, true, true, false, false, false, false, false, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, false, true, true, false, true, true, false, true, true, true, false, true, false, true, false, true, true, true, false, true, false, false, false, false, false, false, true, false, true, true, true, true, false, true, true, false, true, true, true, true, true, false, true, true, false, true, true, true, true, true, false, false, false, true, false, false, true, false, false, true, false, true, true, false, true, false, true, true, false, true, true, true, true, false, true, true, false, false, false, false, true, false, false, true, false, true, false, true, false, false, true, true, true, true, false, true, true, true, false, false, true, true, false, false, true, true, true, false, true, true, false, true, true, true, false, false, false, false, false, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, false, false, true, true, false, true, false, false, true, false, false, true, false, true, true, false, false, false, false, true, true, false, false, false, false, false, true, false, true, false, false, false, true, false, true, true, true, false, true, false, true, true, false, true, false, true, false, false, true, true, false, false, true, true, true, false, false, true, false, false, false, false, false, false, true, false, false, true, true, true, false, false, false, true, true, false, true, true, true, true, true, false, true, false, false, true, false, false, false, true, false, true, false, false, false, false, true, true, false, false, true, false, false, false, true, true, true, false, false, true, false, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[false, false, true, true, false, false, true, true, false, true, false, false, true, false, false, true, false, true, true, false, false, false, false, true, true, false, false, false, false, false, true, false, true, false, false, false, true, false, true, true, true, false, true, false, true, true, false, true, false, true, false, false, true, true, false, false, true, true, true, false, false, true, false, false, false, false, false, false, true, false, false, true, true, true, false, false, false, true, true, false, true, true, true, true, true, false, true, false, false, true, false, false, false, true, false, false, true, false, false, false, false, true, true, false, false, true, false, false, false, true, true, true, true, false, false, true, false, true, true, true, true, false, false, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, false, false, true, true, false, true, false, false, true, false, false, true, false, true, true, false, true, false, false, true, true, false, false, false, false, false, true, false, true, false, false, false, true, false, true, true, true, false, true, false, true, true, false, true, false, true, false, false, true, true, false, false, true, true, true, false, false, true, false, false, false, false, false, false, true, false, false, true, true, true, false, false, false, true, true, false, true, true, true, true, true, false, true, false, false, true, false, false, false, true, false, false, true, false, false, false, false, true, true, false, false, true, false, false, false, true, true, true, true, false, false, true, false, true, true, true, true, false, false, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, true, true, true, false, false, false, true, false, true, false, true, false, false, true, false, false, false, false, true, false, false, true, true, true, false, false, true, false, true, true, true, true, false, false, true, true, true, false, true, true, true, true, true, false, false, true, true, true, true, false, false, false, true, true, true, true, true, true, false, false, true, false, true, false, true, true, true, false, false, true, true, true, false, true, false, true, true, true, true, true, true, false, false, true, true, true, false, false, true, true, false, true, false, true, true, false, true, false, false, false, true, true, true]);
            let encoded = BinVector::from_bools(&[true, false, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, true, true, true, false, false, false, true, false, true, false, true, false, false, true, false, false, false, false, true, false, false, true, true, true, false, false, true, false, true, true, true, true, false, false, true, true, true, false, true, true, true, true, true, false, false, true, true, true, true, false, false, false, true, true, true, true, true, true, false, false, true, false, true, false, true, true, true, false, false, true, true, true, false, true, false, true, true, false, true, true, true, true, false, false, true, true, true, false, false, true, true, false, true, false, false, true, true, false, true, false, false, true, false, true, true, true, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, true, true, true, false, false, false, true, false, true, false, true, false, false, true, false, false, false, false, true, false, false, true, true, true, false, false, true, false, true, true, true, true, false, false, true, true, true, false, true, true, true, true, true, false, false, true, true, true, true, false, false, false, true, true, true, true, true, true, false, false, true, false, true, false, true, true, true, false, false, true, true, true, false, true, false, true, true, false, true, true, true, true, false, false, true, true, true, false, false, false, true, false, true, false, false, true, true, false, true, false, false, true, false, true, true, true, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, false, false, true, true, true, false, false, true, false, false, true, true, true, true, false, true, true, true, false, false, false, false, false, false, true, true, true, true, false, false, false, true, false, false, false, true, true, true, false, false, true, true, true, true, true, true, true, true, false, false, false, true, false, true, true, false, false, true, true, true, true, false, false, false, false, true, true, true, true, true, false, true, false, false, false, false, true, true, true, true, true, false, false, true, true, true, true, true, false, true, true, true, false, true, false, false, true, false, false, false, true, true, true, true, true, false, false, true, true, true, false, false, true, false, false, false]);
            let encoded = BinVector::from_bools(&[false, true, true, false, false, false, true, true, true, false, false, true, false, false, true, true, true, true, false, true, true, true, false, false, false, false, false, false, true, true, true, true, false, false, false, true, false, false, false, true, true, true, false, false, true, true, true, true, true, true, true, true, false, false, false, true, false, true, true, false, false, true, true, true, true, false, false, false, false, true, true, true, true, true, false, true, false, false, false, false, true, true, true, true, true, false, false, true, true, true, true, true, false, true, true, true, true, false, true, false, false, true, false, false, false, true, true, true, true, true, false, false, false, true, true, true, false, false, false, true, false, false, false, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, false, false, true, true, true, false, false, true, false, false, true, true, true, true, false, true, true, true, false, false, false, false, false, false, true, true, true, true, false, false, false, true, false, false, false, true, true, true, false, false, true, true, true, true, true, true, true, true, false, false, false, true, false, true, true, false, false, true, true, true, true, false, false, false, false, true, true, true, true, true, false, true, false, false, false, false, true, true, true, true, true, false, false, true, true, true, false, true, false, true, true, true, true, false, true, false, false, true, false, false, false, true, true, true, true, true, false, false, false, true, true, true, false, false, false, true, false, false, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, true, false, false, false, false, true, true, false, false, false, true, false, true, true, true, false, true, true, true, false, false, true, false, true, true, false, true, false, true, true, false, true, true, false, false, false, false, false, true, true, true, false, true, true, true, false, false, true, true, false, true, true, false, false, false, true, false, true, false, true, true, true, false, true, true, true, false, false, false, false, true, true, true, true, false, true, true, true, false, false, false, false, true, true, true, true, true, false, true, false, true, false, false, false, false, true, false, true, false, true, false, true, false, true, false, false, false, true, false, true, true, true, false, true, false, true]);
            let encoded = BinVector::from_bools(&[true, false, false, true, true, false, false, false, false, true, true, false, false, false, true, false, true, true, true, false, true, true, true, false, false, true, false, true, true, false, true, false, true, true, false, true, true, false, false, false, false, false, true, true, true, false, true, true, true, false, false, true, true, false, true, true, false, false, false, true, false, true, false, true, true, true, false, true, true, true, false, false, false, false, true, true, true, true, false, true, true, true, false, false, false, false, true, true, true, true, true, false, true, false, true, true, false, false, false, false, true, false, true, false, true, false, true, false, true, false, false, false, false, true, false, true, true, true, true, false, true, false, true, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, true, false, false, false, false, true, true, false, false, false, true, false, true, true, true, false, true, true, true, false, false, true, false, true, true, false, true, false, true, true, false, true, true, false, false, false, false, false, true, true, true, false, true, true, true, false, false, true, true, false, true, true, false, false, false, true, false, true, false, true, true, true, false, true, true, true, false, true, false, false, true, true, true, true, false, true, true, true, false, false, false, false, true, true, true, true, true, false, true, false, true, true, false, false, false, false, true, false, true, false, true, false, true, false, true, false, false, false, false, true, false, true, true, true, true, false, true, false, true, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, false, true, true, false, false, false, true, true, true, true, true, false, false, false, true, true, false, false, true, true, false, true, false, true, false, false, false, false, true, true, true, false, false, true, false, false, true, false, true, false, true, true, false, true, false, false, true, true, false, true, false, false, true, false, false, false, true, true, false, false, false, false, false, true, false, false, false, false, true, false, false, false, true, false, true, true, false, true, true, false, true, false, false, true, true, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true]);
            let encoded = BinVector::from_bools(&[false, false, false, false, false, true, true, false, false, false, true, true, true, true, true, false, false, false, true, true, false, false, true, true, false, true, false, true, false, false, false, false, true, true, true, false, false, true, false, false, true, false, true, false, true, true, false, true, false, false, true, true, false, true, false, false, true, false, false, false, true, true, false, false, false, false, false, true, false, false, false, false, true, false, false, false, true, false, true, true, false, true, true, false, true, false, false, true, true, false, false, false, false, false, true, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, true, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, false, true, true, false, false, false, true, true, true, true, true, false, false, false, true, true, false, false, true, true, false, true, false, true, false, false, false, false, true, true, true, false, false, true, false, false, true, false, true, false, true, true, false, true, false, false, true, true, false, true, false, true, true, false, false, false, true, true, false, false, false, false, false, true, false, false, false, false, true, false, false, false, true, false, true, true, false, true, true, false, true, false, false, true, true, false, false, false, false, false, true, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, true, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, false, false, true, false, false, true, false, true, false, true, true, false, false, false, false, false, true, true, true, false, true, true, false, false, false, true, true, true, true, true, false, false, false, false, true, false, false, true, true, true, false, false, true, false, false, true, false, false, true, false, false, true, false, true, false, true, true, true, false, true, false, false, true, true, false, false, false, false, true, false, true, true, true, false, false, true, true, false, false, false, false, false, false, true, true, true, true, true, true, true, true, false, true, false, false, true, true, true, false, true, true, false, true, false, false, true, false, false, false, true, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, false, false, true, false, false, true, false, true, false, true, true, false, false, false, false, false, true, true, true, false, true, true, false, false, false, true, true, true, true, true, false, false, false, false, true, false, false, true, true, true, false, false, true, false, false, true, false, false, true, false, false, true, false, true, false, true, true, true, false, true, false, false, true, true, false, false, false, false, true, false, true, true, true, false, false, true, true, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, false, true, false, false, true, true, true, false, true, true, false, true, false, true, false, true, false, false, false, true, true, false, true, true, false, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, false, false, false, false, false, true, true, true, false, true, true, false, false, false, true, true, true, true, true, false, false, false, false, true, false, false, true, true, true, false, false, true, false, false, true, false, false, true, false, false, true, false, true, false, true, true, true, false, true, false, false, true, true, false, false, false, false, true, false, true, true, true, false, false, true, true, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, false, true, false, false, true, true, true, false, true, true, false, true, false, true, false, true, false, false, false, true, true, false, true, true, false, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, true, false, false, false, true, true, true, false, false, true, false, false, false, true, false, false, false, true, false, false, true, false, false, true, true, true, true, false, true, true, true, true, false, true, false, true, false, false, false, false, true, true, false, false, true, false, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, true, true, false, true, true, true, false, true, false, true, true, false, false, true, true, true, false, true, true, true, true, false, true, true, false, true, true, false, false, true, false, false, false, true, false, false, true, false, false, false, true, false, false, true, true, true, false, true, false]);
            let encoded = BinVector::from_bools(&[true, false, false, false, true, false, false, false, true, true, true, false, false, true, false, false, false, true, false, false, false, true, false, false, true, false, false, true, true, true, true, false, true, true, true, true, false, true, false, true, false, false, false, false, true, true, false, false, true, false, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, true, true, false, true, true, true, false, true, false, true, true, false, false, true, true, true, false, true, true, true, true, false, true, true, true, false, true, true, false, false, true, false, false, false, true, false, false, true, false, false, false, false, true, false, false, true, true, false, true, false, true, false, false, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, true, false, false, false, true, true, true, false, false, false, false, false, false, true, false, false, false, true, false, false, true, false, false, true, true, true, true, false, true, true, true, true, false, true, false, true, false, false, false, false, true, true, false, false, true, false, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, true, true, false, true, true, true, false, true, false, true, true, false, false, true, true, true, false, true, true, true, true, false, true, true, true, false, true, true, false, false, true, false, false, false, true, false, false, true, false, false, false, false, true, false, false, true, true, false, true, false, true, false, false, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, true, false, false, false, true, true, true, false, true, false, true, false, true, true, true, false, false, true, true, false, true, true, true, true, true, false, true, true, true, false, false, false, false, false, false, true, true, true, true, true, true, false, true, true, false, false, false, false, true, false, false, true, false, false, true, true, false, false, false, true, false, true, true, false, true, true, false, false, true, true, false, true, true, true, true, false, false, true, false, false, true, true, false, false, true, true, true, true, false, true, true, false, false, true, true, false, false, true, true, true, false, false, true, false, true, true, false, false, false, true, true, false, false, false, false, true]);
            let encoded = BinVector::from_bools(&[false, true, false, false, true, false, false, false, true, true, true, false, true, false, true, false, true, true, true, false, false, true, true, false, true, true, true, true, true, false, true, true, true, false, false, false, false, false, false, true, true, true, true, true, true, false, true, true, false, false, false, false, true, false, false, true, false, false, true, true, false, false, false, true, false, true, true, false, true, true, false, false, true, true, false, true, true, true, true, false, false, true, false, false, true, true, false, false, true, true, true, true, false, true, true, true, false, false, true, true, false, false, true, true, true, false, false, true, false, true, true, true, false, false, false, true, true, false, false, false, false, false, true, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, true, false, false, false, true, true, true, false, true, false, true, false, true, true, true, false, false, true, true, false, true, true, true, true, true, false, true, true, true, false, false, false, false, false, false, true, true, true, true, true, true, false, true, true, false, false, false, false, true, false, false, true, false, false, true, true, false, false, false, true, false, true, true, false, true, true, false, false, true, true, false, true, true, true, true, false, false, true, false, false, true, true, false, false, true, true, true, false, false, true, true, true, false, false, true, true, false, false, true, true, true, false, false, true, false, true, true, true, false, false, false, true, true, false, false, false, false, false, true, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, true, true, false, false, false, true, false, false, true, true, true, false, false, true, false, false, false, true, true, true, true, false, false, false, false, false, false, true, false, false, false, true, false, false, false, true, true, false, false, false, true, true, false, true, true, false, false, false, false, true, false, true, false, true, false, false, true, false, false, true, true, true, true, false, false, true, true, true, false, true, false, false, true, false, true, false, true, true, true, false, false, false, false, false, false, false, false, true, true, true, true, false, false, true, false, true, false, true, false, false, false, false, false, true, true, true, false, false, false, false, true, true, true, false, true, false]);
            let encoded = BinVector::from_bools(&[true, true, true, true, true, true, false, false, false, true, false, false, true, true, true, false, false, true, false, false, false, true, true, true, true, false, false, false, false, false, false, true, false, false, false, true, false, false, false, true, true, false, false, false, true, true, false, true, true, false, false, false, false, true, false, true, false, true, false, false, true, false, false, true, true, true, true, false, false, true, true, true, false, true, false, false, true, false, true, false, true, true, true, false, false, false, false, false, false, false, false, true, true, true, false, true, false, false, true, false, true, false, true, false, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, true, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, true, true, false, false, false, true, false, false, true, true, true, false, false, true, false, false, false, true, true, true, true, false, false, false, false, false, false, true, false, false, false, true, false, false, false, true, true, false, false, false, true, true, false, true, true, false, false, false, false, true, false, true, false, true, false, false, true, false, false, true, true, true, true, false, false, true, true, true, false, true, false, false, true, false, true, false, true, true, true, false, false, false, false, false, false, false, false, true, true, true, false, true, false, false, true, false, true, false, true, false, false, true, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, true, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, false, false, true, true, true, true, false, false, true, true, false, false, true, true, false, false, false, true, true, false, true, false, true, false, false, false, false, true, false, true, false, false, false, false, true, false, false, true, true, false, true, true, false, false, true, true, false, false, true, false, true, true, true, false, false, true, true, true, false, true, true, false, false, true, false, true, true, true, true, true, true, true, true, true, true, true, true, false, true, false, false, true, false, true, false, false, false, true, true, true, true, false, false, true, false, false, false, true, false, false, true, false, false, false, true, false, false, false, true, false, true, true, false, false, false, true]);
            let encoded = BinVector::from_bools(&[false, true, true, false, false, false, true, true, true, true, false, false, true, true, false, false, true, true, false, false, false, true, true, false, true, false, true, false, false, false, false, true, false, true, false, false, false, false, true, false, false, true, true, false, true, true, false, false, true, true, false, false, true, false, true, true, true, false, false, true, true, true, false, true, true, false, false, true, false, true, true, true, true, true, true, true, true, true, true, true, true, false, true, false, false, true, false, true, false, false, false, true, true, true, true, true, false, false, true, false, false, false, true, false, false, true, false, false, false, true, true, false, false, false, true, false, true, true, true, false, false, false, true, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, false, false, true, true, true, true, false, false, true, true, false, false, true, true, false, false, false, true, true, false, true, false, true, false, false, false, false, true, false, true, false, false, false, false, true, false, false, true, true, false, true, true, false, false, true, true, false, false, true, false, true, true, true, false, true, true, true, true, false, true, true, false, false, true, false, true, true, true, true, true, true, true, true, true, true, true, true, false, true, false, false, true, false, true, false, false, false, true, true, true, true, true, false, false, true, false, false, false, true, false, false, true, false, false, false, true, true, false, false, false, true, false, true, true, true, false, false, false, true, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, true, true, false, true, false, false, true, false, false, true, true, false, true, true, false, false, false, true, false, false, true, false, true, true, true, true, false, true, false, false, true, false, false, true, true, true, false, true, false, false, false, true, true, true, true, true, true, true, false, false, true, true, false, true, true, true, true, false, true, true, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, false, false, true, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, false, true, true, false, true, false, false, true, false, false, true, true, false, true, true, false, false, false, true, false, false, true, false, true, true, true, true, false, true, false, false, true, false, false, true, true, true, false, true, false, false, false, true, true, true, true, true, true, true, false, false, true, true, false, true, true, true, true, false, true, true, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, false, false, true, false, true, false, true, false, false, true, true, false, false, false, true, false, false, true, false, true, false, false, false, false, true, false, false, false, true, true, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, true, true, false, true, false, false, true, false, false, true, true, false, true, true, false, false, false, true, false, false, true, false, true, true, true, true, false, true, false, false, true, false, false, true, true, true, false, true, false, false, false, true, true, true, true, true, true, true, false, false, true, true, false, true, true, true, true, false, true, true, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, true, true, true, false, true, false, false, false, false, false, false, false, true, true, false, false, true, false, true, false, true, false, false, true, true, false, false, false, true, false, false, true, false, true, false, false, false, false, true, false, false, false, true, true, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, true, false, false, true, false, true, false, false, false, true, false, true, true, true, false, true, false, true, true, true, false, false, false, false, true, true, false, true, true, false, true, false, false, false, false, true, false, true, true, true, true, false, true, true, false, false, true, false, true, true, true, false, false, true, false, false, true, true, true, true, true, false, true, false, false, true, false, true, false, false, true, true, true, false, true, true, true, true, false, false, false, true, false, false, true, true, true, true, true, false, false, true, true, true, false, false, true, false, false, false, false, true, true, true, true, true, false, false, true, false, false, true, true, false, false, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, true, false, false, true, false, true, false, false, false, true, false, true, true, true, false, true, false, true, true, true, false, false, false, false, true, true, false, true, true, false, true, false, false, false, false, true, false, true, true, true, true, false, true, true, false, false, true, false, true, true, true, false, false, true, false, false, true, true, true, true, true, false, true, false, false, true, false, true, false, false, true, true, true, false, true, true, true, true, false, false, false, true, false, false, true, true, true, true, true, false, false, false, true, true, true, false, false, true, false, false, false, false, true, true, true, true, true, true, false, false, true, false, false, true, true, true, false, false, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, true, false, false, true, false, true, false, false, false, true, false, true, true, true, false, true, true, true, true, true, false, false, false, false, true, true, false, true, true, false, true, false, false, false, false, true, false, true, true, true, true, false, true, true, false, false, true, false, true, true, true, false, false, true, false, false, true, true, true, true, true, false, true, false, false, true, false, true, false, false, true, true, true, false, true, true, true, true, false, false, false, true, false, false, true, true, true, true, true, false, false, false, true, true, true, false, false, true, false, false, false, false, true, true, true, true, true, true, false, false, true, false, false, true, true, true, false, false, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, true, false, false, true, false, true, false, false, false, true, true, true, true, false, false, true, false, false, false, true, true, false, false, false, false, true, true, false, true, false, true, true, true, false, false, true, true, true, false, false, true, false, true, false, true, true, true, false, false, true, false, true, false, false, false, true, false, true, false, false, true, false, true, false, true, false, true, true, false, true, true, false, true, true, true, true, true, true, false, false, true, false, false, false, false, true, false, true, false, true, false, false, false, false, false, false, true, true, false, true, true, true, true, true, false, true, false, false, false, true, true, true, false, false, false, true]);
            let encoded = BinVector::from_bools(&[false, true, true, true, true, false, false, true, false, true, false, false, false, true, true, true, true, false, false, true, false, false, false, true, true, false, false, false, false, true, true, false, true, false, true, true, true, false, false, true, true, true, false, false, true, false, true, false, true, true, true, false, false, true, false, true, false, false, false, true, false, true, false, false, true, false, true, false, true, false, true, true, false, true, true, false, true, true, true, true, true, true, false, false, true, false, false, false, false, true, false, true, false, true, true, false, false, false, false, false, false, true, true, false, true, true, true, true, true, false, true, true, false, false, false, true, true, true, false, false, false, false, true, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, true, false, false, true, false, true, false, false, false, true, true, true, true, false, false, true, false, false, false, true, true, false, false, false, false, true, true, false, true, false, true, true, true, false, false, true, true, true, false, false, true, false, true, false, true, true, true, false, false, true, false, true, false, false, false, true, false, true, false, false, true, false, true, false, true, false, true, true, false, true, true, false, true, true, true, true, true, true, false, false, true, false, false, false, false, true, true, true, false, true, true, false, false, false, false, false, false, true, true, false, true, true, true, true, true, false, true, true, false, false, false, true, true, true, false, false, false, false, true, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, true, false, true, true, false, false, true, true, false, true, false, true, false, true, false, false, false, false, true, true, true, true, true, true, true, true, false, false, true, true, true, false, true, true, false, false, false, true, false, false, true, true, false, true, false, false, true, false, true, true, true, true, false, true, false, true, true, true, true, true, false, false, false, true, false, false, false, false, true, true, false, false, true, false, true, false, true, false, true, false, true, true, false, false, true, true, false, false, false, false, true, true, true, false, true, false, false, false, false, false, true, true, false, false, true, true, false, false, false, true, false, false, true, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, false, true, true, false, true, true, false, false, true, true, false, true, false, true, false, true, false, false, false, false, true, true, true, true, true, true, true, true, false, false, true, true, true, false, true, true, false, false, false, true, false, false, true, true, false, true, false, false, true, false, true, true, true, true, false, true, false, true, true, true, true, true, false, false, false, true, false, false, false, false, true, true, false, false, true, false, true, false, true, false, true, false, true, true, false, false, true, true, false, false, false, false, true, true, true, true, false, true, false, false, false, false, false, true, true, false, false, true, false, true, false, false, false, true, false, false, false, true, true, false, true, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, true, false, true, true, false, false, true, true, false, true, false, true, false, true, false, false, false, false, true, true, true, true, true, true, true, true, true, false, true, true, true, false, true, true, false, false, false, true, false, false, true, true, false, true, false, false, true, false, true, true, true, true, false, true, false, true, true, true, true, true, false, false, false, true, false, false, false, false, true, true, false, false, true, false, true, false, true, false, true, false, true, true, false, false, true, true, false, false, false, false, true, true, true, true, false, true, false, false, false, false, false, true, true, false, false, true, false, true, false, false, false, true, false, false, false, true, true, false, true, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, false, true, true, false, false, false, true, false, true, false, true, false, true, false, false, true, true, true, false, false, false, false, false, true, true, true, false, false, false, true, false, false, true, false, false, true, true, true, false, false, true, true, true, true, true, false, true, false, false, true, false, true, false, false, true, true, false, false, false, false, false, false, false, false, true, true, false, true, true, true, true, true, true, false, true, true, false, true, false, false, false, false, true, false, false, true, true, false, false, false, true, true, false, true, false, false, true, true, false, true, true, true, false, false, false, false, true, false, true, true, true, true, true, false, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, false, false, true, true, false, false, false, true, false, true, false, true, false, true, false, false, true, true, true, false, false, false, false, false, true, true, true, false, false, false, true, false, false, true, false, false, true, true, true, false, false, true, true, true, true, true, false, true, false, false, true, false, true, false, false, true, true, false, false, false, false, false, false, false, false, true, true, false, true, true, true, true, true, true, false, true, true, false, true, false, false, false, false, true, false, false, true, true, false, false, false, true, true, true, false, true, false, false, true, true, false, true, true, true, false, false, false, true, false, true, false, true, true, true, true, false, true, false, false, true, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, false, true, true, false, false, false, true, false, true, false, true, false, true, false, false, true, true, true, false, false, false, false, false, true, true, true, false, false, false, true, false, false, true, false, false, true, true, true, false, true, true, true, true, true, true, false, true, false, false, true, false, true, false, false, true, true, false, false, false, false, false, false, false, false, true, true, false, true, true, true, true, true, true, false, true, true, false, true, false, false, false, false, true, false, false, true, true, false, false, false, true, true, true, false, true, false, false, true, true, false, true, true, true, false, false, false, true, false, true, false, true, true, true, true, false, true, false, false, true, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, true, true, true, true, true, false, true, false, false, false, false, true, true, true, true, true, true, true, false, true, true, false, true, false, false, true, false, false, true, false, true, true, false, false, true, true, false, true, true, false, true, true, false, true, true, true, false, true, true, false, false, false, false, false, true, true, false, false, false, false, false, true, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, true, false, false, true, false, false, true, false, true, true, true, true, false, false, true, true, false, false, true, true, false, true, false, true, true, false, false, true, true, true, true, true, true, true, true, true, true]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, true, true, true, true, true, false, true, false, false, false, false, true, true, true, true, true, true, true, false, true, true, false, true, false, false, true, false, false, true, false, true, true, false, false, true, true, false, true, true, false, true, true, false, true, true, true, false, true, true, false, false, false, false, false, true, true, false, false, false, false, false, true, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, true, false, false, true, false, false, true, false, true, true, true, true, true, false, false, true, true, false, false, true, true, false, true, false, true, true, false, true, false, true, true, true, true, true, true, true, true, true, true, false, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, true, true, true, true, true, false, true, false, false, false, false, true, true, true, false, true, true, true, false, true, true, false, true, false, false, true, false, false, true, false, true, true, false, false, true, true, false, true, true, false, true, true, false, true, true, true, false, true, true, false, false, false, false, false, true, true, false, false, false, false, false, true, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, true, false, false, true, false, false, true, false, true, true, true, true, true, false, false, true, true, false, false, true, true, false, true, false, true, true, false, true, false, true, true, true, true, true, true, true, true, true, true, false, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, true, false, false, true, false, false, false, false, false, true, true, false, false, false, true, false, true, true, true, false, false, true, false, false, true, true, false, false, true, true, true, false, false, false, false, false, true, false, false, false, false, false, true, false, false, false, false, true, false, false, false, true, true, false, false, true, false, false, true, true, true, true, true, false, true, true, false, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, true, true, true, false, false, true, true, true, true, false, true, true, false, true, true, false, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, false, true, true]);
            let encoded = BinVector::from_bools(&[false, false, true, false, true, false, false, true, false, false, false, false, false, true, true, false, false, false, true, false, true, true, true, false, false, true, false, false, true, true, false, false, true, true, true, false, false, false, false, false, true, false, false, false, false, false, true, false, false, false, false, true, false, false, false, true, true, false, false, true, false, false, true, true, true, true, true, false, true, true, false, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, true, true, true, false, false, true, true, true, false, true, false, true, true, false, true, true, false, false, false, false, false, false, false, false, true, true, false, false, false, true, false, false, false, false, false, true, true, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, true, false, false, true, false, false, false, false, false, true, true, false, false, false, true, false, true, true, false, false, false, true, false, false, true, true, false, false, true, true, true, false, false, false, false, false, true, false, false, false, false, false, true, false, false, false, false, true, false, false, false, true, true, false, false, true, false, false, true, true, true, true, true, false, true, true, false, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, true, true, true, false, false, true, true, true, false, true, false, true, true, false, true, true, false, false, false, false, false, false, false, false, true, true, false, false, false, true, false, false, false, false, false, true, true, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, false, true, false, false, true, false, true, true, true, false, true, false, true, true, true, true, true, false, false, false, true, true, true, false, false, false, false, true, false, false, true, false, true, false, true, true, false, false, false, true, true, false, true, true, false, true, true, true, true, true, true, true, true, false, true, true, false, false, false, true, true, false, true, false, true, true, false, false, false, true, true, true, false, false, true, false, true, false, false, true, true, true, true, true, false, true, false, true, false, true, false, false, false, true, false, true, false, false, false, false, false, true, false, true, true, true, false, false, false, true, false, false, false, false, true, true]);
            let encoded = BinVector::from_bools(&[false, true, false, true, false, true, false, false, true, false, true, true, true, false, true, false, true, true, true, true, true, false, false, false, true, true, true, false, false, false, false, true, false, false, true, false, true, false, true, true, false, false, false, true, true, false, true, true, false, true, true, true, true, true, true, true, true, false, true, true, false, false, false, true, true, false, true, false, true, true, false, false, false, true, true, true, false, false, true, false, true, false, false, true, true, true, true, true, false, true, false, true, false, true, true, false, false, false, true, false, true, false, false, false, false, false, true, false, true, true, true, true, false, false, false, true, false, false, false, false, false, true, true, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, false, true, false, false, true, false, true, true, true, false, true, false, true, true, true, true, true, false, false, false, true, true, true, false, false, false, false, true, false, false, true, false, true, false, true, true, false, false, false, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, true, true, false, false, false, true, true, false, true, false, true, true, false, false, false, true, true, true, false, false, true, false, true, false, false, true, true, true, true, true, false, true, false, true, false, true, true, false, false, false, true, false, true, false, false, false, false, false, true, false, true, true, true, true, false, false, false, true, false, false, false, false, false, true, true, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, false, false, true, true, true, true, false, true, false, true, true, false, true, true, false, true, false, false, false, false, true, false, true, true, false, false, true, false, true, false, false, false, true, true, true, true, false, false, true, false, false, false, false, true, true, false, true, true, true, true, true, false, true, true, true, true, false, true, false, true, true, true, false, false, true, false, true, false, false, false, true, false, true, false, true, true, true, false, true, false, true, false, false, true, false, true, false, true, true, true, false, false, true, true, false, false, false, false, true, true, true, true, false, true, true, false, false, false, true, true, false, false, true, true, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, false, false, false, true, true, true, true, false, true, false, true, true, false, true, true, false, true, false, false, false, false, true, false, true, true, false, false, true, false, true, false, false, false, true, true, true, true, false, false, true, false, false, false, false, true, true, false, true, true, true, true, true, false, true, true, true, true, false, true, false, true, true, true, false, false, true, false, true, false, false, false, true, false, true, false, true, true, true, false, true, false, true, false, false, true, false, true, false, true, true, true, true, false, false, true, true, false, false, false, false, true, true, true, true, false, true, true, true, false, false, false, true, true, false, false, false, true, true, false, false, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, false, false, true, true, true, true, false, true, false, true, true, false, true, true, false, true, false, false, false, false, true, false, true, true, false, false, true, false, true, false, false, false, true, true, true, true, false, false, true, false, false, false, false, true, true, false, true, true, true, true, true, false, true, true, true, true, false, true, false, true, true, true, false, false, true, false, true, false, false, false, true, false, true, false, true, true, true, false, true, false, true, false, false, true, false, true, false, true, true, true, true, false, false, true, true, false, false, false, false, true, true, false, true, false, true, true, true, false, false, false, true, true, false, false, false, true, true, false, false, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, false, false, false, false, true, false, false, false, true, false, true, false, true, true, false, true, false, true, false, true, false, false, true, true, true, true, false, true, false, true, false, true, true, false, false, false, false, true, true, true, true, true, true, true, false, true, true, true, false, true, false, true, false, true, true, true, false, false, false, true, true, false, true, false, false, false, false, false, true, false, false, true, true, true, false, false, true, false, true, false, true, false, false, false, true, false, false, false, false, false, false, false, true, false, true, true, false, true, true, true, false, false, true, true, false, true, false, true, true, true, true, true, true, false, false, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, false, false, false, false, true, false, false, false, true, false, true, false, true, true, false, true, false, true, false, true, false, false, true, true, true, true, false, true, false, true, false, true, true, false, false, false, false, true, true, true, true, true, true, true, false, true, true, true, false, true, false, true, false, true, true, true, false, false, false, true, true, false, true, false, false, false, false, false, true, false, false, true, true, true, false, false, true, false, true, false, true, false, false, false, true, false, false, false, false, false, false, false, false, true, false, true, true, false, true, true, true, false, false, true, true, false, true, true, false, true, true, true, true, true, false, true, false, false, false, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, false, false, false, false, true, false, false, false, true, false, true, false, true, true, false, true, false, true, false, true, false, false, true, true, true, true, false, true, false, true, false, true, true, false, false, false, false, true, true, true, true, true, true, true, false, true, true, true, false, true, false, true, false, true, true, true, false, false, false, true, true, false, true, false, false, false, false, false, true, false, false, true, true, true, false, false, true, false, true, false, true, false, false, false, true, false, false, false, false, false, false, false, false, true, false, true, true, false, true, true, true, false, false, true, true, false, true, true, false, true, true, true, true, true, false, true, false, false, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, true, true, false, true, false, true, false, false, true, false, false, false, true, true, true, false, false, false, false, false, false, false, true, false, true, false, true, true, false, false, false, false, true, false, false, true, false, true, false, true, true, false, false, false, false, true, true, false, true, true, false, false, false, false, false, true, true, true, true, true, false, true, true, false, true, true, true, true, false, false, false, false, true, true, false, false, true, false, true, true, true, false, false, false, false, false, false, false, true, false, true, false, true, true, false, true, true, false, false, true, true, false, true, false, true, true, false, true, true, false, true, false, true, false, true, true]);
            let encoded = BinVector::from_bools(&[true, false, false, true, true, true, false, true, false, true, false, false, true, false, false, false, true, true, true, false, false, false, false, false, false, false, true, false, true, false, true, true, false, false, false, false, true, false, false, true, false, true, false, true, true, false, false, false, false, true, true, false, true, true, false, false, false, false, false, true, true, true, true, true, false, true, true, false, true, true, true, true, false, false, false, false, true, true, false, false, true, false, true, true, true, false, false, false, false, false, false, false, true, false, false, true, false, true, true, false, true, true, false, false, true, true, false, true, false, true, false, true, false, true, true, false, true, false, true, true, false, true, true, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, true, true, false, true, false, true, false, false, true, false, false, false, true, true, true, false, false, false, false, false, false, false, true, false, true, false, true, true, false, false, false, false, true, false, false, true, false, true, false, true, true, false, false, false, false, true, true, false, true, true, false, false, false, false, false, true, true, true, true, true, false, true, true, true, true, true, true, true, false, false, false, false, true, true, false, false, true, false, true, true, true, false, false, false, false, false, false, false, true, false, false, true, false, true, true, false, true, true, false, false, true, true, false, true, false, true, false, true, false, true, true, false, true, false, true, true, false, true, true, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, false, true, true, true, false, true, false, false, true, true, true, false, false, false, true, true, true, true, true, false, true, true, false, false, false, true, true, false, true, false, false, true, true, false, true, true, true, false, true, true, false, false, false, true, true, true, true, false, true, true, false, true, true, true, true, true, false, false, false, true, false, false, false, false, false, true, true, true, false, true, true, false, false, true, false, false, false, false, false, true, true, true, false, false, true, true, true, true, true, false, false, false, false, true, false, false, true, false, true, false, true, true, false, true, true, false, true, false, true, false, false, false, false, false, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, false, true, true, true, false, true, false, false, true, true, true, false, false, false, true, true, true, true, true, false, true, true, false, false, false, true, true, false, true, false, false, true, true, false, true, true, true, false, true, true, false, false, false, true, true, true, true, false, true, true, false, true, true, true, true, true, false, false, false, true, false, false, false, false, false, true, true, true, false, true, true, false, false, true, false, false, false, false, false, true, true, true, false, false, true, true, true, true, true, false, false, false, false, false, true, false, false, true, false, true, false, true, true, false, true, true, false, false, true, false, true, false, false, false, false, false, false, true, false, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, false, true, true, true, false, true, false, false, true, true, true, false, false, false, true, true, true, true, true, false, true, true, false, false, false, true, true, false, true, false, false, true, true, false, true, true, true, false, true, true, false, false, false, true, true, true, true, false, true, true, false, true, true, true, true, true, false, false, false, true, false, false, false, false, false, true, true, true, false, true, true, false, false, true, false, false, false, false, false, true, true, true, false, false, true, true, true, true, false, false, false, false, false, false, true, false, false, true, false, true, false, true, true, false, true, true, false, false, true, false, true, false, false, false, false, false, false, true, false, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, true, false, true, false, true, true, true, false, true, true, false, false, false, true, false, false, false, false, true, true, true, false, false, true, false, false, true, true, false, true, false, true, true, true, false, true, false, false, true, false, false, false, false, true, false, true, true, true, false, false, true, true, true, true, false, true, true, false, false, false, false, true, false, true, true, true, false, true, false, false, true, false, false, false, true, true, false, false, true, true, false, true, false, true, false, true, false, true, true, false, true, true, true, false, true, true, true, true, true, false, true, true, false, false, false, true, true, false, true, false, true, true, false, false, false, false]);
            let encoded = BinVector::from_bools(&[true, false, false, false, true, false, true, false, true, true, true, false, true, true, false, false, false, true, false, false, false, false, true, true, true, false, false, true, false, false, true, true, false, true, false, true, true, true, false, true, false, false, true, false, false, false, false, true, false, true, true, true, false, false, true, true, true, true, false, true, true, false, false, false, false, true, false, true, true, true, false, true, false, false, true, false, false, false, true, true, false, false, true, true, false, true, false, true, false, true, false, true, true, false, false, true, true, true, false, true, true, true, true, true, false, true, true, false, false, false, true, true, true, false, true, false, true, true, false, false, false, false, false, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, true, false, true, false, true, true, true, false, true, true, false, false, false, true, false, false, false, false, true, true, true, false, false, true, false, false, true, true, false, true, false, true, true, true, false, true, false, false, true, false, false, false, false, true, false, true, true, true, false, false, true, true, true, true, false, true, true, false, false, false, false, true, false, true, true, true, false, true, false, false, true, false, false, false, true, true, false, false, true, true, false, true, false, true, false, true, false, true, true, false, false, true, true, true, false, true, true, true, true, true, false, true, true, false, false, false, true, true, true, false, true, false, true, false, false, false, false, false, false, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, true, false, false, true, false, true, false, false, false, false, false, true, true, false, false, false, true, false, false, true, true, false, true, false, true, true, false, false, true, true, false, false, false, true, true, false, true, true, false, false, false, false, false, false, true, true, false, true, true, false, false, true, false, true, false, true, true, false, true, false, false, false, false, false, true, false, true, true, false, true, false, false, true, false, false, false, false, true, true, true, false, true, true, true, true, false, true, true, true, true, true, true, true, false, false, true, false, true, true, true, false, true, false, true, true, true, true, false, true, false, false, false, true, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, true, true, true, false, false, true, false, true, false, false, false, false, false, true, true, false, false, false, true, false, false, true, true, false, true, false, true, true, false, false, true, true, false, false, false, true, true, false, true, true, false, false, false, false, false, false, true, true, false, true, true, false, false, true, false, true, false, true, true, false, true, false, false, false, false, false, true, false, true, true, false, true, false, false, true, false, false, false, false, true, true, true, false, true, true, true, true, false, true, true, true, true, true, true, true, true, false, false, true, false, true, true, true, false, true, false, true, true, false, true, true, false, true, false, false, false, true, true, true, false, false, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, true, false, false, true, false, true, false, false, false, false, false, true, true, false, false, false, true, false, false, true, true, false, true, false, true, true, false, false, true, true, false, false, false, true, true, false, true, true, false, false, false, false, false, false, true, true, false, true, true, false, false, true, false, true, false, true, true, false, true, false, false, false, false, false, true, false, true, true, false, true, false, false, true, false, false, false, false, true, true, true, false, true, true, true, true, false, true, true, true, true, true, true, true, true, false, false, true, false, true, true, true, false, true, false, true, true, false, true, true, false, true, false, false, false, true, true, true, false, false, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, true, true, true, true, false, false, true, true, true, true, true, true, false, false, false, true, true, true, true, false, false, true, false, false, false, true, false, false, false, false, true, false, false, true, false, false, true, true, false, false, false, true, false, false, true, true, true, false, true, false, true, false, false, true, false, true, false, false, true, false, true, false, false, true, true, true, true, true, true, false, true, false, false, false, true, false, true, false, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, false, false, false, false, false, true, true, true, true, true, false, false, true, false, false, true, false, true, false, false, false, false, true]);
            let encoded = BinVector::from_bools(&[false, false, false, true, true, true, true, true, false, false, true, true, true, true, true, true, false, false, false, true, true, true, true, false, false, true, false, false, false, true, false, false, false, false, true, false, false, true, false, false, true, true, false, false, false, true, false, false, true, true, true, false, true, false, true, false, false, true, false, true, false, false, true, false, true, false, false, true, true, true, true, true, true, false, true, false, false, false, true, false, true, false, false, false, false, false, false, false, false, true, true, false, true, false, false, true, false, true, false, false, false, false, false, true, true, true, true, true, false, false, true, true, false, false, true, false, true, false, true, false, false, false, false, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, true, true, true, true, false, false, true, true, true, true, true, true, false, false, false, true, true, true, true, false, false, true, false, false, false, true, false, false, false, false, true, false, false, true, false, false, true, true, false, false, false, true, false, false, true, true, true, false, true, false, true, false, false, true, false, true, false, false, true, false, true, false, false, true, true, true, true, true, true, true, true, false, false, false, true, false, true, false, false, false, false, false, false, false, false, true, true, false, true, false, false, true, false, true, false, false, false, false, false, true, true, true, true, true, false, false, true, true, false, false, true, false, true, false, true, false, false, false, false, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, true, false, true, false, false, true, false, true, true, false, false, true, false, true, false, false, true, false, false, true, false, true, true, true, true, true, false, true, false, true, false, true, false, true, true, false, false, false, true, false, true, true, false, true, true, true, false, true, false, true, true, true, false, false, false, false, true, false, false, false, false, false, true, false, true, false, true, true, false, true, false, false, true, false, false, false, false, true, false, true, false, true, true, false, true, false, true, true, true, false, false, true, true, true, true, true, true, false, false, false, false, true, false, false, false, true, true, true, false, false, false, true, false, true, true]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, true, false, true, false, false, true, false, true, true, false, false, true, false, true, false, false, true, false, false, true, false, true, true, true, true, true, false, true, false, true, false, true, false, true, true, false, false, false, true, false, true, true, false, true, true, true, false, true, false, true, true, true, false, false, false, false, true, false, false, false, false, false, true, false, true, false, true, true, false, true, false, false, true, false, false, false, false, true, false, true, false, true, true, false, true, false, true, true, true, false, false, false, true, true, true, true, true, true, false, false, false, false, true, false, false, false, false, true, true, true, false, false, false, true, true, false, true, false, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, true, false, true, false, false, true, false, true, true, false, false, true, false, true, false, false, true, false, false, true, false, true, true, true, true, true, false, true, false, true, false, true, false, true, true, false, false, false, true, false, true, true, false, true, true, true, false, true, false, true, true, true, false, false, false, false, true, false, false, false, false, false, true, false, true, false, true, true, false, true, false, false, true, false, false, false, false, true, false, true, false, true, true, false, true, false, true, true, true, false, false, false, true, true, true, true, true, true, false, false, false, false, true, false, false, false, false, true, true, true, false, false, true, true, true, false, true, false, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, false, true, true, true, false, true, true, true, false, true, false, true, true, false, true, false, true, true, false, true, true, false, true, false, true, false, false, false, true, true, false, true, true, true, false, true, false, true, false, true, true, true, false, true, false, true, false, false, false, true, true, true, false, true, true, false, false, false, false, false, false, true, false, true, true, true, true, false, true, true, true, false, true, false, false, false, true, false, false, false, false, false, false, true, false, true, true, true, false, false, true, true, true, false, true, true, false, false, false, false, false, true, true, true, true, false, false, true, false, true, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, false, true, true, true, false, true, true, true, false, true, false, true, true, false, true, false, true, true, false, true, true, false, true, false, true, false, false, false, true, true, false, true, true, true, false, true, false, true, false, true, true, true, false, true, false, true, false, false, false, true, true, true, false, true, true, false, false, false, false, false, false, true, false, true, true, true, true, false, true, true, true, false, true, false, false, false, true, false, false, false, false, false, false, true, false, true, true, true, false, true, false, true, true, true, false, true, true, false, false, false, false, false, true, true, true, true, true, false, false, true, false, true, true, true, true, true, false, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, true, false, true, true, true, false, true, true, true, false, true, false, true, true, false, true, false, true, true, false, true, true, false, true, false, true, false, false, false, true, true, false, true, true, true, false, true, false, true, false, true, true, true, false, true, false, true, false, false, false, true, true, true, false, true, true, false, false, false, false, true, false, true, false, true, true, true, true, false, true, true, true, false, true, false, false, false, true, false, false, false, false, false, false, true, false, true, true, true, false, true, false, true, true, true, false, true, true, false, false, false, false, false, true, true, true, true, true, false, false, true, false, true, true, true, true, true, false, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, true, false, true, false, true, false, true, true, false, true, false, false, false, true, true, false, false, false, false, false, false, false, true, true, false, false, false, true, true, false, true, true, false, true, true, true, true, true, true, true, true, true, true, true, false, true, false, true, true, true, false, false, false, true, true, false, true, false, true, false, true, true, true, true, true, false, true, true, true, false, true, false, true, true, false, true, false, false, false, true, true, false, false, false, false, true, true, false, false, false, true, true, false, true, true, false, false, true, false, false, true, false, true, true, true, false, true, true, false, false, true, true, false, false, true, true]);
            let encoded = BinVector::from_bools(&[false, true, false, true, true, false, true, false, true, false, true, true, false, true, false, false, false, true, true, false, false, false, false, false, false, false, true, true, false, false, false, true, true, false, true, true, false, true, true, true, true, true, true, true, true, true, true, true, false, true, false, true, true, true, false, false, false, true, true, false, true, false, true, false, true, true, true, true, true, false, true, true, true, false, true, false, true, true, false, true, false, false, false, true, true, false, false, false, false, true, true, false, false, false, true, true, true, false, true, true, false, false, true, false, false, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, false, true, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, true, false, true, false, true, false, true, true, false, true, false, false, false, true, true, true, false, false, false, false, false, false, true, true, false, false, false, true, true, false, true, true, false, true, true, true, true, true, true, true, true, true, true, true, false, true, false, true, true, true, false, false, false, true, true, false, true, false, true, false, true, true, true, true, true, false, true, true, true, false, true, false, true, true, false, true, false, false, false, true, true, false, false, false, false, true, true, false, false, false, true, true, true, false, true, true, false, false, true, false, false, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, false, true, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, false, false, false, true, false, false, false, false, true, true, true, false, false, false, false, true, false, false, false, true, false, false, true, false, false, false, false, true, true, true, true, false, false, false, false, true, false, true, true, true, true, false, true, true, true, true, false, true, false, true, false, false, false, false, false, false, false, false, true, false, false, true, false, true, false, false, true, true, true, true, false, false, true, false, false, false, false, false, false, false, true, true, false, true, false, false, false, false, true, true, false, true, true, true, true, true, false, false, true, true, false, true, true, false, true, false, false, true, true, false, false, true, false, true, true, false]);
            let encoded = BinVector::from_bools(&[false, true, false, true, false, false, false, true, false, false, false, false, true, true, true, false, false, false, false, true, false, false, false, true, false, false, true, false, false, false, false, true, true, true, true, false, false, false, false, true, false, true, true, true, true, false, true, true, true, true, false, true, false, true, false, false, false, false, false, false, false, false, true, false, false, true, false, true, false, false, true, true, true, true, false, false, true, false, false, false, false, false, false, false, true, true, false, true, false, false, false, false, true, true, false, false, true, true, true, true, true, false, false, true, true, false, true, true, false, true, false, false, false, true, true, false, false, true, false, false, true, true, false, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, false, false, false, true, false, false, false, false, true, true, true, false, false, false, false, true, false, false, false, true, false, false, true, false, false, false, false, true, true, true, true, false, false, false, false, true, false, true, true, true, true, false, true, true, true, true, false, true, false, true, false, false, false, false, false, false, false, false, true, false, false, true, false, true, false, false, true, true, true, true, false, false, true, false, false, false, false, false, false, false, true, true, false, true, false, false, false, true, true, true, false, false, true, true, true, true, true, false, false, true, true, false, true, true, false, true, false, false, false, true, true, false, false, true, false, false, true, true, false, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, true, true, true, true, true, false, true, true, false, true, true, false, false, false, true, false, true, false, false, true, true, true, false, false, true, true, true, false, true, true, true, false, true, true, false, false, true, true, false, true, false, false, true, true, false, false, true, true, false, false, true, true, true, true, false, false, true, true, false, false, false, false, false, true, true, false, true, false, false, true, true, false, true, false, true, false, false, true, true, false, true, false, true, true, false, false, true, true, true, false, true, true, true, false, false, false, true, false, true, true, false, true, true, false, false, false, false, false, true, true, true, false, false, false, false]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, true, true, true, true, true, false, true, true, false, true, true, false, false, false, true, false, true, false, false, true, true, true, false, false, true, true, true, false, true, true, true, false, true, true, false, false, true, true, false, true, false, false, true, true, false, false, true, true, false, false, true, true, true, true, false, false, true, true, false, false, false, false, false, true, true, false, true, false, false, true, true, false, true, false, true, false, false, true, true, false, true, false, true, true, false, false, true, true, true, false, false, true, true, true, false, false, false, true, false, true, true, false, true, true, false, false, false, false, false, false, true, true, true, true, false, false, false, false, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, true, true, true, true, true, true, false, true, true, false, true, true, false, false, false, true, false, true, false, false, true, true, true, false, false, true, true, true, false, true, true, true, false, true, true, false, false, true, true, false, true, false, false, true, true, false, false, true, true, false, false, true, true, true, true, false, false, true, true, false, false, false, false, false, true, true, false, true, false, false, true, true, false, true, false, true, false, false, true, true, false, true, false, true, true, false, false, true, true, true, false, false, true, true, true, false, false, false, true, false, true, true, false, true, true, false, false, false, false, false, false, true, false, true, true, false, false, false, false, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, true, false, false, false, true, true, true, true, true, true, true, true, true, true, true, false, false, true, false, false, false, false, true, true, false, false, false, false, false, false, false, false, false, true, true, false, false, true, true, true, true, true, false, true, true, false, false, false, true, true, true, true, false, false, true, true, false, false, false, false, false, false, true, false, true, true, true, false, false, true, true, false, true, false, true, false, true, false, false, true, true, true, false, false, false, false, true, false, false, true, false, true, false, false, false, false, false, false, true, false, true, false, false, false, true]);
            let encoded = BinVector::from_bools(&[false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, true, false, false, false, true, true, true, true, true, true, true, true, true, true, true, false, false, true, false, false, false, false, true, true, false, false, false, false, false, false, false, false, false, true, true, false, false, true, true, true, true, true, false, true, true, false, false, false, true, true, true, true, false, false, true, true, false, false, false, false, false, false, true, false, true, true, true, false, false, true, true, false, true, false, true, false, true, false, false, true, true, true, true, false, false, false, false, true, false, false, true, false, true, false, false, false, false, false, false, false, true, false, true, false, false, false, false, true, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, true, false, false, false, true, true, true, true, true, true, true, false, true, true, true, false, false, true, false, false, false, false, true, true, false, false, false, false, false, false, false, false, false, true, true, false, false, true, true, true, true, true, false, true, true, false, false, false, true, true, true, true, false, false, true, true, false, false, false, false, false, false, true, false, true, true, true, false, false, true, true, false, true, false, true, false, true, false, false, true, true, true, true, false, false, false, false, true, false, false, true, false, true, false, false, false, false, false, false, false, true, false, true, false, false, false, false, true, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, false, false, true, true, true, false, true, false, true, false, false, false, false, false, false, true, false, false, false, false, true, false, false, false, false, false, false, false, true, true, false, false, false, true, false, true, false, false, false, false, true, true, true, false, true, false, true, true, true, true, true, true, false, false, false, true, false, false, false, false, false, true, false, false, true, false, true, false, true, true, true, false, true, false, false, false, true, true, true, false, true, false, true, false, true, true, false, false, true, true, false, false, false, false, false, true, false, false, false, false, true, false, true, false, false, false, true, true, true, true, false, true, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, false, false, false, true, true, true, false, true, false, true, false, false, false, false, false, false, true, false, false, false, false, true, false, false, false, false, false, false, false, true, true, false, false, false, true, false, true, false, false, false, false, true, true, true, false, true, false, true, true, true, true, true, true, false, false, false, true, false, false, false, false, false, true, false, false, true, false, true, false, true, true, true, false, true, false, false, false, true, true, true, false, true, false, true, false, true, true, false, false, true, true, true, false, false, false, false, false, true, false, false, false, false, true, false, true, false, false, false, false, true, true, true, true, false, true, true, false, true, false, false, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, false, false, true, true, true, false, true, false, true, false, false, false, false, false, false, true, false, false, false, false, true, false, false, false, false, false, false, false, true, true, false, false, false, true, false, true, false, false, false, false, true, true, true, false, true, false, true, true, true, true, true, true, false, false, false, true, false, false, false, false, false, true, false, false, true, false, true, false, true, false, true, false, true, false, false, false, true, true, true, false, true, false, true, false, true, true, false, false, true, true, true, false, false, false, false, false, true, false, false, false, false, true, false, true, false, false, false, false, true, true, true, true, false, true, true, false, true, false, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, true, false, true, true, true, true, false, true, false, false, false, true, false, true, true, true, true, true, true, true, false, false, true, false, true, false, true, false, true, false, false, true, true, true, false, true, false, true, false, false, false, false, true, true, false, false, true, false, false, false, true, false, true, true, false, true, true, true, true, true, true, false, true, false, false, true, true, false, false, false, false, false, true, true, false, false, true, true, true, true, true, false, false, true, true, true, false, false, true, true, true, false, true, true, true, false, false, true, false, true, true, true, true, false, false, false, true, true, false, false, false, false, true, false, true, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, true, false, true, true, true, true, false, true, false, false, false, true, false, true, true, true, true, true, true, true, false, false, true, false, true, false, true, false, true, false, false, true, true, true, false, true, false, true, false, false, false, false, true, true, false, false, true, false, false, false, true, false, true, true, false, true, true, true, true, true, true, false, true, false, false, true, true, false, false, false, false, false, true, true, false, false, true, true, true, true, true, false, false, true, true, true, false, false, true, true, true, true, false, true, true, true, false, false, true, false, true, true, true, true, false, false, false, false, true, true, false, false, false, false, false, true, false, true, true, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, true, false, true, true, true, true, false, true, false, false, false, true, false, true, true, true, true, true, true, true, false, false, true, false, true, false, true, false, true, false, false, true, true, true, false, true, false, true, false, false, false, false, true, true, false, false, true, false, false, false, true, false, true, true, false, true, true, true, true, true, true, false, true, false, false, true, true, false, false, false, false, false, true, true, false, false, true, true, true, true, true, false, false, true, true, true, false, false, true, true, true, true, false, true, true, true, false, false, true, false, true, true, true, true, false, false, false, false, true, true, false, false, false, false, false, true, false, false, true, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, false, false, false, true, false, false, false, false, false, false, true, true, false, false, false, true, true, false, false, false, true, true, true, false, true, false, true, false, true, false, true, true, false, true, false, true, true, false, true, true, true, true, false, false, true, true, true, true, true, true, true, true, false, false, true, false, true, true, false, true, false, false, false, true, false, true, false, false, true, false, true, true, true, false, true, false, true, true, false, true, false, true, true, false, false, false, true, true, false, false, true, true, false, true, true, true, true, true, true, false, true, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, false, false, false, true, false, false, false, false, false, false, true, true, false, false, false, true, true, false, false, false, true, true, true, false, true, false, true, false, true, false, true, true, false, true, false, true, true, false, true, true, true, true, false, false, true, true, true, true, true, true, true, true, false, false, true, false, true, true, false, true, false, false, false, true, false, true, false, false, true, false, true, true, true, false, true, false, true, true, false, true, false, true, true, false, false, false, true, true, false, false, false, true, true, false, true, true, true, true, true, true, false, true, true, false, false, false, true, false, false, false, false, true, false, false, true, false, false, false, false, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, false, false, false, true, false, false, false, false, false, false, true, true, false, false, false, true, true, false, false, false, true, true, true, false, true, false, true, true, true, false, true, true, false, true, false, true, true, false, true, true, true, true, false, false, true, true, true, true, true, true, true, true, false, false, true, false, true, true, false, true, false, false, false, true, false, true, false, false, true, false, true, true, true, false, true, false, true, true, false, true, false, true, true, false, false, false, true, true, false, false, false, true, true, false, true, true, true, true, true, true, false, true, true, false, false, false, true, false, false, false, false, true, false, false, true, false, false, false, false, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, true, true, false, false, true, false, true, false, false, true, false, true, false, true, false, true, false, false, false, true, false, true, false, false, true, true, false, false, true, false, false, true, true, false, true, false, false, true, true, true, true, true, true, false, true, false, false, false, true, false, false, false, false, true, true, false, false, false, false, true, true, true, false, true, false, true, true, true, false, true, true, false, true, true, false, false, true, false, true, true, true, false, true, true, true, true, true, true, true, false, true, false, true, false, true, true, true, false, false, false, false, true, false, true, false, false, false, true, false, false, false, false, true, true, true, false]);
            let encoded = BinVector::from_bools(&[true, false, false, true, true, true, false, false, true, false, true, false, false, true, false, true, false, true, false, true, false, false, false, true, false, true, false, false, true, true, false, false, true, false, false, true, true, false, true, false, false, true, true, true, true, true, true, false, true, false, false, false, true, false, false, false, false, true, true, false, false, false, false, true, true, true, false, true, false, true, true, true, false, true, true, false, true, true, false, false, true, false, true, true, true, false, true, true, true, true, true, true, true, false, false, true, false, true, false, true, true, true, false, false, false, false, true, false, true, false, true, false, false, true, false, false, false, false, false, true, true, true, false, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, true, true, false, false, true, false, true, false, false, true, false, true, false, true, false, true, false, false, false, true, false, true, false, false, true, true, true, false, true, false, false, true, true, false, true, false, false, true, true, true, true, true, true, false, true, false, false, false, true, false, false, false, false, true, true, false, false, false, false, true, true, true, false, true, false, true, true, true, false, true, true, false, true, true, false, false, true, false, true, true, true, false, true, true, true, true, true, true, true, false, false, true, false, true, false, true, true, true, false, false, false, false, true, false, true, false, true, false, false, true, false, false, false, false, false, true, true, true, false, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, false, false, false, false, true, false, true, true, true, false, false, true, true, false, true, true, true, false, true, true, false, false, false, false, false, true, false, false, true, false, true, true, false, true, false, false, false, true, false, true, false, true, false, true, false, true, false, false, true, true, false, true, true, true, true, false, false, false, false, true, false, true, true, false, true, false, true, false, false, false, true, true, true, false, true, false, false, false, false, true, false, true, true, false, false, false, false, true, false, false, true, true, true, false, true, false, false, false, false, true, true, false, false, false, true, false, true, false, false, true, true, false, false, true, false, true]);
            let encoded = BinVector::from_bools(&[true, false, false, true, false, false, false, false, true, false, true, true, true, false, false, true, true, false, true, true, true, false, true, true, false, false, false, false, false, true, false, false, true, false, true, true, false, true, false, false, false, true, false, true, false, true, false, true, false, true, false, false, true, true, false, true, true, true, true, false, false, false, false, true, false, true, true, false, true, false, true, false, false, false, true, true, true, false, true, false, false, false, false, true, false, true, true, false, false, false, false, true, false, false, false, true, true, true, false, true, false, false, false, false, true, true, false, false, false, true, false, false, true, false, false, true, true, false, false, false, true, false, false, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, false, false, false, false, true, false, true, true, true, false, false, true, true, false, true, true, true, false, true, true, false, false, false, false, false, true, false, false, true, false, true, true, false, true, false, false, false, true, false, true, false, true, false, false, false, true, false, false, true, true, false, true, true, true, true, false, false, false, false, true, false, true, true, false, true, false, true, false, false, false, true, true, true, false, true, false, false, false, false, true, false, true, true, false, false, false, false, true, false, false, false, true, true, true, false, true, false, false, false, false, true, true, false, false, false, true, false, false, true, false, false, true, true, false, false, false, true, false, false, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, true, false, false, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, true, false, true, false, true, false, true, false, false, false, true, true, true, true, true, true, false, false, false, false, false, true, true, true, false, true, false, true, false, false, false, false, true, false, true, false, true, true, true, true, true, false, true, true, false, true, true, false, false, true, false, true, true, false, true, false, true, true, false, true, false, false, false, true, false, true, true, true, true, false, false, false, false, false, false, true, false, false, true, true, true, true, true, true, false, true, false, false, true, false]);
            let encoded = BinVector::from_bools(&[true, true, true, false, true, false, false, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, true, false, true, false, true, false, true, false, false, false, true, true, true, true, true, true, false, false, false, false, false, true, true, true, false, true, false, true, false, false, false, false, true, false, true, false, true, true, true, true, true, false, true, true, false, true, true, false, false, true, false, true, true, false, true, false, true, true, false, true, false, false, false, true, true, false, true, true, true, true, false, false, false, false, false, false, true, false, false, true, true, true, true, true, true, true, false, true, true, false, false, true, true, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, true, false, false, false, false, false, true, false, false, false, true, false, true, false, false, true, false, false, true, false, false, false, false, false, false, false, true, false, true, false, true, false, true, false, false, false, true, true, true, true, true, true, false, false, false, false, false, true, true, true, false, true, false, true, false, false, false, false, true, false, true, false, true, true, true, true, true, false, true, true, false, true, true, false, false, true, false, true, true, false, true, false, true, true, false, true, false, false, false, true, true, false, true, true, true, true, false, false, false, false, false, false, true, false, false, true, true, true, true, true, true, true, false, true, true, false, false, true, true, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, false, false, false, true, true, false, true, false, true, false, true, true, false, true, false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, true, false, true, true, false, false, true, false, true, false, false, true, true, true, false, false, false, false, false, true, true, false, true, false, false, false, true, true, false, false, true, false, true, false, true, true, false, false, true, false, false, true, true, false, true, false, false, true, true, false, false, false, false, true, true, true, true, false, true, true, false, true, false, true, false, true, true, false, false, false, true, false, false, true, true, true, false, false, false, true, true, true, true, false, false, false, true]);
            let encoded = BinVector::from_bools(&[false, true, false, true, false, false, false, true, true, false, true, false, true, false, true, true, false, true, false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, true, false, true, true, false, false, true, false, true, false, false, true, true, true, false, false, false, false, false, true, true, false, true, false, false, false, true, true, false, false, true, false, true, false, true, true, false, false, true, false, false, true, true, false, true, false, false, true, true, false, false, false, false, true, true, true, true, false, true, true, false, false, true, false, true, false, true, true, false, false, false, true, false, false, true, true, true, false, false, false, false, true, true, true, true, true, false, false, false, false, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, false, false, false, true, true, false, true, false, true, false, true, true, false, true, false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, true, false, true, true, false, false, true, false, true, false, false, true, true, true, false, false, false, false, false, true, true, false, true, false, false, false, true, true, false, false, true, false, true, false, true, true, false, false, true, false, false, true, true, false, true, false, false, true, true, false, false, false, false, true, true, true, true, false, true, true, true, false, true, false, true, false, true, true, false, false, false, true, false, false, true, true, true, false, false, false, false, true, true, true, true, true, false, false, false, false, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, true, true, false, true, false, true, true, true, true, true, false, false, false, true, true, false, true, true, false, false, false, true, false, true, true, false, false, true, false, false, true, true, true, true, false, true, false, true, false, false, false, true, false, false, true, false, true, false, true, true, true, false, false, false, false, false, false, false, true, false, false, true, true, true, true, false, false, false, false, true, true, true, false, false, false, true, false, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, false, false, false, false, false, true, false, true, false, true, false, false, true, true, true, true, true, false, true, false, true, true, true]);
            let encoded = BinVector::from_bools(&[false, true, true, true, true, true, false, true, false, true, true, true, true, true, false, false, false, true, true, false, true, true, false, false, false, true, false, true, true, false, false, true, false, false, true, true, true, true, false, true, false, true, false, false, false, true, false, false, true, false, true, false, true, true, true, false, false, false, false, false, false, false, true, false, false, true, true, true, true, false, false, false, false, true, true, true, false, false, false, true, false, true, false, false, false, false, false, false, false, true, true, true, true, true, false, true, true, true, false, false, false, false, false, true, false, true, false, true, false, false, false, true, true, true, true, true, false, true, false, false, true, true, true, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, true, true, false, true, false, true, true, true, true, true, false, false, false, true, true, false, true, true, false, false, false, true, false, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, false, false, true, false, false, true, false, true, false, true, true, true, false, false, false, false, false, false, false, true, false, false, true, true, true, true, false, false, false, false, true, true, true, false, false, false, true, false, true, false, false, false, false, false, false, false, true, true, true, true, true, false, true, true, true, false, false, false, false, false, true, false, true, false, true, false, false, false, true, true, true, true, true, false, true, false, false, true, true, true, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, false, true, false, true, false, false, true, false, false, true, false, false, true, false, false, true, false, false, false, true, true, true, false, true, true, true, false, false, false, true, true, true, true, false, true, false, false, false, false, false, true, true, false, true, true, false, false, true, false, true, false, true, false, true, true, true, false, false, true, true, false, true, false, true, false, true, false, false, true, true, true, true, true, true, true, false, false, false, false, true, true, true, false, false, false, false, true, false, true, true, true, true, true, true, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, false, true, false, true, false, false, true, false, false, true, false, false, true, false, false, true, false, false, false, true, true, true, false, true, true, true, false, false, false, true, true, true, true, false, true, false, false, false, false, false, true, true, false, true, true, false, false, true, false, true, false, true, false, true, true, true, false, false, true, true, false, true, false, true, false, true, false, false, true, true, true, true, true, true, true, true, false, false, false, false, true, true, true, false, false, false, false, true, false, true, true, true, true, true, true, true, false, true, false, true, false, true, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, false, true, false, true, false, false, true, false, false, true, false, false, true, false, false, true, false, true, false, true, true, true, false, true, true, true, false, false, false, true, true, true, true, false, true, false, false, false, false, false, true, true, false, true, true, false, false, true, false, true, false, true, false, true, true, true, false, false, true, true, false, true, false, true, false, true, false, false, true, true, true, true, true, true, true, true, false, false, false, false, true, true, true, false, false, false, false, true, false, true, true, true, true, true, true, true, false, true, false, true, false, true, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, false, false, false, true, false, false, false, false, true, true, false, false, false, true, true, false, true, false, true, true, true, false, true, false, true, true, false, false, false, false, false, true, true, false, true, true, true, false, false, false, false, true, true, false, false, false, false, false, false, true, false, true, true, false, false, false, false, true, true, true, true, true, true, true, true, true, false, true, true, false, false, true, true, true, false, false, true, false, false, false, false, true, false, true, true, false, true, false, false, true, true, true, false, true, true, true, true, true, false, false, false, false, true, true, false, true, true, false, false, true, true, false, false, false, true, true]);
            let encoded = BinVector::from_bools(&[false, false, false, false, false, false, false, true, false, false, false, false, true, true, false, false, false, true, true, false, true, false, true, true, true, false, true, false, true, true, false, false, false, false, false, true, true, false, true, true, true, false, false, false, false, true, true, false, false, false, false, false, false, true, false, true, true, false, false, false, false, true, true, true, true, true, true, true, true, true, false, true, true, false, false, true, true, true, false, false, true, false, false, false, false, true, false, true, true, false, true, false, false, true, false, true, true, false, true, true, true, true, true, false, false, false, false, true, true, false, true, true, true, false, false, true, true, false, false, false, false, true, false, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, false, false, false, true, false, false, false, false, true, true, false, false, false, true, true, false, true, false, true, true, true, false, true, false, true, true, false, false, false, false, false, true, true, false, true, true, true, false, false, false, false, true, true, false, false, false, false, false, false, true, false, true, true, false, false, false, false, true, true, true, true, true, true, true, true, true, false, true, true, false, false, true, true, true, false, false, true, false, false, false, false, true, false, true, true, false, true, false, false, true, false, true, true, false, true, true, false, true, true, false, false, false, false, true, true, false, true, true, true, false, false, true, true, false, false, false, false, true, false, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, false, true, true, true, false, true, true, false, false, false, false, true, false, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, false, false, true, true, false, false, true, false, false, false, false, false, true, true, true, true, false, false, false, true, true, true, false, true, false, false, false, false, false, true, false, false, true, true, true, false, true, false, true, true, false, true, true, false, true, false, false, true, false, false, true, false, false, true, false, false, false, false, true, false, false, true, true, true, false, true, false, true, true, true, false, false, true, false, true, true, false, true, true, true, true, false, false, false, true, true, true, true]);
            let encoded = BinVector::from_bools(&[true, false, false, true, false, true, true, true, false, true, true, false, false, false, false, true, false, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, false, false, true, true, false, false, true, false, false, false, false, false, true, true, true, true, false, false, false, true, true, true, false, true, false, false, false, false, false, true, false, false, true, true, true, false, true, false, true, true, false, true, true, false, true, false, false, true, false, false, true, false, false, true, false, false, false, false, true, false, false, true, true, true, true, false, true, false, true, true, true, false, false, true, false, true, true, false, false, true, true, true, true, false, false, false, false, true, true, true, true, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, false, true, true, true, false, true, true, false, false, false, false, true, false, true, true, true, true, true, false, true, false, true, true, true, true, true, true, true, false, false, true, true, false, false, true, false, false, false, false, false, true, true, true, true, false, false, false, true, true, true, false, true, false, false, false, false, false, true, false, false, true, true, true, false, true, false, true, true, false, true, true, false, true, false, false, true, false, false, true, false, false, true, false, false, false, false, true, false, false, true, true, true, true, false, true, false, true, true, true, false, false, true, false, true, true, false, false, true, true, true, true, false, false, false, false, true, true, true, true, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, true, true, false, false, false, false, false, false, true, true, true, false, false, true, false, false, false, true, true, true, false, false, true, true, false, true, false, false, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, true, true, false, true, false, false, true, false, true, false, false, true, true, true, false, true, true, true, true, true, false, false, false, true, true, true, false, false, false, true, false, false, false, true, false, false, true, true, false, false, false, false, false, false, true, true, false, true, true, true, false, true, false, false, false, false, true, true, false, false, true, false, false, true, true, true, false, true, false, true, true, true, true]);
            let encoded = BinVector::from_bools(&[false, true, false, false, true, true, false, false, false, false, false, false, true, true, true, false, false, true, false, false, false, true, true, true, false, false, true, true, false, true, false, false, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, true, true, false, true, false, false, true, false, true, false, false, true, true, true, false, true, true, true, true, true, false, false, false, true, true, true, false, false, false, true, false, false, false, true, false, false, true, true, false, false, false, false, false, false, true, true, false, false, true, true, true, false, true, false, false, false, false, true, true, false, false, true, false, true, false, true, true, true, false, true, false, false, true, true, true, true, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, true, true, false, false, false, false, false, false, true, true, true, false, false, true, false, false, false, true, true, true, false, false, true, true, false, true, false, false, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, true, true, false, true, false, false, true, false, true, false, false, true, true, true, false, true, true, true, true, true, false, false, false, true, true, true, false, false, false, true, false, false, false, true, false, false, true, true, false, false, false, false, false, false, true, true, false, false, true, true, true, false, true, false, false, false, false, true, true, false, false, true, true, true, false, true, true, true, false, true, false, false, true, true, true, true, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, false, true, true, true, false, true, false, true, true, true, true, false, true, false, false, false, false, true, false, true, false, false, false, false, false, true, true, true, true, true, true, true, true, true, false, false, false, false, false, true, false, false, true, true, true, true, true, false, true, false, true, true, true, false, false, true, false, false, true, true, true, true, true, false, false, true, false, true, false, false, true, false, false, true, true, true, false, true, false, true, true, false, false, false, false, false, true, false, false, true, true, false, true, false, true, false, false, false, true, true, true, false, true, true, true, false, false, true, false, false, true, false, true, true, true, true]);
            let encoded = BinVector::from_bools(&[false, true, false, false, false, true, true, true, false, true, false, true, true, true, true, false, true, false, false, false, false, true, false, true, false, false, false, false, false, true, true, true, true, true, true, true, true, true, false, false, false, false, false, true, false, false, true, true, true, true, true, false, true, false, true, true, true, false, false, true, false, false, true, true, true, true, true, false, false, true, false, true, false, false, true, false, false, true, true, true, false, true, false, true, true, false, false, false, false, false, true, false, false, true, false, true, false, true, false, true, false, false, false, true, true, true, false, true, true, true, true, false, false, true, false, false, true, false, true, true, true, true, false, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, false, true, true, true, false, true, false, true, true, true, true, false, true, false, false, false, false, true, false, true, false, false, false, false, false, true, true, false, true, true, true, true, true, true, false, false, false, false, false, true, false, false, true, true, true, true, true, false, true, false, true, true, true, false, false, true, false, false, true, true, true, true, true, false, false, true, false, true, false, false, true, false, false, true, true, true, false, true, false, true, true, false, false, false, false, false, true, false, false, true, false, true, false, true, false, true, false, false, false, true, true, true, false, true, true, true, true, false, false, true, false, false, true, false, true, true, true, true, false, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, false, false, false, true, false, false, true, false, false, true, false, true, false, true, true, true, false, false, true, false, false, false, false, true, true, true, true, true, true, false, true, true, false, true, true, true, true, false, false, false, true, false, true, true, false, true, false, false, false, true, false, true, true, false, false, true, true, false, false, true, false, true, false, false, false, false, true, true, true, false, true, true, true, false, true, true, false, false, true, false, true, false, true, true, true, true, false, false, false, false, true, false, false, true, false, true, false, false, true, true, true, true, true, false, false, false, true, true, true, true, true, false, false, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, false, false, false, true, false, false, true, false, false, true, false, true, false, true, true, true, false, false, true, false, false, false, false, true, true, true, true, true, true, false, true, true, false, true, true, true, true, false, false, false, true, false, true, true, false, true, false, false, false, true, false, true, true, false, false, true, true, false, false, true, false, true, false, false, false, false, true, true, true, false, true, true, true, false, true, true, false, false, true, false, true, false, true, true, true, true, false, false, false, false, false, true, false, false, true, false, true, false, false, true, true, true, true, true, false, false, false, false, true, true, true, true, true, true, false, false, false, true, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, true, false, false, false, true, false, false, true, false, false, true, false, true, false, true, true, true, false, false, true, false, false, false, false, true, true, true, true, true, true, false, true, true, false, true, true, true, true, false, false, false, true, false, true, true, false, true, false, false, true, true, false, true, true, false, false, true, true, false, false, true, false, true, false, false, false, false, true, true, true, false, true, true, true, false, true, true, false, false, true, false, true, false, true, true, true, true, false, false, false, false, false, true, false, false, true, false, true, false, false, true, true, true, true, true, false, false, false, false, true, true, true, true, true, true, false, false, false, true, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, true, false, false, true, false, false, true, true, false, false, false, false, false, true, true, false, true, true, false, true, false, false, true, true, true, true, true, false, true, true, true, true, true, false, false, true, false, false, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, false, false, false, false, false, false, true, true, false, true, false, false, true, true, false, false, true, false, true, false, false, true, false, false, true, false, true, false, false, true, false, false, true, false, true, false, false, true, false, true, false, true, true, true, true, false, true, false, false, false, true, true, true, true, true, true, false, false, true, false, false, true, false]);
            let encoded = BinVector::from_bools(&[false, false, false, true, true, false, false, true, false, false, true, true, false, false, false, false, false, true, true, false, true, true, false, true, false, false, true, true, true, true, true, false, true, true, true, true, true, false, false, true, false, false, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, false, false, false, false, false, false, true, true, false, true, false, false, true, true, false, false, true, false, true, false, false, true, false, false, true, false, true, false, false, true, false, false, true, false, true, false, false, true, true, false, true, false, true, true, true, true, false, true, false, false, false, true, true, true, true, true, true, true, false, false, true, true, false, false, true, false, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, true, false, false, true, false, false, true, true, false, false, false, false, false, true, true, false, true, true, false, true, false, false, true, true, true, true, true, false, true, true, true, true, true, false, false, true, false, false, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, false, false, false, false, false, false, true, true, false, true, false, false, true, true, false, false, true, false, true, false, false, true, false, false, true, false, true, false, false, true, false, false, true, false, true, false, false, true, true, false, true, false, true, true, true, true, false, true, false, false, false, true, true, true, true, true, true, true, false, false, true, true, false, false, true, false, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, true, true, true, false, false, true, true, false, true, true, false, false, false, true, true, true, true, false, true, false, false, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, false, true, false, true, true, true, true, false, false, false, true, true, true, true, false, true, true, true, false, true, false, false, true, true, true, true, true, false, false, true, false, false, true, false, true, false, false, false, true, true, false, false, true, true, false, true, true, true, false, false, true, true, true, true, false, false, true, false, true, false, true, true, true, false, false, true, true, false, false, false, false, false, true, false, true, true, true, true, true, true]);
            let encoded = BinVector::from_bools(&[true, false, false, true, true, true, true, false, false, true, true, false, true, true, false, false, false, true, true, true, true, false, true, false, false, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, false, true, false, true, true, true, true, false, false, false, true, true, true, true, false, true, true, true, false, true, false, false, true, true, true, true, true, false, false, true, false, false, true, false, true, false, false, false, true, true, false, false, true, true, false, true, true, true, false, false, true, true, true, true, true, false, false, true, false, true, false, true, true, true, false, false, true, true, false, false, false, false, false, false, true, false, true, true, true, true, true, true, true, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, true, true, true, false, false, true, true, false, true, true, false, false, false, true, true, true, true, false, true, false, false, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, false, true, true, true, true, true, true, false, false, false, true, true, true, true, false, true, true, true, false, true, false, false, true, true, true, true, true, false, false, true, false, false, true, false, true, false, false, false, true, true, false, false, true, true, false, true, true, true, false, false, true, true, true, true, true, false, false, true, false, true, false, true, true, true, false, false, true, true, false, false, false, false, false, false, true, false, true, true, true, true, true, true, true, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, true, false, true, false, true, false, false, false, true, true, false, true, true, false, true, false, true, true, false, false, false, true, true, false, false, true, false, true, false, true, true, false, false, true, true, false, true, false, true, true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, false, false, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, true, true, false, false, false, false, false, true, true, false, true, true, true, true, false, false, false, true, false, true, true, true, false, true, true, true, true, false, false, true, true, true, false, true, false, false, true, false, false, true, false, true, true]);
            let encoded = BinVector::from_bools(&[true, true, false, true, true, false, true, false, true, false, false, false, true, true, false, true, true, false, true, false, true, true, false, false, false, true, true, false, false, true, false, true, false, true, true, false, false, true, true, false, true, false, true, true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, false, false, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, true, true, false, false, false, false, false, true, true, false, true, true, true, true, false, false, false, true, true, false, true, true, true, false, true, true, true, true, false, false, true, true, true, true, false, true, false, false, true, false, false, true, true, false, true, false, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, true, true, true, false, true, false, false, false, true, true, false, true, true, false, true, false, true, true, false, false, false, true, true, false, false, true, false, true, false, true, true, false, false, true, true, false, true, false, true, true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, false, false, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, true, true, false, false, false, false, false, true, true, false, true, true, true, true, false, false, false, true, true, false, true, true, true, false, true, true, true, true, false, false, true, true, true, true, false, true, false, false, true, false, false, true, true, false, true, false, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, false, false, false, false, true, true, false, true, true, true, true, true, true, true, true, true, true, false, false, true, false, false, false, false, false, true, true, false, false, true, false, true, false, false, false, true, false, true, false, false, true, true, false, true, false, false, true, false, false, false, false, false, false, false, false, false, true, true, false, false, true, false, true, false, false, true, false, true, true, false, true, false, false, true, false, true, false, true, true, true, false, false, true, true, false, true, false, false, true, true, false, false, true, false, true, false, true, false, true, true, true, false, false, true, false, false, true, true, false, true, false, false, true, false, false, false]);
            let encoded = BinVector::from_bools(&[true, true, true, false, false, false, false, false, true, true, false, true, true, true, true, true, true, true, true, true, true, false, false, true, false, false, false, false, false, true, true, false, false, true, false, true, false, false, false, true, false, true, false, false, true, true, false, true, false, false, true, false, false, false, false, false, false, false, false, false, true, true, false, false, true, false, true, false, false, true, false, true, true, false, true, false, false, true, false, true, false, true, true, true, false, false, true, true, false, true, false, false, true, true, false, false, false, true, false, true, false, true, false, true, true, true, false, false, true, false, true, false, true, true, false, true, false, false, true, true, false, false, false, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, false, false, false, false, true, true, false, true, true, true, true, true, true, true, true, true, true, false, false, true, false, false, false, false, false, true, true, false, false, true, false, true, false, false, false, true, false, true, false, false, true, true, false, true, false, false, true, false, false, false, false, false, false, false, false, false, true, true, false, false, true, false, true, false, false, true, false, true, true, false, true, false, false, true, false, true, false, true, true, true, false, false, true, true, true, true, false, false, true, true, false, false, false, true, false, true, false, true, false, true, true, true, false, false, true, false, true, false, true, true, false, true, false, false, true, true, false, false, false, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, true, false, true, false, true, false, true, false, false, true, true, true, false, false, false, true, true, true, false, false, true, false, true, true, true, false, true, false, false, true, false, true, false, true, true, false, false, false, false, true, true, false, false, true, false, true, false, false, false, false, true, true, false, false, false, true, false, false, true, true, false, true, false, false, true, true, true, false, true, false, true, true, true, false, true, false, true, false, false, true, true, false, false, false, false, false, true, false, true, false, true, false, true, false, false, true, true, true, true, false, false, true, true, true, true, true, true, false, false, true, false, true, false, false, false, true]);
            let encoded = BinVector::from_bools(&[false, false, true, true, true, false, true, false, true, false, true, false, false, true, true, true, false, false, false, true, true, true, false, false, true, false, true, true, true, false, true, false, false, true, false, true, false, true, true, false, false, false, false, true, true, false, false, true, false, true, false, false, false, false, true, true, false, false, false, true, false, false, true, true, false, true, false, false, true, true, true, false, true, false, true, true, true, false, true, false, true, false, false, true, true, false, false, false, false, false, true, false, true, false, true, true, false, true, false, false, true, true, true, true, false, false, true, true, true, true, true, true, true, false, false, true, false, true, true, false, false, false, true, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, true, false, true, false, true, false, true, false, false, true, true, true, false, false, false, true, true, true, false, false, true, false, true, true, true, false, true, false, false, true, false, true, false, true, true, false, false, false, false, true, true, false, false, true, false, true, false, false, false, false, true, true, false, false, false, true, false, false, true, true, false, true, false, false, true, true, true, false, true, false, true, true, true, false, true, false, true, false, false, true, true, false, false, false, false, false, true, false, true, false, true, true, true, true, false, false, true, true, true, true, false, false, true, true, true, true, true, true, true, false, false, true, false, true, true, false, false, false, true, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, true, false, false, true, false, false, false, true, true, true, false, false, false, false, true, false, false, false, true, true, true, true, true, false, true, true, false, false, true, true, false, false, false, true, false, false, false, true, false, false, true, true, false, true, false, true, true, true, true, true, false, false, true, false, false, false, false, false, true, false, false, false, true, false, false, false, false, true, true, true, true, true, false, true, false, false, false, true, true, false, false, false, false, true, false, false, true, false, true, true, true, false, true, false, true, true, false, true, true, true, true, false, true, true, false, true, false, false, true, true, true, false, true, false, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, true, false, false, true, false, false, false, true, true, true, false, false, false, false, true, false, false, false, true, true, true, true, true, false, true, true, false, false, true, true, false, false, false, true, false, false, false, true, false, false, true, true, false, true, false, true, true, true, true, true, false, false, true, false, false, false, false, false, true, false, false, false, true, false, false, false, false, true, true, true, true, true, false, true, false, false, false, true, true, false, false, false, false, true, false, false, true, false, true, true, true, true, false, true, false, true, true, false, true, true, true, true, false, true, true, false, true, true, false, false, true, true, true, false, true, true, false, true, false, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, true, false, false, true, false, false, false, true, true, true, false, false, false, false, true, false, false, false, true, true, true, true, true, false, true, true, false, false, true, true, false, false, false, true, false, false, false, true, false, false, true, true, false, true, false, true, true, false, true, true, false, false, true, false, false, false, false, false, true, false, false, false, true, false, false, false, false, true, true, true, true, true, false, true, false, false, false, true, true, false, false, false, false, true, false, false, true, false, true, true, true, true, false, true, false, true, true, false, true, true, true, true, false, true, true, false, true, true, false, false, true, true, true, false, true, true, false, true, false, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, true, true, true, false, true, true, true, false, false, true, false, false, false, false, true, false, true, false, true, true, true, true, true, false, false, true, false, true, true, true, true, true, false, true, true, false, true, true, false, false, false, false, false, false, false, true, false, true, false, true, false, true, true, true, true, false, false, true, false, true, true, true, true, false, false, true, true, true, false, false, false, true, false, false, true, false, false, true, false, true, true, false, false, false, false, true, false, false, true, false, false, true, false, true, false, false, true, true, true, false, false, false, false, true]);
            let encoded = BinVector::from_bools(&[true, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, true, true, true, false, true, true, true, false, false, true, false, false, false, false, true, false, true, false, true, true, true, true, true, false, false, true, false, true, true, true, true, true, false, true, true, false, true, true, false, false, false, false, false, false, false, true, false, true, false, true, false, true, true, true, true, false, false, true, false, true, true, true, true, false, false, true, true, true, false, false, false, true, false, false, true, false, false, true, false, false, true, true, false, false, false, false, true, false, false, true, false, false, true, false, false, true, false, false, true, true, true, false, true, false, false, false, false, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, true, true, true, false, true, true, true, false, false, true, false, false, false, false, true, false, true, false, true, true, true, true, true, false, false, true, false, true, true, true, true, true, false, true, true, false, true, true, false, false, false, false, false, false, false, true, false, true, false, true, false, true, true, true, true, false, false, true, false, true, true, true, true, false, false, true, true, true, false, false, false, true, false, false, true, false, false, true, false, false, true, true, false, false, false, false, true, false, false, true, false, true, true, false, false, true, false, false, true, true, true, false, true, false, false, false, false, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, false, true, true, true, true, false, true, false, false, true, false, true, false, false, false, false, true, false, false, false, true, true, false, true, false, false, false, true, true, false, true, true, true, true, true, true, true, false, true, true, false, true, true, true, false, false, true, true, false, false, false, true, false, false, false, false, true, false, true, false, false, false, false, false, true, false, false, false, false, true, false, true, false, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, true, true, true, false, true, false, false, false, false, false, true, true, true, false, false, false, false, true, false, true, true, true, false, true, true, true, false]);
            let encoded = BinVector::from_bools(&[true, true, true, false, false, true, true, true, true, false, true, false, false, true, false, true, false, false, false, false, true, false, false, false, true, true, false, true, false, false, false, true, true, false, true, true, true, true, true, true, true, false, true, true, false, true, true, true, false, false, true, true, false, false, false, true, false, false, false, false, true, false, true, false, false, false, false, false, true, false, false, false, false, true, false, true, false, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, true, true, true, true, false, true, false, false, false, false, false, true, true, true, false, false, false, true, false, true, false, true, true, true, false, false, true, true, true, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, false, true, true, true, true, false, true, false, false, true, false, true, false, false, false, false, true, false, false, false, true, true, false, true, false, false, false, true, true, false, true, true, true, true, true, true, true, false, true, true, false, true, true, true, false, false, true, true, false, false, false, true, false, false, false, false, true, false, true, false, false, false, false, false, true, false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, true, true, true, true, false, true, false, false, false, false, false, true, true, true, false, false, false, true, false, true, false, true, true, true, false, false, true, true, true, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, false, false, false, true, false, true, true, false, false, false, true, true, true, false, true, false, true, false, false, false, true, false, false, false, true, false, true, true, true, true, true, false, false, false, true, false, true, false, false, true, true, true, true, false, false, true, true, true, true, true, true, false, true, true, false, false, true, false, false, true, true, false, true, true, false, false, false, false, false, false, true, true, true, true, true, false, false, true, false, true, false, false, false, true, false, false, true, true, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, false, true, true, true, true, false, true, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, false, false, false, true, false, true, true, false, false, false, true, true, true, false, true, false, true, false, false, false, true, false, false, false, true, false, true, true, true, true, true, false, false, false, true, false, true, false, false, true, true, true, true, false, false, true, true, true, true, true, true, false, true, true, false, false, true, false, false, true, true, false, true, true, false, false, false, false, false, false, true, true, true, true, true, false, false, true, false, true, false, false, false, true, false, false, true, true, true, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, false, true, true, true, true, false, false, true, false, true, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, false, false, false, true, false, true, true, false, false, false, true, true, true, false, false, false, true, false, false, false, true, false, false, false, true, false, true, true, true, true, true, false, false, false, true, false, true, false, false, true, true, true, true, false, false, true, true, true, true, true, true, false, true, true, false, false, true, false, false, true, true, false, true, true, false, false, false, false, false, false, true, true, true, true, true, false, false, true, false, true, false, false, false, true, false, false, true, true, true, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, false, true, true, true, true, false, false, true, false, true, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, false, true, false, false, true, true, true, true, false, true, true, false, false, false, false, true, false, false, true, true, true, false, false, true, false, true, true, true, false, false, true, true, true, true, false, false, false, true, true, false, false, true, true, false, false, true, false, false, false, true, true, false, true, true, true, false, false, true, false, false, true, false, false, true, true, true, true, true, false, true, true, true, true, false, false, false, true, true, true, false, true, false, false, false, false, false, true, true, false, true, false, false, true, false, true, true, false, true, true, true, false, true, false, false, false, true, true, true, true, false, true, false, false, true, false]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, false, true, false, false, true, true, true, true, false, true, true, false, false, false, false, true, false, false, true, true, true, false, false, true, false, true, true, true, false, false, true, true, true, true, false, false, false, true, true, false, false, true, true, false, false, true, false, false, false, true, true, false, true, true, true, false, false, true, false, false, true, false, false, true, true, true, true, true, false, true, true, true, true, false, false, false, true, true, true, false, true, false, false, false, false, false, true, true, false, true, true, false, false, true, false, true, true, false, true, true, true, false, true, false, false, true, false, true, true, true, true, false, true, true, false, false, true, true, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, true, false, true, false, false, true, true, true, true, false, true, true, false, false, false, false, true, false, false, true, true, true, false, false, true, false, false, true, true, false, false, true, true, true, true, false, false, false, true, true, false, false, true, true, false, false, true, false, false, false, true, true, false, true, true, true, false, false, true, false, false, true, false, false, true, true, true, true, true, false, true, true, true, true, false, false, false, true, true, true, false, true, false, false, false, false, false, true, true, false, true, true, false, false, true, false, true, true, false, true, true, true, false, true, false, false, true, false, true, true, true, true, false, true, true, false, false, true, true, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, false, false, true, false, false, false, false, true, true, true, false, true, false, false, false, true, false, false, true, false, true, true, false, false, false, false, false, false, false, false, false, true, false, true, true, true, true, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, true, false, false, true, true, false, false, true, false, true, true, true, false, false, true, false, false, true, true, false, false, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, false, true, false, false, false, true, true, true, false, true, false, false, true]);
            let encoded = BinVector::from_bools(&[true, true, false, false, false, false, true, false, false, false, false, true, true, true, false, true, false, false, false, true, false, false, true, false, true, true, false, false, false, false, false, false, false, false, false, true, false, true, true, true, true, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, true, false, false, true, true, false, false, true, false, true, true, true, false, false, true, false, false, true, true, false, false, false, true, false, true, true, false, false, false, true, false, true, false, true, false, false, true, false, true, false, false, true, true, false, false, false, true, true, true, false, false, true, false, false, true, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, false, false, true, false, false, false, false, true, true, true, false, true, false, false, false, true, false, true, true, false, true, true, false, false, false, false, false, false, false, false, false, true, false, true, true, true, true, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, true, false, false, true, true, false, false, true, false, true, true, true, false, false, true, false, false, true, true, false, false, false, true, false, true, true, false, false, false, true, false, true, false, true, false, false, true, false, true, false, false, true, true, false, false, false, true, true, true, false, false, true, false, false, true, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, false, true, true, true, false, false, true, false, false, true, true, true, false, true, true, true, false, false, true, false, false, true, false, false, true, false, false, false, false, true, true, true, false, true, true, false, true, true, true, true, false, true, true, true, false, false, true, false, false, true, false, true, false, false, false, false, false, false, false, true, false, false, true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, false, false, true, true, true, false, false, true, true, false, false, true, true, true, false, false, true, false, false, true, true, true, false, false, false, true, false, false, true, true, true, false, true, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, true, false, false, true, true, true, false, false, true, false, false, true, true, true, false, true, true, true, false, false, true, false, false, true, false, false, true, false, false, false, false, true, true, true, false, true, true, false, true, true, true, true, false, true, true, true, false, false, true, false, false, true, false, true, false, false, false, false, false, false, false, true, false, false, true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, false, false, true, true, true, false, false, true, true, false, true, false, true, true, true, false, false, true, false, false, true, true, true, false, false, false, true, true, false, false, true, true, true, false, true, true, true, false, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, false, true, true, true, false, false, true, false, false, true, true, true, false, true, true, true, false, false, true, false, false, true, false, false, true, false, false, false, false, true, true, true, false, true, true, false, true, true, true, true, true, true, true, true, false, false, true, false, false, true, false, true, false, false, false, false, false, false, false, true, false, false, true, true, true, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, false, false, true, true, true, false, false, true, true, false, true, false, true, true, true, false, false, true, false, false, true, true, true, false, false, false, true, true, false, false, true, true, true, false, true, true, true, false, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, false, true, true, false, true, false, true, true, true, false, true, true, false, false, true, false, false, false, true, false, false, true, true, false, true, true, false, true, false, true, false, false, false, false, false, true, false, true, true, false, false, true, true, true, false, true, false, true, true, false, true, false, false, false, true, false, true, false, false, true, false, true, false, false, false, true, true, false, true, false, false, true, true, true, true, true, false, true, false, false, false, true, true, false, false, true, true, false, true, true, false, false, true, false, false, true, false, false, true, false, true, true, true, false, true, false, true, true, false, true, false, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[true, true, false, true, false, true, true, false, true, false, true, true, true, false, true, true, false, false, true, false, false, false, true, false, false, true, true, false, true, true, false, true, false, true, false, false, false, false, false, true, false, true, true, false, false, true, true, true, false, true, false, true, true, false, true, false, false, false, true, false, true, false, false, true, false, true, false, false, false, true, true, false, true, false, false, true, true, true, true, true, false, true, false, false, false, true, true, false, false, true, true, false, true, true, true, false, false, true, false, false, true, false, false, true, false, true, true, true, false, true, false, false, true, true, false, true, false, true, false, true, true, false, false, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, false, true, true, false, true, false, true, true, true, false, true, true, false, false, true, false, false, false, true, false, false, true, true, false, true, true, false, true, false, true, false, false, false, false, false, true, false, true, true, false, false, true, true, true, false, true, false, true, true, false, true, false, false, false, true, false, true, false, false, true, false, true, false, false, false, true, true, false, true, false, false, true, true, true, true, true, false, true, true, false, false, true, true, false, false, true, true, false, true, true, true, false, false, true, false, false, true, false, false, true, false, true, true, true, false, true, false, false, true, true, false, true, false, true, false, true, true, false, false, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, false, true, false, true, true, true, true, false, false, true, false, true, true, false, false, true, true, false, false, false, false, false, true, false, false, false, true, true, true, true, true, true, false, true, true, false, false, true, true, false, true, false, false, true, false, false, true, true, false, false, true, false, false, false, false, true, false, true, true, true, true, false, false, true, true, false, true, false, true, false, true, false, true, false, false, true, true, true, false, true, false, true, true, false, true, true, true, true, true, false, true, true, false, true, true, false, false, true, true, false, false, false, false, true, false, true, false, true, false, true, true, true, true, false, true, false]);
            let encoded = BinVector::from_bools(&[true, false, false, false, false, true, false, true, true, true, true, false, false, true, false, true, true, false, false, true, true, false, false, false, false, false, true, false, false, false, true, true, true, true, true, true, false, true, true, false, false, true, true, false, true, false, false, true, false, false, true, true, false, false, true, false, false, false, false, true, false, true, true, true, true, false, false, true, true, false, true, false, true, false, true, false, true, false, false, true, true, true, false, true, false, true, true, false, true, true, true, true, true, false, false, true, true, false, true, true, false, false, true, true, false, false, false, false, true, false, false, true, false, true, false, true, true, true, false, true, false, true, false, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, false, true, false, true, true, true, true, false, false, true, false, true, true, false, false, true, true, false, false, false, false, false, true, false, false, false, true, true, true, true, true, true, false, true, true, false, false, true, true, false, true, false, false, true, false, false, true, true, false, false, true, false, false, false, false, true, false, true, true, true, true, false, false, true, true, false, true, false, true, false, true, false, true, false, false, true, true, true, false, true, false, true, true, false, true, true, true, true, true, false, false, true, true, false, true, true, false, false, true, true, false, false, false, false, true, false, false, true, false, true, false, true, true, true, false, true, false, true, false, false, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, false, false, false, true, true, true, false, true, false, false, true, false, false, false, true, true, false, false, false, false, false, true, false, true, true, true, false, false, false, false, false, true, false, false, true, false, false, true, false, false, false, true, true, false, false, true, false, true, true, true, true, true, true, false, true, true, true, true, false, false, false, false, false, true, false, true, true, true, false, true, false, true, false, false, false, true, true, true, true, true, false, false, true, true, true, true, true, false, false, true, true, false, false, false, false, false, true, false, true, true, true, true, true, false, true, false, false, false, true, true, false, false, false, true, true, true]);
            let encoded = BinVector::from_bools(&[true, true, false, false, false, false, false, true, true, true, false, true, false, false, true, false, false, false, true, true, false, false, false, false, false, true, false, true, true, true, false, false, false, false, false, true, false, false, true, false, false, true, false, false, false, true, true, false, false, true, false, true, true, true, true, true, true, false, true, true, true, true, false, false, false, false, false, true, false, true, true, true, false, true, false, true, false, false, false, true, true, true, true, true, false, false, true, true, true, true, true, false, false, true, true, true, false, false, false, false, false, true, false, true, true, true, true, true, false, true, true, false, false, false, true, true, false, false, true, false, true, true, true, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, false, false, false, true, true, true, false, true, false, false, true, false, false, false, true, true, false, false, false, false, false, true, false, true, true, true, false, false, false, false, false, true, false, false, true, false, false, true, false, false, false, true, true, false, false, true, false, true, true, true, true, true, true, false, true, true, true, true, false, false, false, false, false, true, false, true, true, true, false, true, false, true, false, false, false, true, true, true, true, true, false, false, true, true, true, true, true, false, false, true, true, true, false, false, false, false, false, true, false, true, true, true, true, true, false, true, true, false, false, false, true, true, false, false, true, false, true, true, true, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, false, false, true, true, true, true, false, true, false, false, true, true, true, true, true, true, false, true, true, false, true, false, true, true, true, false, false, false, true, false, false, true, false, false, true, false, false, false, true, false, false, true, false, false, false, true, true, false, false, false, true, false, false, false, false, true, true, true, true, false, false, false, false, false, false, false, false, true, true, false, true, true, true, true, false, true, false, false, false, false, true, true, false, false, false, true, true, true, false, true, false, false, false, true, false, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, false, false, true, true, true]);
            let encoded = BinVector::from_bools(&[true, true, false, true, false, false, true, true, true, true, false, true, false, false, true, true, true, true, true, true, false, true, true, false, true, false, true, true, true, false, false, false, true, false, false, true, false, false, true, false, false, false, true, false, false, true, false, false, false, true, true, false, false, false, true, false, false, false, false, true, true, true, true, false, false, false, false, false, false, false, false, true, true, false, true, true, true, true, false, true, false, false, false, false, true, true, false, false, false, true, true, true, false, true, true, false, false, false, true, false, true, true, false, false, true, true, false, true, false, true, true, false, false, false, true, false, true, false, true, false, true, true, true, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, false, false, true, true, true, true, false, true, false, false, true, true, true, true, true, true, false, true, true, false, true, false, true, true, true, false, false, false, true, false, false, true, false, false, true, false, false, false, true, false, false, true, false, false, true, true, true, false, false, false, true, false, false, false, false, true, true, true, true, false, false, false, false, false, false, false, false, true, true, false, true, true, true, true, false, true, false, false, false, false, true, true, false, false, false, true, true, true, false, true, true, false, false, false, true, false, true, true, false, false, true, true, false, true, false, true, true, false, false, false, true, false, true, false, true, false, true, true, true, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, false, true, false, false, true, true, true, true, false, true, false, true, false, false, true, false, true, true, true, false, true, true, true, true, false, true, false, true, true, false, true, true, false, false, false, false, false, false, true, false, false, true, true, true, true, true, false, true, true, true, false, false, true, true, false, true, false, false, true, true, false, true, false, true, true, false, true, true, true, true, false, false, false, true, false, true, false, false, true, true, false, false, true, false, true, true, true, true, true, false, true, false, false, false, false, true, false, true, false, true, false, true, false, true, true, true, true, false, true, false, true, false, true, false, false, false]);
            let encoded = BinVector::from_bools(&[false, false, true, false, false, true, false, false, true, true, true, true, false, true, false, true, false, false, true, false, true, true, true, false, true, true, true, true, false, true, false, true, true, false, true, true, false, false, false, false, false, false, true, false, false, true, true, true, true, true, false, true, true, true, false, false, true, true, false, true, false, false, true, true, false, true, false, true, true, false, true, true, true, true, false, false, false, true, false, true, false, false, true, true, false, false, true, false, true, true, true, true, true, false, true, true, false, false, false, false, true, false, true, false, true, false, true, false, true, true, false, true, true, false, true, false, true, false, true, true, false, false, true, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, false, true, false, false, true, true, true, true, false, true, false, true, false, false, true, false, true, true, true, false, true, true, true, true, false, true, false, true, true, false, true, true, false, false, false, false, false, false, true, false, false, true, true, true, true, true, false, true, true, true, false, false, true, true, false, true, false, false, true, true, false, true, false, true, true, false, true, true, true, true, false, false, false, true, false, true, false, false, true, true, false, false, true, false, true, true, true, true, true, false, true, true, false, false, false, false, true, false, true, false, true, false, true, false, true, true, false, true, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, false, false, true, false, false, false, false, false, false, true, false, true, true, true, false, false, true, true, true, false, false, false, true, false, false, true, true, false, true, true, false, false, false, true, false, false, true, false, true, true, true, true, true, false, true, true, false, true, true, true, true, false, false, false, true, true, true, false, true, true, true, false, false, true, false, false, true, false, false, false, false, false, false, true, false, false, true, false, true, true, false, false, false, true, true, true, false, true, true, true, true, false, true, true, false, true, true, true, false, false, true, false, false, true, true, true, false, false, false, false, true, true, true, false, true, true]);
            let encoded = BinVector::from_bools(&[true, true, false, true, false, false, true, false, false, false, false, false, false, true, false, true, true, true, false, false, true, true, true, false, false, false, true, false, false, true, true, false, true, true, false, false, false, true, false, false, true, false, true, true, true, true, true, false, true, true, false, true, true, true, true, false, false, false, true, true, true, false, true, true, true, false, false, true, false, false, true, false, false, false, false, false, false, true, false, false, true, false, true, true, false, false, false, true, true, true, false, true, true, true, true, true, false, true, true, false, true, true, true, false, false, true, false, false, true, true, true, true, false, false, false, false, true, true, false, true, false, true, false, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, false, false, true, false, false, false, false, false, false, true, false, true, true, true, false, false, true, true, true, false, false, false, true, false, false, true, true, false, true, true, false, false, false, true, false, false, true, false, true, true, true, true, true, false, true, true, false, true, true, true, true, false, false, false, true, true, true, false, true, true, true, false, false, true, false, false, true, false, false, false, false, false, false, true, false, false, true, false, true, true, false, false, false, true, true, true, false, true, false, true, true, true, false, true, true, false, true, true, true, false, false, true, false, false, true, true, true, true, false, false, false, false, true, true, false, true, false, true, false, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, false, true, false, true, false, false, false, true, false, false, true, true, false, true, false, false, false, true, true, false, false, false, false, true, false, false, true, false, false, true, false, false, true, true, false, true, true, false, false, true, false, true, false, false, false, true, true, true, false, false, false, true, false, true, true, false, true, true, true, false, true, true, false, true, true, true, false, true, true, true, false, false, false, false, false, true, true, false, true, true, false, true, true, false, true, false, true, false, true, true, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, true, true, false, true, false, true, true, true, false, true, false]);
            let encoded = BinVector::from_bools(&[true, false, false, true, false, true, false, true, false, false, false, true, false, false, true, true, false, true, false, false, false, true, true, false, false, false, false, true, false, false, true, false, false, true, false, false, true, true, false, true, true, false, false, true, false, true, false, false, false, true, true, true, false, false, false, true, false, true, true, false, true, true, true, false, true, true, false, true, true, true, false, true, true, true, false, false, false, false, false, true, true, false, true, true, false, true, true, false, true, false, true, false, true, true, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, true, true, true, false, true, false, true, true, false, true, false, true, false, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, false, true, false, true, false, false, false, true, false, false, true, true, false, true, false, false, false, true, true, false, false, false, false, true, false, false, true, false, false, true, false, false, true, true, false, true, true, false, false, true, false, true, false, false, false, true, true, true, false, false, false, true, false, true, true, false, true, true, true, false, true, true, false, true, true, true, false, true, true, true, false, false, false, false, false, false, true, false, true, true, false, true, true, false, true, false, true, false, true, true, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, true, true, true, false, true, false, true, true, false, true, false, true, false, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, false, false, false, false, true, true, true, false, true, true, true, true, false, false, false, false, true, true, false, true, true, false, true, true, true, false, true, true, true, true, false, false, true, true, true, true, false, false, false, true, true, false, true, true, true, true, false, false, true, false, false, true, true, false, false, true, true, true, false, true, true, true, false, true, false, true, false, false, false, true, true, true, true, true, false, true, true, false, true, false, false, true, true, true, true, false, true, true, false, true, false, true, true, true, true, true, false, false, false, false, false, false, true, true, false, true, false, false, false, true, false, false, true, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, false, false, false, false, true, true, true, false, true, true, true, true, false, false, false, false, true, true, false, true, true, false, true, true, true, false, true, true, true, true, false, false, true, true, true, true, false, false, false, true, true, false, true, true, true, true, false, false, true, false, false, true, true, false, false, true, true, true, false, true, true, true, false, true, false, true, false, false, false, true, true, true, true, true, false, true, true, false, true, false, false, true, true, true, true, false, true, true, false, true, true, false, true, true, true, true, true, false, false, false, false, false, false, true, true, true, false, true, false, false, false, true, false, false, false, true, false, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, true, false, false, false, false, true, true, true, false, true, true, true, true, false, false, false, false, true, true, false, true, true, false, true, true, true, false, true, true, true, true, false, true, true, true, true, true, false, false, false, true, true, false, true, true, true, true, false, false, true, false, false, true, true, false, false, true, true, true, false, true, true, true, false, true, false, true, false, false, false, true, true, true, true, true, false, true, true, false, true, false, false, true, true, true, true, false, true, true, false, true, true, false, true, true, true, true, true, false, false, false, false, false, false, true, true, true, false, true, false, false, false, true, false, false, false, true, false, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, false, true, false, true, false, true, false, false, true, true, true, false, false, true, true, true, false, true, false, false, true, true, true, false, false, false, true, false, true, false, true, true, true, false, true, true, true, false, false, false, true, false, true, true, false, false, true, false, false, true, false, false, true, false, false, true, true, true, false, false, true, true, false, false, false, true, false, true, true, true, true, false, true, false, true, true, true, false, false, false, false, true, true, false, true, true, true, true, true, false, true, true, true, false, true, false, true, false, true, false, false, true, true, false, false, true, true, true, false, false, true, true, true, false, true, true]);
            let encoded = BinVector::from_bools(&[false, false, true, false, false, true, false, true, false, true, false, false, true, true, true, false, false, true, true, true, false, true, false, false, true, true, true, false, false, false, true, false, true, false, true, true, true, false, true, true, true, false, false, false, true, false, true, true, false, false, true, false, false, true, false, false, true, false, false, true, true, true, false, false, true, true, false, false, false, true, false, true, true, true, true, false, true, false, true, true, true, false, false, false, false, true, true, false, true, true, true, true, true, false, false, true, true, true, false, true, false, true, false, true, false, false, true, true, false, false, false, true, true, true, false, false, true, true, false, true, false, true, true, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, false, true, false, true, false, true, false, false, true, true, true, false, false, true, true, true, false, true, false, false, true, true, true, false, false, false, true, false, true, false, true, true, true, false, true, true, true, false, false, false, true, false, true, true, false, false, false, false, false, true, false, false, true, false, false, true, true, true, false, false, true, true, false, false, false, true, false, true, true, true, true, false, true, false, true, true, true, false, false, false, false, true, true, false, true, true, true, true, true, false, false, true, true, true, false, true, false, true, false, true, false, false, true, true, false, false, false, true, true, true, false, false, true, true, false, true, false, true, true, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, false, true, false, true, true, true, true, false, false, false, true, false, false, false, false, false, true, true, false, true, true, true, true, false, false, true, false, false, false, false, true, false, true, false, true, false, true, true, false, false, false, false, false, true, true, true, false, false, false, false, true, true, false, false, false, true, true, false, false, true, false, false, false, true, true, false, true, true, true, true, false, false, false, false, false, false, true, true, true, true, false, false, false, true, true, true, true, false, false, false, true, false, true, false, true, false, true, true, true, false, true, false, true, false, true, true, true, false, false, false, false, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, false, true, true, false, true, false, true, true, true, true, false, false, false, true, false, false, false, false, false, true, true, false, true, true, true, true, false, false, true, false, false, false, false, true, false, true, false, true, false, true, true, false, false, false, false, false, true, true, true, false, false, false, false, true, true, false, false, false, true, true, false, false, true, false, false, false, true, true, false, true, true, true, true, false, false, false, false, false, false, true, true, true, true, false, false, false, true, true, true, true, false, false, false, true, true, false, true, false, true, false, true, true, true, false, true, false, true, false, true, false, true, true, false, false, false, false, false, false, false, true, false, true, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, false, true, false, true, true, true, true, false, false, false, true, false, false, false, false, false, true, true, false, true, true, true, true, false, false, false, false, false, false, false, true, false, true, false, true, false, true, true, false, false, false, false, false, true, true, true, false, false, false, false, true, true, false, false, false, true, true, false, false, true, false, false, false, true, true, false, true, true, true, true, false, false, false, false, false, false, true, true, true, true, false, false, false, true, true, true, true, false, false, false, true, true, false, true, false, true, false, true, true, true, false, true, false, true, false, true, false, true, true, false, false, false, false, false, false, false, true, false, true, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, true, true, true, true, true, false, false, true, false, false, false, false, true, true, true, false, true, true, true, false, true, false, false, true, false, false, true, false, true, true, true, false, true, true, false, true, false, false, false, false, false, true, true, false, false, true, false, true, true, false, true, false, true, false, true, true, false, true, true, true, true, true, true, false, false, false, true, false, true, true, true, false, false, false, false, true, true, true, false, true, true, true, false, true, false, true, false, false, true, true, false, false, false, false, true, true, true, true, true, false, true, true, false, false, false, false, false, true, true, false, false, false, false, false, false, true]);
            let encoded = BinVector::from_bools(&[true, false, false, false, true, true, true, true, true, false, false, true, false, false, false, false, true, true, true, false, true, true, true, false, true, false, false, true, false, false, true, false, true, true, true, false, true, true, false, true, false, false, false, false, false, true, true, false, false, true, false, true, true, false, true, false, true, false, true, true, false, true, true, true, true, true, true, false, false, false, true, false, true, true, true, false, false, false, false, true, true, true, false, true, true, true, false, true, false, true, false, false, true, true, true, false, false, false, false, true, true, true, true, true, false, true, true, false, false, false, true, false, false, true, true, false, false, false, true, false, false, false, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, false, true, true, true, true, false, false, true, false, false, false, false, true, true, true, false, true, true, true, false, true, false, false, true, false, false, true, false, true, true, true, false, true, true, false, true, false, false, false, false, false, true, true, false, false, true, false, true, true, false, true, false, true, false, true, true, false, true, true, true, true, true, true, false, false, false, true, false, true, true, true, false, false, false, false, true, true, true, false, true, true, true, false, true, false, true, false, false, true, true, true, false, false, false, false, true, true, true, true, true, false, true, true, false, false, false, true, false, false, true, true, false, false, false, true, false, false, false, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, true, false, true, true, false, true, false, false, false, true, true, true, true, true, false, false, false, false, true, false, true, true, true, true, false, false, true, false, true, false, false, false, true, true, true, true, true, false, false, false, false, true, true, true, true, true, true, false, false, false, true, true, false, true, false, true, false, true, false, false, true, true, false, true, false, false, false, false, true, false, true, false, false, false, false, false, true, true, true, true, false, true, false, true, false, true, true, true, false, false, true, false, false, true, false, true, true, false, false, true, true, true, false, true, true, true, false, false, true, true, false, true, false, false, true, true]);
            let encoded = BinVector::from_bools(&[false, false, false, false, true, false, true, true, false, true, false, false, false, true, true, true, true, true, false, false, false, false, true, false, true, true, true, true, false, false, true, false, true, false, false, false, true, true, true, true, true, false, false, false, false, true, true, true, true, true, true, false, false, false, true, true, false, true, false, true, false, true, false, false, true, true, false, true, false, false, false, false, true, false, true, false, false, false, false, false, true, true, true, true, false, true, false, true, false, true, true, true, false, false, true, true, false, false, true, false, true, true, false, false, true, true, true, false, true, true, false, true, false, false, true, true, false, true, true, false, false, true, true, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, true, false, true, true, false, true, false, false, false, true, true, true, true, true, false, false, false, false, true, false, true, false, true, true, false, false, true, false, true, false, false, false, true, true, true, true, true, false, false, false, false, true, true, true, true, true, true, false, false, false, true, true, false, true, false, true, false, true, false, false, true, true, false, true, false, false, false, false, true, false, true, false, false, false, false, false, true, true, true, true, false, true, false, true, false, true, true, true, false, false, true, true, false, false, true, false, true, true, false, false, true, true, true, false, true, true, false, true, false, false, true, true, false, true, true, false, false, true, true, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, true, true, false, false, false, false, false, true, true, true, true, true, true, true, false, false, true, false, true, false, true, true, false, false, true, true, false, true, false, false, true, false, false, true, false, false, false, false, true, true, false, false, true, true, true, true, true, true, false, true, true, true, false, false, false, true, false, true, true, true, true, true, true, true, true, false, true, true, false, true, false, true, true, false, false, false, false, false, true, false, false, false, false, true, true, true, false, false, true, false, true, true, true, false, true, true, true, true, false, true, true, true, false, true, false, false, false, false, true, true, true, false, true, false, true, true]);
            let encoded = BinVector::from_bools(&[false, false, false, true, true, true, false, false, false, false, false, true, true, true, true, true, true, true, false, false, true, false, true, false, true, true, false, false, true, true, false, true, false, false, true, false, false, true, false, false, false, false, true, true, false, false, true, true, true, true, true, true, false, true, true, true, false, false, false, true, false, true, true, true, true, true, true, true, true, false, true, true, false, true, false, true, true, false, false, false, false, false, true, false, false, false, false, true, true, true, false, false, true, false, true, true, true, true, false, true, true, true, true, false, true, true, true, false, true, false, false, false, false, false, true, true, true, false, true, true, false, true, true, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, true, true, false, false, false, false, false, true, true, true, true, true, true, true, true, false, true, false, true, false, true, true, false, false, true, true, false, true, false, false, true, false, false, true, false, false, false, false, true, true, false, false, true, true, true, true, true, true, false, true, true, true, false, false, false, true, false, true, true, true, true, true, true, true, true, false, true, true, false, true, false, true, true, false, false, false, false, false, true, false, false, false, false, true, true, true, false, false, true, false, true, true, true, true, false, true, true, true, true, false, true, true, true, false, true, false, false, false, false, false, true, true, true, false, true, true, false, true, true, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, true, false, false, false, true, true, true, true, true, false, true, true, false, true, false, false, true, false, false, false, false, true, true, true, false, true, true, false, true, false, false, false, true, false, false, false, true, false, false, true, false, true, true, false, true, true, false, false, true, false, false, true, false, true, false, false, true, true, false, true, false, true, true, true, true, false, false, false, false, true, false, true, true, true, true, false, true, false, true, true, true, false, false, true, true, false, false, true, false, true, true, false, true, false, false, true, false, true, true, false, false, true, false, true, false, true, true, true, true, true, false, true, true, true, false]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, true, false, false, false, true, true, true, true, true, false, true, true, false, true, false, false, true, false, false, false, false, true, true, true, false, true, true, false, true, false, false, false, true, false, false, false, true, false, false, true, false, true, true, false, true, true, false, false, true, false, false, true, false, true, false, false, true, true, false, true, false, true, true, true, true, false, false, false, false, true, false, true, true, true, true, false, true, false, true, true, true, false, false, true, true, false, false, true, false, true, true, true, false, true, false, false, true, false, true, true, false, false, true, false, true, true, false, true, true, true, true, true, false, true, true, true, true, false, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, true, true, false, false, false, true, true, true, true, true, false, true, true, false, false, false, false, true, false, false, false, false, true, true, true, false, true, true, false, true, false, false, false, true, false, false, false, true, false, false, true, false, true, true, false, true, true, false, false, true, false, false, true, false, true, false, false, true, true, false, true, false, true, true, true, true, false, false, false, false, true, false, true, true, true, true, false, true, false, true, true, true, false, false, true, true, false, false, true, false, true, true, true, false, true, false, false, true, false, true, true, false, false, true, false, true, true, false, true, true, true, true, true, false, true, true, true, true, false, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, false, true, false, false, true, false, true, false, false, false, true, false, true, false, true, false, false, false, false, false, true, true, true, true, true, true, true, false, true, false, false, false, true, true, false, false, false, false, true, false, false, false, false, true, true, false, true, false, false, false, false, false, true, false, false, false, true, true, true, false, true, false, true, true, true, true, false, false, true, false, true, true, true, false, false, true, true, false, false, false, false, false, true, true, true, true, false, false, false, false, false, true, false, false, true, false, false, true, false, true, false, true, false, false, false, false, false, false, false, true, false, true, false, true, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, false, false, true, false, false, true, false, true, false, false, false, true, false, true, false, true, false, false, false, false, false, true, true, true, true, true, true, true, false, true, false, false, false, true, true, false, false, false, false, true, false, false, false, false, true, true, false, true, false, false, false, false, false, true, false, false, false, true, true, true, false, true, false, true, true, true, true, false, false, true, false, true, true, true, false, false, true, true, false, false, false, false, false, true, true, true, true, false, false, false, false, false, false, true, false, false, true, false, false, true, false, true, false, true, false, false, false, false, false, false, false, false, true, false, true, false, false, true, true, true, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, false, true, false, false, true, false, true, false, false, false, true, false, true, false, true, false, false, false, false, false, true, true, true, true, true, true, true, false, true, false, false, false, true, true, false, false, false, false, true, false, false, false, false, true, true, false, true, false, false, false, false, false, true, false, false, false, true, true, true, false, true, true, true, true, true, true, false, false, true, false, true, true, true, false, false, true, true, false, false, false, false, false, true, true, true, true, false, false, false, false, false, false, true, false, false, true, false, false, true, false, true, false, true, false, false, false, false, false, false, false, false, true, false, true, false, false, true, true, true, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, true, false, true, false, true, false, false, true, true, true, false, true, true, true, true, false, true, true, true, false, false, false, false, false, false, false, true, false, true, true, true, true, true, true, true, true, true, false, false, true, true, false, true, false, true, true, true, false, false, true, false, true, true, false, true, true, false, false, true, false, false, true, false, true, true, false, false, false, true, false, false, false, false, true, true, false, false, false, true, false, true, false, true, false, true, false, true, true, true, false, false, false, true, true, false, true, false, true, false, true, false, false, true, true, true, true, true, true, false, false, true, false, true, true, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, true, false, true, false, true, false, false, true, true, true, false, true, true, true, true, false, true, true, true, false, false, false, false, false, false, false, true, false, true, true, true, true, true, true, true, true, true, false, false, true, true, false, true, false, true, true, true, false, false, true, false, true, true, false, true, true, false, false, true, false, false, true, false, true, true, false, false, false, true, false, false, false, false, true, true, false, false, false, true, false, true, false, true, false, true, false, true, true, true, false, false, false, false, true, true, false, true, false, true, false, true, false, false, true, true, true, true, true, true, true, false, false, true, false, true, true, true, false, false, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, true, false, true, false, true, false, false, true, true, true, false, true, true, true, true, false, true, true, true, false, false, false, false, false, false, false, true, false, true, true, true, true, true, true, true, true, true, false, false, true, true, false, true, false, true, true, true, false, false, true, false, true, true, false, true, true, false, false, true, false, false, true, false, true, true, false, false, false, true, true, false, false, false, true, true, false, false, false, true, false, true, false, true, false, true, false, true, true, true, false, false, false, false, true, true, false, true, false, true, false, true, false, false, true, true, true, true, true, true, true, false, false, true, false, true, true, true, false, false, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, false, false, false, false, false, true, true, true, true, true, true, false, false, true, true, false, true, false, true, true, true, false, false, false, true, true, false, true, true, true, true, false, true, false, false, false, false, false, true, true, true, true, false, true, false, false, false, true, true, false, false, false, false, false, false, true, true, true, false, true, true, true, true, true, false, false, false, true, false, false, false, false, true, false, true, true, false, false, true, false, true, false, false, true, false, false, false, false, true, false, true, true, false, false, false, true, true, false, true, true, true, true, false, false, false, false, true, true, false, false, true, false, false, true, true, false]);
            let encoded = BinVector::from_bools(&[true, true, true, true, false, false, false, false, false, true, true, true, true, true, true, false, false, true, true, false, true, false, true, true, true, false, false, false, true, true, false, true, true, true, true, false, true, false, false, false, false, false, true, true, true, true, false, true, false, false, false, true, true, false, false, false, false, false, false, true, true, true, false, true, true, true, true, true, false, false, false, true, false, false, false, false, true, false, true, true, false, false, true, false, true, false, false, true, false, false, false, false, true, false, false, true, true, false, false, false, true, true, false, true, true, true, true, false, false, false, false, false, true, true, false, false, true, false, false, false, true, true, false, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, false, false, false, false, false, true, true, true, true, true, true, false, false, true, true, false, true, false, true, true, true, false, false, false, true, true, false, true, true, true, true, false, true, false, false, false, false, false, true, true, true, true, false, true, false, false, false, true, true, false, false, false, false, false, false, true, true, true, false, true, true, true, true, true, false, false, false, true, false, false, false, false, true, false, true, true, false, false, true, false, true, false, false, true, false, false, false, false, true, false, false, true, true, false, false, false, true, true, false, true, true, true, true, false, false, true, false, false, true, true, false, false, true, false, false, false, true, true, false, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, true, false, true, true, false, true, true, false, true, false, true, true, true, false, false, false, true, true, false, false, true, false, true, true, false, false, true, true, true, false, true, true, false, true, false, false, true, false, true, true, true, false, true, true, true, false, false, false, false, false, true, false, false, true, false, true, false, true, true, true, true, true, false, false, false, false, false, false, true, false, true, true, true, false, false, false, true, false, true, true, false, false, true, false, false, true, true, true, false, false, true, false, false, false, true, true, true, false, false, true, false, false, true, true, true, false, true, false, false, true, false, true, true, false, false, true]);
            let encoded = BinVector::from_bools(&[true, false, false, true, true, false, true, true, false, true, true, false, true, false, true, true, true, false, false, false, true, true, false, false, true, false, true, true, false, false, true, true, true, false, true, true, false, true, false, false, true, false, true, true, true, false, true, true, true, false, false, false, false, false, true, false, false, true, false, true, false, true, true, true, true, true, false, false, false, false, false, false, true, false, true, true, true, false, false, false, true, false, true, true, false, false, true, false, false, true, true, true, false, false, true, true, false, false, false, true, true, true, false, false, true, false, false, true, true, true, false, false, true, false, false, true, false, true, false, true, false, false, true, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, true, false, true, true, false, true, true, false, true, false, true, true, true, false, false, false, true, true, false, false, true, false, true, true, false, false, true, true, true, false, true, true, false, true, false, false, true, false, true, true, true, false, true, true, true, false, false, false, false, false, true, false, false, true, false, true, false, true, true, true, true, true, false, false, false, false, false, false, true, false, true, true, true, false, false, false, true, false, true, true, false, false, true, false, false, true, true, true, false, false, true, true, false, false, false, true, true, true, false, false, true, false, false, true, true, true, false, false, true, false, false, true, false, true, false, true, false, false, true, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, true, false, true, false, false, false, true, false, false, false, true, false, true, false, false, true, true, false, false, true, false, true, true, true, false, false, true, true, true, true, false, false, false, true, true, false, false, false, true, false, true, true, false, true, false, false, true, true, false, true, true, true, true, true, false, true, true, true, false, true, false, true, true, true, false, false, true, true, true, false, true, false, true, false, true, false, false, true, true, true, true, false, true, false, false, true, true, true, false, false, false, false, false, false, true, true, false, true, true, false, true, true, true, true, true, true, true, false, true, false, true, false, false, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, true, false, true, false, false, false, true, false, false, false, true, false, true, false, false, true, true, false, false, true, false, true, true, true, false, false, true, true, true, true, false, false, false, true, true, false, false, false, true, false, true, true, false, true, false, false, true, true, false, true, true, true, true, true, false, true, true, true, false, true, false, true, true, true, false, false, true, true, true, false, true, false, true, false, true, false, false, true, true, true, true, false, true, false, false, true, true, true, false, false, false, false, false, false, false, true, true, false, true, true, false, true, true, true, true, false, true, true, true, false, true, false, true, true, false, false, true, true, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, true, false, true, false, false, false, true, false, false, false, true, false, true, false, false, true, true, false, false, true, false, true, true, true, false, false, true, true, true, true, false, false, false, true, true, false, false, true, true, false, true, true, false, true, false, false, true, true, false, true, true, true, true, true, false, true, true, true, false, true, false, true, true, true, false, false, true, true, true, false, true, false, true, false, true, false, false, true, true, true, true, false, true, false, false, true, true, true, false, false, false, false, false, false, false, true, true, false, true, true, false, true, true, true, true, false, true, true, true, false, true, false, true, true, false, false, true, true, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, true, true, true, false, false, true, true, false, false, false, true, false, false, true, false, false, true, true, false, false, true, true, false, true, true, true, false, false, true, true, false, true, true, true, true, false, false, true, false, true, false, false, true, true, false, true, true, false, false, false, false, false, true, false, false, true, true, false, true, true, true, true, true, false, false, true, true, true, false, false, true, true, true, false, false, true, true, true, false, false, true, true, true, true, false, false, true, true, false, false, true, false, false, false, false, false, false, true, false, true, false, true, false, false, false, false, false, true, true, true, false, true, false, false, true, false]);
            let encoded = BinVector::from_bools(&[false, false, true, false, true, true, true, false, false, true, true, false, false, false, true, false, false, true, false, false, true, true, false, false, true, true, false, true, true, true, false, false, true, true, false, true, true, true, true, false, false, true, false, true, false, false, true, true, false, true, true, false, false, false, false, false, true, false, false, true, true, false, true, true, true, true, true, false, false, true, true, true, false, false, true, true, true, false, false, true, true, true, false, false, true, true, true, true, false, false, true, true, false, false, true, true, false, false, false, false, false, false, true, false, true, false, true, false, false, false, true, false, false, true, true, true, false, true, true, false, false, true, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, true, true, true, false, false, true, true, false, false, false, true, false, false, true, false, false, true, true, false, false, true, false, false, true, true, true, false, false, true, true, false, true, true, true, true, false, false, true, false, true, false, false, true, true, false, true, true, false, false, false, false, false, true, false, false, true, true, false, true, true, true, true, true, false, false, true, true, true, false, false, true, true, true, false, false, true, true, true, false, false, true, true, true, true, false, false, true, true, false, false, true, true, false, false, false, false, false, false, true, false, true, false, true, false, false, false, true, false, false, true, true, true, false, true, true, false, false, true, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, false, false, true, false, true, false, false, false, false, true, false, true, false, true, false, true, false, false, false, false, false, false, true, true, true, true, false, false, true, true, false, false, true, true, true, false, true, false, false, true, false, true, true, false, false, false, false, true, false, false, true, true, false, false, false, false, true, false, false, false, true, true, true, false, false, true, false, true, true, true, false, false, false, true, false, false, true, false, true, false, true, true, true, false, true, true, true, false, true, true, true, false, false, false, false, true, true, true, true, false, true, true, true, false, true, true, true, true, false, false, false, true, false, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, true, false, false, false, true, false, true, false, false, false, false, true, false, true, false, true, false, true, false, false, false, false, false, false, true, true, true, true, false, false, true, true, false, false, true, true, true, false, true, false, false, true, false, true, true, false, false, false, false, true, false, false, true, true, false, false, false, false, true, false, false, false, true, true, true, false, false, true, false, true, true, true, false, false, false, true, false, false, true, false, true, false, true, true, true, false, true, true, true, false, true, true, true, true, false, false, false, false, true, true, true, true, false, true, true, true, false, true, false, true, true, true, false, false, false, true, true, false, true, false, false, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, false, false, true, false, true, false, false, false, false, true, false, true, false, true, false, true, false, false, false, false, false, false, true, true, true, true, false, false, true, true, false, false, true, true, true, false, true, false, false, true, false, true, true, false, false, false, false, true, false, false, true, true, false, false, false, false, true, false, false, false, true, true, true, false, false, true, false, false, true, true, false, false, false, true, false, false, true, false, true, false, true, true, true, false, true, true, true, false, true, true, true, true, false, false, false, false, true, true, true, true, false, true, true, true, false, true, false, true, true, true, false, false, false, true, true, false, true, false, false, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, false, false, true, false, true, true, true, false, false, false, true, false, true, false, true, true, true, false, false, false, true, true, false, true, false, false, true, true, true, true, false, true, true, true, true, false, true, true, false, true, true, true, true, false, false, false, false, true, true, true, false, true, true, false, true, false, false, true, true, true, false, false, false, true, true, false, true, true, true, false, true, true, false, false, false, true, false, false, true, false, true, false, false, false, true, false, true, true, false, false, true, false, false, true, false, false, false, true, true, false, true, false, true, false, true, false, false, true, true, false, true, true, false, false, true, true]);
            let encoded = BinVector::from_bools(&[false, false, false, true, false, false, true, false, true, true, true, false, false, false, true, false, true, false, true, true, true, false, false, false, true, true, false, true, false, false, true, true, true, true, false, true, true, true, true, false, true, true, false, true, true, true, true, false, false, false, false, true, true, true, false, true, true, false, true, false, false, true, true, true, false, false, false, true, true, false, true, true, true, false, true, true, false, false, false, true, false, false, true, false, true, false, false, false, true, false, true, true, false, false, true, true, false, false, true, false, false, false, true, true, false, true, false, true, false, true, true, false, false, true, true, false, true, true, true, false, false, true, true, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, false, false, true, false, true, true, true, false, false, false, true, false, true, false, true, true, true, false, false, false, true, true, false, true, false, false, true, true, true, true, false, true, true, true, true, false, true, true, false, true, true, true, true, false, false, false, false, true, true, true, false, true, true, false, true, false, false, true, true, true, false, false, false, true, true, false, true, true, true, false, true, true, false, false, false, true, false, false, true, false, true, false, false, false, true, false, true, true, false, false, true, true, false, false, true, false, false, false, true, true, false, true, false, true, false, true, true, false, false, true, true, false, true, true, true, true, false, true, true, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, false, true, true, false, false, false, false, false, false, true, true, true, true, true, true, false, false, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, true, true, true, true, false, false, true, true, false, false, true, false, true, false, false, true, false, false, true, false, false, false, true, false, true, false, true, true, true, true, false, false, false, false, false, true, false, true, false, false, false, true, false, false, false, false, true, false, true, false, false, false, false, false, true, false, true, false, true, false, false, false, true, true, false, true, true, true, true, false, false, true, false, false, false, true, false, false, true, true]);
            let encoded = BinVector::from_bools(&[true, false, true, true, false, true, true, false, false, false, false, false, false, true, true, true, true, true, true, false, false, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, true, true, true, true, false, false, true, true, false, false, true, false, true, false, false, true, false, false, true, false, false, false, true, false, true, false, true, true, true, true, false, false, false, false, false, true, false, true, false, false, false, true, false, false, false, false, true, false, true, false, false, false, false, false, true, true, false, true, false, true, false, false, false, true, true, false, true, true, true, true, false, false, false, true, false, false, false, true, true, false, false, true, true, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, false, true, true, false, false, false, false, false, false, true, true, true, true, true, true, false, false, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, true, true, true, true, false, false, true, true, false, false, true, false, true, false, false, true, false, false, true, false, false, false, true, false, true, false, true, true, true, true, false, false, false, false, false, true, false, true, false, false, false, true, false, false, false, false, true, false, true, false, false, false, false, false, true, true, false, true, false, true, false, false, false, true, true, false, true, true, true, true, false, false, false, true, false, false, false, true, true, false, true, true, true, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, true, false, true, true, true, true, true, false, true, true, false, true, false, true, false, true, true, true, false, true, true, true, true, true, false, true, true, true, true, false, false, false, true, true, true, true, false, true, true, true, true, false, true, true, false, true, false, false, false, false, false, false, false, true, true, true, true, false, true, false, true, true, false, false, false, true, true, false, false, false, false, false, true, false, false, true, true, false, false, true, false, true, true, true, true, false, true, false, false, true, false, false, true, false, true, true, true, false, false, false, true, true, false, false, true, false, true, false, true, true, true, false, true, false, true, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, true, false, true, true, true, true, true, false, true, true, false, true, false, true, false, true, true, true, false, true, true, true, true, true, false, true, true, true, true, false, false, false, true, true, true, true, false, true, true, true, true, false, true, true, false, true, false, false, false, false, false, false, false, true, true, true, true, false, true, false, true, true, false, false, false, true, true, false, false, false, false, false, true, false, false, true, true, false, false, true, false, true, true, true, true, false, true, false, false, true, false, false, false, true, false, true, true, true, false, false, false, true, true, false, false, true, true, false, true, false, true, true, true, false, true, true, false, true, true, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, true, false, true, true, true, true, true, false, true, true, false, true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, true, true, true, false, false, false, true, true, true, true, false, true, true, true, true, false, true, true, false, true, false, false, false, false, false, false, false, true, true, true, true, false, true, false, true, true, false, false, false, true, true, false, false, false, false, false, true, false, false, true, true, false, false, true, false, true, true, true, true, false, true, false, false, true, false, false, false, true, false, true, true, true, false, false, false, true, true, false, false, true, true, false, true, false, true, true, true, false, true, true, false, true, true, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, false, false, true, false, true, false, true, true, true, true, false, false, false, false, true, false, false, false, false, false, false, false, false, true, false, false, true, true, true, false, true, false, false, true, true, false, true, false, true, false, true, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, true, true, false, true, false, true, false, false, false, true, false, true, false, true, false, false, true, true, true, true, true, false, false, true, true, false, true, false, false, true, false, true, true, false, true, true, true, false, false, false, true, true, true, false, true, true, true, false, true, false, false, false, true, true, true, false, false, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, true, false, false, false, true, false, true, false, true, true, true, true, false, false, false, false, true, false, false, false, false, false, false, false, false, true, false, false, true, true, true, false, true, false, false, true, true, false, true, false, true, false, true, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, true, true, false, true, false, true, false, false, false, true, false, true, false, true, false, false, true, true, true, true, true, false, false, true, true, false, true, false, false, true, false, true, true, false, false, true, true, true, false, false, false, true, true, true, false, true, true, true, false, true, false, false, false, false, true, true, true, false, false, false, true, false, true, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, false, false, true, false, true, false, true, false, true, true, false, false, false, false, true, false, false, false, false, false, false, false, false, true, false, false, true, true, true, false, true, false, false, true, true, false, true, false, true, false, true, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, true, true, false, true, false, true, false, false, false, true, false, true, false, true, false, false, true, true, true, true, true, false, false, true, true, false, true, false, false, true, false, true, true, false, false, true, true, true, false, false, false, true, true, true, false, true, true, true, false, true, false, false, false, false, true, true, true, false, false, false, true, false, true, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, true, false, false, false, true, true, false, true, true, true, false, false, true, false, false, true, true, false, true, false, false, false, false, false, true, true, false, false, true, false, false, true, false, true, false, true, false, false, true, true, true, true, true, false, true, true, true, true, false, true, true, true, true, false, true, true, false, true, false, true, false, true, false, false, false, false, false, false, false, true, true, true, true, false, false, true, true, true, false, true, true, false, false, true, false, true, false, false, true, false, true, true, false, false, false, true, true, true, true, false, false, false, false, true, true, false, false, false, true, true, false, true, false, false, false, true]);
            let encoded = BinVector::from_bools(&[false, false, true, false, true, false, false, false, true, true, false, true, true, true, false, false, true, false, false, true, true, false, true, false, false, false, false, false, true, true, false, false, true, false, false, true, false, true, false, true, false, false, true, true, true, true, true, false, true, true, true, true, false, true, true, true, true, false, true, true, false, true, false, true, false, true, false, false, false, false, false, false, false, true, true, true, true, false, false, true, true, true, false, true, true, false, false, true, false, true, false, false, true, false, false, true, true, false, false, false, true, true, true, true, false, false, false, false, true, true, true, false, false, false, true, true, false, true, true, false, false, false, true, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, true, false, false, false, true, true, false, true, true, true, false, false, true, false, false, true, true, false, true, false, false, false, false, false, true, true, false, false, true, false, false, true, false, true, false, true, false, false, true, true, true, true, true, false, true, true, true, true, false, true, true, true, true, false, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, true, true, true, false, false, true, true, true, false, true, true, false, false, true, false, true, false, false, true, false, false, true, true, false, false, false, true, true, true, true, false, false, false, false, true, true, true, false, false, false, true, true, false, true, true, false, false, false, true, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, true, true, false, false, false, true, true, true, true, false, true, true, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, false, true, true, true, false, false, false, true, true, false, false, false, false, false, true, true, true, true, false, true, false, false, true, false, false, false, true, false, false, false, true, true, false, true, false, false, true, false, false, true, true, true, true, false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, true, false, false, false, true, false, true, true, false, true, true, true, false, true, false, false, false, true, true, true, false, false, false, true, false, false, false]);
            let encoded = BinVector::from_bools(&[true, false, true, false, true, true, false, false, false, true, true, true, true, false, true, true, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, false, true, true, true, false, false, false, true, true, false, false, false, false, false, true, true, true, true, false, true, false, false, true, false, false, false, true, false, false, false, true, true, false, true, false, false, true, false, false, true, true, true, true, false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, true, true, false, false, false, true, false, true, true, false, true, true, true, false, true, false, false, true, false, true, true, true, false, false, false, false, true, false, false, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, true, true, false, false, false, true, true, true, true, false, true, true, true, true, true, false, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, false, true, true, true, false, false, false, true, true, false, false, false, false, false, true, true, true, true, false, true, false, false, true, false, false, false, true, false, false, false, true, true, false, true, false, false, true, false, false, true, true, true, true, false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, true, true, false, false, false, true, false, true, true, false, true, true, true, false, true, false, false, true, false, true, true, true, false, false, false, false, true, false, false, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, false, false, false, true, false, false, true, true, false, false, true, false, false, true, false, true, true, true, true, true, true, false, false, false, true, true, false, true, true, true, true, false, true, true, false, true, false, true, true, true, false, false, true, false, true, true, true, false, true, false, true, false, false, true, false, true, false, true, true, true, true, false, false, false, false, false, true, false, false, false, true, true, true, false, true, false, false, false, true, false, false, false, false, false, true, true, true, false, true, false, true, true, false, false, true, false, false, true, true, false, true, false, false, false, false, true, false, true, false, true, true, false, false, false, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, false, false, false, false, true, false, false, true, true, false, false, true, false, false, true, false, true, true, true, true, true, true, false, false, false, true, true, false, true, true, true, true, false, true, true, false, true, false, true, true, true, false, false, true, false, true, true, true, false, true, false, true, false, false, true, false, true, false, true, true, true, true, false, false, false, false, false, true, false, false, false, true, true, true, false, true, false, false, false, true, false, false, false, false, false, true, true, true, false, true, false, false, true, true, false, false, true, false, false, true, true, false, true, false, false, false, false, true, true, false, true, false, true, true, false, true, false, false, true, true, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, false, false, false, true, false, false, true, true, false, false, true, false, false, false, false, true, true, true, true, true, true, false, false, false, true, true, false, true, true, true, true, false, true, true, false, true, false, true, true, true, false, false, true, false, true, true, true, false, true, false, true, false, false, true, false, true, false, true, true, true, true, false, false, false, false, false, true, false, false, false, true, true, true, false, true, false, false, false, true, false, false, false, false, false, true, true, true, false, true, false, false, true, true, false, false, true, false, false, true, true, false, true, false, false, false, false, true, true, false, true, false, true, true, false, true, false, false, true, true, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, true, false, true, false, true, true, true, false, true, false, false, false, false, true, true, true, false, true, true, true, true, true, true, true, false, true, false, false, false, false, false, true, false, false, true, false, false, false, false, true, false, false, true, false, false, true, false, true, true, false, false, false, false, false, true, false, false, true, true, true, true, false, true, true, false, false, true, true, false, true, false, false, false, true, true, false, true, true, true, false, false, true, true, true, true, false, false, false, true, true, true, true, false, false, false, false, false, true, true, false, false, false, false, false, true, true, true, false, true, false, true, true, true, true, false]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, true, false, true, false, true, true, true, false, true, false, false, false, false, true, true, true, false, true, true, true, true, true, true, true, false, true, false, false, false, false, false, true, false, false, true, false, false, false, false, true, false, false, true, false, false, true, false, true, true, false, false, false, false, false, true, false, false, true, true, true, true, false, true, true, false, false, true, true, false, true, false, false, false, true, true, false, true, true, true, false, false, true, true, true, true, false, false, false, true, true, true, true, true, false, false, false, false, false, true, true, false, false, false, false, false, true, true, true, true, false, true, false, true, false, true, true, true, false, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, true, false, true, false, true, true, true, false, true, false, false, false, false, true, true, true, false, true, true, true, true, true, true, true, false, true, false, false, true, false, false, true, false, false, true, false, false, false, false, true, false, false, true, false, false, true, false, true, true, false, false, false, false, false, true, false, false, true, true, true, true, false, true, true, false, false, true, true, false, true, false, false, false, true, true, false, true, true, true, false, false, true, true, true, true, false, false, false, true, true, true, true, true, false, false, false, false, false, true, true, false, false, false, false, false, true, true, true, true, false, true, false, true, false, true, true, true, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, false, true, false, true, false, false, true, true, false, false, false, true, false, true, false, true, false, false, true, true, false, false, true, true, false, false, true, true, true, false, false, false, true, true, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, true, false, false, false, false, true, true, true, true, true, true, true, false, true, false, true, true, false, true, true, false, false, true, true, false, true, false, false, true, false, true, true, false, true, true, false, false, true, true, true, false, true, true, false, false, false, true, true, false, true, false, false, false, false, true, false, false, true, true, true, false, false, true]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, false, true, false, true, false, false, true, true, false, false, false, true, false, true, false, true, false, false, true, true, false, false, true, true, false, false, true, true, true, false, false, false, true, true, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, true, false, false, false, false, true, true, true, true, true, true, true, false, true, false, true, true, false, true, true, false, false, true, true, false, true, false, false, true, false, true, true, false, true, true, false, false, false, true, true, true, false, true, true, false, false, false, true, true, false, true, false, false, true, false, false, true, false, false, true, true, true, true, false, false, false, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, false, true, false, true, false, false, true, true, false, false, false, true, false, true, false, true, false, false, true, true, false, false, true, true, false, false, true, true, true, true, false, false, true, true, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, true, true, true, false, false, false, false, true, true, true, true, true, true, true, false, true, false, true, true, false, true, true, false, false, true, true, false, true, false, false, true, false, true, true, false, true, true, false, false, false, true, true, true, false, true, true, false, false, false, true, true, false, true, false, false, true, false, false, true, false, false, true, true, true, true, false, false, false, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, true, true, false, true, false, true, true, true, false, false, true, false, false, true, true, true, true, false, true, true, true, false, false, true, false, false, false, true, false, true, false, true, false, true, false, true, true, true, false, true, false, false, false, false, true, true, false, false, false, false, true, true, false, false, true, true, true, false, true, true, true, true, true, false, true, false, false, true, false, true, false, true, true, false, false, true, false, false, true, true, false, true, true, true, true, true, true, false, true, false, false, true, false, false, true, false, true, false, true, true, true, true, true, true, false, false, false, true, false, true, true, false, true, true, true, false]);
            let encoded = BinVector::from_bools(&[true, false, false, true, true, true, false, true, false, true, true, true, false, false, true, false, false, true, true, true, true, false, true, true, true, false, false, true, false, false, false, true, false, true, false, true, false, true, false, true, true, true, false, true, false, false, false, false, true, true, false, false, false, false, true, true, false, false, true, true, true, false, true, true, true, true, true, false, true, false, false, true, false, true, false, true, true, false, false, true, false, false, true, true, false, true, true, true, true, true, true, false, true, false, true, false, true, false, false, true, false, true, false, true, true, true, true, true, true, false, false, false, false, true, false, true, true, false, true, true, true, true, true, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, true, true, false, true, false, true, true, true, false, false, true, false, false, true, true, true, true, false, true, true, true, false, false, true, false, false, false, true, false, true, false, true, false, true, false, true, true, true, false, true, false, false, false, false, false, true, false, false, false, false, true, true, false, false, true, true, true, false, true, true, true, true, true, false, true, false, false, true, false, true, false, true, true, false, false, true, false, false, true, true, false, true, true, true, true, true, true, false, true, false, true, false, true, false, false, true, false, true, false, true, true, true, true, true, true, false, false, false, false, true, false, true, true, false, true, true, true, true, true, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, false, false, true, false, false, false, true, false, true, false, false, true, false, false, false, true, true, false, true, false, false, false, true, false, false, false, false, false, false, true, true, false, false, true, false, false, true, false, false, false, true, false, false, true, true, true, true, false, false, false, false, false, true, true, false, false, true, false, false, true, true, false, false, true, false, true, false, false, true, true, true, false, true, true, false, true, true, true, true, false, false, true, false, false, false, false, false, true, false, true, true, true, false, false, false, true, false, false, false, false, true, true, false, false, true, true, false, true, true, true, false, true, true, true, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, false, false, false, true, false, false, false, true, false, true, false, false, true, false, false, false, true, true, false, true, false, false, false, true, false, false, false, false, false, false, true, true, false, false, true, false, false, true, false, false, false, true, false, false, true, true, true, true, false, false, false, false, false, true, true, false, false, true, false, false, true, true, false, false, true, false, true, false, false, true, true, true, false, true, true, false, true, true, true, true, false, false, true, false, false, false, false, false, true, false, true, false, true, true, false, false, false, true, false, false, false, false, true, true, false, false, true, true, true, false, true, true, true, false, true, true, true, true, true, true, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, false, false, true, false, false, false, true, false, true, false, false, true, false, false, false, true, true, false, true, false, false, false, true, false, false, false, false, false, false, true, true, false, false, true, false, false, true, false, false, false, true, false, false, true, true, true, true, false, false, false, false, false, true, true, false, false, true, false, false, true, true, false, false, true, false, true, false, false, true, true, true, false, true, true, false, true, true, true, true, false, false, true, false, false, false, false, false, true, false, true, false, true, true, false, false, false, true, false, false, false, false, true, true, true, false, true, true, true, false, true, true, true, false, true, true, true, true, true, true, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, false, false, false, true, false, false, false, false, true, true, false, false, true, true, false, true, true, true, false, true, true, false, true, true, false, true, true, false, false, true, true, false, true, false, true, true, true, false, false, false, true, false, true, true, true, false, true, true, false, true, false, true, true, true, true, true, true, true, true, true, false, false, false, false, false, true, false, false, true, false, true, false, true, false, false, false, true, false, true, false, true, false, false, false, false, false, true, true, false, false, true, true, true, true, true, false, true, true, false, true, true, false, false, false, false, false, false, false, false, true, true, false, true, false, false, false]);
            let encoded = BinVector::from_bools(&[false, true, true, false, false, false, false, true, false, false, false, false, true, true, false, false, true, true, false, true, true, true, false, true, true, false, true, true, false, true, true, false, false, true, true, false, true, false, true, true, true, false, false, false, true, false, true, true, true, false, true, true, false, true, false, true, true, true, true, true, true, true, true, true, false, false, false, false, false, true, false, false, true, false, true, false, true, false, false, false, true, false, true, false, true, false, false, false, false, false, true, true, false, false, true, true, true, true, true, true, false, true, true, false, true, true, false, false, false, false, false, false, false, false, false, true, true, false, true, true, false, false, true, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, false, false, false, true, false, false, false, false, true, true, false, false, true, true, false, true, true, true, false, true, true, false, true, true, false, true, true, false, false, true, true, false, true, false, true, true, true, false, false, false, true, false, true, true, true, false, true, true, false, true, false, true, true, true, true, true, true, true, true, true, false, false, false, false, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false, false, false, true, true, false, false, true, true, true, true, true, true, false, true, true, false, true, true, false, false, false, false, false, false, false, false, false, true, true, false, true, true, false, false, true, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, false, false, true, false, false, true, false, true, true, false, true, false, false, false, false, false, true, true, false, true, true, false, true, false, true, false, true, false, false, true, true, false, true, false, true, false, false, false, true, false, false, true, false, false, false, false, false, false, true, false, true, false, true, false, false, false, true, true, false, true, false, false, true, false, true, true, false, false, false, true, false, false, false, true, false, false, true, false, true, true, true, false, false, false, false, false, false, false, true, true, false, true, false, true, true, true, true, false, true, false, true, true, true, true, true, false, true, true, true, false, true, true, true, true, true, true]);
            let encoded = BinVector::from_bools(&[true, true, false, false, false, false, true, false, false, true, false, true, true, false, true, false, false, false, false, false, true, true, false, true, true, false, true, false, true, false, true, false, false, true, true, false, true, false, true, false, false, false, true, false, false, true, false, false, false, false, false, false, true, false, true, false, true, false, false, false, true, true, false, true, false, false, true, false, true, true, false, false, false, true, false, false, false, true, false, false, true, false, true, true, true, false, false, false, false, false, false, false, true, true, true, false, true, false, true, true, true, true, false, true, false, true, true, true, true, true, true, false, true, true, true, false, true, true, false, true, true, true, true, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, false, false, true, false, false, true, false, true, true, false, true, false, false, false, false, false, true, true, false, true, true, false, true, false, true, false, true, false, false, true, true, false, true, false, true, false, false, false, true, false, false, false, false, false, false, false, false, false, true, false, true, false, true, false, false, false, true, true, false, true, false, false, true, false, true, true, false, false, false, true, false, false, false, true, false, false, true, false, true, true, true, false, false, false, false, false, false, false, true, true, true, false, true, false, true, true, true, true, false, true, false, true, true, true, true, true, true, false, true, true, true, false, true, true, false, true, true, true, true, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, false, false, false, false, true, false, true, true, false, true, true, false, true, false, true, false, true, false, false, true, true, true, true, false, false, false, false, false, true, true, true, true, true, false, false, true, false, false, true, true, true, false, false, false, false, false, false, false, true, false, true, false, false, true, true, false, true, false, true, true, true, false, false, true, true, true, false, true, true, true, false, true, true, true, false, false, false, false, true, true, false, true, true, true, false, false, false, true, true, false, true, true, false, false, false, false, false, false, true, true, false, true, false, false, false, true, false, true, false, false, true, false, false, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, true, false, false, false, false, false, true, false, true, true, false, true, true, false, true, false, true, false, true, false, false, true, true, true, true, false, false, false, false, false, true, true, true, true, true, false, false, true, false, false, true, true, true, false, false, false, false, false, false, false, true, false, true, false, false, true, true, false, true, false, true, true, true, false, false, true, true, true, false, true, true, true, false, true, true, true, false, false, false, false, true, true, false, true, true, true, false, false, false, true, true, false, true, true, true, false, false, false, false, false, false, true, true, false, true, false, false, false, true, true, false, true, false, false, true, false, true, false, true, false, true, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, false, false, false, false, true, false, true, true, false, false, true, false, true, false, true, false, true, false, false, true, true, true, true, false, false, false, false, false, true, true, true, true, true, false, false, true, false, false, true, true, true, false, false, false, false, false, false, false, true, false, true, false, false, true, true, false, true, false, true, true, true, false, false, true, true, true, false, true, true, true, false, true, true, true, false, false, false, false, true, true, false, true, true, true, false, false, false, true, true, false, true, true, true, false, false, false, false, false, false, true, true, false, true, false, false, false, true, true, false, true, false, false, true, false, true, false, true, false, true, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, false, true, true, false, false, false, false, false, false, true, false, true, true, true, true, false, true, false, false, false, true, false, true, true, true, false, false, false, false, false, true, false, true, true, false, false, false, true, false, true, true, false, true, false, false, true, true, true, false, false, false, true, true, false, false, true, true, true, true, true, false, true, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, true, false, false, true, false, true, false, true, false, false, false, true, false, true, false, false, false, false, true, false, true, true, false, false, true, false, true, true, false, false, true, false, false, true, true, false, false, true, false]);
            let encoded = BinVector::from_bools(&[true, false, false, true, false, true, true, false, false, false, false, false, false, true, false, true, true, true, true, false, true, false, false, false, true, false, true, true, true, false, false, false, false, false, true, false, true, true, false, false, false, true, false, true, true, false, true, false, false, true, true, true, false, false, false, true, true, false, false, true, true, true, true, true, false, true, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, true, false, false, true, false, true, false, true, false, false, false, true, false, false, true, false, false, false, false, true, false, true, true, false, false, true, false, true, true, false, false, false, true, false, false, true, true, false, false, false, true, false, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, false, true, true, false, false, false, false, false, false, true, false, true, true, true, true, false, true, false, false, false, true, false, true, true, true, false, false, false, false, false, true, false, true, true, false, false, false, true, false, true, true, false, true, false, false, true, true, true, false, false, false, true, true, false, false, false, true, true, true, true, false, true, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, true, false, false, true, false, true, false, true, false, false, false, true, false, false, true, false, false, false, false, true, false, true, true, false, false, true, false, true, true, false, false, false, true, false, false, true, true, false, false, false, true, false, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, false, true, true, true, false, false, false, false, true, true, true, true, false, true, false, false, true, false, false, false, false, true, true, false, false, false, false, false, true, true, true, false, true, false, false, true, true, false, false, true, true, false, true, true, false, false, false, false, true, true, true, false, false, true, true, false, false, false, true, false, true, true, true, false, true, false, false, false, true, false, true, true, false, true, true, true, false, false, true, true, false, false, true, true, true, false, false, true, false, true, false, false, true, false, true, true, false, false, false, true, true, false, true, true, true, true, false, false, true, false, false, true, false, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, true, false, false, true, true, true, false, false, false, false, true, true, true, true, false, true, false, false, true, false, false, false, false, true, true, false, false, false, false, false, true, true, true, false, true, false, false, true, true, false, false, true, true, false, true, true, false, false, false, false, true, true, true, false, false, true, true, false, false, false, true, false, true, true, true, false, true, false, false, false, true, false, true, true, false, true, true, true, false, false, true, true, false, false, true, true, true, false, false, true, false, true, true, false, false, true, false, true, true, false, false, false, true, true, false, true, true, true, true, true, false, false, true, false, false, true, false, false, true, false, true, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, false, true, true, true, false, false, false, false, true, true, true, true, false, true, false, true, true, false, false, false, false, true, true, false, false, false, false, false, true, true, true, false, true, false, false, true, true, false, false, true, true, false, true, true, false, false, false, false, true, true, true, false, false, true, true, false, false, false, true, false, true, true, true, false, true, false, false, false, true, false, true, true, false, true, true, true, false, false, true, true, false, false, true, true, true, false, false, true, false, true, true, false, false, true, false, true, true, false, false, false, true, true, false, true, true, true, true, true, false, false, true, false, false, true, false, false, true, false, true, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, false, false, false, false, true, false, false, false, false, true, false, true, false, true, false, true, true, false, true, true, true, false, false, false, true, true, true, false, false, false, true, true, false, false, true, true, false, false, false, true, false, false, true, false, true, false, false, true, true, true, true, true, false, true, true, true, false, true, true, false, false, true, false, true, false, false, false, false, false, true, false, false, false, false, false, true, false, false, true, false, false, true, true, true, true, false, true, true, true, true, false, false, true, true, true, true, false, true, false, true, false, false, true, true, true, false, false, true, false, true, false, false, true, true, true, true]);
            let encoded = BinVector::from_bools(&[false, false, false, false, false, false, false, false, true, false, false, false, false, true, false, true, false, true, false, true, true, false, true, true, true, false, false, false, true, true, true, false, false, false, true, true, false, false, true, true, false, false, false, true, false, false, true, false, true, false, false, true, true, true, true, true, false, true, true, true, false, true, true, false, false, true, false, true, false, false, false, false, false, true, false, false, false, false, false, true, false, false, true, false, false, true, true, true, true, false, true, true, true, true, false, false, false, true, true, true, true, false, true, false, true, false, false, true, true, true, true, false, false, true, false, true, false, false, true, true, true, true, false, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, false, false, false, false, true, false, false, false, false, true, false, true, false, true, false, true, true, false, true, true, true, false, false, false, true, true, true, false, false, false, true, true, false, false, true, true, false, false, false, true, false, false, true, false, true, false, false, true, true, true, true, true, false, true, true, true, false, true, true, false, false, true, false, true, false, false, false, false, false, true, false, false, false, false, false, true, false, false, true, false, false, true, true, true, true, false, true, true, true, true, false, false, false, true, true, true, false, false, true, false, true, false, false, true, true, true, true, false, false, true, false, true, false, false, true, true, true, true, false, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, false, false, true, true, true, false, true, true, false, true, false, true, false, true, false, true, true, true, false, false, false, true, false, true, false, true, true, false, true, true, false, false, false, true, true, false, false, true, true, false, false, false, true, false, false, false, false, false, false, true, true, false, false, false, true, true, true, true, true, false, true, false, false, false, false, false, true, false, false, false, false, true, true, false, false, false, true, true, false, false, true, true, false, false, true, false, true, true, true, false, true, false, false, true, true, false, false, true, false, true, false, true, false, false, false, true, false, false, false, false, true, true, true, true, false, true]);
            let encoded = BinVector::from_bools(&[false, false, true, false, false, false, true, true, true, false, true, true, false, true, false, true, false, true, false, true, true, true, false, false, false, true, false, true, false, true, true, false, true, true, false, false, false, true, true, false, false, true, true, false, false, false, true, false, false, false, false, false, false, true, true, false, false, false, true, true, true, true, true, false, true, false, false, false, false, false, true, false, false, false, false, true, true, false, false, false, true, true, false, false, true, true, false, false, true, false, true, true, true, false, false, true, false, false, true, true, false, false, true, false, true, false, true, false, false, false, false, true, false, false, false, false, true, true, false, true, true, false, false, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, false, false, true, true, true, false, true, true, false, true, false, true, false, true, false, true, true, true, false, false, false, true, false, true, false, true, true, false, true, true, false, false, false, true, true, false, false, true, true, false, false, false, true, false, false, false, false, false, false, true, true, false, false, false, true, true, true, true, true, false, true, false, false, false, false, false, true, false, false, false, false, true, true, false, false, false, false, true, false, false, true, true, false, false, true, false, true, true, true, false, false, true, false, false, true, true, false, false, true, false, true, false, true, false, false, false, false, true, false, false, false, false, true, true, false, true, true, false, false, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, true, true, false, true, true, true, true, false, true, false, false, false, false, true, true, true, true, true, true, false, true, true, true, false, true, false, false, false, true, false, false, false, true, false, false, false, true, true, false, true, true, true, false, false, true, true, true, false, true, false, true, true, false, true, false, true, false, true, true, true, false, false, true, false, true, false, true, false, false, false, false, true, false, false, true, true, false, true, false, false, true, true, true, true, false, true, false, true, true, false, true, true, false, false, true, true, false, true, false, true, true, true, false, true, true, false, true, false, true, false, false, false, true, true, true, true]);
            let encoded = BinVector::from_bools(&[false, true, false, false, true, true, false, true, true, true, true, false, true, false, false, false, false, true, true, true, true, true, true, false, true, true, true, false, true, false, false, false, true, false, false, false, true, false, false, false, true, true, false, true, true, true, false, false, true, true, true, false, true, false, true, true, false, true, false, true, false, true, true, true, false, false, true, false, true, false, true, false, false, false, false, true, false, false, true, true, false, true, false, false, true, true, true, true, false, true, false, true, true, false, false, true, true, false, false, true, true, false, true, false, true, true, true, false, true, true, false, false, true, false, true, false, false, false, true, true, true, true, true, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, true, true, false, true, true, true, true, false, true, false, false, false, false, true, true, true, true, true, true, false, true, true, true, false, true, false, false, false, true, false, false, false, true, false, false, false, true, true, false, true, true, true, false, false, true, true, true, false, true, false, true, true, false, true, false, true, false, true, true, true, false, false, true, false, true, true, true, false, false, false, false, true, false, false, true, true, false, true, false, false, true, true, true, true, false, true, false, true, true, false, false, true, true, false, false, true, true, false, true, false, true, true, true, false, true, true, false, false, true, false, true, false, false, false, true, true, true, true, true, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, true, false, true, false, true, true, true, false, true, false, true, true, true, false, false, false, false, true, true, true, false, false, false, false, true, true, false, false, false, true, true, true, false, false, false, false, true, false, false, true, true, false, false, true, true, true, true, false, false, false, true, false, false, true, true, true, true, true, false, true, false, false, false, false, true, false, true, true, false, true, false, true, false, false, false, true, false, false, false, false, true, false, true, true, true, false, false, false, false, false, false, true, false, false, false, false, false, false, true, true, false, false, true, false, false, false, false, true, true, false, false, false, true, true, false, false]);
            let encoded = BinVector::from_bools(&[false, true, true, false, true, false, true, false, true, true, true, false, true, false, true, true, true, false, false, false, false, true, true, true, false, false, false, false, true, true, false, false, false, true, true, true, false, false, false, false, true, false, false, true, true, false, false, true, true, true, true, false, false, false, true, false, false, true, true, true, true, true, false, true, false, false, false, false, true, false, true, true, false, true, false, true, false, false, false, true, false, false, false, false, true, false, true, true, true, false, false, false, false, false, true, false, true, false, false, false, false, false, false, true, true, false, false, true, false, false, true, false, false, true, true, false, false, false, true, true, true, false, false, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, true, false, true, false, true, true, true, false, true, false, true, true, true, false, false, false, false, true, true, true, false, false, false, false, true, true, false, false, false, true, true, true, false, false, false, false, true, false, false, true, true, false, false, true, true, true, true, false, false, false, true, false, false, true, true, true, true, true, false, true, false, false, false, false, true, false, true, true, false, true, false, true, false, false, false, true, true, false, false, false, true, false, true, true, true, false, false, false, false, false, true, false, true, false, false, false, false, false, false, true, true, false, false, true, false, false, true, false, false, true, true, false, false, false, true, true, true, false, false, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, false, false, false, true, true, true, false, true, true, true, false, true, true, false, true, true, false, false, true, true, false, true, true, false, true, true, true, true, false, true, false, false, false, true, false, true, false, true, false, false, true, false, false, false, false, true, true, false, true, true, true, false, false, false, false, false, true, false, false, true, false, false, false, false, false, true, true, false, false, true, true, true, false, true, true, true, false, true, true, true, true, false, true, true, false, true, true, false, true, true, false, false, true, false, true, true, true, false, true, true, false, false, false, false, false, false, false, true, true, true, false, true, true, true, false, true]);
            let encoded = BinVector::from_bools(&[true, true, false, false, false, false, false, true, true, true, false, true, true, true, false, true, true, false, true, true, false, false, true, true, false, true, true, false, true, true, true, true, false, true, false, false, false, true, false, true, false, true, false, false, true, false, false, false, false, true, true, false, true, true, true, false, false, false, false, false, true, false, false, true, false, false, false, false, false, true, true, false, false, true, true, true, false, true, true, true, false, true, true, true, true, false, true, true, false, true, true, false, true, true, true, false, false, true, false, true, true, true, false, true, true, false, false, false, false, false, true, false, false, true, true, true, false, true, true, true, true, false, false, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, false, false, false, true, true, true, false, true, true, true, false, true, true, false, true, true, false, false, true, true, false, true, true, false, true, true, true, true, false, true, false, false, false, true, false, true, false, true, false, false, true, false, false, false, false, true, true, false, true, true, true, false, false, false, false, false, true, false, false, false, false, false, false, false, false, true, true, false, false, true, true, true, false, true, true, true, false, true, true, true, true, false, true, true, false, true, true, false, true, true, true, false, false, true, false, true, true, true, false, true, true, false, false, false, false, false, true, false, false, true, true, true, false, true, true, true, true, false, false, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, false, false, true, true, false, true, true, false, false, false, false, false, false, true, false, false, false, false, false, false, true, true, true, false, false, false, false, false, true, false, false, false, true, true, false, true, true, false, false, true, false, false, true, false, true, false, true, false, false, false, false, false, false, true, true, false, true, false, true, true, false, true, true, false, true, false, true, false, true, false, true, false, false, true, true, true, true, true, false, false, true, true, true, true, false, true, false, false, false, false, true, true, false, true, false, false, false, true, false, false, true, false, false, true, true, false, false, true, false, false, false, true, false, false, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, false, false, false, true, true, false, true, true, false, false, false, false, false, false, true, false, false, false, false, false, false, true, true, true, false, false, false, false, false, true, false, false, false, true, true, false, true, true, false, false, true, false, false, true, false, true, false, true, false, false, false, false, false, false, true, true, false, true, false, true, true, false, true, true, false, true, false, true, false, true, false, true, false, false, true, true, true, true, true, false, false, true, true, true, true, false, true, false, false, false, false, false, true, true, false, true, false, false, false, true, false, false, true, false, false, true, true, false, false, false, true, false, false, false, true, true, false, false, false, false, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, false, false, true, true, false, true, true, false, false, false, false, false, false, true, false, false, false, false, false, false, true, true, true, false, false, false, false, false, true, false, false, false, true, true, false, true, true, false, false, true, false, false, true, false, true, false, true, false, false, false, false, false, false, true, true, false, true, false, true, true, false, true, true, false, true, false, true, false, true, false, true, false, false, true, true, true, true, true, false, false, true, true, true, true, false, true, false, false, false, false, false, true, false, false, true, false, false, false, true, false, false, true, false, false, true, true, false, false, false, true, false, false, false, true, true, false, false, false, false, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, true, false, false, true, false, false, false, true, true, true, false, false, true, false, false, true, false, true, true, false, true, true, false, false, false, false, true, true, true, false, true, false, false, true, false, false, true, false, false, false, false, true, true, false, true, false, true, false, true, true, true, true, true, true, true, false, false, true, true, false, false, true, false, false, true, true, true, false, false, false, false, true, true, false, false, true, true, false, false, false, true, false, true, false, true, true, true, false, true, false, true, false, false, false, false, false, false, false, true, false, true, false, true, true, false, false, true, false, true, true, false, false, true, false, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, false, true, false, false, true, false, false, false, true, true, true, false, false, true, false, false, true, false, true, true, false, true, true, false, false, false, false, true, true, true, false, true, false, false, true, false, false, true, false, false, false, false, true, true, false, true, false, true, false, true, true, true, true, true, true, true, false, false, true, true, false, false, true, false, false, true, true, true, false, false, false, false, true, true, false, false, true, true, false, false, false, true, false, true, false, true, true, true, false, true, false, false, true, false, false, false, false, false, false, false, true, false, true, false, true, true, false, true, false, true, false, true, true, false, false, false, true, false, true, true, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, true, false, false, true, false, false, false, true, true, true, false, false, true, false, false, true, false, true, true, false, true, true, false, false, false, false, true, true, true, false, true, false, false, false, false, false, true, false, false, false, false, true, true, false, true, false, true, false, true, true, true, true, true, true, true, false, false, true, true, false, false, true, false, false, true, true, true, false, false, false, false, true, true, false, false, true, true, false, false, false, true, false, true, false, true, true, true, false, true, false, false, true, false, false, false, false, false, false, false, true, false, true, false, true, true, false, true, false, true, false, true, true, false, false, false, true, false, true, true, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, false, true, true, true, true, false, false, false, true, false, false, true, false, true, true, true, false, false, true, true, false, true, true, true, false, false, false, true, true, false, true, true, false, false, true, false, false, true, true, true, true, false, false, false, true, false, true, true, false, true, false, true, true, true, false, true, true, false, true, true, true, false, false, false, false, false, false, true, false, true, true, true, true, false, false, false, true, true, false, false, true, false, true, false, true, true, true, true, true, false, true, false, false, false, true, false, true, true, false, true, false, true, true, true, true, true, true, true, false, true, true, false, false, true, true, true]);
            let encoded = BinVector::from_bools(&[true, false, false, false, false, true, true, true, true, false, false, false, true, false, false, true, false, true, true, true, false, false, true, true, false, true, true, true, false, false, false, true, true, false, true, true, false, false, true, false, false, true, true, true, true, false, false, false, true, false, true, true, false, true, false, true, true, true, false, true, true, false, true, true, true, false, false, false, false, false, false, true, false, true, true, true, true, false, false, false, true, true, false, false, true, false, true, false, true, true, true, true, true, false, true, true, false, false, false, true, false, true, true, false, true, false, true, true, true, true, true, true, true, true, false, true, true, false, false, false, true, true, true, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, false, true, true, true, true, false, false, false, true, false, false, true, false, true, true, true, false, false, true, true, false, true, true, true, false, false, false, true, true, false, true, true, false, false, true, false, false, true, true, true, true, false, false, false, true, false, true, true, false, true, false, true, true, false, false, true, true, false, true, true, true, false, false, false, false, false, false, true, false, true, true, true, true, false, false, false, true, true, false, false, true, false, true, false, true, true, true, true, true, false, true, true, false, false, false, true, false, true, true, false, true, false, true, true, true, true, true, true, true, true, false, true, true, false, false, false, true, true, true, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, false, false, false, true, true, true, true, true, false, false, false, false, true, false, true, false, true, true, true, true, false, true, true, false, true, false, true, true, true, true, false, false, true, true, true, false, false, true, true, true, false, true, true, true, true, true, true, true, true, true, false, false, false, false, false, true, true, true, true, true, true, false, true, false, false, true, false, false, true, true, false, true, false, true, false, true, false, true, false, false, false, false, true, true, true, true, false, true, false, true, false, false, true, true, false, true, true, false, false, false, true, true, true, false, false, false, false, true, true, false, true, true, false, false, false, true]);
            let encoded = BinVector::from_bools(&[false, false, true, false, false, false, false, true, true, true, true, true, false, false, false, false, true, false, true, false, true, true, true, true, false, true, true, false, true, false, true, true, true, true, false, false, true, true, true, false, false, true, true, true, false, true, true, true, true, true, true, true, true, true, false, false, false, false, false, true, true, true, true, true, true, false, true, false, false, true, false, false, true, true, false, true, false, true, false, true, false, true, false, false, false, false, true, true, true, true, false, true, false, true, false, false, false, true, true, false, true, true, false, false, false, true, true, true, false, false, false, false, false, true, true, false, true, true, false, false, false, false, true, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, true, false, true, false, true, true, true, true, false, true, true, false, true, false, true, true, true, true, false, false, true, true, true, false, false, true, true, true, false, true, true, true, true, true, true, true, true, true, false, false, false, false, false, true, true, true, true, true, true, false, true, false, false, true, false, false, true, true, false, true, false, true, false, true, false, true, false, false, false, false, true, true, true, true, false, true, false, true, false, false, false, true, true, false, true, true, false, false, false, true, true, true, false, false, false, false, false, true, true, false, true, true, false, false, false, false, true, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, true, true, false, false, true, false, true, false, false, false, true, true, true, true, false, false, true, true, true, false, true, true, true, false, false, false, true, false, true, false, true, true, true, false, false, true, true, true, true, true, false, false, true, false, false, true, true, true, true, false, true, false, true, false, false, true, false, false, false, false, true, true, false, false, false, true, true, false, true, true, true, false, true, true, true, false, false, false, false, true, true, false, false, false, true, true, false, false, true, true, true, true, true, false, true, false, false, true, false, false, false, true, false, true, true, false, true, true, true, false, true, false, false, false, false, true]);
            let encoded = BinVector::from_bools(&[false, true, false, false, true, true, false, false, true, false, true, false, false, false, true, true, true, true, false, false, true, true, true, false, true, true, true, false, false, false, true, false, true, false, true, true, true, false, false, true, true, true, true, true, false, false, true, false, false, true, true, true, true, false, true, false, true, false, false, true, false, false, false, false, true, true, false, false, false, true, true, false, true, true, true, false, true, true, true, false, false, false, false, true, true, false, false, false, true, true, false, false, true, true, true, true, true, true, false, true, false, false, true, false, false, false, true, false, true, true, true, false, true, true, true, false, true, false, false, false, false, false, true, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, true, true, false, false, true, false, true, false, false, false, true, true, true, true, false, false, true, true, true, false, true, true, true, false, false, false, true, false, true, false, true, true, true, false, false, true, true, true, true, true, false, false, true, false, false, true, true, true, true, false, true, false, true, false, false, true, false, false, false, false, true, true, false, false, false, true, true, false, true, true, true, false, true, true, true, false, false, false, false, true, true, false, false, false, true, true, false, false, true, true, true, true, true, true, false, true, false, false, true, false, false, false, true, false, true, true, true, false, true, true, true, false, true, false, false, false, false, false, true, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, false, true, true, false, true, true, false, true, true, false, true, true, true, false, false, true, true, true, false, false, false, true, true, true, true, true, false, true, true, true, false, true, true, true, true, false, true, false, true, true, true, false, true, false, false, true, false, true, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, true, false, true, true, true, false, false, false, false, true, false, true, false, false, true, false, true, false, true, false, true, false, false, false, true, false, false, false, true, false, true, true, true, true, false, true, false, true, true, false, false, false, false, true, false, true, false, true, true, true]);
            let encoded = BinVector::from_bools(&[false, true, true, false, false, true, true, false, true, true, false, true, true, false, true, true, true, false, false, true, true, true, false, false, false, true, true, true, true, true, false, true, true, true, false, true, true, true, true, false, true, false, true, true, true, false, true, false, false, true, false, true, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, true, false, true, true, true, false, false, false, false, true, false, true, false, false, true, false, true, false, true, false, true, false, false, false, true, true, false, false, false, true, false, true, true, true, true, false, true, false, true, true, false, false, false, false, false, true, false, true, false, false, true, true, true, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, false, true, true, false, true, true, false, true, true, false, true, true, true, false, false, true, true, true, false, false, false, true, true, true, true, true, false, true, true, true, false, true, true, true, true, false, true, false, true, true, false, false, true, false, false, true, false, true, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, true, false, true, true, true, false, false, false, false, true, false, true, false, false, true, false, true, false, true, false, true, false, false, false, true, true, false, false, false, true, false, true, true, true, true, false, true, false, true, true, false, false, false, false, false, true, false, true, false, false, true, true, true, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, false, true, true, false, true, false, true, true, true, false, false, false, true, true, false, true, true, true, true, false, true, false, true, true, false, false, true, false, true, false, false, true, false, true, false, true, false, false, true, false, false, true, true, true, true, true, true, false, true, false, false, false, false, true, false, false, true, true, true, false, true, true, false, false, false, true, true, true, false, false, false, true, true, false, false, true, false, false, true, false, false, true, true, false, false, true, false, true, true, false, true, true, true, false, true, false, false, true, true, true, false, false, false, true, false, false, true, true, false, false, false, false, false, false, true]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, false, true, true, false, true, false, true, true, true, false, false, false, true, true, false, true, true, true, true, false, true, false, true, true, false, false, true, false, true, false, false, true, false, true, false, true, false, false, true, false, false, true, true, true, true, true, true, false, true, false, false, false, false, true, false, false, true, true, true, false, true, true, false, false, false, true, true, true, false, false, false, true, true, false, false, true, false, false, true, false, false, true, true, false, false, true, false, true, true, true, false, true, true, true, false, true, false, false, true, true, true, false, false, false, true, false, false, false, true, true, false, false, false, false, false, false, false, false, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, false, true, true, false, true, false, true, true, true, false, false, false, true, true, false, true, true, true, true, false, true, false, true, true, false, false, true, false, true, false, false, true, false, true, false, true, false, false, true, false, false, true, true, true, true, true, true, false, true, false, false, false, false, true, false, false, true, true, true, false, true, true, false, false, false, true, true, true, false, false, false, true, true, false, false, true, false, false, true, false, false, true, true, false, false, true, false, true, true, true, false, true, true, true, false, true, false, false, true, true, true, false, false, false, true, false, false, false, true, true, false, false, false, false, false, false, false, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, true, false, false, true, false, true, true, true, false, true, false, false, true, true, true, false, true, true, true, false, true, true, true, false, false, false, true, false, false, true, true, false, false, true, false, true, false, true, true, true, true, true, false, true, false, true, true, true, true, true, false, false, false, true, false, true, false, false, false, true, true, true, true, true, false, false, true, false, true, false, false, true, true, false, true, true, false, false, false, false, true, false, true, true, false, false, true, true, false, false, true, true, false, false, false, false, false, true, false, false, false, true, false, false, true]);
            let encoded = BinVector::from_bools(&[false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, true, false, false, true, false, true, true, true, false, true, false, false, true, true, true, false, true, true, true, false, true, true, true, false, false, false, true, false, false, true, true, false, false, true, false, true, false, true, true, true, true, true, false, true, false, true, true, true, true, true, false, false, false, true, false, true, false, false, false, true, true, true, true, true, false, false, true, false, true, false, false, true, true, false, true, true, false, false, false, true, false, true, false, true, true, false, false, true, true, false, false, true, true, false, false, false, false, false, false, true, false, false, false, true, true, false, false, false, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, true, false, false, true, false, true, true, true, false, true, false, false, true, true, true, false, true, true, true, false, true, true, true, false, false, false, true, false, false, true, true, false, false, true, false, true, false, true, true, true, true, true, false, true, false, true, true, true, true, true, false, false, false, true, false, true, false, false, false, true, true, true, true, true, false, false, true, false, true, false, false, true, true, false, true, true, false, false, false, true, false, true, false, true, true, false, false, true, true, false, false, true, true, true, false, false, false, false, false, true, false, false, false, true, true, false, false, false, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, false, false, true, true, true, true, true, true, true, false, true, true, true, false, true, false, false, false, false, false, true, false, true, true, false, true, true, false, true, true, true, true, true, false, true, true, false, true, false, false, false, false, true, true, true, true, true, false, false, true, true, false, false, false, true, false, true, false, true, true, true, true, true, true, true, true, false, true, true, true, false, false, false, true, false, false, true, false, true, false, false, false, true, false, true, false, true, true, true, false, false, true, true, true, false, false, false, true, true, false, true, true, true, false, false, true, true, false, true, false, false, true, true, false, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, false, false, false, true, true, true, true, true, true, true, false, true, true, true, false, true, false, false, false, false, false, true, false, true, true, false, true, true, false, true, true, true, true, true, false, true, true, false, true, false, false, false, false, true, true, true, true, true, false, false, true, true, false, false, false, true, false, true, false, true, true, true, true, true, true, true, true, false, true, true, true, false, false, false, true, false, false, true, false, true, false, false, false, true, false, true, false, true, true, true, false, false, false, true, true, true, false, false, false, true, true, false, true, true, true, false, false, false, true, true, false, true, false, false, true, false, true, false, false, false, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, false, false, true, true, true, true, true, true, true, false, true, true, true, false, true, false, false, false, false, false, true, false, true, true, false, false, true, false, true, true, true, true, true, false, true, true, false, true, false, false, false, false, true, true, true, true, true, false, false, true, true, false, false, false, true, false, true, false, true, true, true, true, true, true, true, true, false, true, true, true, false, false, false, true, false, false, true, false, true, false, false, false, true, false, true, false, true, true, true, false, false, false, true, true, true, false, false, false, true, true, false, true, true, true, false, false, false, true, true, false, true, false, false, true, false, true, false, false, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, true, false, true, true, false, false, true, true, false, false, true, false, true, false, false, false, true, true, true, true, false, true, false, true, false, false, false, true, false, true, false, false, false, true, false, true, true, false, true, true, true, true, true, true, true, true, false, true, true, false, false, false, true, false, false, true, false, true, true, false, true, true, false, false, true, true, true, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, true, true, false, false, false, true, true, false, false, false, true, true, true, false, true, false, true, true, true, true, false, false, false, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, true, true, true, false, true, true, false, false, true, true, false, false, true, false, true, false, false, false, true, true, true, true, false, true, false, true, false, false, false, true, false, true, false, false, false, true, false, true, true, false, true, true, true, true, true, true, true, true, false, true, true, false, false, false, true, false, false, true, false, true, true, false, true, true, false, false, true, true, true, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, true, true, true, false, false, false, true, true, false, false, false, true, true, true, false, true, false, false, true, true, true, true, false, false, true, false, true, false, true, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, true, false, true, true, false, false, true, true, false, false, true, false, true, false, false, false, true, true, true, true, false, true, false, true, false, false, false, true, false, true, false, false, false, true, false, true, true, false, true, true, true, true, true, true, true, true, false, true, true, false, false, false, true, false, false, true, false, true, true, false, true, true, false, false, true, true, true, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, true, true, true, true, false, false, true, true, false, false, false, true, true, true, false, true, false, false, true, true, true, true, false, false, true, false, true, false, true, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, false, false, true, false, true, true, false, true, false, false, false, true, false, true, false, false, false, true, false, false, true, false, true, false, false, true, true, false, false, true, true, false, true, true, false, false, false, false, false, false, true, false, true, false, false, false, false, true, true, true, false, true, true, true, false, false, false, true, false, true, true, false, true, false, true, false, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, true, true, true, true, false, true, true, true, false, false, false, false, false, true, true, true, true, true, true, true, true, false, true, false, true, true, true, false, false, true, true, false, true, true, false]);
            let encoded = BinVector::from_bools(&[true, false, false, true, false, false, true, false, true, true, false, true, false, false, false, true, false, true, false, false, false, true, false, false, true, false, true, false, false, true, true, false, false, true, true, false, true, true, false, false, false, false, false, false, true, false, true, false, false, false, false, true, true, true, false, true, true, true, false, false, false, true, false, true, true, false, true, false, true, false, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, true, true, true, true, false, true, true, true, false, true, false, false, false, false, true, true, true, true, true, true, true, true, false, true, false, false, true, true, true, false, false, true, true, true, false, true, true, false, false, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, false, false, true, false, true, true, false, true, false, false, false, true, false, true, false, false, false, true, false, false, true, false, true, false, false, true, true, false, false, true, true, false, true, true, false, false, false, false, false, false, true, false, true, false, false, false, false, true, false, true, false, true, true, true, false, false, false, true, false, true, true, false, true, false, true, false, true, false, true, true, true, true, false, true, true, false, false, true, true, false, false, true, true, true, true, false, true, true, true, false, true, false, false, false, false, true, true, true, true, true, true, true, true, false, true, false, false, true, true, true, false, false, true, true, true, false, true, true, false, false, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, true, true, false, true, true, false, true, true, false, true, false, false, false, true, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, true, false, false, false, true, false, true, false, false, false, false, false, false, true, false, true, true, true, false, true, false, true, false, true, true, true, true, true, true, true, true, true, false, true, true, true, false, false, true, false, true, false, true, true, false, true, false, true, false, true, false, true, false, true, true, false, false, false, true, true, false, true, false, true, false, false, false, true, false, false, true, false, true, false, true, true, false, true, false, true, false, false, true, true, false, false, true]);
            let encoded = BinVector::from_bools(&[false, false, true, true, true, true, false, true, true, false, true, true, false, true, false, false, false, true, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, true, false, false, false, true, false, true, false, false, false, false, false, false, true, false, true, true, true, false, true, false, true, false, true, true, true, true, true, true, true, true, true, false, true, true, true, false, false, true, false, true, false, true, true, false, true, false, true, false, true, false, true, false, true, true, false, false, false, true, true, false, false, true, false, true, false, false, false, true, false, false, true, false, true, false, true, true, false, false, true, false, true, false, false, true, true, true, false, false, true, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, true, true, false, true, true, false, true, true, false, true, false, false, false, true, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, true, false, false, false, true, false, true, false, false, false, false, false, false, true, false, true, true, true, false, true, false, true, false, true, true, true, true, true, true, true, true, true, false, true, true, true, false, false, true, false, true, false, true, true, false, true, true, true, false, true, false, true, false, true, true, false, false, false, true, true, false, false, true, false, true, false, false, false, true, false, false, true, false, true, false, true, true, false, false, true, false, true, false, false, true, true, true, false, false, true, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, true, false, true, false, true, false, true, true, false, false, false, false, false, true, true, true, false, false, false, true, false, true, false, true, false, true, false, false, true, false, false, true, true, true, true, false, false, false, true, true, true, false, false, false, true, false, false, true, true, true, true, true, false, false, true, true, false, true, false, false, true, true, true, true, false, true, true, true, false, true, false, true, true, false, true, false, false, true, false, false, false, true, true, false, false, true, false, true, true, true, true, false, false, true, true, true, true, true, false, true, false, true, true, false, false, true, false, false, false, true, true, false, false, true, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, false, true, false, true, false, true, false, true, true, false, false, false, false, false, true, true, true, false, false, false, true, false, true, false, true, false, true, false, false, true, false, false, true, true, true, true, false, false, false, true, true, true, false, false, false, true, false, false, true, true, true, true, true, false, false, true, true, false, true, false, false, true, true, true, true, false, true, true, true, false, true, false, true, true, false, true, false, false, true, false, false, false, true, true, false, false, true, false, true, true, true, true, true, false, false, true, true, true, true, true, false, true, false, true, true, false, false, false, true, false, false, false, true, true, false, false, false, true, true, false, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, true, false, true, false, true, false, true, true, false, false, false, false, false, true, true, true, false, false, false, true, false, true, false, true, false, true, false, false, true, false, false, true, true, true, true, false, false, false, true, true, true, false, false, false, true, false, false, true, true, true, true, true, false, false, true, true, false, true, false, false, true, true, true, true, false, true, true, true, false, true, false, true, true, false, true, false, false, true, false, false, false, true, true, false, false, true, false, true, true, true, true, true, false, false, true, true, true, true, true, false, true, false, false, true, false, false, false, true, false, false, false, true, true, false, false, false, true, true, false, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, false, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, false, true, false, true, false, true, true, true, true, false, true, true, false, true, true, false, true, false, true, true, false, true, true, false, true, false, false, true, false, false, false, false, true, true, false, false, true, true, true, true, false, false, false, false, true, false, true, true, true, false, true, true, true, false, false, true, false, true, true, false, true, true, false, false, false, false, true, false, false, false, false, false, false, false, true, false, true, false, false, false, true, true, false, true, false, true, false, false, false, true, true, true, false, true, false, false, false, true, true, true]);
            let encoded = BinVector::from_bools(&[false, true, true, false, false, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, false, true, false, true, false, true, true, true, true, false, true, true, false, true, true, false, true, false, true, true, false, true, true, false, true, false, false, true, false, false, false, false, true, true, false, false, true, true, true, true, false, false, false, false, true, false, true, true, true, false, true, true, true, false, false, true, false, true, true, false, true, true, false, false, false, false, true, false, false, false, false, false, false, false, true, true, false, true, false, false, false, true, true, false, true, false, true, false, false, false, true, true, true, true, false, true, false, false, true, false, true, true, false, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, false, true, true, true, true, true, true, true, true, true, false, true, false, false, true, false, false, true, false, true, false, true, true, true, true, false, true, true, false, true, true, false, true, false, true, true, false, true, true, false, true, false, false, true, false, false, false, false, true, true, false, false, true, true, true, true, false, false, false, false, true, false, true, true, true, false, true, true, true, false, false, true, false, true, true, false, true, true, false, false, false, false, true, false, false, false, false, false, false, false, true, true, false, true, false, false, false, true, true, false, true, false, true, false, false, false, true, true, true, true, false, true, false, false, true, false, true, true, false, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, true, false, true, false, false, true, false, false, false, false, true, false, false, false, false, false, false, true, false, false, false, false, true, false, true, false, false, true, true, false, true, true, true, true, false, false, true, true, true, true, true, true, true, true, false, false, false, false, true, true, false, true, false, true, false, true, false, false, false, false, false, true, true, false, true, false, false, false, true, false, false, false, false, true, false, true, false, false, true, false, true, false, true, false, true, true, true, true, true, false, true, false, false, false, false, true, false, true, true, true, false, true, true, true, false, true, false, false, true, false, false, true, true, false, false]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, true, false, true, false, false, true, false, false, false, false, true, false, false, false, false, false, false, true, false, false, false, false, true, false, true, false, false, true, true, false, true, true, true, true, false, false, true, true, true, true, true, true, true, true, false, false, false, false, true, true, false, true, false, true, false, true, false, false, false, false, false, true, true, false, true, false, false, false, true, false, false, false, false, true, false, true, false, false, true, false, true, false, true, false, true, true, true, true, true, true, false, true, false, false, false, false, true, false, true, true, true, false, true, true, true, false, false, true, false, false, true, false, false, true, true, true, false, true, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, true, false, true, false, false, true, false, false, false, false, true, false, false, false, false, false, false, true, false, false, false, false, true, false, true, false, false, true, true, false, true, true, true, true, false, false, true, true, true, true, true, true, true, true, false, false, false, false, true, true, false, false, false, true, false, true, false, false, false, false, false, true, true, false, true, false, false, false, true, false, false, false, false, true, false, true, false, false, true, false, true, false, true, false, true, true, true, true, true, true, false, true, false, false, false, false, true, false, true, true, true, false, true, true, true, false, false, true, false, false, true, false, false, true, true, true, false, true, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, false, true, true, false, true, true, false, false, false, true, false, false, false, true, false, true, false, true, true, true, false, true, true, true, true, false, true, true, true, true, false, false, false, false, true, true, false, false, true, false, false, true, true, false, false, true, true, true, false, false, true, true, true, true, false, true, false, true, false, false, false, true, true, false, true, true, false, true, true, true, false, true, false, false, false, true, true, false, false, false, false, true, true, true, false, false, true, true, true, false, true, true, true, true, true, false, true, true, true, false, true, true, true, false, false, true, true, false, true, true, false, false, true, false, true, false]);
            let encoded = BinVector::from_bools(&[false, false, true, true, false, true, true, false, true, true, false, false, false, true, false, false, false, true, false, true, false, true, true, true, false, true, true, true, true, false, true, true, true, true, false, false, false, false, true, true, false, false, true, false, false, true, true, false, false, true, true, true, false, false, true, true, true, true, false, true, false, true, false, false, false, true, true, false, true, true, false, true, true, true, false, true, false, false, false, true, true, false, false, false, false, true, true, true, false, false, true, true, true, false, true, true, true, true, true, true, false, true, true, true, false, true, true, true, false, false, false, true, true, false, true, true, false, false, true, true, false, true, false, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, true, true, false, true, true, false, false, false, true, false, false, false, true, false, true, false, true, true, true, false, true, true, true, true, false, true, true, true, true, false, false, false, false, true, true, false, false, true, false, false, true, true, false, false, true, true, true, false, false, true, true, true, true, false, true, false, true, false, false, false, true, true, false, true, true, false, true, true, true, false, true, false, false, false, true, true, false, false, false, false, true, true, true, false, false, true, true, true, false, true, true, true, true, true, true, false, true, true, true, false, true, true, true, false, false, false, true, true, false, true, true, false, false, true, true, false, true, false, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, false, false, true, true, false, true, false, true, false, true, false, true, false, false, false, true, false, true, false, false, false, false, true, false, false, true, false, false, true, true, true, true, false, false, false, true, false, true, true, false, true, true, true, false, false, true, false, true, true, true, true, false, false, false, false, false, false, false, false, true, false, true, true, true, true, true, false, true, false, true, false, true, false, false, false, true, false, true, false, true, false, true, true, true, false, false, false, true, false, true, true, true, false, false, true, false, true, false, false, false, false, false, false, true, true, false, true, true, false, false, true, true, false, false, false, true]);
            let encoded = BinVector::from_bools(&[false, false, false, true, false, false, true, true, false, true, false, true, false, true, false, true, false, false, false, true, false, true, false, false, false, false, true, false, false, true, false, false, true, true, true, true, false, false, false, true, false, true, true, false, true, true, true, false, false, true, false, true, true, true, true, false, false, false, false, false, false, false, false, true, false, true, true, true, true, true, false, true, false, true, false, true, false, false, false, true, false, true, false, true, false, true, true, true, false, false, false, true, false, true, false, true, true, false, false, true, false, true, false, false, false, false, false, false, true, true, true, false, true, true, false, false, true, true, true, false, false, false, true, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, false, false, true, true, false, true, false, true, false, true, false, true, false, false, false, true, false, true, false, false, false, false, true, false, false, true, false, false, true, true, true, true, false, false, false, true, false, true, true, false, true, true, true, false, false, true, false, true, true, true, true, false, false, false, false, false, false, false, false, true, false, true, true, true, true, true, false, true, false, true, false, true, false, false, false, true, false, true, false, true, false, true, true, true, false, false, false, true, false, true, false, true, true, false, false, true, false, true, false, false, false, false, false, true, true, true, true, false, true, true, false, false, true, true, true, false, false, false, true, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, false, false, false, true, true, false, true, true, false, false, true, true, false, true, true, true, true, true, true, false, true, false, false, true, false, false, false, false, false, false, false, false, false, true, false, true, false, true, false, true, true, true, false, false, true, true, false, false, true, true, false, true, true, false, false, false, true, true, false, false, true, false, false, true, false, false, true, true, true, false, true, false, true, false, false, true, true, false, true, false, true, true, true, true, false, true, true, true, true, false, false, false, false, false, true, true, true, false, true, false, false, false, false, true, true, false, false, false, false, true, false, true, false, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, false, false, false, true, true, false, true, true, false, false, true, true, false, true, true, true, true, true, true, false, true, false, false, true, false, false, false, false, false, false, false, false, false, true, false, true, false, true, false, true, true, true, false, false, true, true, false, false, true, true, false, true, true, false, false, false, true, true, false, false, true, false, false, true, false, false, true, true, true, false, true, false, true, false, false, true, true, false, true, false, true, true, true, true, false, true, true, true, true, false, false, false, false, false, false, true, true, true, false, true, false, false, false, false, true, false, true, false, false, false, false, true, false, false, true, false, true, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, false, false, false, true, true, false, true, true, false, false, true, true, false, true, true, true, true, true, true, false, true, false, false, true, false, false, false, false, false, false, false, false, false, true, false, true, false, true, false, true, true, true, false, false, true, true, false, false, true, true, false, true, true, false, false, false, true, true, false, false, true, false, false, true, false, false, true, true, true, false, true, false, true, false, false, true, true, false, true, false, true, true, true, true, false, true, true, true, true, false, false, false, false, false, false, true, true, true, false, true, false, false, false, false, true, false, false, false, false, false, false, true, false, false, true, false, true, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, false, false, false, false, false, true, true, false, true, false, true, false, true, true, true, false, false, true, true, false, false, false, true, false, true, false, true, false, true, false, false, true, true, false, false, false, false, true, true, false, true, false, false, true, false, false, false, false, true, false, false, false, true, true, true, true, false, true, true, false, true, true, true, false, false, false, true, false, true, true, true, false, true, true, false, false, false, true, false, false, true, false, true, true, false, false, false, true, true, false, false, true, false, true, true, false, false, false, false, true, true, false, true, false, false, false, true, false, false, false, false, true, false, false, false, false]);
            let encoded = BinVector::from_bools(&[true, true, false, true, false, false, false, false, false, true, true, false, true, false, true, false, true, true, true, false, false, true, true, false, false, false, true, false, true, false, true, false, true, false, false, true, true, false, false, false, false, true, true, false, true, false, false, true, false, false, false, false, true, false, false, false, true, true, true, true, false, true, true, false, true, true, true, false, false, false, true, false, true, true, true, false, true, true, false, false, false, true, false, false, true, false, true, true, false, false, false, true, true, false, true, false, true, false, true, true, false, false, false, false, true, true, false, true, false, false, true, false, true, false, false, false, false, true, false, false, false, false, true, false, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, false, false, false, false, false, true, true, false, true, false, true, false, true, true, true, false, false, true, true, false, false, false, true, false, true, false, true, false, true, false, false, true, true, false, false, false, false, true, false, false, true, false, false, true, false, false, false, false, true, false, false, false, true, true, true, true, false, true, true, false, true, true, true, false, false, false, true, false, true, true, true, false, true, true, false, false, false, true, false, false, true, false, true, true, false, false, false, true, true, false, true, false, true, false, true, true, false, false, false, false, true, true, false, true, false, false, true, false, true, false, false, false, false, true, false, false, false, false, true, false, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, false, false, true, true, false, false, true, true, true, false, true, true, true, false, false, false, false, true, false, false, true, false, true, true, true, false, true, true, false, true, true, true, false, true, true, true, true, false, true, true, true, false, true, false, true, true, true, true, true, false, false, true, true, false, false, true, true, true, false, false, true, true, true, false, true, true, false, true, true, true, true, true, false, true, true, false, true, false, false, false, false, false, true, false, true, true, false, false, true, true, false, true, false, true, false, true, false, true, true, true, true, true, false, false, true, false, false, true, true, false, true, true, true, false, false, false]);
            let encoded = BinVector::from_bools(&[true, false, false, true, false, false, true, true, false, false, true, true, true, false, true, true, true, false, false, false, false, true, false, false, true, false, true, true, true, false, true, true, false, true, true, true, false, true, true, true, true, false, true, true, true, false, true, false, true, true, true, true, true, false, false, true, true, false, false, true, true, true, false, false, true, true, true, false, true, true, false, true, true, true, true, true, false, true, true, false, true, false, false, false, false, false, true, false, true, true, false, false, true, true, false, false, true, false, true, false, true, false, true, true, true, true, true, false, false, true, true, false, false, true, true, false, true, true, false, true, false, false, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, false, false, true, true, false, false, true, true, true, false, true, true, true, false, false, false, false, true, false, false, true, false, true, true, true, false, true, true, false, true, true, true, false, true, true, true, true, false, true, true, true, false, true, false, true, true, true, true, true, false, false, true, true, false, false, true, true, true, false, false, true, true, true, false, false, true, false, true, true, true, true, true, false, true, true, false, true, false, false, false, false, false, true, false, true, true, false, false, true, true, false, false, true, false, true, false, true, false, true, true, true, true, true, false, false, true, true, false, false, true, true, false, true, true, false, true, false, false, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, false, true, false, false, false, false, true, false, true, true, false, true, false, false, true, false, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, false, true, true, false, false, false, true, true, false, false, true, true, false, false, false, true, true, true, false, true, true, false, false, true, true, true, false, true, true, false, false, false, true, true, true, false, false, true, true, true, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, false, false, false, true, false, true, true, true, false, true, true, true, false, false, true, false, false, true, true, true, false, false, false, false, false, true]);
            let encoded = BinVector::from_bools(&[false, true, true, false, false, true, false, false, false, false, true, false, true, true, false, true, false, false, true, false, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, false, true, true, false, false, false, true, true, false, false, true, true, false, false, false, true, true, true, false, true, true, false, false, true, true, true, false, true, true, false, false, false, true, true, true, false, false, true, true, true, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, true, false, false, false, true, false, true, true, true, false, true, true, true, false, false, true, false, false, false, true, true, true, false, false, false, false, false, false, true, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, false, true, false, false, false, false, true, false, true, true, false, true, false, false, true, false, true, true, false, true, false, true, true, true, true, true, true, true, true, true, true, true, true, false, true, false, true, true, false, false, false, true, true, false, false, true, true, false, false, false, true, true, true, false, true, true, false, false, true, true, true, false, true, true, false, false, false, true, true, true, false, false, true, true, true, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, true, false, false, false, true, false, true, true, true, false, true, true, true, false, false, true, false, false, false, true, true, true, false, false, false, false, false, false, true, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, false, false, true, true, true, false, true, false, true, true, true, false, false, true, true, false, true, false, true, true, false, false, true, true, false, true, false, true, true, false, false, true, false, false, false, true, false, true, false, false, true, true, true, true, true, false, true, true, true, true, true, true, false, true, true, false, false, false, false, false, false, true, false, true, true, true, true, true, true, true, true, false, true, false, false, false, false, false, true, true, false, false, true, false, true, true, true, true, false, true, false, false, false, true, true, false, false, false, false, true, true, true, false, false, true, true, false, true, false, false, false, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[false, false, false, true, false, false, true, true, true, false, true, false, true, true, true, false, false, true, true, false, true, false, true, true, false, false, true, true, false, true, false, true, true, false, false, true, false, false, false, true, false, true, false, false, true, true, true, true, true, false, true, true, true, true, true, true, false, true, true, false, false, false, false, false, false, true, false, true, true, true, true, true, true, true, true, false, true, false, false, false, false, false, true, true, false, false, true, false, true, true, true, true, false, true, false, false, false, false, true, true, false, false, false, false, true, true, true, false, false, true, false, true, false, true, false, false, false, true, true, true, true, false, false, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, false, false, true, true, true, false, true, false, true, true, true, false, false, true, true, false, true, false, true, true, false, false, true, true, false, true, false, true, true, false, false, true, false, false, false, true, false, true, false, false, true, true, true, true, true, false, true, true, true, true, true, true, false, true, true, false, false, false, false, false, false, true, false, true, true, true, true, true, true, true, true, false, true, false, false, false, false, false, true, true, false, false, true, false, true, true, true, true, false, true, false, false, false, false, true, true, false, false, false, false, true, true, true, true, false, true, false, true, false, true, false, false, false, true, true, true, true, false, false, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, true, false, true, false, false, true, true, true, false, true, true, true, false, false, true, false, true, true, false, false, true, true, true, false, true, false, true, false, true, false, false, false, false, true, true, true, true, false, false, false, false, true, false, false, false, true, false, true, true, true, false, false, false, true, false, false, false, true, true, false, false, true, false, false, false, false, false, false, true, true, true, true, true, false, false, false, true, true, false, false, false, false, false, false, true, false, true, true, false, true, true, false, false, true, true, false, false, false, true, false, true, true, true, true, false, false, true, false, false, false, false, false, false, true, true, false]);
            let encoded = BinVector::from_bools(&[true, true, true, false, true, false, true, false, false, true, true, true, false, true, true, true, false, false, true, false, true, true, false, false, true, true, true, false, true, false, true, false, true, false, false, false, false, true, true, true, true, false, false, false, false, true, false, false, false, true, false, true, true, true, false, false, false, true, false, false, false, true, true, false, false, true, false, false, false, false, false, false, true, true, true, true, true, false, false, false, true, true, false, false, false, false, false, false, true, false, true, true, false, true, true, true, false, false, true, true, false, false, false, true, false, true, true, true, true, false, false, false, true, false, false, false, false, false, true, false, true, true, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, true, false, true, false, false, true, true, true, false, true, true, true, false, false, false, false, true, true, false, false, true, true, true, false, true, false, true, false, true, false, false, false, false, true, true, true, true, false, false, false, false, true, false, false, false, true, false, true, true, true, false, false, false, true, false, false, false, true, true, false, false, true, false, false, false, false, false, false, true, true, true, true, true, false, false, false, true, true, false, false, false, false, false, false, true, false, true, true, false, true, true, true, false, false, true, true, false, false, false, true, false, true, true, true, true, false, false, false, true, false, false, false, false, false, true, false, true, true, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, false, true, false, true, true, true, true, false, false, false, true, false, false, false, false, true, true, false, true, false, false, false, false, false, true, true, false, true, true, false, true, true, true, true, false, false, false, false, false, false, true, true, true, true, false, false, false, true, true, false, false, false, true, true, true, true, false, false, false, true, false, false, false, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, true, false, true, false, true, false, true, false, false, true, false, true, true, false, false, true, false, false, true, true, false, true, true, true, false, true, false, true, false, false, true, false, true, false, false, false, false]);
            let encoded = BinVector::from_bools(&[true, true, false, true, false, true, false, true, true, true, true, false, false, false, true, false, false, false, false, true, true, false, true, false, false, false, false, false, true, true, false, true, true, false, true, true, true, true, false, false, false, false, false, false, true, true, true, true, false, false, false, true, true, false, false, false, true, true, true, true, false, false, false, true, false, false, false, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, true, false, true, false, true, false, true, false, false, true, false, false, true, true, false, false, true, false, false, true, true, false, true, true, true, false, true, true, false, true, false, false, true, false, true, false, false, false, false, true, false, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, false, true, false, true, true, true, true, false, false, false, true, false, false, false, false, true, true, false, true, false, false, false, false, false, true, true, false, true, true, false, true, true, true, true, false, false, false, false, false, false, true, true, true, true, false, false, false, true, true, false, false, false, true, true, true, true, false, false, false, true, false, false, false, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, true, false, true, false, true, false, true, false, false, true, false, false, true, true, false, false, true, false, false, true, true, false, true, true, true, false, true, true, false, true, false, false, true, false, true, false, false, false, false, true, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, false, false, false, false, false, false, true, true, false, true, false, true, true, true, true, false, false, false, false, false, true, true, false, true, true, false, true, false, false, false, true, true, true, true, true, false, true, true, true, true, false, false, false, true, false, true, false, true, true, false, false, false, false, true, false, false, false, false, true, false, false, false, true, true, false, false, false, false, false, true, true, false, true, false, true, false, false, false, true, false, false, false, false, true, false, false, true, true, false, true, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, true, false, false, true, true, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, false, false, false, false, false, false, true, true, false, true, false, true, true, true, true, false, false, false, false, false, true, true, false, true, true, false, true, false, false, false, true, true, true, true, true, false, true, true, true, true, false, false, false, true, false, true, false, true, true, false, false, false, false, true, false, false, false, false, true, false, false, false, true, true, false, false, false, false, false, true, true, false, true, false, true, false, false, false, true, false, false, false, false, true, false, false, true, true, false, false, true, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, true, false, false, true, true, false, false, true, false, false, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, false, false, false, false, false, false, true, true, false, true, false, true, true, true, true, false, false, false, false, false, true, true, false, true, true, false, true, false, false, false, true, true, true, true, true, false, true, true, true, true, false, false, false, true, false, true, false, true, true, false, false, false, false, true, false, false, false, false, true, false, false, false, true, true, false, false, false, false, false, true, false, false, true, false, true, false, false, false, true, false, false, false, false, true, false, false, true, true, false, false, true, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, true, false, false, true, true, false, false, true, false, false, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, true, true, true, true, false, true, true, true, true, true, false, true, true, false, true, true, false, true, false, true, true, false, false, false, true, true, false, false, true, false, false, false, true, false, true, false, true, false, true, true, true, true, true, true, false, false, false, true, true, true, false, false, false, false, true, false, true, false, true, false, true, true, true, false, true, true, false, true, false, true, false, false, false, false, false, false, false, true, false, false, true, true, false, true, true, false, false, true, true, true, false, true, false, true, true, true, true, true, false, false, true, true, true, true, false, true, false, false, true, true, true, false, true, true, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, true, true, true, true, false, true, true, true, true, true, false, true, true, false, true, true, false, true, false, true, true, false, false, false, true, true, false, false, true, false, false, false, true, false, true, false, true, false, true, true, true, true, true, true, false, false, false, true, true, true, false, false, false, false, true, false, true, false, true, false, true, true, true, false, true, true, false, true, false, true, false, false, false, false, false, false, false, true, false, false, true, true, false, true, true, false, false, true, true, false, true, false, true, false, true, true, true, true, true, false, false, true, true, true, true, true, false, true, false, false, true, true, true, false, false, true, true, false, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, true, true, true, true, false, false, true, true, true, true, false, true, true, false, true, true, false, true, false, true, true, false, false, false, true, true, false, false, true, false, false, false, true, false, true, false, true, false, true, true, true, true, true, true, false, false, false, true, true, true, false, false, false, false, true, false, true, false, true, false, true, true, true, false, true, true, false, true, false, true, false, false, false, false, false, false, false, true, false, false, true, true, false, true, true, false, false, true, true, false, true, false, true, false, true, true, true, true, true, false, false, true, true, true, true, true, false, true, false, false, true, true, true, false, false, true, true, false, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, true, true, false, true, true, true, false, false, true, false, false, true, false, true, false, true, true, true, false, true, false, false, false, false, false, false, false, false, true, true, false, false, false, true, false, true, false, false, true, true, false, false, true, true, true, true, false, true, true, false, false, true, true, false, false, false, true, true, true, true, true, true, true, true, false, false, true, false, true, false, false, true, true, true, false, true, true, true, true, true, false, false, true, true, true, true, false, true, true, false, true, false, true, false, false, false, true, true, false, true, true, true, true, false, true, true, false, false, true, true, true, false, true, false, false, false]);
            let encoded = BinVector::from_bools(&[false, false, true, false, true, true, false, true, true, true, false, false, true, false, false, true, false, true, false, true, true, true, false, true, false, false, false, false, false, false, false, false, true, true, false, false, false, true, false, true, false, false, true, true, false, false, true, true, true, true, false, true, true, false, false, true, true, false, false, false, true, true, true, true, true, true, true, true, false, false, true, false, true, false, false, true, true, true, false, true, true, true, true, true, false, false, true, true, true, true, false, true, true, false, false, true, false, true, false, false, false, true, true, false, true, true, true, true, false, true, true, true, false, false, true, true, true, false, false, true, false, false, false, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, true, true, false, true, true, true, false, false, true, false, false, true, false, true, false, true, true, true, false, true, false, false, false, false, false, false, false, false, true, true, false, false, false, true, false, true, false, false, true, true, false, false, true, true, true, true, false, true, true, false, false, true, true, false, false, false, true, true, true, true, true, true, true, true, false, false, true, false, true, false, false, true, true, true, false, true, true, true, true, true, false, false, true, true, true, true, false, true, true, false, true, true, false, true, false, false, false, true, true, false, true, true, true, true, false, true, true, true, false, false, true, true, true, false, false, true, false, false, false, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, true, false, false, true, false, true, true, true, false, false, false, false, true, false, false, false, false, true, true, true, true, false, true, false, false, true, true, true, true, false, true, true, true, true, true, false, false, false, true, true, true, false, true, false, false, true, true, false, false, true, false, false, false, true, false, false, false, true, true, false, true, true, false, false, false, false, true, true, false, true, false, true, true, false, true, true, false, false, true, true, false, false, false, true, false, true, true, true, false, false, false, false, true, true, true, true, false, false, false, true, false, false, true, true, false, true, true, true, true, true, false, true, true, true, true]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, true, false, false, true, false, true, true, true, false, false, false, false, true, false, false, false, false, true, true, true, true, false, true, false, false, true, true, true, true, false, true, true, true, true, true, false, false, false, true, true, true, false, true, false, false, true, true, false, false, true, false, false, false, true, false, false, false, true, true, false, true, true, false, false, false, false, true, true, false, true, false, true, true, false, true, true, false, false, true, true, false, false, false, true, false, true, true, true, false, true, false, false, false, true, true, true, true, false, false, false, true, false, false, true, true, false, false, true, true, true, true, true, false, true, true, true, true, false, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, true, true, false, false, true, false, true, true, true, false, false, false, false, true, false, false, false, false, true, true, true, true, false, true, false, false, true, true, true, true, false, true, true, true, true, true, false, false, false, true, true, true, false, true, false, false, true, true, false, false, true, false, false, false, true, false, false, false, true, true, false, true, true, false, false, false, false, true, true, false, true, false, true, true, false, true, true, false, false, true, true, false, false, false, true, false, true, true, true, false, true, false, false, false, true, true, true, true, false, false, false, true, false, false, true, true, false, false, true, true, true, true, true, false, true, true, true, true, false, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, true, true, false, true, false, false, false, false, false, false, true, true, false, true, true, false, false, true, true, false, false, false, false, false, false, true, false, false, false, true, false, false, true, true, true, false, false, true, false, false, true, true, false, false, true, true, true, false, true, false, false, true, false, true, true, false, false, true, true, false, false, false, false, true, true, false, true, false, false, true, false, false, true, false, true, false, true, true, true, true, false, false, false, false, false, true, false, true, true, false, true, false, false, false, true, true, false, false, false, true, false, true, false, false, false, false, true, false, false, true, true, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[true, true, true, true, true, true, false, true, false, false, false, false, false, false, true, true, false, true, true, false, false, true, true, false, false, false, false, false, false, true, false, false, false, true, false, false, true, true, true, false, false, true, false, false, true, true, false, false, true, true, true, false, true, false, false, true, false, true, true, false, false, true, true, false, false, false, false, true, true, false, true, false, false, true, false, false, true, false, true, false, true, true, true, true, false, false, false, false, false, true, false, true, true, false, true, true, false, false, false, true, true, false, false, false, true, false, true, false, false, false, false, false, true, false, false, true, true, false, false, false, true, false, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, true, true, false, true, false, false, false, false, false, false, true, true, false, true, true, false, false, true, true, false, false, false, false, false, false, true, false, false, false, true, false, false, true, true, true, false, false, true, false, false, true, true, false, false, true, true, true, false, true, false, false, true, false, true, true, false, false, true, true, false, false, false, false, true, true, false, true, false, false, true, false, false, true, false, true, false, true, true, true, true, false, false, false, false, false, true, false, true, true, false, true, true, false, false, false, true, true, false, false, false, true, false, true, false, false, false, false, false, true, false, false, true, true, false, false, true, true, false, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, false, false, true, false, true, false, true, false, true, false, false, true, true, true, false, true, false, true, true, false, false, false, true, false, false, false, true, false, true, true, false, false, true, false, true, false, false, false, true, false, false, true, true, true, false, false, true, false, true, false, true, true, true, true, true, true, true, false, false, false, true, true, false, false, false, false, false, true, true, true, false, false, true, true, true, false, false, false, true, false, false, true, true, false, true, false, false, true, false, true, true, true, true, false, true, true, true, false, true, true, true, false, true, true, true, true, false, true, true, true, false, true, false, true, false, true]);
            let encoded = BinVector::from_bools(&[true, false, false, false, false, false, true, false, true, false, true, false, true, false, false, true, true, true, false, true, false, true, true, false, false, false, true, false, false, false, true, false, true, true, false, false, true, false, true, false, false, false, true, false, false, true, true, true, false, false, true, false, true, false, true, true, true, true, true, true, true, false, false, false, true, true, false, false, false, false, false, true, true, true, false, false, true, true, true, false, false, false, true, false, false, true, true, false, true, false, false, true, false, true, true, true, true, true, false, true, true, true, false, true, true, true, false, true, true, true, false, true, false, true, true, true, false, true, false, false, true, false, true, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, false, false, true, false, true, false, true, false, true, false, false, true, true, true, false, true, false, true, true, false, false, false, true, false, false, false, true, false, true, true, false, false, true, false, true, false, false, false, true, false, false, true, true, false, false, false, true, false, true, false, true, true, true, true, true, true, true, false, false, false, true, true, false, false, false, false, false, true, true, true, false, false, true, true, true, false, false, false, true, false, false, true, true, false, true, false, false, true, false, true, true, true, true, true, false, true, true, true, false, true, true, true, false, true, true, true, false, true, false, true, true, true, false, true, false, false, true, false, true, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, false, false, false, true, false, true, false, true, false, false, false, false, true, false, false, false, false, true, false, false, false, false, true, true, false, true, false, true, true, false, false, true, true, true, true, true, false, false, false, false, false, false, false, false, true, false, false, false, false, true, true, false, false, true, true, true, true, true, false, true, false, false, false, false, false, true, false, true, false, true, false, true, false, false, false, true, true, false, false, false, true, true, true, false, false, true, true, true, false, true, false, false, false, false, true, true, true, true, true]);
            let encoded = BinVector::from_bools(&[false, true, true, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, false, false, false, true, false, true, false, true, false, false, false, false, true, false, false, false, false, true, false, false, false, false, true, true, false, true, false, true, true, false, false, true, true, true, true, true, false, false, false, false, false, false, false, false, true, false, false, false, false, true, true, false, false, true, true, true, true, true, false, true, false, false, false, false, false, true, false, true, false, true, false, true, false, true, false, false, true, true, false, false, false, true, true, true, false, false, true, true, true, true, false, true, false, false, false, false, true, true, true, true, true, true, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, true, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, false, false, false, false, true, false, true, false, true, false, false, false, false, true, false, false, false, false, true, false, false, false, false, true, true, false, true, false, true, true, false, false, true, true, true, true, true, false, false, false, false, false, false, false, false, true, false, false, false, false, true, true, false, false, true, true, true, true, true, false, true, false, false, false, false, false, true, true, true, false, true, false, true, false, true, false, false, true, true, false, false, false, true, true, true, false, false, true, true, true, true, false, true, false, false, false, false, true, true, true, true, true, true, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, false, false, false, true, false, true, true, false, true, false, false, true, true, true, false, false, true, true, false, true, false, true, false, true, false, false, true, false, false, true, true, true, true, false, true, true, true, false, false, true, true, true, false, true, true, false, false, true, false, true, false, true, true, false, false, true, false, true, false, true, true, true, true, false, true, true, false, false, true, false, true, true, false, false, true, false, true, false, true, false, true, false, true, true, false, false, false, false, true, false, false, true, true, false, true, true, true, false, false, true, true, true, false, false, false, true, false, false, false, true, false, false, true, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, false, false, false, true, false, true, true, false, true, false, false, true, true, true, false, false, true, true, false, true, false, true, false, true, false, false, true, false, false, true, true, true, true, false, true, true, true, false, false, true, true, true, false, true, true, false, false, true, false, true, false, true, true, false, false, true, false, true, false, true, true, true, true, false, true, true, false, false, true, false, true, true, false, false, true, false, true, false, true, false, true, false, true, true, false, false, false, false, true, true, false, false, true, true, false, true, true, true, false, false, true, true, true, false, false, true, false, true, false, false, false, true, false, false, false, true, true, true, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, false, false, false, true, false, true, true, false, true, false, false, true, true, true, false, false, true, true, false, true, false, true, false, true, false, false, true, false, false, true, true, true, true, false, true, true, true, false, false, true, true, true, false, true, true, false, false, true, false, true, false, true, true, false, false, true, false, true, false, true, true, true, true, false, true, true, false, false, true, false, true, true, false, false, true, false, true, false, true, false, true, false, true, true, false, false, false, false, true, true, false, false, true, true, false, true, true, true, false, false, true, true, true, false, false, true, false, true, false, false, false, true, false, false, false, true, true, true, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, true, true, true, true, false, false, false, false, false, true, true, false, true, false, false, false, true, true, true, true, false, false, false, true, true, false, false, true, true, true, true, true, true, true, false, false, true, true, false, false, true, false, true, false, true, true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, true, false, true, false, false, false, false, false, false, true, false, false, true, false, true, false, true, true, true, false, false, true, false, false, false, false, false, true, true, true, false, true, false, true, false, true, true, false, false, false, false, false, false, true, false, false, false, false, true, false, true, true, true, true, true, true]);
            let encoded = BinVector::from_bools(&[false, false, false, false, true, true, true, true, false, false, false, false, false, true, true, false, true, false, false, false, true, true, true, true, false, false, false, true, true, false, false, true, true, true, true, true, true, true, false, false, true, true, false, false, true, false, true, false, true, true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, true, false, true, false, false, false, false, false, false, true, false, false, true, false, true, false, true, true, true, false, false, true, false, false, false, false, false, true, true, true, true, false, true, false, true, false, true, true, false, false, false, false, false, false, true, false, true, false, false, false, true, false, true, true, true, true, true, true, true, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, true, true, true, true, false, false, false, false, false, true, true, false, true, false, false, false, true, true, true, true, false, false, false, true, true, false, false, true, true, true, true, true, true, true, false, false, true, true, false, false, true, false, true, false, true, true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, true, false, true, false, false, false, false, false, false, true, false, false, true, false, true, false, true, false, true, false, false, true, false, false, false, false, false, true, true, true, true, false, true, false, true, false, true, true, false, false, false, false, false, false, true, false, true, false, false, false, true, false, true, true, true, true, true, true, true, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, false, true, true, false, false, true, true, true, false, true, false, false, false, false, false, true, false, true, true, false, false, true, false, true, false, false, false, true, true, false, true, false, false, false, true, false, true, true, false, true, true, false, true, false, false, false, true, true, false, false, true, false, true, true, false, false, false, true, false, false, false, false, true, true, true, false, true, true, true, true, true, false, true, false, false, false, true, true, true, false, false, true, true, true, true, false, false, false, true, false, true, false, false, false, true, true, false, true, true, true, true, true, false, false, true, true, true, false, false, false, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, false, true, true, false, false, true, true, true, false, true, false, false, false, false, false, true, false, true, true, false, false, true, false, true, false, false, false, true, true, false, true, false, false, false, true, false, true, true, false, true, true, false, true, false, false, false, true, true, false, false, true, false, true, true, false, false, false, true, false, false, false, false, true, true, true, false, true, true, true, true, true, false, true, false, false, false, true, true, true, false, false, true, true, true, true, false, false, false, true, false, false, true, false, false, false, true, true, false, true, true, true, true, true, false, false, true, true, true, true, false, false, false, true, true, true, true, false, true, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, false, true, true, false, false, true, true, true, false, true, false, false, false, false, false, true, false, true, true, false, false, true, false, true, false, false, false, true, true, false, true, false, false, false, true, false, true, true, false, true, true, false, true, false, false, false, true, true, false, false, true, true, true, true, false, false, false, true, false, false, false, false, true, true, true, false, true, true, true, true, true, false, true, false, false, false, true, true, true, false, false, true, true, true, true, false, false, false, true, false, false, true, false, false, false, true, true, false, true, true, true, true, true, false, false, true, true, true, true, false, false, false, true, true, true, true, false, true, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, true, false, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, true, true, true, false, true, true, true, false, true, false, false, false, false, false, false, true, false, true, false, true, true, false, false, true, true, false, true, false, true, false, false, false, false, false, true, true, true, false, false, true, true, true, false, true, false, false, false, true, false, true, false, true, false, true, false, false, false, true, true, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, false, false, true, false, true, false, true, true, true, false, false, true, false, true, true, true, false, false, false, true, true]);
            let encoded = BinVector::from_bools(&[false, false, false, true, true, false, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, true, true, true, false, true, true, true, false, true, false, false, false, false, false, false, true, false, true, false, true, true, false, false, true, true, false, true, false, true, false, false, false, false, false, true, true, true, false, false, true, true, true, false, true, false, false, false, true, false, true, false, true, false, true, false, false, false, true, true, true, true, true, true, true, true, true, false, true, true, false, false, true, true, true, true, false, false, true, false, true, false, true, true, true, false, false, false, true, false, true, true, true, false, true, false, false, true, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, true, false, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, true, true, true, false, true, true, true, false, true, false, false, false, false, false, false, true, false, true, false, true, true, false, false, true, true, false, true, false, true, false, false, false, false, false, true, true, true, false, false, true, true, true, false, true, false, false, false, true, false, true, false, true, false, true, false, false, false, true, true, true, true, true, true, true, true, true, false, true, true, false, false, true, true, true, true, false, false, true, false, true, false, true, true, true, false, false, false, true, false, true, true, true, false, true, false, false, true, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, false, true, false, false, true, true, true, false, true, false, false, false, false, true, false, false, true, true, true, false, false, false, false, true, true, false, true, false, false, true, false, false, false, true, true, false, false, true, true, true, false, true, false, false, false, true, false, true, true, true, false, false, true, true, true, false, true, false, false, false, true, true, true, false, true, true, false, true, false, true, false, true, false, true, true, false, true, true, true, true, true, true, true, false, true, false, false, true, true, true, false, true, true, false, false, false, false, false, true, false, true, false, false, true, true, false, false, true, false, false, true, false, false, true, false, true]);
            let encoded = BinVector::from_bools(&[true, true, false, true, false, true, false, false, true, true, true, false, true, false, false, false, false, true, false, false, true, true, true, false, false, false, false, true, true, false, true, false, false, true, false, false, false, true, true, false, false, true, true, true, false, true, false, false, false, true, false, true, true, true, false, false, true, true, true, false, true, false, false, false, true, true, true, false, true, true, false, true, false, true, false, true, false, true, true, false, true, true, true, true, true, true, true, false, true, false, false, true, true, true, false, false, true, true, false, false, false, false, false, true, false, true, false, false, true, true, true, false, false, true, false, false, true, false, true, false, true, false, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, false, true, false, false, true, true, true, false, true, false, false, false, false, true, false, false, true, true, false, false, false, false, false, true, true, false, true, false, false, true, false, false, false, true, true, false, false, true, true, true, false, true, false, false, false, true, false, true, true, true, false, false, true, true, true, false, true, false, false, false, true, true, true, false, true, true, false, true, false, true, false, true, false, true, true, false, true, true, true, true, true, true, true, false, true, false, false, true, true, true, false, false, true, true, false, false, false, false, false, true, false, true, false, false, true, true, true, false, false, true, false, false, true, false, true, false, true, false, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, true, false, true, false, false, false, true, true, false, false, false, true, false, true, true, true, false, false, true, false, false, true, true, false, true, true, true, false, true, true, true, true, false, true, false, false, true, true, true, false, false, false, false, false, true, false, false, true, true, true, true, true, true, false, false, false, false, true, true, false, false, false, false, true, false, true, false, true, true, true, true, false, false, true, true, false, true, false, false, true, false, true, false, true, false, true, true, true, true, true, false, false, true, false, false, false, true, false, false, false, true, false, true, true, false, true, true, false, false, true, false, true, false, true, true, true]);
            let encoded = BinVector::from_bools(&[false, false, true, true, true, false, true, false, false, false, true, true, false, false, false, true, false, true, true, true, false, false, true, false, false, true, true, false, true, true, true, false, true, true, true, true, false, true, false, false, true, true, true, false, false, false, false, false, true, false, false, true, true, true, true, true, true, false, false, false, false, true, true, false, false, false, false, true, false, true, false, true, true, true, true, false, false, true, true, false, true, false, false, true, false, true, false, true, false, true, true, true, true, true, false, false, false, true, false, false, false, true, false, false, false, true, false, true, true, false, false, true, true, false, false, true, false, true, true, false, true, true, true, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, true, false, true, false, false, false, true, true, false, false, false, true, false, true, true, true, false, false, true, false, false, true, true, false, true, true, true, false, true, true, true, true, false, true, false, false, true, true, true, false, false, false, false, false, true, false, false, true, true, true, true, true, true, false, false, false, false, true, true, false, false, false, false, true, false, true, false, true, true, true, true, false, false, true, true, false, true, false, false, true, false, true, false, true, false, true, true, true, true, true, false, false, false, true, false, false, false, true, false, false, false, true, false, true, true, false, false, true, true, false, false, true, false, true, true, false, true, false, true, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, false, true, true, true, true, false, true, true, true, false, false, false, false, false, false, true, true, false, false, true, true, false, false, false, false, false, false, false, true, false, false, true, true, true, false, true, true, false, true, true, true, false, false, true, false, false, false, false, false, false, false, false, true, false, false, true, true, false, true, true, true, true, false, true, false, false, false, true, false, false, false, false, true, true, true, true, false, true, true, true, true, true, true, false, true, false, false, false, false, false, true, true, false, true, true, true, true, false, true, true, false, false, false, true, true, false, false, false, true, true, false, false, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, false, true, true, true, true, false, true, true, true, false, false, false, false, false, false, true, true, false, false, true, true, false, false, false, false, false, false, false, true, false, false, true, true, true, false, true, true, false, true, true, true, false, false, true, false, false, false, false, false, false, false, false, true, false, false, true, true, false, true, true, true, true, false, true, false, false, false, true, false, false, false, false, true, true, true, true, false, true, true, true, true, true, true, false, true, false, false, false, false, false, false, true, true, false, true, true, true, true, false, true, true, false, false, false, true, true, true, false, false, false, true, true, false, true, false, true, false, true, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, false, false, true, true, true, true, false, true, true, true, false, false, false, false, false, false, true, true, false, false, true, true, false, false, false, false, false, false, false, true, false, false, true, true, true, false, true, true, false, true, true, true, false, false, true, false, false, false, false, false, false, false, false, true, false, false, true, true, false, true, true, true, true, false, true, false, false, false, true, false, false, false, false, true, true, true, true, false, true, true, true, true, true, true, false, true, false, false, false, false, false, false, true, true, false, true, true, true, true, false, true, true, false, false, false, true, true, true, false, false, false, true, true, false, true, false, true, false, true, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, false, true, true, false, false, false, false, true, true, true, true, false, true, false, false, false, false, false, false, true, false, true, false, false, true, false, false, false, true, true, false, true, true, false, true, true, false, false, false, true, true, true, true, false, true, true, false, false, false, true, true, true, true, false, false, false, true, true, false, true, true, true, false, true, true, true, false, false, true, false, true, false, true, false, true, true, true, false, false, false, false, false, true, true, false, false, false, false, false, false, true, true, true, true, true, true, true, false, true, true, true, false, true, true, true, true, true, true, false, true, true, true, true, false, false, true]);
            let encoded = BinVector::from_bools(&[true, true, false, true, false, true, true, false, false, false, false, true, true, true, true, false, true, false, false, false, false, false, false, true, false, true, false, false, true, false, false, false, true, true, false, true, true, false, true, true, false, false, false, true, true, true, true, false, true, true, false, false, false, true, true, true, true, false, false, false, true, true, false, true, true, true, false, true, true, true, false, false, true, false, true, false, true, false, true, true, true, false, false, false, false, false, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, false, true, true, true, false, true, true, true, true, true, true, true, false, true, true, true, false, true, false, false, false, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, false, true, true, false, false, false, false, true, true, true, true, false, true, false, false, false, false, false, false, true, false, true, false, false, true, false, false, false, true, true, false, true, true, false, true, true, false, false, false, true, true, true, true, false, false, true, false, false, false, true, true, true, true, false, false, false, true, true, false, true, true, true, false, true, true, true, false, false, true, false, true, false, true, false, true, true, true, false, false, false, false, false, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, false, true, true, true, false, true, true, true, true, true, true, true, false, true, true, true, false, true, false, false, false, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, false, false, true, false, false, true, true, false, false, true, false, true, false, true, false, true, false, true, true, true, false, true, true, false, false, false, false, true, false, false, true, true, true, false, true, true, false, false, false, false, false, true, true, true, false, true, false, false, false, false, true, false, false, false, false, true, false, false, true, false, false, true, true, false, true, false, false, true, true, true, false, false, true, true, true, true, false, false, false, false, false, false, true, true, true, true, true, false, true, true, false, true, true, true, false, true, true, true, true, false, true, true, true, false, false, true, false, true, false, false, true, true, false, false, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, false, false, false, true, false, false, true, true, false, false, true, false, true, false, true, false, true, false, true, true, true, false, true, true, false, false, false, false, true, false, false, true, true, true, false, true, true, false, false, false, false, false, true, true, true, false, true, false, false, false, false, true, false, false, false, false, true, false, false, true, false, false, true, true, false, true, false, false, true, true, true, false, false, true, true, true, true, false, false, false, false, false, false, true, true, true, true, true, false, true, true, false, false, true, true, true, false, true, true, true, true, false, true, true, true, false, false, false, true, false, true, false, false, true, true, false, false, false, false, true, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, false, false, true, false, false, true, true, false, false, true, false, false, false, true, false, true, false, true, true, true, false, true, true, false, false, false, false, true, false, false, true, true, true, false, true, true, false, false, false, false, false, true, true, true, false, true, false, false, false, false, true, false, false, false, false, true, false, false, true, false, false, true, true, false, true, false, false, true, true, true, false, false, true, true, true, true, false, false, false, false, false, false, true, true, true, true, true, false, true, true, false, false, true, true, true, false, true, true, true, true, false, true, true, true, false, false, false, true, false, true, false, false, true, true, false, false, false, false, true, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, false, true, false, true, false, false, true, false, false, false, true, false, false, false, true, true, true, true, true, false, true, true, true, false, false, false, true, false, false, false, true, true, true, false, true, false, false, false, true, false, false, true, true, false, false, false, true, true, true, false, false, false, true, false, true, true, true, false, true, true, false, false, false, false, true, false, true, true, true, true, false, false, true, true, true, true, true, true, false, true, false, false, false, false, false, false, true, true, false, false, false, false, true, true, true, false, false, false, false, false, false, false, true, false, true, false, true, false, true, true, false, true, true, false, true, true]);
            let encoded = BinVector::from_bools(&[true, true, false, true, false, true, false, true, false, false, true, false, false, false, true, false, false, false, true, true, true, true, true, false, true, true, true, false, false, false, true, false, false, false, true, true, true, false, true, false, false, false, true, false, false, true, true, false, false, false, true, true, true, false, false, false, true, false, true, true, true, false, true, true, false, false, false, false, true, false, true, true, true, true, false, false, true, true, true, true, true, true, false, true, false, false, false, false, false, false, true, true, false, false, false, false, false, true, true, true, false, false, false, false, false, false, false, true, false, true, true, false, true, false, true, true, false, true, true, true, false, true, false, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, false, true, false, true, false, false, true, false, false, false, true, false, false, false, true, true, true, true, true, false, true, true, true, false, false, false, true, false, false, false, true, true, true, false, true, false, false, false, true, false, false, true, true, false, false, false, true, true, true, false, false, false, true, false, true, true, true, false, true, true, false, false, false, false, true, false, true, true, true, true, false, false, true, true, true, true, true, true, false, true, false, false, false, false, false, false, true, true, false, false, false, false, false, true, true, false, false, false, false, false, false, false, false, true, false, true, true, false, true, false, true, true, false, true, true, true, false, true, false, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, true, false, false, false, false, true, true, false, false, false, true, true, false, false, true, true, false, true, false, false, true, false, true, true, true, true, false, true, false, true, true, false, false, false, true, false, true, true, true, true, false, true, true, true, false, false, true, true, true, true, false, true, true, false, true, true, true, false, false, false, false, true, true, false, false, false, false, true, true, true, true, false, false, true, false, false, false, false, false, true, false, true, true, true, false, true, true, false, false, false, false, false, true, false, false, true, true, true, false, false, true, false, false, false, true, true, true, false, false, false, true, false, false, false, false, false]);
            let encoded = BinVector::from_bools(&[true, false, true, false, true, false, false, false, false, true, true, false, false, false, true, true, false, false, true, true, false, true, false, false, true, false, true, true, true, true, false, true, false, true, true, false, false, false, true, false, true, true, true, true, false, true, true, true, false, false, true, true, true, true, false, true, true, false, true, true, true, false, false, false, false, true, true, false, false, false, false, true, true, true, true, false, false, true, false, false, false, false, false, true, false, true, true, true, false, true, true, false, false, false, true, false, false, true, false, false, true, true, true, false, false, true, false, false, false, true, false, true, true, false, false, false, true, false, true, false, false, false, true, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, true, false, false, false, false, true, true, false, false, false, true, true, false, false, true, true, false, true, false, false, true, false, true, true, true, true, false, true, false, true, true, false, false, false, true, false, true, true, true, true, false, true, true, true, false, false, true, true, true, true, false, true, true, false, true, true, false, false, false, false, false, true, true, false, false, false, false, true, true, true, true, false, false, true, false, false, false, false, false, true, false, true, true, true, false, true, true, false, false, false, true, false, false, true, false, false, true, true, true, false, false, true, false, false, false, true, false, true, true, false, false, false, true, false, true, false, false, false, true, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, true, true, false, false, true, false, false, false, true, true, true, true, false, false, true, false, false, true, true, false, false, true, false, false, true, false, true, false, true, false, false, true, true, true, false, false, false, true, true, false, true, true, false, true, false, false, false, false, false, true, false, true, false, true, false, false, true, true, false, true, false, false, true, false, false, true, false, true, false, true, false, true, false, false, false, false, true, true, false, false, false, false, false, true, true, false, false, true, true, true, true, false, true, false, false, true, true, true, true, true, true, false, false, false, false, true, false, true, false, false, false, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[false, false, true, false, true, true, false, false, true, false, false, false, true, true, true, true, false, false, true, false, false, true, true, false, false, true, false, false, true, false, true, false, true, false, false, true, true, true, false, false, false, true, true, false, true, true, false, true, false, false, false, false, false, true, false, true, false, true, false, false, true, true, false, true, false, false, true, false, false, true, false, true, false, true, false, true, false, false, false, false, true, true, false, false, false, false, false, true, true, false, false, true, true, true, true, true, false, true, false, false, true, true, true, true, true, true, false, false, false, false, true, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, true, true, false, false, true, false, false, false, true, true, true, true, false, false, true, false, false, true, true, false, false, true, false, false, true, false, true, false, true, false, false, true, true, true, false, false, false, true, true, false, false, true, false, true, false, false, false, false, false, true, false, true, false, true, false, false, true, true, false, true, false, false, true, false, false, true, false, true, false, true, false, true, false, false, false, false, true, true, false, false, false, false, false, true, true, false, false, true, true, true, true, true, false, true, false, false, true, true, true, true, true, true, false, false, false, false, true, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, false, false, false, false, true, true, false, false, false, false, false, true, false, true, true, false, false, true, false, false, true, true, true, true, true, false, false, true, true, true, true, true, true, false, false, false, true, true, true, true, true, false, false, false, false, true, false, false, false, true, true, true, false, true, true, true, false, true, true, true, false, false, false, false, true, false, true, true, true, true, false, true, true, false, false, true, true, false, true, true, true, false, true, true, false, false, true, false, true, false, false, false, false, true, false, false, false, false, true, false, false, false, true, false, true, false, true, false, false, true, false, true, false, true, true, true]);
            let encoded = BinVector::from_bools(&[false, false, true, false, false, false, false, false, true, true, false, false, false, false, false, true, false, true, true, false, false, true, false, false, true, true, true, true, true, false, false, true, true, true, true, true, true, false, false, false, true, true, true, true, true, false, false, false, false, true, false, false, false, true, true, true, false, true, true, true, false, true, true, true, false, false, false, false, true, false, true, true, true, true, false, true, true, false, false, true, true, false, true, true, true, false, true, true, false, false, true, false, true, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, true, false, false, true, false, false, true, false, true, true, false, true, true, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, false, false, false, false, true, true, false, false, false, false, false, true, false, true, true, false, false, true, false, false, true, true, true, true, true, false, false, true, false, true, true, true, true, false, false, false, true, true, true, true, true, false, false, false, false, true, false, false, false, true, true, true, false, true, true, true, false, true, true, true, false, false, false, false, true, false, true, true, true, true, false, true, true, false, false, true, true, false, true, true, true, false, true, true, false, false, true, false, true, false, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, true, false, false, true, false, false, true, false, true, true, false, true, true, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, true, true, true, false, true, false, false, true, true, true, true, true, true, true, false, false, true, false, true, false, true, false, false, true, true, false, true, false, false, true, true, false, true, false, true, true, true, true, false, true, true, false, false, true, true, true, false, true, false, false, true, true, false, false, true, true, false, true, false, true, true, false, false, true, false, true, false, true, true, true, true, true, true, false, true, false, true, false, true, true, true, false, false, true, false, true, false, false, false, true, false, true, true, true, false, false, true, false, true, true, true, false, false, false, false, true, false, true, false, false, true, true, true, false, false, false]);
            let encoded = BinVector::from_bools(&[true, true, true, false, true, true, true, false, true, false, false, true, true, true, true, true, true, true, false, false, true, false, true, false, true, false, false, true, true, false, true, false, false, true, true, false, true, false, true, true, true, true, false, true, true, false, false, true, true, true, false, true, false, false, true, true, false, false, true, true, false, true, false, true, true, false, false, true, false, true, false, true, true, true, true, true, true, false, true, false, true, false, true, true, true, false, false, true, false, true, false, false, false, true, false, false, true, true, true, false, false, true, false, true, true, true, false, false, false, false, false, true, false, true, false, false, true, true, false, true, false, false, true, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, true, true, true, false, true, false, false, true, true, true, true, true, true, true, false, false, true, false, true, false, true, false, false, true, true, false, true, false, false, true, true, false, true, false, true, true, true, true, false, true, true, false, false, true, true, true, false, true, false, false, true, true, false, false, false, true, false, true, false, true, true, false, false, true, false, true, false, true, true, true, true, true, true, false, true, false, true, false, true, true, true, false, false, true, false, true, false, false, false, true, false, false, true, true, true, false, false, true, false, true, true, true, false, false, false, false, false, true, false, true, false, false, true, true, false, true, false, false, true, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, false, false, true, false, false, false, true, false, false, true, false, false, false, false, true, true, true, true, false, false, true, true, true, false, true, true, true, true, true, true, false, false, false, true, false, false, true, true, false, false, false, false, false, true, true, false, false, false, true, true, false, false, true, false, false, true, true, true, false, false, true, false, false, true, true, false, false, false, false, true, true, false, true, true, false, true, false, false, false, true, false, false, false, true, true, true, false, false, true, true, true, false, true, true, false, true, true, false, true, false, true, true, false, true, true, true, true, true, false, false, true, true, false, true, false, true]);
            let encoded = BinVector::from_bools(&[true, false, false, true, false, false, true, false, false, false, true, false, false, true, false, false, false, false, true, true, true, true, false, false, true, true, true, false, true, true, true, true, true, true, false, false, false, true, false, false, true, true, false, false, false, false, false, true, true, false, false, false, true, true, false, false, true, false, false, true, true, true, false, false, true, false, false, true, true, false, false, false, false, true, true, false, true, true, false, true, false, false, false, true, false, false, false, true, true, true, false, false, true, true, false, true, false, true, true, false, true, true, false, true, false, true, true, false, true, true, true, true, true, true, false, false, true, true, true, false, true, false, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, false, false, true, false, false, false, false, false, false, true, false, false, false, false, true, true, true, true, false, false, true, true, true, false, true, true, true, true, true, true, false, false, false, true, false, false, true, true, false, false, false, false, false, true, true, false, false, false, true, true, false, false, true, false, false, true, true, true, false, false, true, false, false, true, true, false, false, false, false, true, true, false, true, true, false, true, false, false, false, true, false, false, false, true, true, true, false, false, true, true, false, true, false, true, true, false, true, true, false, true, false, true, true, false, true, true, true, true, true, true, false, false, true, true, true, false, true, false, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, true, true, false, true, false, true, true, true, false, false, true, true, true, true, true, true, true, false, false, true, false, true, true, true, false, false, false, false, true, true, false, true, false, false, false, false, false, false, true, false, false, true, true, false, false, false, true, true, true, false, false, false, true, false, true, true, false, true, false, true, true, false, false, false, false, true, true, false, true, false, true, false, true, false, false, false, true, false, true, false, true, true, true, false, true, false, false, true, true, false, true, true, false, true, false, false, true, true, false, false, false, true, false, true, true, true, true, false, false, true, false, false, false, true, false, true]);
            let encoded = BinVector::from_bools(&[false, false, false, false, true, true, false, true, false, true, true, true, false, false, true, true, true, true, true, true, true, false, false, true, false, true, true, true, false, false, false, false, true, true, false, true, false, false, false, false, false, false, true, false, false, true, true, false, false, false, true, true, true, false, false, false, true, false, true, true, false, true, false, true, true, false, false, false, false, true, true, false, true, false, true, false, true, false, false, false, true, false, true, false, true, true, true, false, true, false, false, true, true, false, false, true, true, false, true, false, false, true, true, false, false, false, true, false, true, true, false, true, true, false, false, true, false, false, true, false, true, false, false, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, true, true, false, true, false, true, false, true, false, false, true, true, true, true, true, true, true, false, false, true, false, true, true, true, false, false, false, false, true, true, false, true, false, false, false, false, false, false, true, false, false, true, true, false, false, false, true, true, true, false, false, false, true, false, true, true, false, true, false, true, true, false, false, false, false, true, true, false, true, false, true, false, true, false, false, false, true, false, true, false, true, true, true, false, true, false, false, true, true, false, false, true, true, false, true, false, false, true, true, false, false, false, true, false, true, true, false, true, true, false, false, true, false, false, true, false, true, false, false, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, false, false, true, false, true, true, false, false, true, false, false, false, false, false, false, true, true, false, false, true, false, false, true, true, true, false, false, false, true, true, false, true, false, true, false, false, false, true, true, false, true, true, false, true, false, true, true, false, false, true, false, false, true, true, true, true, true, true, true, false, true, true, false, true, true, false, true, true, true, true, false, true, false, true, false, true, false, true, false, true, true, true, true, true, true, false, false, true, true, false, false, true, false, false, true, true, true, false, false, true, false, false, false, true, false, true, true, false, true, true, false, false, true, true, false, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, false, false, true, false, true, true, false, false, true, false, false, false, false, false, false, true, true, false, false, true, false, false, true, true, true, false, false, false, true, true, false, true, false, true, false, false, false, true, true, false, true, true, false, true, false, true, true, false, false, true, false, false, true, true, true, true, true, true, true, false, true, true, false, true, true, false, true, true, true, true, false, true, false, true, false, true, false, true, false, true, true, true, true, true, true, false, false, true, true, false, true, false, true, false, false, true, true, true, false, false, true, false, false, false, true, false, true, true, true, false, true, true, false, false, true, true, true, false, true, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, false, false, true, false, true, true, false, false, true, false, false, false, false, false, false, true, true, false, false, true, false, false, true, true, true, false, false, false, true, true, false, true, false, true, false, false, false, true, true, false, true, true, false, true, false, true, true, false, false, true, false, false, true, true, true, true, true, true, true, false, true, true, false, true, true, false, true, true, true, true, false, true, false, true, false, true, false, true, false, true, true, true, true, true, true, false, false, true, true, false, true, false, true, false, false, true, true, true, false, false, true, false, false, false, true, false, true, true, true, false, true, true, false, false, true, true, true, false, true, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, false, true, true, false, true, false, true, true, true, true, false, true, true, true, true, true, false, true, false, false, false, true, true, true, false, true, true, false, false, true, false, true, false, true, true, false, true, false, true, false, true, true, true, false, false, true, true, false, true, false, false, false, true, false, false, false, true, true, false, false, true, false, false, false, true, false, true, true, true, false, true, true, false, false, true, false, false, true, false, true, true, false, true, false, true, false, true, true, false, false, true, true, false, false, true, true, false, true, true, false, false, false, false, false, false, false, true, false, false, false, false, false, true, true, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, true, false, true, true, false, true, false, true, true, true, true, false, true, true, true, true, true, false, true, false, false, false, true, true, true, false, true, true, false, false, true, false, true, false, true, true, false, true, false, true, false, true, true, true, false, false, true, true, false, true, false, false, false, true, false, false, false, true, true, false, false, true, false, false, false, true, false, true, true, true, false, true, true, false, false, true, false, false, true, false, true, true, false, true, false, true, false, true, true, false, false, false, true, true, false, false, true, true, false, true, true, false, false, false, false, false, false, true, false, true, false, false, false, false, false, true, true, true, false, true, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, false, true, true, false, true, false, true, true, true, true, false, true, true, true, true, true, false, true, false, false, false, true, true, true, false, true, true, false, false, true, false, true, false, true, true, false, true, false, true, false, true, true, true, false, false, true, true, false, true, false, false, false, true, false, false, false, true, true, false, false, true, false, false, false, true, false, true, true, true, false, true, true, false, false, true, false, false, true, false, true, true, false, true, false, true, false, true, true, false, false, false, true, true, true, false, true, true, false, true, true, false, false, false, false, false, false, true, false, true, false, false, false, false, false, true, true, true, false, true, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, false, true, false, false, true, false, false, true, true, true, true, false, false, true, false, false, false, false, true, true, true, false, true, false, false, false, false, true, false, false, false, true, true, false, false, true, true, false, false, false, true, true, false, true, false, true, true, false, true, true, false, false, false, false, true, true, false, true, false, true, true, true, true, true, false, false, true, false, false, false, false, false, true, false, false, false, true, false, true, false, false, true, true, true, true, true, false, true, false, true, false, false, false, false, false, false, false, false, false, false, true, false, true, true, false, true, true, false, true, true, true, false, false, false, false, true]);
            let encoded = BinVector::from_bools(&[false, false, false, true, false, true, false, false, true, false, false, true, true, true, true, false, false, true, false, false, false, false, true, true, true, false, true, false, false, false, false, true, false, false, false, true, true, false, false, true, true, false, false, false, true, true, false, true, false, true, true, false, true, true, false, false, false, false, true, true, false, true, false, true, true, true, true, true, false, false, true, false, false, false, false, false, true, false, false, false, true, false, true, false, false, true, true, true, true, true, false, true, false, true, true, false, false, false, false, false, false, false, false, false, false, true, false, true, true, false, true, true, true, false, true, true, true, false, false, false, false, false, false, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, false, true, false, false, true, false, false, true, true, true, true, false, false, true, false, false, false, false, true, true, true, false, true, false, false, false, false, true, false, false, false, true, true, false, false, true, true, false, false, false, true, true, false, true, false, true, true, false, true, true, false, false, false, false, true, true, false, true, false, true, true, true, true, true, false, false, true, false, false, false, false, false, true, false, false, false, true, false, true, false, false, true, true, true, true, true, false, true, false, true, true, false, false, false, false, true, false, false, false, false, false, true, false, true, true, false, true, true, true, false, true, true, true, false, false, false, false, false, false, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, false, false, false, false, false, false, true, true, false, false, true, false, true, false, false, false, false, true, false, true, false, false, false, true, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, true, true, false, false, false, false, false, false, false, true, true, false, true, true, true, false, false, false, true, true, false, false, false, false, false, false, true, false, true, true, false, true, true, false, false, true, false, true, true, false, false, true, true, false, false, true, false, false, true, true, true, true, true, true, false, false, true, false, false, false, false, false, false, true, true, true, false, true, false, true, true, true, true, true, true, true]);
            let encoded = BinVector::from_bools(&[false, true, true, false, false, false, false, false, false, false, true, true, false, false, true, false, true, false, false, false, false, true, false, true, false, false, false, true, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, true, true, false, false, false, false, false, false, false, true, true, false, true, true, true, false, false, false, true, true, false, false, false, false, false, false, true, false, true, true, false, true, true, false, false, true, false, true, true, false, false, true, true, false, false, true, false, false, true, true, false, true, true, true, true, false, false, true, false, false, false, false, false, false, true, true, true, true, false, true, false, true, true, true, true, true, true, true, true, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, true, false, false, false, false, false, true, true, false, false, true, false, true, false, false, false, false, true, false, true, false, false, false, true, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, true, true, false, false, false, false, false, false, false, true, true, false, true, true, true, false, false, false, true, true, false, false, false, false, false, false, true, false, true, true, false, true, true, false, false, true, false, true, true, false, false, true, true, false, false, true, false, false, true, true, false, true, true, true, true, false, false, true, false, false, false, false, false, false, true, true, true, true, false, true, false, true, true, true, true, true, true, true, true, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, false, false, false, true, true, true, false, false, false, true, true, false, true, false, false, true, true, true, true, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, false, false, true, false, false, true, false, true, false, false, true, true, true, true, false, false, true, true, false, true, false, false, true, false, false, false, false, false, false, true, false, true, true, true, true, false, true, true, false, true, false, false, false, false, true, true, true, false, true, true, true, false, false, false, true, false, false, true, false, false, false, false, true, false, true, false, true, true, false, true, true, false]);
            let encoded = BinVector::from_bools(&[false, false, false, true, false, false, false, true, true, true, false, false, false, true, true, false, true, false, false, true, true, true, true, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, true, true, false, true, true, false, true, true, false, true, false, false, true, false, false, true, false, true, false, false, true, true, true, true, false, false, true, true, false, true, false, false, true, false, false, false, false, false, false, true, false, true, true, true, true, false, true, true, false, true, false, false, false, false, true, true, false, true, false, true, true, true, false, false, false, true, false, false, true, false, false, false, false, false, true, false, true, false, true, true, true, false, true, true, false, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, false, false, false, true, true, true, false, false, false, true, true, false, true, false, false, true, true, true, true, false, true, true, false, true, false, true, false, true, false, false, false, true, false, true, true, true, false, true, true, false, true, true, false, true, false, false, true, false, false, true, false, true, false, false, true, true, true, true, false, false, true, true, false, true, false, false, true, false, false, false, false, false, false, true, false, true, true, true, true, false, true, true, false, true, false, false, false, false, true, true, false, true, false, true, true, true, false, false, false, true, false, false, true, false, false, false, false, false, true, false, true, false, true, true, true, false, true, true, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, false, true, false, true, true, false, true, false, true, true, false, false, true, true, false, false, true, false, true, false, false, true, false, true, false, false, false, true, false, true, false, true, true, true, false, false, true, false, false, false, true, true, true, false, false, false, true, true, true, true, true, false, true, false, true, false, true, false, true, true, true, true, true, true, false, false, true, true, false, true, false, false, true, false, true, false, false, false, true, false, true, true, false, true, false, false, false, false, false, true, false, false, false, true, false, true, false, true, true, true, false, false, false, true, true, false, false, true, true, false, false, true, true, true, true, true]);
            let encoded = BinVector::from_bools(&[false, true, false, false, false, true, false, true, true, false, true, false, true, true, false, false, true, true, false, false, true, false, true, false, false, true, false, true, false, false, false, true, false, true, false, true, true, true, false, false, true, false, false, false, true, true, true, false, false, false, true, true, true, true, true, false, true, false, true, false, true, false, true, true, true, true, true, true, false, false, true, true, false, true, false, false, true, false, true, false, false, false, true, false, true, true, false, true, false, false, false, false, false, true, true, false, false, false, true, false, true, false, true, true, true, false, false, false, true, true, false, false, false, true, true, false, false, true, false, true, true, true, false, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, false, true, false, true, true, false, true, false, true, true, false, false, true, true, false, false, true, false, true, false, false, true, false, true, false, false, false, true, false, true, false, true, true, true, false, false, true, false, false, false, true, true, true, false, false, false, true, true, true, true, false, false, true, false, true, false, true, false, true, true, true, true, true, true, false, false, true, true, false, true, false, false, true, false, true, false, false, false, true, false, true, true, false, true, false, false, false, false, false, true, true, false, false, false, true, false, true, false, true, true, true, false, false, false, true, true, false, false, false, true, true, false, false, true, false, true, true, true, false, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, true, false, true, true, false, true, false, true, true, true, false, false, true, false, true, true, false, false, true, true, false, false, true, false, true, false, true, true, false, false, true, true, true, false, false, true, true, true, true, false, false, true, true, false, false, true, true, false, false, false, true, true, true, false, false, false, true, true, false, false, true, false, true, false, true, false, true, false, true, true, false, true, true, false, true, true, false, false, true, false, true, true, true, true, false, true, true, true, true, false, false, false, false, true, true, true, false, false, true, true, true, false, false, true, true, false, false, false, true, false, false, false, false, true, true]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, true, false, true, true, false, true, false, true, true, true, false, false, true, false, true, true, false, false, true, true, false, false, true, false, true, false, true, true, false, false, true, true, true, false, false, true, true, true, true, false, false, true, true, false, false, true, true, false, false, false, true, true, true, false, false, false, true, true, false, false, true, false, true, false, true, false, true, false, true, true, false, true, true, false, true, true, false, false, true, false, true, true, true, true, false, true, true, true, true, true, false, false, false, false, true, true, true, false, false, true, true, true, false, false, true, false, true, false, false, false, true, false, false, true, false, false, true, true, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, false, true, false, true, true, false, true, false, true, true, true, false, false, true, false, true, true, false, false, true, true, false, false, true, false, true, false, true, true, false, false, true, true, true, false, false, true, true, true, true, false, false, true, true, false, false, true, true, false, false, false, true, true, true, false, false, false, true, true, false, false, true, false, true, false, true, false, true, false, true, true, false, true, true, false, true, true, false, false, true, false, true, true, true, true, false, true, true, true, true, true, false, false, false, false, true, true, true, false, false, true, true, true, false, false, true, false, true, false, false, false, true, false, false, true, false, false, true, true, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, false, false, false, false, false, true, true, false, true, true, false, true, false, true, false, false, false, true, true, false, true, false, false, false, true, true, false, true, true, false, false, false, false, false, false, false, true, true, true, false, true, true, true, false, true, true, true, false, true, false, true, false, false, true, false, false, false, false, false, false, true, true, false, false, true, true, true, false, false, false, false, true, true, true, false, false, false, true, true, true, false, true, false, false, true, true, false, false, false, false, true, true, true, false, true, true, false, true, false, false, true, true, false, true, false, false, true, false, true, true, true, false, false, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, false, false, false, false, false, true, true, false, true, true, false, true, false, true, false, false, false, true, true, false, true, false, false, false, true, true, false, true, true, false, false, false, false, false, false, false, true, true, true, false, true, true, true, false, true, true, true, false, true, false, true, false, false, true, false, false, false, false, false, false, true, true, false, false, true, true, true, false, false, false, false, true, true, true, false, false, false, true, true, true, false, true, false, false, true, true, false, false, false, false, false, true, true, true, false, true, true, false, true, false, false, true, true, false, true, true, false, false, true, false, true, true, true, false, false, false, false, true, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, false, false, false, false, false, true, true, false, true, true, false, true, false, true, false, false, false, true, true, false, true, false, false, false, true, true, false, true, true, true, false, false, false, false, false, false, true, true, true, false, true, true, true, false, true, true, true, false, true, false, true, false, false, true, false, false, false, false, false, false, true, true, false, false, true, true, true, false, false, false, false, true, true, true, false, false, false, true, true, true, false, true, false, false, true, true, false, false, false, false, false, true, true, true, false, true, true, false, true, false, false, true, true, false, true, true, false, false, true, false, true, true, true, false, false, false, false, true, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, false, true, true, false, true, true, true, true, true, true, false, true, false, false, true, true, false, false, false, true, false, true, false, false, false, true, true, false, false, false, false, false, false, false, true, false, true, true, false, true, true, true, true, true, false, false, true, true, false, false, true, true, true, false, true, true, true, true, false, true, false, true, true, true, false, true, false, true, true, false, true, true, false, true, true, false, false, true, false, false, true, false, false, true, true, false, false, true, false, false, false, false, true, false, false, true, true, true, true, true, false, true, true, false, true, false, false, true, false, true, true, false, false, true, true, false]);
            let encoded = BinVector::from_bools(&[true, false, true, true, false, true, true, false, true, true, true, true, true, true, false, true, false, false, true, true, false, false, false, true, false, true, false, false, false, true, true, false, false, false, false, false, false, false, true, false, true, true, false, true, true, true, true, true, false, false, true, true, false, false, true, true, true, false, true, true, true, true, false, true, false, true, true, true, false, true, false, true, true, false, true, true, false, true, true, false, false, true, false, false, true, false, false, true, true, false, false, true, false, false, true, false, false, true, false, false, true, true, true, true, true, false, true, true, false, true, true, false, false, true, false, true, true, false, false, false, true, true, true, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, false, true, true, false, true, true, true, true, true, true, false, true, false, false, true, true, false, false, false, true, false, true, false, false, false, true, true, false, false, false, false, false, false, false, true, false, true, true, false, true, true, true, true, true, false, false, true, true, false, false, true, true, true, false, true, true, true, true, false, true, false, true, true, true, false, true, false, true, true, false, true, true, false, true, true, false, false, true, false, false, true, false, false, true, true, false, false, true, false, false, true, false, false, true, false, false, true, true, true, true, true, false, true, true, true, true, true, false, false, true, false, true, true, false, false, false, true, true, true, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, false, true, false, true, true, true, false, false, true, false, false, false, true, true, true, true, false, false, true, false, false, true, true, true, false, false, true, false, false, true, true, true, false, false, false, true, true, false, false, false, false, true, true, false, true, true, false, true, true, false, true, true, false, true, false, true, false, true, false, false, false, false, true, true, false, false, true, false, true, false, true, false, false, true, true, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, true, false, true, false, false, false, false, true, true, false, true]);
            let encoded = BinVector::from_bools(&[true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, false, true, false, true, true, true, false, false, true, false, false, false, true, true, true, true, false, false, true, false, false, true, true, true, false, false, true, false, false, true, true, true, false, false, false, true, true, false, false, false, false, true, true, false, true, true, false, true, true, false, true, true, false, true, false, true, false, true, false, false, false, false, true, true, false, false, true, false, true, false, true, false, false, true, true, false, true, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, true, true, false, true, false, false, false, false, true, true, true, false, true, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, false, true, false, true, true, true, false, false, true, false, false, false, true, true, true, true, false, false, true, false, false, true, true, true, false, false, true, true, false, true, true, true, false, false, false, true, true, false, false, false, false, true, true, false, true, true, false, true, true, false, true, true, false, true, false, true, false, true, false, false, false, false, true, true, false, false, true, false, true, false, true, false, false, true, true, false, true, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, true, true, false, true, false, false, false, false, true, true, true, false, true, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, false, false, true, false, true, false, true, true, false, false, false, true, false, false, true, false, false, true, false, false, true, true, true, true, false, true, false, true, false, false, true, true, false, false, false, false, false, true, false, false, false, false, true, false, true, true, true, false, true, false, true, true, true, true, false, false, true, true, true, false, true, true, true, true, false, true, false, false, false, false, true, true, false, false, true, true, true, true, false, true, true, true, false, true, false, true, true, true, false, true, false, true, false, true, true, true, false, true, false, true, false, false, false, false, false, true, true, true, false, false, true, true, false, false, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, false, false, true, false, true, false, true, true, false, false, false, true, false, false, true, false, false, true, false, false, true, true, true, true, false, true, false, true, false, false, true, true, false, false, false, false, false, true, false, false, false, false, true, false, true, true, true, false, true, false, true, true, true, true, false, false, true, true, true, false, true, true, true, true, false, true, false, false, false, false, true, true, false, false, true, true, true, true, false, true, true, true, false, true, false, true, true, true, false, true, true, false, true, false, true, true, true, false, true, false, true, false, false, false, false, false, true, true, true, true, false, false, true, true, true, false, false, true, true, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, false, false, true, false, true, false, true, true, false, false, false, true, false, false, true, false, false, true, false, false, true, true, true, true, false, true, false, true, false, false, true, true, false, false, false, false, false, true, false, false, false, false, true, false, true, true, true, false, true, false, true, true, true, true, false, false, true, true, true, false, true, true, true, true, false, true, false, false, false, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, true, true, true, false, true, true, false, true, false, true, true, true, false, true, false, true, false, false, false, false, false, true, true, true, true, false, false, true, true, true, false, false, true, true, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, true, true, false, false, false, false, true, false, true, false, false, true, false, false, true, false, false, true, true, false, true, false, true, true, false, true, true, false, true, false, false, true, true, true, false, false, false, false, false, true, true, false, false, false, true, false, true, true, false, true, false, true, true, false, true, true, false, false, false, false, true, false, false, true, false, true, true, true, false, true, true, true, true, true, true, false, true, true, false, true, true, false, true, false, true, false, false, false, true, true, true, false, true, false, false, false, false, true, true, false, true, false, true, true, true, true, true, true, true, false, true, false, true, false, true, true]);
            let encoded = BinVector::from_bools(&[false, false, false, false, true, true, false, false, false, false, true, false, true, false, false, true, false, false, true, false, false, true, true, false, true, false, true, true, false, true, true, false, true, false, false, true, true, true, false, false, false, false, false, true, true, false, false, false, true, false, true, true, false, true, false, true, true, false, true, true, false, false, false, false, true, false, false, true, false, true, true, true, false, true, true, true, true, true, true, false, true, true, false, true, true, false, true, false, true, false, false, false, true, true, true, true, false, true, false, false, false, false, true, true, false, true, false, true, true, true, false, true, true, true, true, false, true, false, false, true, false, true, true, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, true, true, false, false, false, false, true, false, true, false, false, true, false, false, true, false, false, true, true, false, true, false, true, true, false, true, true, false, true, false, false, true, true, true, false, false, false, false, false, true, true, false, false, false, true, false, true, true, false, true, false, true, true, false, true, true, false, false, false, false, true, false, false, true, false, true, true, true, false, true, true, true, true, true, true, false, true, true, false, true, true, false, true, false, true, false, false, false, true, true, true, true, false, true, false, false, false, false, true, true, false, true, false, true, true, true, false, true, true, true, true, false, true, false, true, true, false, true, true, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, false, true, false, true, false, true, false, true, true, true, false, true, false, false, false, false, true, false, false, true, false, true, false, false, false, false, true, true, false, true, true, true, true, false, true, true, true, true, false, true, true, false, true, false, true, true, true, false, false, false, false, true, true, false, true, false, true, true, false, false, true, false, false, true, false, false, false, true, false, false, true, true, false, false, false, false, false, false, true, true, false, false, false, true, false, true, true, true, true, false, true, false, true, false, true, true, false, true, false, false, false, false, false, false, false, true, false, true, true, true, true, true, false, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, false, false, false, true, false, true, false, true, false, true, true, true, false, true, false, false, false, false, true, false, false, true, false, true, false, false, false, false, true, true, false, true, true, true, true, false, true, true, true, true, false, true, true, false, true, false, true, true, true, false, false, false, false, true, true, false, true, false, true, true, false, false, true, false, false, true, false, false, false, true, false, false, true, true, false, false, false, false, false, false, true, true, false, false, false, true, false, true, true, true, true, false, false, true, false, true, false, true, true, false, true, false, false, false, false, false, false, false, true, true, false, true, true, true, true, true, false, false, true, false, true, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, false, true, false, true, false, true, false, true, true, true, false, true, false, false, false, false, true, false, false, true, false, true, false, true, false, false, true, true, false, true, true, true, true, false, true, true, true, true, false, true, true, false, true, false, true, true, true, false, false, false, false, true, true, false, true, false, true, true, false, false, true, false, false, true, false, false, false, true, false, false, true, true, false, false, false, false, false, false, true, true, false, false, false, true, false, true, true, true, true, false, false, true, false, true, false, true, true, false, true, false, false, false, false, false, false, false, true, true, false, true, true, true, true, true, false, false, true, false, true, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, false, true, false, true, true, true, true, false, false, false, false, true, false, true, false, false, true, true, false, false, false, true, false, false, false, true, true, true, true, true, false, true, true, false, true, false, false, true, true, true, false, true, false, true, true, true, true, false, false, false, true, true, true, true, false, true, true, false, false, false, false, true, false, true, true, true, false, true, true, false, true, true, true, true, false, true, true, false, true, true, true, false, false, false, false, false, false, false, true, false, true, false, true, false, false, true, true, false, true, true, false, false, false, true, false, false, true, true, true, false, false, false, false, true, true, true]);
            let encoded = BinVector::from_bools(&[true, false, false, true, false, true, false, true, true, true, true, false, false, false, false, true, false, true, false, false, true, true, false, false, false, true, false, false, false, true, true, true, true, true, false, true, true, false, true, false, false, true, true, true, false, true, false, true, true, true, true, false, false, false, true, true, true, true, false, true, true, false, false, false, false, true, false, true, true, true, false, true, true, false, true, true, true, true, false, true, true, false, true, true, true, false, false, false, false, false, false, false, true, false, false, true, false, true, false, false, true, true, false, true, true, false, false, false, true, false, false, false, true, true, true, false, false, false, false, false, true, true, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, false, true, false, true, true, true, true, false, false, false, false, true, false, true, false, false, true, true, false, false, false, true, false, false, false, true, true, true, true, true, false, true, true, false, true, false, false, true, true, true, false, true, false, true, true, true, true, false, false, false, true, true, true, true, false, true, true, false, false, false, false, true, false, true, true, true, false, true, true, false, true, true, true, true, false, true, true, false, true, true, true, false, false, false, false, false, false, false, true, false, false, true, false, true, false, false, true, true, false, true, true, false, false, false, true, false, false, false, true, true, true, false, true, false, false, false, true, true, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, true, true, false, true, false, false, false, false, false, true, true, false, false, false, true, false, false, true, false, true, true, true, true, false, true, true, false, false, false, false, true, false, true, false, false, false, true, true, false, true, false, false, true, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, false, true, true, false, false, true, true, false, true, false, false, true, true, false, false, false, false, true, true, false, true, false, true, false, false, true, false, false, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, false, false, true, false, false, true, false, true, true, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, true, true, true, false, true, false, false, false, false, false, true, true, false, false, false, true, false, false, true, false, true, true, true, true, false, true, true, false, false, false, false, true, false, true, false, false, false, true, true, false, true, false, false, true, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, false, true, true, false, false, true, true, false, true, false, false, true, true, false, false, false, false, true, true, false, true, false, true, false, false, true, false, false, false, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false, true, true, false, true, false, true, false, true, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, true, true, false, true, false, false, false, false, false, true, true, false, false, false, true, false, false, true, false, true, true, true, true, false, true, true, false, false, false, false, true, false, true, false, false, false, true, true, false, true, false, false, true, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, false, true, true, false, false, true, true, false, true, false, false, true, false, false, false, false, false, true, true, false, true, false, true, false, false, true, false, false, false, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false, true, true, false, true, false, true, false, true, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, true, true, true, false, true, true, true, true, false, false, true, true, true, false, true, false, false, false, true, true, false, true, true, false, true, true, true, false, false, false, false, false, false, true, false, true, false, true, false, false, false, true, true, false, true, false, false, false, true, false, false, false, false, true, false, true, false, false, false, true, true, false, true, false, true, true, false, false, false, false, false, false, true, true, true, true, true, false, false, true, true, true, false, true, false, true, true, true, true, true, true, true, false, true, true, true, false, false, false, false, false, true, false, true, false, false, true, false, true, false, false, true, false, true, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, true, true, true, true, false, true, true, true, true, false, false, true, true, true, false, true, false, false, false, true, true, false, true, true, false, true, true, true, false, false, false, false, false, false, true, false, true, false, true, false, false, false, true, true, false, true, false, false, false, true, false, false, false, false, true, false, true, false, false, false, true, true, false, true, false, true, true, false, false, false, false, false, false, true, true, true, true, true, false, false, true, true, true, false, true, false, true, true, true, true, true, false, true, true, false, true, true, true, false, false, false, false, false, true, false, true, false, true, false, true, false, true, false, false, true, true, false, true, true, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, true, true, true, false, true, true, true, true, false, false, true, true, true, false, true, false, false, false, true, true, false, true, true, false, true, true, true, false, false, false, false, false, false, true, false, true, false, true, false, false, false, true, true, false, true, false, false, false, true, false, false, false, false, true, false, true, false, false, false, true, true, false, true, false, true, true, false, false, false, false, false, false, true, true, true, true, false, false, false, true, true, true, false, true, false, true, true, true, true, true, false, true, true, false, true, true, true, false, false, false, false, false, true, false, true, false, true, false, true, false, true, false, false, true, true, false, true, true, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, true, true, true, true, false, false, true, false, true, false, false, false, true, true, true, true, true, true, false, true, false, true, false, true, false, true, false, false, false, false, false, false, false, false, false, false, true, true, true, false, true, false, false, true, false, true, false, true, true, true, false, false, false, false, true, false, true, false, false, false, false, false, true, true, false, false, true, true, true, false, false, true, false, true, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, true, true, true, false, true, true, false, true, true, false, true, false, false, false, true, false, false, false, false, true, true, false, false, true, false, false, true]);
            let encoded = BinVector::from_bools(&[false, false, false, false, true, true, true, true, false, false, true, false, true, false, false, false, true, true, true, true, true, true, false, true, false, true, false, true, false, true, false, false, false, false, false, false, false, false, false, false, true, true, true, false, true, false, false, true, false, true, false, true, true, true, false, false, false, false, true, false, true, false, false, false, false, false, true, true, false, false, true, true, true, false, false, true, false, true, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, true, false, true, true, false, true, true, false, true, true, false, true, false, false, false, true, false, true, false, false, false, true, true, false, false, true, true, false, false, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, true, true, true, true, false, false, true, false, true, false, false, false, true, true, true, true, true, true, false, true, false, true, false, true, false, true, false, false, false, false, false, false, false, false, false, false, true, true, true, false, true, false, false, true, false, true, false, true, true, true, false, false, false, false, true, false, true, false, false, false, false, false, true, true, false, false, true, true, true, false, false, true, false, true, true, true, false, true, false, true, false, false, false, true, false, true, true, false, false, true, false, true, true, false, true, true, false, true, true, false, true, false, false, false, true, false, true, false, false, false, true, true, false, false, true, true, false, false, false, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, false, false, false, true, false, true, false, false, false, false, true, true, true, false, true, false, false, true, false, false, true, true, false, true, false, true, false, true, false, false, false, true, true, false, false, true, true, false, true, true, true, false, false, true, true, false, false, false, true, false, false, true, true, true, true, false, false, false, true, true, false, true, false, true, true, true, false, true, false, false, true, true, true, false, true, false, true, false, false, true, false, true, false, false, true, false, false, true, false, false, true, true, true, true, false, false, false, true, true, false, true, true, false, false, true, true, false, true, true, false, true, false, false, false, true, false]);
            let encoded = BinVector::from_bools(&[false, false, false, true, false, false, false, true, false, true, false, false, false, false, true, true, true, false, true, false, false, true, false, false, true, true, false, true, false, true, false, true, false, false, false, true, true, false, false, true, true, false, true, true, true, false, false, true, true, false, false, false, true, false, false, true, true, true, true, false, false, false, true, true, false, true, false, true, true, true, false, true, false, false, true, true, true, false, true, false, true, false, false, true, false, true, false, false, true, false, false, true, false, false, true, true, true, true, true, false, false, false, true, true, false, true, true, false, false, true, true, true, false, true, true, false, true, false, false, false, false, true, false, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, false, false, false, true, false, true, false, false, false, false, true, true, true, false, true, false, false, true, false, false, true, true, false, true, false, true, false, true, false, true, false, true, true, false, false, true, true, false, true, true, true, false, false, true, true, false, false, false, true, false, false, true, true, true, true, false, false, false, true, true, false, true, false, true, true, true, false, true, false, false, true, true, true, false, true, false, true, false, false, true, false, true, false, false, true, false, false, true, false, false, true, true, true, true, true, false, false, false, true, true, false, true, true, false, false, true, true, true, false, true, true, false, true, false, false, false, false, true, false, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, true, false, true, true, true, true, true, false, true, true, false, true, true, true, false, false, true, true, true, true, false, true, false, false, false, true, true, true, false, true, true, false, true, false, false, false, true, false, false, true, false, true, true, true, true, false, false, true, true, false, false, false, false, true, false, false, true, true, true, false, false, true, true, true, false, false, true, true, true, false, false, false, false, false, false, true, true, true, true, false, false, true, true, true, true, false, false, false, false, true, false, false, true, true, false, false, false, true, false, true, false, true, false, true, true, false, false, false, false, true, false, false, true, false, false, true]);
            let encoded = BinVector::from_bools(&[false, false, true, true, true, false, true, true, true, true, true, false, true, true, false, true, true, true, false, false, true, true, true, true, false, true, false, false, false, true, true, true, false, true, true, false, true, false, false, false, true, false, false, true, false, true, true, true, true, false, false, true, true, false, false, false, false, true, false, false, true, true, true, false, false, true, true, true, false, false, true, true, true, false, false, false, false, false, false, true, true, true, true, false, false, true, true, true, true, false, false, false, false, true, true, false, false, true, true, false, false, false, true, false, true, false, true, false, true, true, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, true, false, true, true, true, true, true, false, true, true, false, true, true, true, false, false, true, true, true, true, false, true, false, false, false, true, true, true, false, true, true, false, true, false, false, false, true, false, false, true, false, true, true, true, true, false, false, true, true, false, false, false, false, true, false, false, true, true, true, false, false, true, true, true, false, false, true, true, true, false, false, false, false, false, false, true, true, true, true, false, false, true, true, true, true, false, false, false, false, true, true, false, false, true, true, false, false, true, true, false, true, false, true, false, true, true, true, false, false, false, false, true, false, false, false, true, false, false, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, false, true, true, true, true, false, false, true, false, true, false, false, false, false, false, true, true, false, true, true, true, true, false, true, true, true, false, true, true, false, false, true, true, true, true, false, false, false, true, false, false, true, true, false, true, true, false, true, false, true, false, false, false, false, true, false, false, true, true, false, true, false, true, true, true, true, true, false, true, false, false, true, true, false, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, true, false, false, false, true, false, true, false, false, false, false, true, false, false, true, false, false, true, false, false, true, false, false, true, true, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, true, false, true, true, true, true, false, false, true, false, true, false, false, false, false, false, true, true, false, true, true, true, true, false, true, true, true, false, true, true, false, false, true, true, true, true, false, false, false, true, false, false, true, true, false, true, true, false, true, false, true, false, false, false, false, true, false, false, true, true, false, true, false, true, true, true, true, true, false, true, false, false, true, true, false, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, true, true, false, false, false, true, false, true, false, false, false, false, true, false, false, true, false, true, false, true, false, false, true, false, false, false, true, true, false, true, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, false, true, true, true, true, false, false, true, false, true, false, false, false, false, false, true, true, false, true, true, true, true, false, true, true, true, false, true, true, false, false, true, true, true, true, false, false, false, true, false, false, true, true, false, true, true, false, true, false, true, false, false, false, false, true, false, false, true, true, false, true, false, true, true, true, true, true, false, true, false, false, true, true, false, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, true, true, false, false, false, true, false, true, false, false, false, false, true, false, false, true, false, true, false, true, true, false, true, false, false, false, true, true, false, true, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, true, false, true, false, true, true, false, true, true, false, false, false, false, true, false, false, false, false, false, true, true, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, true, false, true, false, true, false, true, true, false, false, false, false, false, false, true, true, true, true, true, true, true, false, true, false, true, false, true, true, false, true, false, false, true, false, true, true, false, false, true, true, false, true, true, false, true, false, true, false, false, false, true, false, true, false, false, true, true, false, false, true, false, true, false, false, true, false, false, true, false, false, true, false, true, false, false, false, true, true, true, true]);
            let encoded = BinVector::from_bools(&[false, false, false, true, true, false, true, false, true, true, false, true, true, false, false, false, false, true, false, false, false, false, false, true, true, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, true, false, true, false, true, false, true, true, false, false, false, false, false, false, true, true, true, true, true, true, true, false, true, false, true, false, true, true, false, true, false, false, true, false, true, true, false, false, true, true, false, true, true, false, true, false, true, false, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, false, true, false, false, true, false, true, false, true, false, true, false, false, false, true, true, true, true, false, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, true, false, true, false, true, true, false, true, true, false, false, false, false, true, false, false, false, false, false, true, true, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, true, true, false, false, false, false, false, false, true, true, true, true, true, true, true, false, true, false, true, false, true, true, false, true, false, false, true, false, true, true, false, false, true, true, false, true, true, false, true, false, true, false, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, false, false, true, false, false, true, false, true, false, true, false, true, false, false, false, true, true, true, true, false, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, true, false, true, true, false, false, true, false, false, false, true, false, false, true, false, false, true, true, false, false, true, true, false, false, true, true, false, true, false, true, false, true, true, false, true, true, true, true, false, true, true, true, false, false, true, true, false, false, true, true, false, false, false, false, false, true, false, false, false, false, true, true, false, true, true, false, false, true, false, false, true, false, false, true, false, false, false, false, true, true, false, false, true, false, false, false, false, false, false, true, true, false, false, true, true, true, true, false, false, true, false, false, true, false, true, true, false, true, false, false, true, false, false, true, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, true, false, true, true, false, false, true, false, false, false, true, false, false, true, false, false, true, true, false, false, true, true, false, false, true, true, false, true, false, true, false, true, true, false, true, true, true, true, false, true, true, true, false, false, true, true, false, false, true, true, false, false, false, false, false, true, false, false, false, false, true, true, false, true, true, false, false, true, false, false, true, false, false, true, false, false, false, false, true, true, false, false, true, false, false, false, false, false, false, true, true, true, false, false, true, true, true, true, false, false, true, false, false, true, false, true, true, true, false, true, false, false, true, false, true, false, true, true, false, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, true, false, true, true, false, false, true, false, false, false, true, false, false, true, false, false, true, true, false, false, true, true, false, false, true, true, false, true, false, true, false, true, true, false, true, true, true, true, false, true, true, true, false, false, true, true, false, false, true, true, false, false, false, false, false, true, false, false, false, false, true, true, false, true, true, false, false, true, false, false, true, false, false, true, false, false, false, false, true, true, false, false, true, false, false, false, false, false, false, true, true, true, false, false, true, true, true, true, false, false, true, false, false, true, false, true, true, true, false, true, false, false, true, false, true, false, true, false, false, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, false, true, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, false, false, true, false, false, false, false, false, false, true, false, false, false, false, true, false, false, false, true, true, false, false, true, true, true, true, true, true, true, true, false, true, false, false, false, false, false, true, false, false, false, true, false, true, true, false, false, false, false, true, false, true, true, false, true, true, false, false, false, true, false, false, false, false, false, false, true, false, false, true, true, false, true, true, true, true, true, true, false, true, false, true, true, true, false, false, false, true, false, true, true, true, false, true, false, false, true, true, true]);
            let encoded = BinVector::from_bools(&[true, false, false, false, false, true, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, false, false, true, false, false, false, false, false, false, true, false, false, false, false, true, false, false, false, true, true, false, false, true, true, true, true, true, true, true, true, false, true, false, false, false, false, false, true, false, false, false, true, false, true, true, false, false, false, false, true, false, true, true, false, true, true, false, false, false, true, false, false, false, false, false, false, true, false, false, true, true, false, true, false, true, true, true, true, true, false, true, false, true, true, true, false, false, false, true, false, false, true, true, true, false, true, false, true, false, true, true, false, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, false, true, true, false, false, false, true, true, false, true, true, true, true, true, true, true, true, false, false, true, false, false, false, false, false, false, true, false, false, false, false, true, false, false, false, true, true, false, false, true, true, true, true, true, true, true, true, false, true, false, false, false, false, false, true, false, false, false, true, false, true, true, false, false, false, false, true, false, true, true, false, true, true, false, false, false, true, false, false, false, false, false, false, true, false, false, true, true, false, true, false, true, true, true, true, true, false, true, false, true, true, true, false, false, false, true, false, false, true, true, true, false, true, false, true, false, true, true, false, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, true, true, false, false, false, false, false, false, false, true, true, true, false, true, false, false, true, true, false, true, true, true, false, true, false, false, false, false, false, true, true, true, false, false, false, true, false, true, false, false, true, true, false, false, false, true, false, true, false, false, true, true, true, true, false, true, false, false, false, false, true, false, true, true, true, true, true, true, true, false, false, true, false, false, false, false, true, true, true, true, false, true, true, true, true, true, false, false, false, false, true, true, false, false, false, true, true, false, false, false, false, true, true, true, false, false, true, true, true, true, true, true, false, false, true, true]);
            let encoded = BinVector::from_bools(&[true, false, false, true, true, true, false, false, false, false, false, false, false, true, true, true, false, true, false, false, true, true, false, true, true, true, false, true, false, false, false, false, false, true, true, true, false, false, false, true, false, true, false, false, true, true, false, false, false, true, false, true, false, false, true, true, true, true, false, true, false, false, false, false, true, false, true, true, true, true, true, true, true, false, false, true, false, false, false, false, true, true, true, true, false, true, true, true, true, true, false, false, false, false, false, true, true, false, false, false, true, true, false, false, false, false, true, true, true, false, true, false, true, true, true, true, true, true, false, false, false, true, true, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, true, true, false, false, false, false, false, false, false, true, true, true, false, true, false, false, true, true, false, true, true, true, false, true, false, false, false, false, false, true, true, true, false, false, false, true, false, true, false, false, true, true, false, false, false, true, false, true, false, false, true, true, true, true, false, true, false, false, false, false, true, false, true, true, true, true, true, true, true, false, false, true, false, true, false, false, true, true, true, true, false, true, true, true, true, true, false, false, false, false, false, true, true, false, false, false, true, true, false, false, false, false, true, true, true, false, true, false, true, true, true, true, true, true, false, false, false, true, true, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, false, false, false, false, false, false, false, true, false, false, true, false, true, false, true, true, true, true, false, false, true, true, true, true, false, true, false, true, false, false, true, false, true, true, true, true, false, true, false, false, true, true, false, false, true, false, true, false, true, false, false, false, false, true, false, false, false, false, false, false, false, false, true, true, false, true, false, true, true, false, false, true, false, true, true, true, true, true, true, false, true, false, false, false, false, true, false, true, true, false, false, false, false, false, false, true, false, false, true, false, false, true, true, false, false, false, true, false, true, true, false, true, true, false, false, false]);
            let encoded = BinVector::from_bools(&[false, false, true, false, false, false, false, false, false, false, false, true, false, false, true, false, true, false, true, true, true, true, false, false, true, true, true, true, false, true, false, true, false, false, true, false, true, true, true, true, false, true, false, false, true, true, false, false, true, false, true, false, true, false, false, false, false, true, false, false, false, false, false, false, false, false, true, true, false, true, false, true, true, false, false, true, false, true, true, true, true, true, true, false, true, false, false, false, false, true, false, true, true, false, true, false, false, false, false, false, true, false, false, true, false, false, true, true, false, false, false, false, true, false, true, true, false, true, true, true, false, false, false, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, false, false, false, false, false, false, false, true, false, false, true, false, true, false, true, true, true, true, false, false, true, true, true, true, false, true, false, true, false, false, true, false, true, true, true, true, false, true, false, false, true, true, false, false, true, false, true, false, true, false, true, false, false, true, false, false, false, false, false, false, false, false, true, true, false, true, false, true, true, false, false, true, false, true, true, true, true, true, true, false, true, false, false, false, false, true, false, true, true, false, true, false, false, false, false, false, true, false, false, true, false, false, true, true, false, false, false, false, true, false, true, true, false, true, true, true, false, false, false, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, false, false, false, true, false, true, false, true, false, false, false, true, false, false, true, true, true, true, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, false, true, false, false, true, false, false, false, false, false, false, true, false, false, true, true, true, true, true, true, true, true, false, true, true, false, true, false, false, false, false, true, false, false, false, false, false, false, false, false, false, true, true, false, true, false, false, false, true, true, true, false, false, true, false, false, false, true, false, true, true, false, true, false, true, false, false, false, false, true, false, true, true, false, false, true, false, true, false, false, true, false]);
            let encoded = BinVector::from_bools(&[true, true, true, false, false, false, false, true, false, true, false, true, false, false, false, true, false, false, true, true, true, true, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, false, true, false, false, true, false, false, false, false, false, false, true, false, false, true, true, true, true, true, true, true, true, false, true, true, false, true, false, false, false, false, true, false, false, false, false, false, false, false, false, false, true, true, false, true, false, false, false, true, true, true, false, false, true, false, false, false, false, true, false, true, true, false, true, false, true, false, false, false, false, true, false, false, true, true, false, false, true, false, true, true, false, false, true, true, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, false, false, false, true, false, true, false, true, false, false, false, true, false, false, true, true, true, true, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, false, false, true, false, false, true, false, false, false, false, false, false, true, false, false, true, true, true, true, true, true, true, true, false, true, true, false, true, false, false, false, false, true, false, false, false, false, false, false, false, false, false, true, true, false, true, false, false, false, true, true, true, false, false, true, false, false, false, false, true, false, true, true, false, true, false, true, false, false, false, false, true, false, false, true, true, false, false, true, false, true, true, false, false, true, true, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, false, true, true, true, false, false, false, false, false, false, true, true, false, false, true, true, true, false, false, false, true, false, true, true, true, false, false, true, false, true, false, true, true, true, true, true, true, false, false, false, true, false, true, true, false, false, false, false, false, false, false, false, true, true, true, true, false, true, true, true, true, false, false, true, false, true, false, true, true, false, false, false, false, true, false, true, true, true, false, false, true, false, false, false, true, false, true, true, true, true, false, true, false, true, false, true, true, true, true, true, true, true, true, false, false, false, false, true, true, false, false, true, false, true, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, false, true, true, true, false, false, false, false, false, false, true, true, false, false, true, true, true, false, false, false, true, false, true, true, true, false, false, true, false, true, false, true, true, true, true, true, true, false, false, false, true, false, true, true, false, false, false, false, false, false, false, false, true, true, true, true, false, true, true, true, true, false, false, true, false, true, false, true, true, false, false, false, false, true, false, true, true, true, false, false, true, false, false, false, true, false, true, true, true, false, true, false, true, false, true, false, true, true, true, true, true, true, true, true, false, true, false, false, false, true, true, false, false, true, true, false, true, false, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, false, true, true, true, false, false, false, false, false, false, true, true, false, false, true, true, true, false, false, false, true, false, true, true, true, false, false, true, true, true, false, true, true, true, true, true, true, false, false, false, true, false, true, true, false, false, false, false, false, false, false, false, true, true, true, true, false, true, true, true, true, false, false, true, false, true, false, true, true, false, false, false, false, true, false, true, true, true, false, false, true, false, false, false, true, false, true, true, true, false, true, false, true, false, true, false, true, true, true, true, true, true, true, true, false, true, false, false, false, true, true, false, false, true, true, false, true, false, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, false, false, false, true, true, false, true, false, true, false, false, false, true, true, true, false, false, true, true, false, true, false, false, false, true, true, false, true, true, false, false, true, true, true, true, false, false, true, false, true, true, false, true, true, true, false, false, true, false, false, true, true, true, false, false, true, false, false, false, false, false, true, false, true, true, true, true, false, false, false, true, true, true, false, true, false, true, false, true, true, true, true, true, false, true, false, false, false, false, true, false, true, false, false, false, true, false, true, true, true, false, true, false, false, true, true, true, true, false, true, true, true, true, false, false, true]);
            let encoded = BinVector::from_bools(&[false, true, false, true, false, false, false, true, true, false, true, false, true, false, false, false, true, true, true, false, false, true, true, false, true, false, false, false, true, true, false, true, true, false, false, true, true, true, true, false, false, true, false, true, true, false, true, true, true, false, false, true, false, false, true, true, true, false, false, true, false, false, false, false, false, true, false, true, true, true, true, false, false, false, true, true, true, false, true, false, true, false, true, true, true, true, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, false, true, true, true, false, true, false, false, true, true, true, true, true, false, true, true, true, false, true, false, false, true, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, false, false, false, true, true, false, true, false, true, false, false, false, true, true, true, false, false, true, false, false, true, false, false, false, true, true, false, true, true, false, false, true, true, true, true, false, false, true, false, true, true, false, true, true, true, false, false, true, false, false, true, true, true, false, false, true, false, false, false, false, false, true, false, true, true, true, true, false, false, false, true, true, true, false, true, false, true, false, true, true, true, true, true, false, true, false, false, false, false, true, false, false, true, false, false, false, true, false, true, true, true, false, true, false, false, true, true, true, true, true, false, true, true, true, false, true, false, false, true, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, false, false, false, false, false, true, false, false, true, true, false, false, false, false, true, true, true, false, false, false, true, false, false, true, true, false, false, false, true, true, true, false, true, true, false, false, true, false, true, true, false, false, true, true, true, true, true, false, true, true, true, true, true, false, false, false, true, true, false, true, false, false, false, false, false, true, false, false, true, false, true, true, true, false, true, false, true, true, false, true, true, true, false, false, false, false, true, false, true, false, false, true, false, true, true, true, true, false, false, false, false, true, true, false, false, false, false, true, false, false, false, false, true, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, false, true, false, false, false, false, false, true, false, false, true, true, false, false, false, false, true, true, true, false, false, false, true, false, false, true, true, false, false, false, true, true, true, false, true, true, false, false, true, false, true, true, false, false, true, true, true, true, true, false, true, true, true, true, true, false, false, false, true, true, false, true, false, false, false, false, false, true, false, false, true, false, true, true, true, false, true, false, true, true, false, true, true, true, false, false, false, false, true, false, true, false, false, false, true, false, true, true, true, true, false, false, false, false, true, true, false, false, true, false, false, true, false, false, false, false, true, true, true, false, false, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, false, false, false, false, false, true, false, false, true, true, false, false, false, false, true, true, true, false, false, false, true, false, false, true, true, false, false, false, true, true, true, false, true, true, false, false, true, false, true, true, false, false, true, true, true, true, true, false, true, true, true, true, true, false, false, false, true, true, false, true, false, false, false, false, false, true, true, false, true, false, true, true, true, false, true, false, true, true, false, true, true, true, false, false, false, false, true, false, true, false, false, false, true, false, true, true, true, true, false, false, false, false, true, true, false, false, true, false, false, true, false, false, false, false, true, true, true, false, false, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, false, true, false, true, false, false, false, false, false, true, false, true, false, false, true, true, true, true, false, true, true, false, false, false, true, true, true, false, true, true, true, true, false, false, false, false, true, true, true, false, false, false, false, true, true, true, false, true, false, true, true, false, false, true, true, false, false, true, false, true, true, true, true, true, true, true, false, false, true, true, true, true, true, true, false, false, false, false, true, false, false, false, true, false, false, false, false, true, true, true, true, false, false, false, true, true, false, true, false, true, true, true, false, true, true, false, false, false, true, true, true, true, false, true, false, false]);
            let encoded = BinVector::from_bools(&[true, true, true, false, false, true, false, true, false, false, false, false, false, true, false, true, false, false, true, true, true, true, false, true, true, false, false, false, true, true, true, false, true, true, true, true, false, false, false, false, true, true, true, false, false, false, false, true, true, true, false, true, false, true, true, false, false, true, true, false, false, true, false, true, true, true, true, true, true, true, false, false, true, true, true, true, true, true, false, false, false, false, true, false, false, false, true, false, false, false, false, true, true, true, false, true, false, false, false, true, true, false, true, false, true, true, true, false, true, true, true, false, false, false, true, true, true, true, false, false, true, false, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, false, true, false, true, false, false, false, false, false, true, false, true, false, false, true, true, true, true, false, true, true, false, false, false, true, true, true, false, true, true, true, true, false, false, false, false, true, true, true, false, false, false, false, true, true, true, false, true, false, true, true, false, false, true, true, false, false, true, false, true, true, true, true, true, true, true, false, false, true, true, true, true, true, true, false, false, false, false, true, false, false, false, true, false, false, false, false, true, true, true, false, true, true, false, false, true, true, false, true, false, true, true, true, false, true, true, true, false, false, false, true, true, true, true, false, false, true, false, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, false, false, false, false, true, true, false, false, false, false, false, true, false, true, false, true, true, false, false, false, false, true, false, false, false, false, true, false, false, true, true, true, false, false, true, true, true, true, true, true, false, true, true, false, false, true, false, true, false, true, true, true, false, false, false, true, true, true, false, true, true, true, true, false, false, false, false, false, false, true, false, false, false, true, true, true, true, true, true, false, false, false, false, false, true, false, false, false, false, true, false, true, true, false, true, false, true, false, true, false, true, true, true, false, false, false, true, true, true, false, true, true, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, false, false, false, false, false, true, true, false, false, false, false, false, true, false, true, false, true, true, false, false, false, false, true, false, false, false, false, true, false, false, true, true, true, false, false, true, true, true, true, true, true, false, true, true, false, false, true, false, true, false, true, true, true, false, false, false, true, true, true, false, true, true, true, true, false, false, false, false, false, false, true, false, false, false, true, true, true, true, true, true, false, false, false, false, false, true, false, false, false, false, true, false, false, true, true, false, true, false, true, false, true, false, true, true, true, false, false, true, false, true, true, true, false, true, true, false, false, true, false, true, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, false, false, false, false, true, true, false, false, false, false, false, true, false, true, false, true, true, false, false, false, false, false, false, false, false, false, true, false, false, true, true, true, false, false, true, true, true, true, true, true, false, true, true, false, false, true, false, true, false, true, true, true, false, false, false, true, true, true, false, true, true, true, true, false, false, false, false, false, false, true, false, false, false, true, true, true, true, true, true, false, false, false, false, false, true, false, false, false, false, true, false, false, true, true, false, true, false, true, false, true, false, true, true, true, false, false, true, false, true, true, true, false, true, true, false, false, true, false, true, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, true, false, true, false, true, false, true, true, true, false, false, true, true, false, true, true, true, false, true, false, true, true, true, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, true, true, false, false, true, true, false, true, true, false, false, false, true, false, false, true, true, false, false, true, false, false, false, true, false, true, false, false, false, true, false, true, true, false, true, true, true, true, false, false, false, false, true, true, false, false, true, true, true, true, true, true, false, false, true, true, false, false, true, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, true, false, true, false, true, false, true, true, true, false, false, true, true, false, true, true, true, false, true, false, true, true, true, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, true, true, false, false, true, true, false, true, true, false, false, false, true, false, false, true, true, false, false, true, false, false, false, true, false, true, false, false, false, true, false, true, true, false, true, false, true, true, true, false, false, false, false, true, true, false, false, true, true, true, true, true, true, true, false, false, true, true, false, false, false, true, false, false, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, true, false, true, false, true, false, true, true, true, false, false, true, true, false, false, true, true, false, true, false, true, true, true, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, true, true, false, false, true, true, false, true, true, false, false, false, true, false, false, true, true, false, false, true, false, false, false, true, false, true, false, false, false, true, false, true, true, false, true, false, true, true, true, false, false, false, false, true, true, false, false, true, true, true, true, true, true, true, false, false, true, true, false, false, false, true, false, false, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, true, false, true, false, false, false, false, false, false, false, true, true, true, true, false, false, false, false, false, false, false, true, true, true, true, false, true, true, true, false, true, false, true, false, false, true, true, true, true, true, false, false, false, false, false, false, false, false, true, true, true, false, false, false, false, false, true, true, false, true, true, true, true, false, true, false, false, false, false, true, true, true, false, false, true, true, true, true, true, false, true, false, false, true, true, true, false, true, true, false, false, true, true, true, false, false, true, false, true, false, true, true, false, true, false, false, false, true, false, false, true, true, true, false, true, false]);
            let encoded = BinVector::from_bools(&[false, true, false, false, true, false, true, false, false, false, false, false, false, false, true, true, true, true, false, false, false, false, false, false, false, true, true, true, true, false, true, true, true, false, true, false, true, false, false, true, true, true, true, true, false, false, false, false, false, false, false, false, true, true, true, false, false, false, false, false, true, true, false, true, true, true, true, false, true, false, false, false, false, true, true, true, false, false, true, true, true, true, true, false, true, false, false, true, true, true, false, true, true, false, true, false, true, true, true, false, false, true, false, true, false, true, true, false, true, false, false, false, false, true, false, false, true, true, false, true, false, true, true, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, true, false, true, false, false, false, false, false, false, false, true, true, true, true, false, false, false, false, false, false, false, true, true, true, true, false, true, true, true, false, true, false, true, false, false, true, true, true, true, true, false, false, false, false, false, false, false, false, true, true, true, false, false, false, false, true, true, true, false, true, true, true, true, false, true, false, false, false, false, true, true, true, false, false, true, true, true, true, true, false, true, false, false, true, true, true, false, true, true, false, true, false, true, true, true, false, false, true, false, true, false, true, true, false, true, false, false, false, false, true, false, false, true, true, false, true, false, true, true, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, false, false, true, true, false, true, false, false, true, true, true, false, false, true, false, true, true, true, true, false, false, true, true, true, true, false, true, false, false, false, true, true, false, false, true, false, true, false, false, true, false, true, false, false, false, true, false, false, false, true, false, false, true, true, true, false, true, true, true, true, false, false, false, false, false, false, false, true, true, true, false, false, false, false, false, false, true, false, true, false, true, true, true, false, true, false, false, false, false, true, true, true, false, false, true, false, true, true, true, true, false, false, true, false, true, true, true, true, true, false, false, true, true, false, false, false]);
            let encoded = BinVector::from_bools(&[false, false, false, true, false, false, true, true, false, true, false, false, true, true, true, false, false, true, false, true, true, true, true, false, false, true, true, true, true, false, true, false, false, false, true, true, false, false, true, false, true, false, false, true, false, true, false, false, false, true, false, false, false, true, false, false, true, true, true, false, true, true, true, true, false, false, false, false, false, false, false, true, true, true, false, false, false, false, false, false, true, false, true, false, true, true, true, false, true, false, false, false, false, true, true, true, true, false, false, true, false, true, true, true, true, false, false, true, false, true, true, true, true, true, true, false, false, true, true, true, false, false, false, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, false, false, true, true, false, true, false, false, true, true, true, false, false, true, false, true, true, true, true, false, false, true, true, true, true, false, true, false, false, false, true, true, false, false, true, false, true, false, false, true, false, true, false, false, false, true, false, false, false, true, false, false, true, true, true, false, true, true, true, true, false, false, false, false, false, false, false, true, true, true, false, false, false, false, false, false, true, false, true, false, true, true, true, false, true, false, true, false, false, true, true, true, true, false, false, true, false, true, true, true, true, false, false, true, false, true, true, true, true, true, true, false, false, true, true, true, false, false, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, false, true, true, true, true, true, false, false, true, false, true, true, false, false, true, false, true, false, true, true, true, false, false, true, true, true, true, true, false, false, false, true, true, true, true, false, false, true, false, true, true, false, false, false, true, false, true, false, true, true, true, true, false, true, false, false, true, true, false, true, true, true, false, true, false, false, true, true, true, false, true, true, false, false, false, true, true, true, true, false, true, true, true, true, true, false, false, true, false, true, false, true, true, false, false, false, false, true, false, false, true, true, false, false, false, true, true, true, false, true, false, false, true, true, true, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, false, true, true, true, true, true, false, false, true, false, true, true, false, false, true, false, true, false, true, true, true, false, false, true, true, true, true, true, false, false, false, true, true, true, true, false, false, true, false, true, true, false, false, false, true, false, true, false, true, true, true, true, false, true, false, false, true, true, false, true, true, true, false, true, false, false, true, true, true, false, true, true, false, false, false, true, true, true, true, false, true, true, true, true, true, false, false, true, false, true, true, false, true, true, false, false, false, false, true, false, false, true, true, false, false, false, true, true, true, true, false, true, false, false, true, true, true, true, true, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, false, true, true, true, true, true, false, false, true, false, true, true, false, false, true, false, true, false, true, true, true, false, false, true, true, true, true, true, false, false, false, true, true, true, true, false, false, true, false, true, true, false, false, false, true, true, true, false, true, true, true, true, false, true, false, false, true, true, false, true, true, true, false, true, false, false, true, true, true, false, true, true, false, false, false, true, true, true, true, false, true, true, true, true, true, false, false, true, false, true, true, false, true, true, false, false, false, false, true, false, false, true, true, false, false, false, true, true, true, true, false, true, false, false, true, true, true, true, true, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, true, false, false, false, true, true, false, true, true, false, false, false, true, false, true, false, false, false, true, true, true, true, false, true, true, true, false, false, true, true, true, true, false, false, false, true, false, true, true, true, true, true, true, true, true, true, false, false, false, true, false, false, false, false, false, false, true, false, true, false, true, false, true, true, true, true, true, false, true, false, true, true, true, false, false, true, true, true, false, true, false, true, true, true, false, true, false, true, false, false, true, false, true, false, true, true, false, false, true, false, false, false, true, true, false, false, true, false, false, true, false, true, false, false, false, false]);
            let encoded = BinVector::from_bools(&[false, false, true, false, true, false, false, false, true, true, false, true, true, false, false, false, true, false, true, false, false, false, true, true, true, true, false, true, true, true, false, false, true, true, true, true, false, false, false, true, false, true, true, true, true, true, true, true, true, true, false, false, false, true, false, false, false, false, false, false, true, false, true, false, true, false, true, true, true, true, true, false, true, false, true, true, true, false, false, true, true, true, false, true, false, true, true, true, false, true, false, true, false, false, false, true, false, true, false, true, true, false, false, true, false, false, false, true, true, false, false, false, true, false, false, true, false, true, false, false, false, false, false, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, true, false, false, false, true, true, true, true, true, false, false, false, true, false, true, false, false, false, true, true, true, true, false, true, true, true, false, false, true, true, true, true, false, false, false, true, false, true, true, true, true, true, true, true, true, true, false, false, false, true, false, false, false, false, false, false, true, false, true, false, true, false, true, true, true, true, true, false, true, false, true, true, true, false, false, true, true, true, false, true, false, true, true, true, false, true, false, true, false, false, false, true, false, true, false, true, true, false, false, true, false, false, false, true, true, false, false, false, true, false, false, true, false, true, false, false, false, false, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, false, true, false, true, true, false, false, false, true, true, false, true, false, false, false, true, false, true, true, true, false, false, true, false, false, false, true, true, true, true, true, false, false, true, false, false, false, true, false, true, false, false, false, false, true, false, false, false, false, true, false, false, true, true, true, false, false, true, true, true, false, true, false, true, true, false, true, true, true, false, true, false, true, true, true, true, true, false, false, false, true, false, false, true, true, true, false, true, true, true, true, false, false, false, true, true, true, false, false, true, false, false, true, true, true, false, true, true, false, true, false, true, false, false, true, false]);
            let encoded = BinVector::from_bools(&[false, true, false, false, false, true, false, true, true, false, false, false, true, true, false, true, false, false, false, true, false, true, true, true, false, false, true, false, false, false, true, true, true, true, true, false, false, true, false, false, false, true, false, true, false, false, false, false, true, false, false, false, false, true, false, false, true, true, true, false, false, true, true, true, false, true, false, true, true, false, true, true, true, false, true, false, true, true, true, true, true, false, false, false, true, false, false, true, true, true, false, true, true, true, false, true, false, false, false, true, true, true, false, false, true, false, false, true, true, true, true, false, true, true, false, true, false, true, false, false, false, true, true, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, false, true, false, true, true, false, false, false, true, true, false, true, false, false, false, true, false, true, true, true, false, false, true, false, false, false, true, true, true, true, true, false, false, true, false, false, false, true, false, true, false, false, false, false, true, false, false, false, false, true, false, false, true, true, true, false, false, true, true, true, false, true, false, true, true, false, true, true, true, false, true, false, true, true, true, true, true, false, false, false, true, false, false, true, true, true, false, false, true, true, false, true, false, false, false, true, true, true, false, false, true, false, false, true, true, true, true, false, true, true, false, true, false, true, false, false, false, true, true, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, true, true, false, false, false, false, true, false, false, false, false, true, true, false, false, true, false, false, false, true, true, true, false, true, true, true, false, true, false, false, false, true, true, true, false, false, true, true, false, false, false, false, true, false, true, true, false, true, false, true, true, false, false, false, true, true, false, false, false, true, false, false, true, true, false, false, true, true, false, false, true, true, false, true, true, false, true, false, true, false, false, false, true, true, true, true, true, false, true, true, false, true, false, false, false, true, true, true, false, false, false, false, true, true, true, false, true, true, false, true, false, false, false, false, true, true]);
            let encoded = BinVector::from_bools(&[false, false, true, true, true, true, false, false, false, false, true, false, false, false, false, true, true, false, false, true, false, false, false, true, true, true, false, true, true, true, false, true, false, false, false, true, true, true, false, false, true, true, false, false, false, false, true, false, true, true, false, true, false, true, true, false, false, false, true, true, false, false, false, true, false, false, true, true, false, false, true, true, false, false, true, true, false, true, true, false, true, false, true, false, false, false, true, true, true, true, true, false, true, true, false, false, true, false, false, false, true, true, true, false, false, false, false, true, true, true, false, false, true, true, false, true, false, false, false, false, false, true, true, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, true, true, false, false, false, false, true, false, false, false, false, true, true, false, false, true, false, false, false, true, true, true, false, true, true, true, false, true, false, false, false, true, false, true, false, false, true, true, false, false, false, false, true, false, true, true, false, true, false, true, true, false, false, false, true, true, false, false, false, true, false, false, true, true, false, false, true, true, false, false, true, true, false, true, true, false, true, false, true, false, false, false, true, true, true, true, true, false, true, true, false, false, true, false, false, false, true, true, true, false, false, false, false, true, true, true, false, false, true, true, false, true, false, false, false, false, false, true, true, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, false, false, false, true, false, false, true, true, false, true, false, false, false, false, true, false, false, true, false, false, false, false, true, true, false, false, true, false, false, false, true, true, true, true, false, true, false, true, false, true, true, false, false, false, true, true, true, true, true, true, false, false, false, false, true, false, false, false, false, false, true, false, true, true, false, false, false, false, true, true, true, false, true, false, true, true, false, false, true, false, true, true, false, false, true, true, false, false, true, true, false, false, false, true, false, true, true, false, false, false, true, false, true, false, false, true, true, false, false, false, true, true, false, false, false, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, false, false, false, true, false, false, true, true, false, true, false, false, false, false, true, false, false, true, false, false, false, false, true, true, false, false, true, false, false, false, true, true, true, true, false, true, false, true, false, true, true, false, false, false, true, true, true, true, true, true, false, false, false, false, true, false, false, false, false, false, true, false, true, true, false, false, false, false, true, true, true, false, true, false, true, true, false, false, true, false, true, true, false, false, true, true, false, false, true, true, true, false, false, false, true, false, true, true, false, false, false, true, false, true, false, false, true, true, true, false, false, false, true, true, false, false, false, false, false, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, false, false, false, true, false, false, true, true, false, true, false, false, false, false, true, false, false, true, false, false, false, false, true, true, false, false, true, false, false, false, true, true, true, true, false, true, false, true, false, true, true, false, false, false, true, true, true, true, true, true, false, false, false, false, true, false, false, false, false, false, true, false, true, true, false, false, false, false, true, true, true, false, true, false, true, true, false, false, true, false, true, true, false, false, true, true, false, false, true, true, true, false, false, false, true, false, true, true, false, false, false, true, false, true, false, false, true, true, true, false, false, false, true, true, false, false, false, false, false, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, false, false, true, false, false, true, true, false, false, false, true, true, true, false, true, false, true, false, false, false, true, false, true, false, true, true, false, true, true, true, true, false, true, true, true, false, true, true, false, false, false, false, true, true, true, true, true, true, false, true, true, true, true, false, true, true, true, true, false, false, true, false, false, false, false, true, true, true, true, false, true, false, true, false, true, false, false, true, false, true, true, true, false, false, true, true, true, false, false, true, false, false, true, true, false, true, false, false, true, false, false, false, false, true, false, false, true, true, false, false, false, false, true, true, true, true]);
            let encoded = BinVector::from_bools(&[false, true, false, true, false, false, true, false, false, true, true, false, false, false, true, true, true, false, true, false, true, false, false, false, true, false, true, false, true, true, false, true, true, true, true, false, true, true, true, false, true, true, false, false, false, false, true, true, true, true, true, true, false, true, true, true, true, false, true, true, true, true, false, false, true, false, false, false, false, true, true, true, true, false, true, false, true, false, true, false, false, true, false, true, true, true, false, false, true, true, true, false, false, true, true, false, false, true, true, false, true, false, false, true, false, false, false, false, true, false, false, false, true, true, false, false, false, false, false, true, true, true, false, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, false, false, true, false, false, true, true, false, false, false, true, true, true, false, true, false, true, true, false, false, true, false, true, false, true, true, false, true, true, true, true, false, true, true, true, false, true, true, false, false, false, false, true, true, true, true, true, true, false, true, true, true, true, false, true, true, true, true, false, false, true, false, false, false, false, true, true, true, true, false, true, false, true, false, true, false, false, true, false, true, true, true, false, false, true, true, true, false, false, true, true, false, false, true, true, false, true, false, false, true, false, false, false, false, true, false, false, false, true, true, false, false, false, false, false, true, true, true, false, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, true, false, true, false, false, false, false, true, false, false, true, false, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, false, true, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, false, true, true, true, true, false, false, false, true, false, true, false, false, false, true, false, true, false, false, true, true, true, false, true, true, false, true, true, false, true, true, false, true, false, true, false, true, false, true, false, false, false, true, true, false, false, false, false, true, true, false, true, false, false, false, false, true, false, false, true, false, true, false, true, true]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, true, false, true, false, false, false, false, true, false, false, true, false, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, false, true, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, false, true, true, true, true, false, false, false, true, false, true, false, false, false, true, false, true, false, false, true, true, true, false, true, true, false, true, true, false, true, true, false, true, false, true, false, true, false, true, false, false, false, false, true, true, false, false, false, false, true, true, false, true, false, false, false, false, false, true, false, false, true, false, false, true, false, true, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, true, false, true, false, false, false, false, true, false, true, true, false, true, false, false, true, true, true, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, false, true, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, false, true, true, true, true, false, false, false, true, false, true, false, false, false, true, false, true, false, false, true, true, true, false, true, true, false, true, true, false, true, true, false, true, false, true, false, true, false, true, false, false, false, false, true, true, false, false, false, false, true, true, false, true, false, false, false, false, false, true, false, false, true, false, false, true, false, true, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, false, true, false, true, false, false, false, false, true, false, true, true, true, true, true, false, true, true, true, false, false, true, true, false, false, false, false, false, true, true, true, true, true, false, false, false, true, false, true, false, true, true, false, false, false, true, false, true, true, true, false, true, false, false, true, false, true, false, false, true, true, false, false, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, true, true, false, true, false, false, true, true, true, false, true, true, true, true, true, true, false, false, true, false, false, true, false, false, false, false, true, false, false, false, false, false, true, false, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, false, true, false, true, false, false, false, false, true, false, true, true, true, true, true, false, true, true, true, false, false, true, true, false, false, false, false, false, true, true, true, true, true, false, false, false, true, false, true, false, true, true, false, false, false, true, false, true, true, true, false, true, false, false, true, false, true, false, false, true, true, false, false, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, true, true, false, true, false, false, true, true, true, false, true, false, true, true, true, true, true, false, false, true, false, false, true, false, false, false, false, true, true, false, false, false, false, false, true, false, false, true, false, false, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, false, true, false, true, false, false, false, false, true, false, true, true, true, true, true, false, true, true, true, false, false, true, true, false, false, false, false, false, true, true, true, true, true, false, false, false, true, false, true, false, true, true, false, false, true, true, false, true, true, true, false, true, false, false, true, false, true, false, false, true, true, false, false, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, true, true, false, true, false, false, true, true, true, false, true, false, true, true, true, true, true, false, false, true, false, false, true, false, false, false, false, true, true, false, false, false, false, false, true, false, false, true, false, false, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, false, false, false, true, false, false, false, true, true, false, false, true, true, false, false, true, false, false, false, true, true, false, false, false, false, true, true, false, true, true, true, true, false, true, false, true, false, true, false, true, true, false, false, false, false, true, true, true, true, false, true, false, false, false, false, true, true, true, true, true, true, true, true, false, true, false, false, true, true, true, false, false, true, false, false, true, false, false, false, false, true, false, true, false, true, false, false, false, false, false, true, true, true, true, false, false, false, true, false, false, false, true, true, false, true, false, false, true, false, true, true, true, false, false, true, false]);
            let encoded = BinVector::from_bools(&[true, false, false, true, false, false, false, true, false, false, false, true, true, false, false, true, true, false, false, true, false, false, false, true, true, false, false, false, false, true, true, false, true, true, true, true, false, true, false, true, false, true, false, true, true, false, false, false, false, true, true, true, true, false, true, false, false, false, false, true, true, true, true, true, true, true, true, false, true, false, false, true, true, true, false, false, true, false, false, true, false, false, false, false, true, false, true, false, true, false, false, false, false, false, true, true, true, true, true, false, false, false, true, false, false, false, true, true, false, true, true, false, false, true, false, true, true, true, false, false, false, true, true, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, false, false, false, true, false, false, false, true, true, false, false, true, true, false, false, true, false, false, false, true, true, false, false, false, false, true, true, false, true, true, true, true, false, true, false, true, false, true, false, true, true, false, false, false, false, true, true, true, false, false, true, false, false, false, false, true, true, true, true, true, true, true, true, false, true, false, false, true, true, true, false, false, true, false, false, true, false, false, false, false, true, false, true, false, true, false, false, false, false, false, true, true, true, true, true, false, false, false, true, false, false, false, true, true, false, true, true, false, false, true, false, true, true, true, false, false, false, true, true, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, true, false, false, false, false, false, false, true, false, false, false, true, true, false, false, false, true, true, false, false, false, false, true, false, false, true, true, true, false, true, true, true, false, true, true, true, true, true, false, false, false, false, true, true, true, true, false, true, true, false, true, false, false, false, false, true, false, true, false, false, true, false, true, true, false, true, true, true, false, true, true, false, true, false, false, false, false, false, true, true, true, false, false, true, false, false, true, true, false, true, false, false, true, false, false, true, false, false, false, false, false, false, false, true, true, true, false, true, false, false, true, true, true, false, true, true]);
            let encoded = BinVector::from_bools(&[true, true, false, false, true, false, false, false, false, false, false, true, false, false, false, true, true, false, false, false, true, true, false, false, false, false, true, false, false, true, true, true, false, true, true, true, false, true, true, true, true, true, false, false, false, false, true, true, true, true, false, true, true, false, true, false, false, false, false, true, false, true, false, false, true, false, true, true, false, true, true, true, false, true, true, false, true, false, false, false, false, false, true, true, true, false, false, true, false, false, true, true, false, true, false, false, false, true, false, false, true, false, false, false, false, false, false, false, true, true, false, true, false, true, false, false, true, true, false, true, false, true, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, true, false, false, false, false, false, false, true, false, false, false, true, true, false, false, false, false, true, false, false, false, false, true, false, false, true, true, true, false, true, true, true, false, true, true, true, true, true, false, false, false, false, true, true, true, true, false, true, true, false, true, false, false, false, false, true, false, true, false, false, true, false, true, true, false, true, true, true, false, true, true, false, true, false, false, false, false, false, true, true, true, false, false, true, false, false, true, true, false, true, false, false, false, true, false, false, true, false, false, false, false, false, false, false, true, true, false, true, false, true, false, false, true, true, false, true, false, true, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, true, false, false, true, false, true, true, true, true, false, false, true, true, true, true, true, false, true, false, false, false, false, true, false, false, true, true, false, false, false, false, false, true, false, true, true, false, true, true, false, false, false, false, true, false, false, true, false, true, true, false, true, true, true, false, true, true, false, true, false, false, false, false, true, true, true, true, false, true, true, true, true, false, false, false, false, true, false, true, true, true, true, true, false, true, false, false, false, false, true, true, false, true, false, true, false, false, false, false, true, true, true, false, true, true, true, false, false, false, true, true, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, true, true, false, false, true, false, true, true, true, true, false, false, true, true, true, true, true, false, true, false, false, false, false, true, false, false, true, true, false, false, false, false, false, true, false, true, true, false, true, true, false, false, false, false, true, false, false, true, false, true, true, false, true, true, true, false, true, true, false, true, false, false, false, false, true, true, true, true, false, true, true, true, true, false, false, false, false, true, false, true, true, true, true, true, false, true, false, false, false, false, true, true, true, false, true, false, true, false, false, false, false, true, true, true, false, true, true, true, true, false, false, false, true, true, true, false, true, true, false, true, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, true, false, false, true, false, true, true, true, true, false, false, true, true, true, true, true, false, true, false, false, false, false, true, false, false, true, true, false, false, false, false, false, true, false, true, true, false, true, true, false, false, false, false, true, false, false, true, false, true, true, false, true, true, true, false, true, true, false, true, false, false, false, false, true, true, true, true, false, true, true, true, true, false, false, false, false, true, false, true, true, true, true, true, false, true, false, false, false, false, true, true, true, false, true, false, true, false, false, false, false, true, true, false, false, true, true, true, true, false, false, false, true, true, true, false, true, true, false, true, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, false, true, false, true, true, false, false, true, true, false, true, true, true, true, false, true, true, true, false, true, false, false, false, false, true, true, true, true, false, false, false, true, false, false, true, true, false, false, false, true, true, true, false, false, false, true, false, false, false, true, false, true, true, false, true, true, false, true, false, true, true, true, true, false, false, true, false, true, false, false, false, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, false, true, true, true, true, true, false, true, true, true, true, false, false, true, false, true, true, true, false, true, true, true, false, false, false, false, true, true, true]);
            let encoded = BinVector::from_bools(&[true, true, true, true, false, true, false, true, true, false, false, true, true, false, true, true, true, true, false, true, true, true, false, true, false, false, false, false, true, true, true, true, false, false, false, true, false, false, true, true, false, false, false, true, true, true, false, false, false, true, false, false, false, true, false, true, true, false, true, true, false, true, false, true, true, true, true, false, false, true, false, true, false, false, false, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, false, true, true, true, true, true, true, false, true, true, true, true, false, false, true, false, true, true, true, false, false, true, true, true, false, false, false, false, false, true, true, true, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, false, true, false, true, true, false, false, true, true, false, true, true, true, true, false, true, true, true, false, true, false, false, false, false, true, true, true, true, false, false, false, true, false, false, true, true, false, false, false, true, true, true, false, false, false, true, false, false, false, true, false, true, true, false, true, true, false, true, false, true, true, true, true, false, false, true, false, true, false, false, false, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, false, true, false, true, true, true, true, false, true, true, true, true, false, false, true, false, true, true, true, false, false, true, true, true, false, false, false, false, false, true, true, true, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, true, false, false, false, false, true, true, true, false, false, true, true, false, true, true, false, false, false, false, true, false, true, false, false, true, true, false, false, false, false, true, false, false, false, false, false, false, true, false, false, true, false, true, true, false, true, true, false, false, false, true, false, false, false, true, false, false, true, false, true, true, true, true, true, false, false, false, false, false, false, true, false, true, true, true, false, true, false, true, false, false, true, true, false, true, true, false, true, true, false, false, true, true, false, false, true, false, true, false, true, true, true, false, false, true, false, true, false, false, false, true, true, false, false, false, true]);
            let encoded = BinVector::from_bools(&[false, true, false, false, true, false, false, false, false, true, true, true, false, false, true, true, false, true, true, false, false, false, false, true, false, true, false, false, true, true, false, false, false, false, true, false, false, false, false, false, false, true, false, false, true, false, true, true, false, true, true, false, false, false, true, false, false, false, true, false, false, true, false, true, true, true, true, true, false, false, false, false, false, false, true, false, true, true, true, false, true, false, true, false, false, true, true, false, true, true, false, true, true, false, true, false, true, true, false, false, true, false, true, false, true, true, true, false, false, true, false, false, true, false, false, false, true, true, true, false, false, false, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, true, false, false, false, false, true, true, true, false, false, true, true, false, true, true, false, false, false, false, true, false, true, false, false, true, true, false, false, false, false, true, false, false, false, false, false, false, true, false, false, true, false, true, true, false, true, true, false, false, false, true, false, false, false, true, false, false, true, false, true, true, true, true, true, false, false, false, false, false, false, true, false, true, true, true, false, true, false, true, false, false, true, true, false, true, true, false, true, true, false, true, false, true, true, false, false, true, false, true, true, true, true, true, false, false, true, false, false, true, false, false, false, true, true, true, false, false, false, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, false, false, false, true, true, false, true, true, false, false, true, false, true, true, true, false, true, false, true, true, false, true, true, false, true, false, false, true, false, false, true, false, false, false, true, true, false, true, true, false, false, false, false, false, false, true, false, false, false, false, true, true, true, false, true, false, true, true, false, true, false, false, true, false, true, true, true, false, true, false, true, false, false, true, false, true, true, false, true, false, true, false, true, false, false, true, true, true, true, true, true, false, true, true, true, false, true, true, false, false, false, true, true, false, false, false, true, false, false, true, true, true, true, true, true, true]);
            let encoded = BinVector::from_bools(&[false, true, true, false, false, false, false, true, true, false, true, true, false, false, true, false, true, true, true, false, true, false, true, true, false, true, true, false, true, false, false, true, false, false, true, false, false, false, true, true, false, true, true, false, false, false, false, false, false, true, false, false, false, false, true, true, true, false, true, false, true, true, false, true, false, false, true, false, true, true, true, false, true, false, true, false, false, true, false, true, true, false, true, false, true, false, true, false, false, true, true, true, true, true, true, true, false, true, true, true, false, true, true, false, false, false, true, true, false, false, false, false, true, false, false, true, true, true, true, true, true, true, false, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, false, false, false, true, true, false, true, false, false, false, true, false, true, true, true, false, true, false, true, true, false, true, true, false, true, false, false, true, false, false, true, false, false, false, true, true, false, true, true, false, false, false, false, false, false, true, false, false, false, false, true, true, true, false, true, false, true, true, false, true, false, false, true, false, true, true, true, false, true, false, true, false, false, true, false, true, true, false, true, false, true, false, true, false, false, true, true, true, true, true, true, true, false, true, true, true, false, true, true, false, false, false, true, true, false, false, false, false, true, false, false, true, true, true, true, true, true, true, false, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, true, false, false, true, false, false, false, false, false, false, true, false, false, false, true, false, false, false, true, true, false, false, true, true, false, false, false, true, false, false, false, false, false, false, true, false, false, true, true, true, false, true, true, false, false, false, true, true, false, false, false, false, true, true, true, true, false, false, true, true, false, false, true, true, false, false, false, false, true, false, true, false, false, true, true, true, false, false, true, false, true, true, false, true, false, false, false, false, false, false, true, true, true, true, false, true, false, true, true, false, true, true, true, true, false, false, false, false, false, true, true, false, false, false, true, true]);
            let encoded = BinVector::from_bools(&[false, true, false, false, true, false, false, true, false, false, false, false, false, false, true, false, false, false, true, false, false, false, true, true, false, false, true, true, false, false, false, true, false, false, false, false, false, false, true, false, false, true, true, true, false, true, true, false, false, false, true, true, false, false, false, false, true, true, true, true, false, false, true, true, false, false, true, true, false, false, false, false, true, false, true, false, false, true, true, true, false, false, true, false, true, true, false, true, false, false, false, false, false, false, false, true, true, true, true, false, true, false, true, true, false, true, true, true, true, false, false, false, false, false, false, true, true, false, false, false, false, true, false, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, true, false, false, true, false, false, false, false, false, false, true, false, false, false, true, false, false, false, true, true, false, false, true, true, false, false, false, true, false, false, false, false, false, false, true, false, false, true, true, true, false, true, true, false, false, false, true, true, false, false, false, false, true, true, true, true, false, false, true, true, false, false, true, true, false, false, false, false, true, false, true, false, true, true, true, true, false, false, true, false, true, true, false, true, false, false, false, false, false, false, false, true, true, true, true, false, true, false, true, true, false, true, true, true, true, false, false, false, false, false, false, true, true, false, false, false, false, true, false, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, false, false, true, false, true, true, false, true, true, false, false, true, true, true, false, false, false, false, true, true, false, false, false, true, true, true, false, true, false, true, false, true, true, false, true, false, false, false, false, false, false, false, false, true, true, true, true, false, false, true, false, true, false, false, true, false, false, false, true, false, false, true, false, false, false, false, false, true, false, false, true, true, false, false, true, true, false, false, true, true, false, true, true, true, true, false, false, true, false, false, true, false, true, false, true, true, false, true, false, false, false, false, true, false, true, true, false, true, true, false, true, false, false, false, false, true]);
            let encoded = BinVector::from_bools(&[true, true, false, true, false, false, true, false, true, true, false, true, true, false, false, true, true, true, false, false, false, false, true, true, false, false, false, true, true, true, false, true, false, true, false, true, true, false, true, false, false, false, false, false, false, false, false, true, true, true, true, false, false, true, false, true, false, false, true, false, false, false, true, false, false, true, false, false, false, false, false, true, false, false, true, true, false, false, true, true, false, false, true, true, false, true, true, true, true, false, false, true, false, false, false, true, false, true, false, true, true, false, true, false, false, false, false, true, false, true, false, true, false, true, true, false, true, false, false, false, false, false, true, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, false, false, true, false, true, true, false, true, true, false, false, true, true, true, false, false, false, false, true, true, false, false, false, true, true, true, false, true, false, true, false, true, true, false, true, false, false, false, false, false, false, false, false, true, true, true, true, false, false, true, false, true, false, true, true, false, false, false, true, false, false, true, false, false, false, false, false, true, false, false, true, true, false, false, true, true, false, false, true, true, false, true, true, true, true, false, false, true, false, false, false, true, false, true, false, true, true, false, true, false, false, false, false, true, false, true, false, true, false, true, true, false, true, false, false, false, false, false, true, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, true, true, false, true, true, true, true, true, true, false, true, false, false, false, false, false, true, false, false, false, true, false, false, false, true, true, true, true, true, false, true, true, true, false, true, false, true, true, true, false, true, false, true, true, false, true, false, false, false, false, false, true, false, true, true, false, true, true, true, false, false, false, true, true, false, false, false, true, true, true, true, true, true, false, true, false, false, false, false, true, true, true, false, true, false, true, false, true, false, false, true, true, true, true, true, false, false, true, true, true, true, true, true, false, true, true, true, false, false, false, true, false, false, false, false, true]);
            let encoded = BinVector::from_bools(&[false, false, false, false, true, true, false, true, true, true, true, true, true, false, true, false, false, false, false, false, true, false, false, false, true, false, false, false, true, true, true, true, true, false, true, true, true, false, true, false, true, true, true, false, true, false, true, true, false, true, false, false, false, false, false, true, false, true, true, false, true, true, true, false, false, false, true, true, false, false, false, true, true, true, true, true, true, false, true, false, false, false, false, true, true, true, false, true, false, true, false, true, false, false, false, true, true, true, true, true, false, false, true, true, true, true, true, true, false, true, false, true, true, false, false, false, true, false, false, false, false, false, false, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, true, true, false, true, true, true, true, true, true, false, true, false, false, false, false, false, true, false, false, false, true, false, false, false, true, true, true, true, true, false, true, true, true, false, true, false, true, true, true, false, true, false, true, true, false, true, false, false, false, false, false, true, false, true, true, false, true, true, true, false, false, false, true, true, false, false, false, true, true, true, true, true, true, false, false, false, false, false, false, true, true, true, false, true, false, true, false, true, false, false, false, true, true, true, true, true, false, false, true, true, true, true, true, true, false, true, false, true, true, false, false, false, true, false, false, false, false, false, false, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, true, false, false, true, true, true, false, true, true, true, false, true, true, false, false, true, true, true, false, false, false, false, true, true, false, false, true, false, false, true, true, false, true, true, true, true, false, false, true, true, false, false, false, true, false, true, false, false, false, true, false, false, false, true, true, true, false, true, false, false, false, false, true, true, true, false, false, false, false, true, true, false, false, false, true, true, true, false, true, true, true, true, false, false, false, true, false, false, false, false, false, false, true, false, false, false, false, true, false, true, true, true, true, false, true, true, false, true, true, false, false, true, true, false, false, true]);
            let encoded = BinVector::from_bools(&[false, false, false, true, true, false, false, true, true, true, false, true, true, true, false, true, true, false, false, true, true, true, false, false, false, false, true, true, false, false, true, false, false, true, true, false, true, true, true, true, false, false, true, true, false, false, false, true, false, true, false, false, false, true, false, false, false, true, true, true, false, true, false, false, false, false, true, true, true, false, false, false, false, true, true, false, false, false, true, true, true, false, true, true, true, true, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, false, true, false, true, true, true, true, false, true, false, true, false, true, true, false, false, true, true, true, false, false, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, true, false, false, true, true, true, false, true, false, true, false, true, true, false, false, true, true, true, false, false, false, false, true, true, false, false, true, false, false, true, true, false, true, true, true, true, false, false, true, true, false, false, false, true, false, true, false, false, false, true, false, false, false, true, true, true, false, true, false, false, false, false, true, true, true, false, false, false, false, true, true, false, false, false, true, true, true, false, true, true, true, true, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, false, true, false, true, true, true, true, false, true, false, true, false, true, true, false, false, true, true, true, false, false, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, true, false, true, false, true, true, true, true, false, true, true, false, true, true, true, false, false, false, false, false, true, false, true, false, true, true, false, true, true, true, false, false, true, true, true, false, true, false, true, false, false, false, false, true, false, true, false, true, false, true, false, true, true, true, true, false, true, true, false, true, true, true, false, false, true, false, true, false, true, false, false, true, true, false, false, false, true, false, true, true, false, false, true, false, false, true, false, false, false, true, false, true, false, false, false, true, true, true, true, false, false, false, true, false, false, false, false, false, false, false, false, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[true, true, true, true, true, false, true, false, true, true, true, true, false, true, true, false, true, true, true, false, false, false, false, false, true, false, true, false, true, true, false, true, true, true, false, false, true, true, true, false, true, false, true, false, false, false, false, true, false, true, false, true, false, true, false, true, true, true, true, false, true, true, false, true, true, true, false, false, true, false, true, false, true, false, false, true, true, false, false, false, true, false, true, true, false, false, true, false, false, true, false, false, false, true, false, false, true, false, false, false, true, true, true, true, false, false, false, true, false, false, true, false, false, false, false, false, false, false, true, false, true, false, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, true, false, true, false, true, true, true, true, false, true, true, false, true, true, true, false, false, false, false, false, true, false, true, false, true, true, false, true, true, true, false, false, true, true, true, false, true, false, true, false, false, false, false, true, false, true, false, true, false, true, false, true, true, true, true, false, true, true, false, true, true, true, false, false, true, false, true, false, true, false, false, true, true, false, false, false, true, false, true, true, false, false, true, false, false, true, false, false, false, true, false, false, true, false, false, true, true, true, true, true, false, false, false, true, false, false, true, false, false, false, false, false, false, false, true, false, true, false, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, true, true, false, false, false, false, true, false, false, true, true, true, true, false, false, false, true, false, true, true, false, true, false, true, true, false, true, false, true, true, true, false, false, true, true, true, true, false, false, true, false, false, true, false, false, true, true, false, false, false, false, true, true, false, true, false, true, false, true, false, false, false, true, true, false, false, true, false, true, true, true, false, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, false, false, true, false, false, true, false, false, true, false, false, true, false, true, true, false, true]);
            let encoded = BinVector::from_bools(&[true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, true, true, false, false, false, false, true, false, false, true, true, true, true, false, false, false, true, false, true, true, false, true, false, true, true, false, true, false, true, true, true, false, false, true, true, true, true, false, false, true, false, false, true, false, false, true, true, false, false, false, false, true, true, false, true, false, true, false, true, false, false, false, true, true, false, false, true, false, true, true, true, false, true, true, true, false, false, true, true, false, false, true, false, true, false, false, false, true, false, false, false, true, false, false, true, true, false, false, true, false, false, true, false, false, true, true, false, false, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, true, true, false, false, false, false, true, false, false, true, true, true, true, false, false, false, true, false, true, true, false, true, false, true, true, false, true, false, true, true, true, false, false, true, false, true, true, false, false, true, false, false, true, false, false, true, true, false, false, false, false, true, true, false, true, false, true, false, true, false, false, false, true, true, false, false, true, false, true, true, true, false, true, true, true, false, false, true, true, false, false, true, false, true, false, false, false, true, false, false, false, true, false, false, true, true, false, false, true, false, false, true, false, false, true, true, false, false, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, false, false, true, true, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, true, true, true, false, true, false, true, false, false, true, true, false, false, false, false, true, true, false, true, false, true, false, false, true, true, true, true, false, true, true, false, false, false, true, false, false, false, true, true, true, true, true, true, true, false, false, false, false, true, true, true, true, true, true, true, false, true, false, true, true, true, false, true, true, false, false, false, false, true, true, true, false, true, false, false, true, false, true, true, false, false, true, true, false, true, true, false, true, true, false, true, true, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[true, true, true, false, false, false, true, true, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, true, true, true, false, true, false, true, false, false, true, true, false, false, false, false, true, true, false, true, false, true, false, false, true, true, true, true, false, true, true, false, false, false, true, false, false, false, true, true, true, true, true, true, true, false, false, false, false, true, true, true, true, true, true, true, false, true, false, true, true, true, false, true, true, false, false, false, false, true, true, true, false, false, true, false, false, true, false, true, true, false, false, true, true, false, true, true, true, false, true, true, false, true, true, false, false, false, true, false, false, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, false, false, true, true, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, true, true, true, false, true, false, true, false, false, true, true, false, false, false, false, true, true, false, true, false, true, false, false, true, true, true, true, false, true, true, false, false, false, true, false, false, false, true, true, true, true, true, true, true, false, false, false, false, false, true, true, true, true, true, true, false, true, false, true, true, true, false, true, true, false, false, false, false, true, true, true, false, false, true, false, false, true, false, true, true, false, false, true, true, false, true, true, true, false, true, true, false, true, true, false, false, false, true, false, false, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, true, true, false, false, false, false, false, true, true, false, false, true, false, false, false, true, true, false, true, true, true, false, false, true, false, false, false, false, true, false, false, false, false, false, false, true, true, false, false, true, false, false, true, false, true, false, false, false, false, true, false, true, false, false, false, true, false, true, false, false, false, true, true, false, false, true, true, false, false, false, true, true, true, true, false, false, false, true, true, true, true, true, true, false, false, false, true, false, false, false, true, true, false, false, true, false, false, false, false, false, true, true, true, true, true, true, false, true, true, false, true, false, false, false, true, false]);
            let encoded = BinVector::from_bools(&[true, false, false, false, true, true, false, false, false, false, false, true, true, false, false, true, false, false, false, true, true, false, true, true, true, false, false, true, false, false, false, false, true, false, false, false, false, false, false, true, true, false, false, true, false, false, true, false, true, false, false, false, false, true, false, true, false, false, false, true, false, true, false, false, false, true, true, false, false, true, true, false, false, false, true, true, true, true, false, false, false, true, true, true, true, true, true, false, false, false, true, false, false, false, true, true, true, false, false, true, false, false, false, false, false, true, true, true, true, true, false, true, false, true, true, false, true, false, true, false, false, true, true, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, true, true, false, false, false, false, false, true, true, false, false, true, false, false, false, true, true, false, true, true, true, false, false, true, false, false, false, false, true, false, false, false, false, false, false, true, true, false, false, true, false, false, true, false, true, false, false, false, false, true, false, true, false, false, false, true, false, true, false, false, false, true, true, false, false, true, true, false, false, false, true, true, true, true, false, false, false, true, true, true, true, true, true, false, false, false, true, false, false, false, true, true, true, false, false, true, false, false, false, false, false, true, true, true, true, true, false, true, true, true, true, false, true, false, true, false, false, true, true, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, true, true, false, false, false, false, false, false, true, false, true, true, true, false, false, false, true, false, false, true, false, false, true, true, true, true, true, true, false, false, true, true, false, false, true, true, false, true, false, true, false, true, true, true, false, true, true, true, false, true, true, false, true, true, false, true, false, false, true, true, true, true, true, false, false, true, false, false, false, false, false, true, true, false, false, false, true, true, false, true, true, true, true, true, false, false, true, true, true, false, false, true, false, true, true, true, false, true, false, false, false, true, true, true, true, true, true, true, false, true, false, false, true, false, false, true]);
            let encoded = BinVector::from_bools(&[true, true, false, true, true, true, false, false, false, false, false, false, true, false, true, true, true, false, false, false, true, false, false, true, false, false, true, true, true, true, true, true, false, false, true, true, false, false, true, true, false, true, false, true, false, true, true, true, false, true, true, true, false, true, true, false, true, true, false, true, false, false, true, true, true, true, true, false, false, true, false, false, false, false, false, true, true, false, false, false, true, true, false, true, true, true, true, true, false, false, true, true, true, false, false, false, true, false, true, true, true, false, true, false, false, false, true, true, true, true, true, true, true, true, false, true, false, false, true, true, false, false, true, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, true, true, false, false, false, false, false, false, true, false, true, true, true, false, false, false, true, false, false, true, false, false, true, true, true, true, true, true, false, false, true, true, false, false, true, true, false, true, false, false, false, true, true, true, false, true, true, true, false, true, true, false, true, true, false, true, false, false, true, true, true, true, true, false, false, true, false, false, false, false, false, true, true, false, false, false, true, true, false, true, true, true, true, true, false, false, true, true, true, false, false, false, true, false, true, true, true, false, true, false, false, false, true, true, true, true, true, true, true, true, false, true, false, false, true, true, false, false, true, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, false, true, true, true, false, false, true, true, false, false, true, false, true, false, true, true, false, true, false, false, false, false, false, true, true, false, true, false, true, true, false, false, false, true, false, false, true, true, false, true, true, false, false, false, false, true, true, false, false, true, false, false, false, false, true, true, true, true, false, false, true, false, true, false, false, false, true, true, true, true, true, true, false, false, true, false, true, true, true, true, false, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, false, false, false, false, false, false, false, true, false, false, false, true, true, false, false, true, true, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, false, false, false, true, true, true, false, false, true, true, false, false, true, false, true, false, true, true, false, true, false, false, false, false, false, true, true, false, true, false, true, true, false, false, false, true, false, false, true, true, false, true, true, false, false, false, false, true, true, false, false, true, false, false, false, false, true, true, true, true, false, false, true, false, true, false, false, false, true, true, true, true, true, true, false, false, true, false, true, true, true, true, false, false, false, true, false, false, false, true, true, true, true, true, false, false, true, true, false, false, false, false, false, false, false, false, true, false, true, false, false, true, true, false, false, true, false, true, true, false, false, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, false, true, true, true, false, false, true, true, false, false, true, false, true, false, true, true, false, true, false, false, false, false, false, true, true, false, true, false, true, true, false, false, false, true, false, false, true, true, false, true, true, false, false, false, false, true, true, false, false, true, false, false, false, false, true, true, true, true, false, false, true, false, true, false, false, false, true, true, true, true, true, true, false, false, true, false, true, true, true, true, false, false, false, true, false, false, false, true, true, true, true, true, false, false, true, true, false, false, false, false, false, false, false, false, true, false, true, false, false, true, true, false, false, true, false, true, true, true, false, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, false, true, false, true, true, true, false, false, true, false, true, true, true, true, false, false, false, false, false, true, false, true, false, true, false, false, true, false, false, true, true, true, false, false, false, false, false, true, false, false, false, false, false, false, true, false, false, false, true, false, false, false, false, false, true, true, true, true, true, true, false, false, false, false, false, true, false, true, true, true, true, false, false, true, false, true, false, true, false, true, true, false, true, false, false, true, false, true, false, true, true, true, true, false, false, true, false, true, true, true, true, false, true, false, false, true, true, true, false, false, false, false, false, true, true]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, false, true, false, true, true, true, false, false, true, false, true, true, true, true, false, false, false, false, false, true, false, true, false, true, false, false, true, false, false, true, true, true, false, false, false, false, false, true, false, false, false, false, false, false, true, false, false, false, true, false, false, false, false, false, true, true, true, true, true, true, false, false, false, false, false, true, false, true, true, true, true, false, false, true, false, true, false, true, false, true, true, false, true, false, false, true, false, true, false, false, true, true, true, true, false, false, true, false, true, true, true, true, false, true, false, true, false, true, true, true, false, false, false, true, false, false, true, true, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, true, false, true, false, true, true, true, false, false, true, false, true, true, true, true, false, false, false, false, false, true, false, true, false, true, false, false, true, false, false, true, true, true, false, false, false, false, false, true, false, false, false, false, false, false, true, false, false, false, true, false, false, false, false, false, true, true, true, true, true, true, false, false, false, false, false, true, false, true, true, true, true, false, true, true, false, true, false, true, false, true, true, false, true, false, false, true, false, true, false, false, true, true, true, true, false, false, true, false, true, true, true, true, false, true, false, true, false, true, true, true, false, false, false, true, false, false, true, true, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, false, true, true, false, true, false, true, true, true, true, false, false, true, true, true, true, false, false, true, true, false, false, true, false, false, true, false, true, false, true, false, false, true, true, true, true, false, true, true, false, false, false, false, false, true, true, true, false, true, false, false, false, true, false, true, true, true, true, false, true, false, false, false, true, true, false, true, true, true, false, false, false, false, false, false, false, true, true, false, true, false, true, true, false, true, false, true, true, false, true, false, true, true, false, false, false, false, false, false, false, true, false, true, true, true, true, true, false, true, true, true, false, false, true, true, false]);
            let encoded = BinVector::from_bools(&[true, true, true, false, false, true, true, false, true, false, true, true, true, true, false, false, true, true, true, true, false, false, true, true, false, false, true, false, false, true, false, true, false, true, false, false, true, true, true, true, false, true, true, false, false, false, false, false, true, true, true, false, true, false, false, false, true, false, true, true, true, true, false, true, false, false, false, true, true, false, true, true, true, false, false, false, false, false, false, false, true, true, false, true, false, true, true, false, true, false, true, true, false, true, false, false, true, true, false, false, false, false, false, false, false, true, false, true, true, true, true, true, true, false, true, true, true, false, false, false, true, true, false, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, false, true, true, false, true, false, true, true, true, true, false, false, true, true, true, true, false, false, true, true, false, false, true, false, false, true, false, true, false, true, false, false, true, true, true, true, false, true, true, false, false, false, false, false, true, true, true, false, true, false, false, false, true, false, true, false, true, true, false, true, false, false, false, true, true, false, true, true, true, false, false, false, false, false, false, false, true, true, false, true, false, true, true, false, true, false, true, true, false, true, false, false, true, true, false, false, false, false, false, false, false, true, false, true, true, true, true, true, true, false, true, true, true, false, false, false, true, true, false, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, true, false, true, true, true, false, false, false, true, true, true, false, true, true, false, false, true, true, false, true, true, false, true, true, true, true, true, false, false, true, false, false, false, false, true, true, false, true, false, false, false, false, false, false, false, true, false, true, false, false, true, true, false, false, true, false, true, false, false, true, true, false, true, true, true, true, false, false, false, true, true, true, false, false, false, false, true, false, false, false, false, false, true, true, false, false, false, true, false, true, false, false, true, true, false, false, false, true, true, true, false, true, false, true, true, true, false, false, false, true, true, true, false, false, false, true]);
            let encoded = BinVector::from_bools(&[true, false, false, false, true, false, true, true, true, false, false, false, true, true, true, false, true, true, false, false, true, true, false, true, true, false, true, true, true, true, true, false, false, true, false, false, false, false, true, true, false, true, false, false, false, false, false, false, false, true, false, true, false, false, true, true, false, false, true, false, true, false, false, true, true, false, true, true, true, true, false, false, false, true, true, true, false, false, false, false, true, false, false, false, false, false, true, true, false, false, false, true, false, true, false, false, false, true, true, false, false, false, true, true, true, false, true, false, true, true, false, true, false, false, false, true, true, true, false, false, false, false, false, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, true, false, true, false, true, false, false, false, true, true, true, false, true, true, false, false, true, true, false, true, true, false, true, true, true, true, true, false, false, true, false, false, false, false, true, true, false, true, false, false, false, false, false, false, false, true, false, true, false, false, true, true, false, false, true, false, true, false, false, true, true, false, true, true, true, true, false, false, false, true, true, true, false, false, false, false, true, false, false, false, false, false, true, true, false, false, false, true, false, true, false, false, false, true, true, false, false, false, true, true, true, false, true, false, true, true, false, true, false, false, false, true, true, true, false, false, false, false, false, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, true, true, false, true, false, false, false, false, true, false, true, false, false, false, false, true, false, false, false, false, false, true, true, true, false, false, false, true, false, true, false, true, false, true, false, false, true, false, false, true, false, false, true, true, false, true, true, false, true, true, false, false, false, true, false, false, true, true, true, false, false, false, false, false, true, true, true, true, true, true, false, false, true, true, false, false, true, false, false, true, true, false, false, false, true, false, false, false, true, true, false, false, true, true, false, false, true, false, false, true, false, true, true, true, false, true, false, true, false, false, false, false, false, true, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, true, true, false, true, false, false, false, false, true, false, true, false, false, false, false, true, false, false, false, false, false, true, true, true, false, false, false, true, false, true, false, true, false, true, false, false, true, false, false, true, false, false, true, true, false, true, true, false, true, true, false, false, false, true, false, false, true, true, true, false, false, false, false, false, true, true, true, true, true, true, false, false, true, true, false, false, true, false, false, true, true, false, false, false, true, false, false, false, true, true, false, false, false, true, true, false, false, true, false, false, true, false, true, true, true, false, false, true, false, true, false, false, false, false, false, false, true, false, true, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, true, true, false, true, false, false, false, false, true, false, true, false, false, false, false, true, false, false, false, false, false, true, true, true, false, false, false, true, false, true, false, true, false, true, false, false, false, false, false, true, false, false, true, true, false, true, true, false, true, true, false, false, false, true, false, false, true, true, true, false, false, false, false, false, true, true, true, true, true, true, false, false, true, true, false, false, true, false, false, true, true, false, false, false, true, false, false, false, true, true, false, false, false, true, true, false, false, true, false, false, true, false, true, true, true, false, false, true, false, true, false, false, false, false, false, false, true, false, true, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, false, true, true, true, false, false, true, false, false, true, false, false, false, false, true, true, false, true, true, false, false, false, false, true, true, true, true, false, false, true, false, false, false, true, true, false, true, false, false, false, true, true, true, true, true, true, true, true, true, false, false, false, true, true, false, false, true, true, false, false, true, false, false, false, true, false, true, false, false, true, false, false, true, true, false, false, false, true, false, false, true, false, true, true, true, false, false, true, true, false, true, true, true, false, true, true, false, false, false, true, false, true, false, false, false, true, true, true, false, true, false, false, false, true, true, true]);
            let encoded = BinVector::from_bools(&[false, true, false, false, false, true, true, true, false, false, true, false, false, true, false, false, false, false, true, true, false, true, true, false, false, false, false, true, true, true, true, false, false, true, false, false, false, true, true, false, true, false, false, false, true, true, true, true, true, true, true, true, true, false, false, false, true, true, false, false, true, true, false, false, true, false, false, false, true, false, true, false, false, true, false, false, true, true, false, false, false, true, false, false, true, false, true, true, true, false, false, true, true, false, false, true, true, true, false, true, true, false, false, false, true, false, true, false, false, false, true, true, true, true, false, true, false, false, false, false, true, true, false, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, false, true, true, true, false, false, true, false, false, true, false, false, false, false, true, true, false, true, true, false, false, false, false, true, true, true, true, false, false, true, false, false, false, true, true, false, true, false, false, false, true, true, true, true, true, true, true, true, true, false, false, false, true, true, false, false, true, true, false, false, true, false, false, false, true, false, true, false, true, true, false, false, true, true, false, false, false, true, false, false, true, false, true, true, true, false, false, true, true, false, false, true, true, true, false, true, true, false, false, false, true, false, true, false, false, false, true, true, true, true, false, true, false, false, false, false, true, true, false, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, true, false, true, true, true, false, false, false, false, false, false, true, true, false, true, true, false, true, false, true, true, false, true, false, false, false, false, false, false, false, true, true, true, true, true, false, false, true, false, false, true, true, true, true, false, true, true, false, true, true, false, false, true, false, false, false, false, true, true, true, true, true, true, true, false, true, false, true, false, false, true, true, true, false, true, false, true, false, true, true, true, true, true, false, true, true, false, false, false, true, true, false, true, false, false, false, false, false, true, true, true, true, true, false, false, true, false, false, false, true, false, true, false, true, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, true, false, true, true, true, false, false, false, false, false, false, true, true, false, true, true, false, true, false, true, true, false, true, false, false, false, false, false, false, false, true, true, true, true, true, false, false, true, false, false, true, true, true, true, false, true, true, false, true, true, false, false, true, false, false, false, false, true, true, true, true, true, true, true, false, true, false, true, false, false, true, true, true, false, true, false, true, false, true, true, true, true, true, false, true, true, false, false, false, false, true, true, false, true, false, false, false, false, false, true, true, true, true, true, false, true, false, true, false, false, false, true, false, false, true, false, true, false, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, true, false, true, true, true, false, false, false, false, false, false, true, true, false, true, true, false, true, false, true, true, false, true, false, false, false, false, false, false, false, true, true, true, true, true, false, false, true, false, false, true, true, true, true, false, true, true, false, true, true, false, false, true, false, false, false, false, true, true, true, true, true, true, true, false, true, false, true, false, false, true, true, true, false, true, false, true, false, true, true, true, true, true, false, true, true, false, false, false, false, true, true, false, true, false, false, false, false, false, true, true, true, true, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, false, true, false, true, false, true, true, true, false, true, false, true, false, false, true, false, true, true, false, false, false, true, false, true, true, true, false, true, false, true, true, true, false, true, true, true, false, false, false, true, true, false, false, false, true, true, true, true, true, false, false, true, true, false, true, false, false, false, false, true, false, false, false, false, false, true, false, true, false, true, false, false, false, false, false, true, true, true, false, false, true, true, false, false, false, false, false, true, true, false, false, true, true, false, true, true, true, true, true, false, false, true, false, false, false, false, true, false, true, false, false, false, true, true, false, false]);
            let encoded = BinVector::from_bools(&[true, true, false, true, false, true, false, true, false, true, true, true, false, true, false, true, false, false, true, false, true, true, false, false, false, true, false, true, true, true, false, true, false, true, true, true, false, true, true, true, false, false, false, true, true, false, false, false, true, true, true, true, true, false, false, true, true, false, true, false, false, false, false, true, false, false, false, false, false, true, false, true, false, true, false, false, false, false, false, true, true, true, false, false, true, true, false, false, false, false, false, true, true, false, false, false, true, true, false, true, true, true, true, true, false, false, true, false, false, false, false, false, true, false, true, false, false, false, false, true, true, false, false, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, false, true, false, true, false, true, true, true, false, true, false, true, false, true, true, false, true, true, false, false, false, true, false, true, true, true, false, true, false, true, true, true, false, true, true, true, false, false, false, true, true, false, false, false, true, true, true, true, true, false, false, true, true, false, true, false, false, false, false, true, false, false, false, false, false, true, false, true, false, true, false, false, false, false, false, true, true, true, false, false, true, true, false, false, false, false, false, true, true, false, false, false, true, true, false, true, true, true, true, true, false, false, true, false, false, false, false, false, true, false, true, false, false, false, false, true, true, false, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, false, false, true, false, false, false, false, false, false, true, false, true, true, false, false, true, true, true, false, false, true, false, true, true, true, true, true, true, false, true, true, false, false, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, false, true, true, false, false, false, true, true, true, true, false, false, false, true, false, true, true, true, false, false, false, true, false, true, true, false, false, false, false, false, true, true, true, false, true, true, true, false, false, true, false, false, false, false, false, false, true, false, false, true, false, true, false, true, false, false, true, false, false, false, false, true, false, true, false, true, false, true]);
            let encoded = BinVector::from_bools(&[false, false, true, true, false, false, true, false, false, false, false, false, false, true, false, true, true, false, false, true, true, true, false, false, true, false, true, true, true, true, true, true, false, true, true, false, false, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, false, true, true, false, false, false, true, true, true, true, false, false, false, true, false, true, true, true, false, false, false, true, false, true, true, false, false, false, false, false, true, true, true, false, true, true, true, false, false, true, false, false, true, false, false, false, false, true, false, false, true, false, true, false, true, false, false, true, false, false, false, false, false, true, false, true, false, false, true, false, true, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, false, false, true, false, false, false, false, false, false, true, false, true, true, false, false, true, true, true, false, false, true, false, true, true, true, true, true, true, false, true, true, false, false, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, false, true, true, false, false, false, true, true, true, true, false, false, false, true, true, true, true, true, false, false, false, true, false, true, true, false, false, false, false, false, true, true, true, false, true, true, true, false, false, true, false, false, true, false, false, false, false, true, false, false, true, false, true, false, true, false, false, true, false, false, false, false, false, true, false, true, false, false, true, false, true, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, true, true, true, true, true, false, false, true, true, true, true, false, true, false, true, true, true, true, true, true, true, true, true, false, false, true, true, true, false, false, false, false, true, false, true, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, false, true, false, false, true, true, false, true, true, true, false, true, true, true, false, true, true, true, true, true, true, false, false, true, false, true, true, true, false, false, false, true, false, true, true, false, false, true, false, false, false, true, true, true, true, true, false, true, false, false, true, true, true, false, false, true, false, true, false, true, false, true, false, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, true, true, true, true, true, false, false, true, true, true, true, false, true, false, true, true, true, true, true, true, true, true, true, false, false, true, true, true, false, false, false, false, true, false, true, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, false, true, false, false, true, true, false, true, true, true, false, true, true, true, false, true, true, true, true, true, true, false, false, true, false, true, true, true, false, false, false, true, false, true, true, false, false, true, false, false, false, false, true, true, true, true, true, false, true, false, false, true, true, true, false, false, false, true, false, true, false, true, false, true, true, false, true, false, false, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, true, true, true, true, true, false, false, true, true, true, true, false, true, false, true, true, true, true, true, true, true, true, true, false, false, true, true, true, false, false, false, false, true, false, true, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, false, true, false, false, true, true, false, true, true, true, false, true, true, true, false, true, true, true, true, true, true, false, false, true, false, true, true, true, false, false, false, true, false, true, true, false, false, true, false, false, false, false, true, true, true, true, true, false, true, false, false, true, true, true, true, false, false, true, false, true, false, true, false, true, true, false, true, false, false, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, false, true, false, true, false, true, true, true, false, false, false, false, true, true, false, false, true, false, true, true, false, false, false, false, true, true, true, false, true, true, false, false, false, true, false, true, true, true, true, true, false, true, false, false, false, false, false, true, true, false, false, false, true, true, true, false, true, true, true, true, true, false, false, true, true, true, true, true, true, true, false, false, true, true, true, false, false, true, false, true, false, true, true, true, false, true, true, false, false, false, true, true, true, true, false, false, false, false, false, true]);
            let encoded = BinVector::from_bools(&[true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, false, true, false, true, false, true, true, true, false, false, false, false, true, true, false, false, true, false, true, true, false, false, false, false, true, true, true, false, true, true, false, false, false, true, false, true, true, true, true, true, false, true, false, false, false, false, false, true, true, false, false, false, true, true, true, false, true, true, true, true, true, false, false, true, true, true, true, true, true, true, false, false, true, true, false, true, false, false, true, false, true, false, true, true, true, false, true, true, false, false, true, false, true, true, true, true, false, false, true, false, false, false, true, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, false, true, false, true, true, true, false, false, false, false, true, true, false, false, true, false, true, true, false, false, false, false, true, true, true, false, true, true, false, false, false, true, false, true, true, true, true, true, false, true, false, false, false, false, false, true, true, false, false, false, true, true, true, false, true, true, true, true, true, false, false, true, true, true, true, true, true, true, false, false, true, true, false, true, false, false, true, false, true, false, true, true, true, false, true, true, false, false, true, false, true, true, true, true, false, false, true, false, false, false, true, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, true, true, false, false, true, false, false, false, true, false, false, true, true, true, true, true, false, true, true, false, false, true, false, true, false, true, true, true, true, false, false, true, false, true, true, false, false, true, false, true, false, true, true, true, true, true, true, false, false, false, false, false, false, true, true, true, false, true, true, true, true, false, false, true, true, false, false, true, true, true, false, true, true, true, true, true, false, false, true, false, true, true, false, false, true, true, false, false, true, true, true, true, true, false, true, true, false, false, false, true, false, true, false, true, true, false, true, false, true, false, false, false, true, true, false, true]);
            let encoded = BinVector::from_bools(&[true, false, false, false, true, true, false, false, true, false, false, false, true, false, false, true, true, true, true, true, false, true, true, false, false, true, false, true, false, true, true, true, true, false, false, true, false, true, true, false, false, true, false, true, false, true, true, true, true, true, true, false, false, false, false, false, false, true, true, true, false, true, true, true, true, false, false, true, true, false, false, true, true, true, false, true, true, true, true, true, false, false, true, false, true, true, false, false, true, true, false, false, true, true, true, true, true, true, false, true, true, false, false, false, true, false, true, false, true, true, false, false, true, false, true, false, false, false, false, true, true, false, false, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, true, true, false, false, true, false, false, false, true, false, false, true, true, true, true, true, false, true, true, false, false, true, false, true, false, true, true, true, true, false, false, true, false, true, true, false, false, true, false, true, false, true, true, true, true, true, true, false, false, false, false, false, false, true, true, true, true, true, true, true, true, false, false, true, true, false, false, true, true, true, false, true, true, true, true, true, false, false, true, false, true, true, false, false, true, true, false, false, true, true, true, true, true, true, false, true, true, false, false, false, true, false, true, false, true, true, false, false, true, false, true, false, false, false, false, true, true, false, false, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, true, false, true, false, true, true, false, true, false, true, false, false, true, true, false, true, true, true, true, false, true, true, true, false, false, true, false, false, true, true, true, true, true, false, true, true, false, true, true, true, false, true, true, true, true, false, true, true, false, false, true, false, true, false, false, false, true, true, true, false, false, true, true, true, false, false, false, false, false, true, false, false, false, false, true, true, true, false, true, true, true, true, false, true, true, false, true, false, false, false, true, false, false, false, false, true, false, true, true, false, false, false, false, false, true, true, false, false, false, false, false, false, true, true, false, true]);
            let encoded = BinVector::from_bools(&[false, false, true, false, true, false, true, false, true, true, false, true, false, true, false, false, true, true, false, true, true, true, true, false, true, true, true, false, false, true, false, false, true, true, true, true, true, false, true, true, false, true, true, true, false, true, true, true, true, false, true, true, false, false, true, false, true, false, false, false, true, true, true, false, false, true, true, true, false, false, false, false, false, true, false, false, false, false, true, true, true, false, true, true, true, true, false, true, true, false, true, false, false, false, true, true, false, false, false, false, true, false, true, true, false, false, false, false, false, true, true, true, false, false, false, false, false, false, true, true, true, false, false, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, true, false, true, false, true, true, false, true, false, true, false, false, true, true, false, true, true, true, true, false, true, true, true, false, false, true, false, false, true, true, true, true, true, false, true, true, false, true, true, true, false, true, true, true, true, false, true, true, false, false, true, false, true, true, false, false, true, true, true, false, false, true, true, true, false, false, false, false, false, true, false, false, false, false, true, true, true, false, true, true, true, true, false, true, true, false, true, false, false, false, true, true, false, false, false, false, true, false, true, true, false, false, false, false, false, true, true, true, false, false, false, false, false, false, true, true, true, false, false, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, true, true, true, true, true, false, true, true, false, false, true, false, true, false, true, true, true, false, false, false, true, false, true, true, false, false, true, true, true, false, true, false, false, true, true, false, true, false, true, true, false, false, false, false, false, false, true, true, true, false, true, false, true, false, true, true, true, false, false, true, true, false, false, true, false, false, false, true, false, false, true, false, false, false, false, true, true, false, false, true, true, false, false, false, true, false, false, true, true, false, false, true, true, true, true, true, false, false, false, true, true, true, false, true, false, false, true, false, true, false, false, true, false, false, false, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, true, true, true, true, true, false, true, true, false, false, true, false, true, false, true, true, true, false, false, false, true, false, true, true, false, false, true, true, true, false, true, false, false, true, true, false, true, false, true, true, false, false, false, false, false, false, true, true, true, false, true, false, true, false, true, true, true, false, false, true, true, false, false, true, false, false, false, true, false, false, true, false, false, false, false, true, true, false, false, true, true, false, false, false, true, false, false, true, true, false, false, false, true, true, true, true, true, false, false, false, true, true, true, false, true, false, false, false, true, false, true, false, false, true, true, false, false, false, false, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, true, true, true, true, true, false, true, true, false, false, true, false, true, false, true, true, true, false, false, false, true, false, true, true, false, false, true, true, true, false, true, false, false, true, true, false, true, false, true, true, false, false, false, false, false, false, true, true, true, false, true, false, true, false, true, true, true, false, false, true, true, false, false, true, false, false, false, true, false, false, true, false, false, false, false, true, true, false, false, true, true, false, false, false, true, false, false, true, true, false, false, false, true, true, true, false, true, false, false, false, true, true, true, false, true, false, false, false, true, false, true, false, false, true, true, false, false, false, false, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, true, false, false, false, true, false, true, true, false, false, true, false, true, true, false, false, true, true, false, false, false, true, false, true, false, false, true, true, true, false, true, false, false, false, true, false, true, true, true, true, false, false, true, true, false, false, true, false, true, true, true, true, true, true, false, true, false, false, true, true, false, true, true, true, false, true, false, false, false, false, true, true, true, false, false, true, false, true, false, false, true, false, false, true, false, true, true, true, true, false, true, false, true, true, true, true, false, true, true, false, false, false, false, true, true, false, true, true, false, false, false, false, true, true, false]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, true, false, false, false, true, false, true, true, false, false, true, false, true, true, false, false, true, true, false, false, false, true, false, true, false, false, true, true, true, false, true, false, false, false, true, false, true, true, true, true, false, false, true, true, false, false, true, false, true, true, true, true, true, true, false, true, false, false, true, true, false, true, true, true, false, true, false, false, false, false, true, true, true, false, false, true, false, true, false, false, true, false, false, true, false, true, true, true, true, false, false, true, false, true, true, true, true, false, true, true, false, false, false, false, true, false, true, false, true, true, false, false, false, false, false, true, true, true, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, true, true, false, false, false, true, false, true, true, false, false, true, false, false, true, false, false, true, true, false, false, false, true, false, true, false, false, true, true, true, false, true, false, false, false, true, false, true, true, true, true, false, false, true, true, false, false, true, false, true, true, true, true, true, true, false, true, false, false, true, true, false, true, true, true, false, true, false, false, false, false, true, true, true, false, false, true, false, true, false, false, true, false, false, true, false, true, true, true, true, false, false, true, false, true, true, true, true, false, true, true, false, false, false, false, true, false, true, false, true, true, false, false, false, false, false, true, true, true, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, false, true, false, false, false, true, false, true, true, false, true, false, false, false, false, false, false, false, true, false, false, false, false, true, false, true, false, false, false, false, false, true, true, true, false, false, false, true, true, false, true, false, true, true, true, false, false, true, false, true, true, false, true, true, true, false, false, false, false, false, false, false, true, true, true, false, true, false, false, false, true, true, true, true, false, true, false, true, true, true, true, true, false, true, false, true, true, true, false, true, false, false, true, true, false, true, true, true, true, true, false, true, false, true, true, false, false, true, false, false, true, false, true, true, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, true, false, true, false, false, false, true, false, true, true, false, true, false, false, false, false, false, false, false, true, false, false, false, false, true, false, true, false, false, false, false, false, true, true, true, false, false, false, true, true, false, true, false, true, true, true, false, false, true, false, true, true, false, true, true, true, false, false, false, false, false, false, false, true, true, true, false, true, false, false, false, true, true, true, true, false, true, false, true, true, true, true, true, false, true, false, true, true, true, false, true, false, false, false, true, true, false, true, true, true, true, true, false, true, false, true, true, true, false, false, true, false, false, true, false, false, true, true, false, false, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, false, true, false, false, false, true, false, true, true, false, true, false, false, false, false, false, false, false, true, false, false, false, false, true, false, true, false, false, false, false, false, true, true, true, false, false, false, true, true, false, true, false, true, true, true, false, false, true, false, true, true, false, true, true, true, false, false, false, false, false, false, false, true, true, true, false, true, false, false, false, true, true, true, true, false, true, false, true, true, true, false, true, false, true, false, true, true, true, false, true, false, false, false, true, true, false, true, true, true, true, true, false, true, false, true, true, true, false, false, true, false, false, true, false, false, true, true, false, false, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, false, true, true, false, true, true, false, true, true, true, true, true, true, false, false, false, true, true, false, false, true, true, true, false, true, false, false, true, true, true, false, true, false, false, false, false, false, true, false, true, false, true, false, true, true, true, true, true, true, false, true, true, true, true, true, false, false, false, true, false, false, true, true, true, true, false, false, true, false, true, false, false, true, false, true, false, false, false, false, true, false, false, false, false, false, false, true, false, true, true, false, false, false, true, true, true, false, true, false, true, false, false, false, false, true, true, true, false, true, false, true, false, true, false, true, false]);
            let encoded = BinVector::from_bools(&[true, false, false, true, false, true, true, false, true, true, false, true, true, true, true, true, true, false, false, false, true, true, false, false, true, true, true, false, true, false, false, true, true, true, false, true, false, false, false, false, false, true, false, true, false, true, false, true, true, true, true, true, true, false, true, true, true, true, true, false, false, false, true, false, false, true, true, true, true, false, false, true, false, true, false, false, true, false, true, false, false, false, false, true, false, false, false, false, false, false, true, false, true, true, true, false, false, false, true, true, true, false, true, false, true, false, false, false, false, true, false, true, true, false, true, false, true, false, true, true, false, true, true, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, false, true, true, false, true, true, false, true, true, true, true, true, true, false, false, false, true, true, false, false, true, true, true, false, true, false, false, false, true, true, false, true, false, false, false, false, false, true, false, true, false, true, false, true, true, true, true, true, true, false, true, true, true, true, true, false, false, false, true, false, false, true, true, true, true, false, false, true, false, true, false, false, true, false, true, false, false, false, false, true, false, false, false, false, false, false, true, false, true, true, true, false, false, false, true, true, true, false, true, false, true, false, false, false, false, true, false, true, true, false, true, false, true, false, true, true, false, true, true, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, false, false, false, false, true, false, false, false, true, true, false, true, false, true, true, true, false, false, false, true, false, false, false, true, true, true, true, true, false, false, true, true, true, true, true, true, true, true, false, false, false, false, true, true, false, false, true, true, false, false, true, true, true, true, true, true, false, true, false, true, false, false, false, false, false, true, true, true, true, true, true, false, false, false, false, false, true, true, true, false, true, false, false, false, true, false, false, false, true, false, false, true, false, false, true, false, false, false, true, false, false, true, false, false, true, true, false, true, true, false, false, true, false, false, false, true]);
            let encoded = BinVector::from_bools(&[true, false, false, false, false, false, false, false, true, false, false, false, true, true, false, true, false, true, true, true, false, false, false, true, false, false, false, true, true, true, true, true, false, false, true, true, true, true, true, true, true, true, false, false, false, false, true, true, false, false, true, true, false, false, true, true, true, true, true, true, false, true, false, true, false, false, false, false, false, true, true, true, true, true, true, false, false, false, false, false, true, true, true, false, true, false, false, false, true, false, false, false, true, false, true, false, true, false, false, true, false, false, false, true, false, false, true, false, false, true, true, true, false, true, true, false, false, true, true, false, false, false, true, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, false, false, false, false, true, false, false, false, true, true, false, true, false, true, true, true, false, false, false, true, false, false, false, true, true, true, true, true, false, false, true, true, true, true, true, true, true, true, false, false, false, false, true, true, false, false, true, true, false, false, true, true, true, true, true, true, false, true, true, true, false, false, false, false, false, true, true, true, true, true, true, false, false, false, false, false, true, true, true, false, true, false, false, false, true, false, false, false, true, false, true, false, true, false, false, true, false, false, false, true, false, false, true, false, false, true, true, true, false, true, true, false, false, true, true, false, false, false, true, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, true, false, false, false, false, false, true, true, false, false, false, true, false, false, false, true, true, true, false, true, true, true, false, false, true, false, true, true, false, false, false, false, true, false, true, true, false, false, false, false, true, false, true, false, false, true, false, true, true, false, true, true, false, true, true, false, true, true, false, false, false, false, true, false, true, true, false, false, false, true, true, true, true, false, true, true, true, false, false, true, true, true, false, false, true, true, false, false, true, false, true, false, false, true, true, true, true, false, true, false, true, true, true, false, false, true, true, false, false, false, false, true, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, true, false, false, false, false, false, true, true, false, false, false, true, false, false, false, true, true, true, false, true, true, true, false, false, true, false, true, true, false, false, false, false, true, false, true, true, false, false, false, false, true, false, true, false, false, true, false, true, true, false, true, true, false, true, true, false, true, true, false, false, false, false, true, false, true, true, false, false, false, true, true, true, true, false, true, true, true, false, false, true, true, true, false, false, true, true, false, false, true, false, false, true, false, false, true, true, true, true, false, true, false, true, true, true, false, false, false, true, true, false, false, false, false, true, true, true, false, true, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, true, true, false, false, false, false, false, true, true, false, false, false, true, false, false, false, true, true, true, false, true, true, true, false, false, true, false, true, true, false, false, false, false, true, false, true, true, false, false, false, false, true, false, true, false, false, true, false, true, true, false, true, true, false, true, true, false, true, true, false, false, false, false, true, false, true, true, false, false, false, true, true, true, true, false, true, true, true, false, false, true, true, true, false, false, true, true, false, false, true, false, false, true, false, false, true, true, true, true, false, true, false, true, true, true, false, false, false, true, true, false, false, false, false, true, true, true, false, true, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, false, true, false, true, false, false, true, true, true, true, true, true, false, false, false, false, true, true, true, true, false, false, true, false, true, true, true, true, false, true, false, false, false, true, false, true, false, true, true, true, false, true, false, true, false, false, true, false, true, true, false, true, true, true, false, false, false, false, false, true, true, false, false, false, true, false, true, false, true, false, true, false, true, false, false, true, true, false, false, false, true, true, true, true, false, true, true, true, true, true, true, true, false, true, false, true, true, true, false, true, false, true, true, false, true, false, true, false, true, false, true, false, true, false, false, true]);
            let encoded = BinVector::from_bools(&[false, false, false, true, false, true, false, true, false, false, true, true, true, true, true, true, false, false, false, false, true, true, true, true, false, false, true, false, true, true, true, true, false, true, false, false, false, true, false, true, false, true, true, true, false, true, false, true, false, false, true, false, true, true, false, true, true, true, false, false, false, false, false, true, true, false, false, false, true, false, true, false, true, false, true, false, true, false, false, true, true, false, false, false, true, true, true, true, false, true, true, true, true, true, true, true, true, false, true, false, true, true, true, false, true, false, true, true, false, true, true, false, true, false, true, false, true, false, true, true, false, false, false, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, false, true, false, true, false, false, true, true, true, true, true, true, false, false, false, false, true, true, true, true, false, false, true, false, true, true, true, true, false, true, false, false, false, true, false, true, false, true, true, true, false, true, false, true, false, false, true, false, true, true, false, true, true, true, false, false, false, false, false, false, true, false, false, false, true, false, true, false, true, false, true, false, true, false, false, true, true, false, false, false, true, true, true, true, false, true, true, true, true, true, true, true, true, false, true, false, true, true, true, false, true, false, true, true, false, true, true, false, true, false, true, false, true, false, true, true, false, false, false, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, true, false, false, false, false, false, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, true, false, false, true, true, true, true, false, false, true, true, false, true, true, true, true, false, false, true, false, false, false, true, false, true, false, true, false, false, true, true, false, false, true, false, false, false, true, true, false, true, false, false, false, false, true, false, false, true, true, false, true, false, false, true, false, true, false, true, true, true, false, false, true, false, false, false, true, true, true, false, true, false, false, false, true, false, false, false, false, true, true, false, true, true, false, false, true, true, false, true, true, true]);
            let encoded = BinVector::from_bools(&[false, true, true, false, true, false, false, false, false, false, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, true, false, false, true, true, true, true, false, false, true, true, false, true, true, true, true, false, false, true, false, false, false, true, false, true, false, true, false, false, true, true, false, false, true, false, false, false, true, true, false, true, false, false, false, false, true, false, false, true, true, false, true, false, false, true, false, true, false, true, true, true, false, false, true, false, false, false, true, true, true, true, false, true, false, false, false, true, false, false, false, false, true, true, false, false, true, true, false, false, true, true, true, false, true, true, false, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, true, false, false, false, false, false, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, true, false, false, true, false, true, true, false, false, true, true, false, true, true, true, true, false, false, true, false, false, false, true, false, true, false, true, false, false, true, true, false, false, true, false, false, false, true, true, false, true, false, false, false, false, true, false, false, true, true, false, true, false, false, true, false, true, false, true, true, true, false, false, true, false, false, false, true, true, true, true, false, true, false, false, false, true, false, false, false, false, true, true, false, false, true, true, false, false, true, true, true, false, true, true, false, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, false, false, true, true, false, false, true, true, false, false, true, true, false, true, true, false, true, true, true, false, false, false, false, true, false, false, true, true, false, false, true, true, true, false, true, false, true, false, true, false, true, false, false, false, false, true, true, true, false, false, false, true, false, false, false, false, false, false, true, true, false, false, false, false, true, true, true, false, false, false, true, false, true, false, true, true, true, false, true, false, false, true, false, false, false, false, false, true, true, true, false, false, true, false, true, false, false, true, false, false, false, false, false, false, true, true, true, false, true, false, false, false, true, false, false, true]);
            let encoded = BinVector::from_bools(&[false, true, true, false, false, false, true, true, false, false, true, true, false, false, true, true, false, true, true, false, true, true, true, false, false, false, false, true, false, false, true, true, false, false, true, true, true, false, true, false, true, false, true, false, true, false, false, false, false, true, true, true, false, false, false, true, false, false, false, false, false, false, true, true, false, false, false, false, true, true, true, false, false, false, true, false, true, false, true, true, true, false, true, false, false, true, false, false, false, false, false, true, true, true, true, false, false, true, false, true, false, false, true, false, false, false, false, false, false, true, false, true, true, false, true, false, false, false, true, true, false, false, false, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, false, false, true, true, false, false, true, true, false, false, true, true, false, true, true, false, true, true, true, false, false, false, false, true, false, false, true, true, false, false, true, true, true, false, true, false, true, false, true, false, false, false, false, false, false, true, true, true, false, false, false, true, false, false, false, false, false, false, true, true, false, false, false, false, true, true, true, false, false, false, true, false, true, false, true, true, true, false, true, false, false, true, false, false, false, false, false, true, true, true, true, false, false, true, false, true, false, false, true, false, false, false, false, false, false, true, false, true, true, false, true, false, false, false, true, true, false, false, false, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, false, true, false, true, false, true, true, true, true, false, true, false, true, true, true, false, false, true, true, true, false, false, false, false, true, true, true, false, true, false, false, false, true, true, true, false, false, true, false, true, true, true, false, true, true, true, true, false, true, false, false, true, false, true, false, true, true, true, true, true, false, false, true, false, true, false, false, false, false, false, false, true, true, false, true, true, false, true, true, false, false, true, false, false, false, true, true, false, true, false, false, true, false, true, true, false, true, false, false, false, false, true, true, true, false, true, true, true, true, true, true, true, false, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, true, false, false, true, false, true, false, true, true, true, true, false, true, false, true, true, true, false, false, true, true, true, false, false, false, false, true, true, true, false, true, false, false, false, true, true, true, false, false, true, false, true, true, true, false, true, true, true, true, false, true, false, false, true, false, true, false, true, true, true, true, true, false, false, true, false, true, false, false, false, false, false, false, true, true, false, true, true, false, true, true, false, false, true, false, false, false, true, true, false, true, false, false, false, true, false, true, true, false, true, false, false, false, false, true, true, true, false, true, true, true, true, true, true, true, true, false, false, true, false, true, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, false, true, false, true, false, true, true, true, true, false, true, false, true, true, true, false, false, true, true, true, false, false, false, false, true, true, true, false, true, false, false, false, true, true, true, false, false, true, false, true, true, true, false, true, true, true, true, false, true, false, false, true, false, true, false, true, true, true, true, true, false, false, false, false, true, false, false, false, false, false, false, true, true, false, true, true, false, true, true, false, false, true, false, false, false, true, true, false, true, false, false, false, true, false, true, true, false, true, false, false, false, false, true, true, true, false, true, true, true, true, true, true, true, true, false, false, true, false, true, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, true, false, true, false, true, false, false, false, true, true, true, true, false, false, true, false, false, false, false, false, true, true, false, false, true, true, true, false, false, false, true, true, true, true, true, true, true, false, false, false, true, true, false, false, false, false, false, true, false, true, true, false, true, false, false, false, true, true, true, false, false, false, true, true, true, false, false, true, false, false, false, true, true, false, true, false, false, false, true, false, true, false, false, true, false, true, false, true, true, false, false, true, false, false, false, true, false, true, false, false, false, true, false, false, false, true, false, true, false, true, false, false, true, false, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, true, false, true, false, true, false, false, false, true, true, true, true, false, false, true, false, false, false, false, false, true, true, false, false, true, true, true, false, false, false, true, true, true, true, true, true, true, false, false, false, true, true, false, false, false, false, false, true, false, true, true, false, true, false, false, false, true, true, true, false, false, false, true, true, true, false, false, true, false, false, false, true, true, false, true, false, false, false, true, false, true, false, false, true, false, true, false, true, true, false, true, false, true, false, false, false, true, false, true, false, false, false, true, false, false, false, true, true, false, true, false, true, false, false, false, true, false, false, false, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, true, false, true, false, true, false, true, false, true, true, true, true, false, false, true, false, false, false, false, false, true, true, false, false, true, true, true, false, false, false, true, true, true, true, true, true, true, false, false, false, true, true, false, false, false, false, false, true, false, true, true, false, true, false, false, false, true, true, true, false, false, false, true, true, true, false, false, true, false, false, false, true, true, false, true, false, false, false, true, false, true, false, false, true, false, true, false, true, true, false, true, false, true, false, false, false, true, false, true, false, false, false, true, false, false, false, true, true, false, true, false, true, false, false, false, true, false, false, false, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, true, true, false, true, false, false, true, false, false, true, true, true, false, true, true, false, true, false, true, true, true, false, false, false, true, false, true, true, false, true, false, true, false, false, true, false, true, true, true, false, false, true, true, false, false, true, false, true, false, true, true, true, true, true, true, false, true, true, true, true, false, true, false, true, false, true, false, true, true, false, true, true, true, true, true, true, true, false, false, false, true, true, false, true, true, true, true, false, false, false, true, true, false, true, false, false, true, true, false, false, true, false, true, true, true, false, true, false, true, false, false, false, true, false, false, false]);
            let encoded = BinVector::from_bools(&[false, false, true, false, true, true, false, true, false, false, true, false, false, true, true, true, false, true, true, false, true, false, true, true, true, false, false, false, true, false, true, true, false, true, false, true, false, false, true, false, true, true, true, false, false, true, true, false, false, true, false, true, false, true, true, true, true, true, true, false, true, true, true, true, false, true, false, true, false, true, false, true, true, false, true, true, true, true, true, true, true, false, false, false, true, true, false, true, true, true, true, false, false, false, true, true, true, false, true, false, false, true, true, false, false, true, false, true, true, true, false, false, true, false, true, false, false, false, true, true, false, false, false, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, true, true, false, true, false, false, true, false, false, true, true, true, false, true, false, false, true, false, true, true, true, false, false, false, true, false, true, true, false, true, false, true, false, false, true, false, true, true, true, false, false, true, true, false, false, true, false, true, false, true, true, true, true, true, true, false, true, true, true, true, false, true, false, true, false, true, false, true, true, false, true, true, true, true, true, true, true, false, false, false, true, true, false, true, true, true, true, false, false, false, true, true, true, false, true, false, false, true, true, false, false, true, false, true, true, true, false, false, true, false, true, false, false, false, true, true, false, false, false, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, true, true, true, true, false, false, true, false, false, false, false, false, true, true, true, false, true, true, false, false, false, true, false, false, false, false, false, false, false, true, true, true, true, false, true, false, false, false, true, false, false, false, true, true, true, true, true, true, true, true, false, true, true, true, false, true, true, true, true, false, true, true, false, false, false, false, false, false, false, true, true, false, true, false, true, true, true, true, false, true, false, true, true, true, true, false, false, true, true, false, true, true, true, false, true, false, true, false, false, true, true, true, false, true, false, true, false, false, true, false, true, true, false, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, true, false, true, true, true, true, false, false, true, false, false, false, false, false, true, true, true, false, true, true, false, false, false, true, false, false, false, false, false, false, false, true, true, true, true, false, true, false, false, false, true, false, false, false, true, true, true, true, true, true, true, true, false, true, true, true, false, true, true, true, true, false, true, true, false, false, false, false, false, false, false, true, true, false, true, false, true, true, true, true, false, true, false, true, true, true, true, false, false, true, true, false, true, true, true, true, false, true, false, true, false, false, true, true, true, false, true, false, true, true, false, false, true, false, true, true, true, false, true, false, false, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, true, true, true, true, false, false, true, false, false, false, false, false, true, true, true, false, true, true, false, false, false, true, false, false, false, false, false, false, false, true, true, true, true, false, true, false, false, false, true, false, false, false, true, true, true, true, true, true, true, true, false, true, true, true, false, true, true, true, true, false, true, true, false, false, false, false, false, false, false, true, true, false, true, false, true, true, true, true, false, true, false, true, true, true, true, false, false, true, true, false, true, true, true, true, false, true, false, true, true, false, true, true, true, false, true, false, true, true, false, false, true, false, true, true, true, false, true, false, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, true, true, false, false, false, true, true, true, true, false, false, true, false, true, true, true, true, false, false, false, false, false, false, true, false, false, false, false, true, true, true, true, true, false, false, true, true, false, true, false, false, false, false, true, false, false, false, false, true, true, false, true, true, false, false, false, false, false, false, false, false, false, true, false, true, false, false, true, true, false, false, true, false, true, false, false, false, false, false, false, true, false, false, false, true, true, true, true, false, false, false, false, false, true, false, true, true, true, true, true, false, false, true, true, false, false, true, false, true, true, true, false, true, true, true, true]);
            let encoded = BinVector::from_bools(&[false, true, false, true, true, true, false, false, false, true, true, true, true, false, false, true, false, true, true, true, true, false, false, false, false, false, false, true, false, false, false, false, true, true, true, true, true, false, false, true, true, false, true, false, false, false, false, true, false, false, false, false, true, true, false, true, true, false, false, false, false, false, false, false, false, false, true, false, true, false, false, true, true, false, false, true, false, true, false, false, false, false, false, false, true, false, false, false, true, true, true, true, false, false, false, false, false, false, true, false, true, true, true, true, true, false, false, true, true, false, true, false, true, false, true, true, true, false, true, true, true, true, false, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, true, true, false, false, false, true, false, true, true, false, false, true, false, true, true, true, true, false, false, false, false, false, false, true, false, false, false, false, true, true, true, true, true, false, false, true, true, false, true, false, false, false, false, true, false, false, false, false, true, true, false, true, true, false, false, false, false, false, false, false, false, false, true, false, true, false, false, true, true, false, false, true, false, true, false, false, false, false, false, false, true, false, false, false, true, true, true, true, false, false, false, false, false, false, true, false, true, true, true, true, true, false, false, true, true, false, true, false, true, false, true, true, true, false, true, true, true, true, false, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, true, false, false, true, true, false, true, true, false, true, true, true, true, true, true, false, true, true, true, true, true, false, false, true, true, false, true, false, false, false, true, true, true, false, false, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, true, true, false, true, false, false, false, false, true, false, false, true, false, false, true, false, true, false, true, false, true, true, false, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, true, false, false, false, false, true, false, false, false, false, true, true, true, false, true, true, false, true, true, false, true, false, true, false, false, true, true, false]);
            let encoded = BinVector::from_bools(&[false, false, false, true, true, false, false, true, true, false, true, true, false, true, true, true, true, true, true, false, true, true, true, true, true, false, false, true, true, false, true, false, false, false, true, true, true, false, false, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, true, true, false, true, false, false, false, false, true, false, false, true, false, false, true, false, true, false, true, false, true, true, false, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, true, false, false, false, false, false, true, false, false, false, false, true, true, true, false, true, true, false, false, true, true, false, true, false, true, false, false, false, true, true, true, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, true, false, false, true, true, false, true, true, false, true, true, true, true, true, true, false, true, true, true, true, true, false, true, true, true, false, true, false, false, false, true, true, true, false, false, false, false, true, false, true, false, true, false, true, true, false, false, true, false, true, true, true, false, true, false, false, false, false, true, false, false, true, false, false, true, false, true, false, true, false, true, true, false, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, true, false, false, false, false, false, true, false, false, false, false, true, true, true, false, true, true, false, false, true, true, false, true, false, true, false, false, false, true, true, true, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, true, true, false, false, false, false, false, false, false, false, false, false, true, true, true, true, false, true, false, true, false, false, true, true, true, false, false, false, true, true, true, false, true, true, false, false, false, false, false, false, true, false, false, false, false, true, true, false, true, false, true, true, true, false, true, true, false, true, false, false, false, false, false, true, false, true, true, true, false, false, true, true, true, false, true, false, false, true, true, true, false, false, true, false, true, false, true, true, false, true, true, false, true, true, true, false, true, true, false, false, true, true, true, false, false, true, false, false, true, true, true, true, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, true, true, true, false, false, false, false, false, false, false, false, false, false, true, true, true, true, false, true, false, true, false, false, true, true, true, false, false, false, true, true, true, false, true, true, false, false, false, false, false, false, true, false, false, false, false, true, true, false, true, false, true, true, true, false, true, true, false, true, false, false, false, false, false, true, false, true, true, true, false, false, true, true, true, false, true, false, false, true, true, true, false, false, true, false, true, false, true, true, false, true, true, true, false, true, true, true, false, true, true, false, false, true, true, true, false, false, true, true, false, false, true, true, true, true, false, false, true, false, false, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, true, true, false, false, false, false, false, false, false, false, false, false, true, true, true, true, false, true, false, true, false, false, true, true, true, false, false, false, true, true, true, false, true, true, false, false, false, false, false, false, true, false, false, false, false, true, true, false, true, true, true, true, true, false, true, true, false, true, false, false, false, false, false, true, false, true, true, true, false, false, true, true, true, false, true, false, false, true, true, true, false, false, true, false, true, false, true, true, false, true, true, true, false, true, true, true, false, true, true, false, false, true, true, true, false, false, true, true, false, false, true, true, true, true, false, false, true, false, false, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, false, false, true, true, false, false, true, false, false, false, false, false, true, false, false, false, true, false, false, true, false, true, true, false, false, true, false, false, true, true, false, true, false, true, false, false, false, false, true, false, true, true, false, true, false, false, true, true, false, false, false, false, false, true, true, true, false, true, true, false, true, true, true, false, true, true, false, false, false, false, false, true, false, false, true, false, false, true, false, true, false, false, false, true, false, true, true, false, false, true, false, false, false, false, false, true, true, true, true, true, false, false, false, true, false, false, false, true, true, true, true, false, true, false, false, false]);
            let encoded = BinVector::from_bools(&[true, true, false, true, false, false, true, true, false, false, true, false, false, false, false, false, true, false, false, false, true, false, false, true, false, true, true, false, false, true, false, false, true, true, false, true, false, true, false, false, false, false, true, false, true, true, false, true, false, false, true, true, false, false, false, false, false, true, true, true, false, true, true, false, true, true, true, false, true, true, false, false, false, false, false, true, false, false, true, false, false, true, false, true, false, false, false, true, false, true, true, false, false, true, false, false, false, false, false, false, true, true, true, true, true, false, false, false, true, false, true, false, false, true, true, true, true, false, false, true, false, false, false, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, false, false, true, true, false, false, true, false, false, false, false, false, true, false, false, false, true, false, false, true, false, true, true, false, false, true, false, false, true, true, false, true, false, true, false, false, false, false, true, false, true, true, false, true, false, false, true, true, false, false, false, false, false, true, true, true, false, true, true, false, true, true, true, false, true, true, false, false, true, false, false, true, false, false, true, false, false, true, false, true, false, false, false, true, false, true, true, false, false, true, false, false, false, false, false, false, true, true, true, true, true, false, false, false, true, false, true, false, false, true, true, true, true, false, false, true, false, false, false, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, true, true, true, true, true, false, false, true, false, true, true, false, true, true, false, true, true, false, true, false, true, true, true, false, false, false, true, true, true, false, false, true, false, false, true, true, false, false, true, false, true, false, false, false, true, false, false, false, false, false, false, true, false, false, true, false, true, false, true, true, true, true, true, false, true, false, true, false, false, false, false, true, false, true, false, false, false, true, false, true, true, true, false, true, true, false, true, false, false, true, false, true, false, true, true, true, true, false, true, false, true, false, false, true, false, true, true, true, true, true, false, true, false, true, false, true]);
            let encoded = BinVector::from_bools(&[true, false, false, false, true, true, true, true, true, false, false, true, false, true, true, false, true, true, false, true, true, false, true, false, true, true, true, false, false, false, true, true, true, false, false, true, false, false, true, true, false, false, true, false, true, false, false, false, true, false, false, false, false, false, false, true, false, false, true, false, true, false, true, true, true, true, true, false, true, false, true, false, false, false, false, true, false, true, false, false, false, true, false, true, true, true, false, true, true, false, true, false, false, true, false, false, true, false, true, true, true, true, false, true, false, true, false, false, true, false, false, true, true, true, true, true, false, true, true, false, true, false, false, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, true, true, true, true, true, false, false, true, false, true, true, false, true, true, false, true, true, false, true, false, true, true, true, false, false, false, true, true, true, false, false, true, false, false, true, true, false, false, true, false, true, false, false, false, true, false, false, false, false, false, false, true, false, false, true, false, true, false, true, true, true, true, true, false, true, false, true, false, false, false, false, true, false, true, false, false, false, true, false, true, true, true, false, true, true, true, true, false, false, true, false, false, true, false, true, true, true, true, false, true, false, true, false, false, true, false, false, true, true, true, true, true, false, true, true, false, true, false, false, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, false, false, true, false, false, true, true, true, true, true, false, true, false, true, false, false, false, false, false, true, true, false, true, true, true, true, false, true, true, true, false, true, false, false, true, false, false, false, true, true, true, true, false, true, false, false, false, true, false, false, true, true, false, true, true, true, false, false, false, true, false, true, false, true, false, false, true, false, true, false, true, true, true, true, true, true, true, true, false, false, true, false, true, true, true, true, false, false, false, true, false, false, true, false, false, false, true, false, false, false, false, true, true, false, true, false, true, true, true, false, false, false, false, false, true, true]);
            let encoded = BinVector::from_bools(&[true, false, true, true, false, false, true, false, false, true, true, true, true, true, false, true, false, true, false, false, false, false, false, true, true, false, true, true, true, true, false, true, true, true, false, true, false, false, true, false, false, false, true, true, true, true, false, true, false, false, false, true, false, false, true, true, false, true, true, true, false, false, false, true, false, true, false, true, false, false, true, false, true, false, true, true, true, true, true, true, true, true, false, false, true, false, true, true, true, true, false, false, false, true, true, false, false, true, false, false, false, true, false, false, false, false, true, true, false, true, false, false, true, true, true, false, false, false, true, false, false, true, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, false, false, true, false, false, true, true, true, true, true, false, true, false, true, false, false, false, false, false, true, true, false, true, true, true, true, false, true, true, true, false, true, false, false, true, false, false, false, true, true, true, true, false, true, false, false, false, true, false, false, true, false, false, true, true, true, false, false, false, true, false, true, false, true, false, false, true, false, true, false, true, true, true, true, true, true, true, true, false, false, true, false, true, true, true, true, false, false, false, true, true, false, false, true, false, false, false, true, false, false, false, false, true, true, false, true, false, false, true, true, true, false, false, false, true, false, false, true, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, true, true, false, true, true, false, false, true, true, false, false, false, false, true, false, true, false, false, true, true, true, false, true, true, true, false, true, true, false, true, true, false, false, true, false, true, false, false, false, false, false, true, true, false, true, false, false, true, false, false, false, true, false, false, false, false, true, true, true, false, true, false, true, false, true, false, false, true, true, true, false, true, true, true, true, true, true, false, true, true, true, true, true, false, true, true, true, true, true, false, false, false, true, true, false, false, true, false, false, false, false, true, false, false, true, true, true, false, true, true, true, false, true, false, true, false]);
            let encoded = BinVector::from_bools(&[false, false, true, false, true, true, false, true, true, false, false, true, true, false, false, false, false, true, false, true, false, false, true, true, true, false, true, true, true, false, true, true, false, true, true, false, false, true, false, true, false, false, false, false, false, true, true, false, true, false, false, true, false, false, false, true, false, false, false, false, true, true, true, false, true, false, true, false, true, false, false, true, true, true, false, true, true, true, true, true, true, false, true, true, true, true, true, false, true, true, true, true, true, false, true, false, false, true, true, false, false, true, false, false, false, false, true, false, false, true, false, true, true, false, true, true, true, false, true, true, false, true, true, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, true, true, false, true, true, false, false, true, true, false, false, false, false, true, false, true, false, false, true, true, true, false, true, true, true, false, true, true, false, true, true, false, false, true, false, true, false, false, false, false, false, true, true, false, true, false, false, true, false, false, false, true, false, false, false, false, true, true, true, false, true, false, true, false, true, false, false, true, true, true, false, true, true, true, true, true, true, false, true, true, true, true, true, false, true, true, true, true, true, false, false, false, false, true, true, false, false, true, false, false, false, false, true, false, false, true, false, true, true, false, true, true, true, false, true, true, false, true, true, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, true, true, false, false, false, false, true, false, false, false, true, false, true, true, true, false, true, false, true, true, false, false, false, false, false, true, true, true, true, false, false, true, false, false, true, true, true, true, false, false, true, true, true, false, true, false, false, true, false, false, false, true, true, true, true, false, true, true, true, false, true, false, true, false, false, false, true, false, false, false, false, false, true, false, true, true, true, false, false, false, true, true, false, true, true, false, false, false, false, true, false, true, true, true, false, false, true, false, false, false, true, true, false, true, true, true, false, true, true, false, true, false, true, false, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, true, true, false, false, false, false, true, false, false, false, true, false, true, true, true, false, true, false, true, true, false, false, false, false, false, true, true, true, true, false, false, true, false, false, true, true, true, true, false, false, true, true, true, false, true, false, false, true, false, false, false, true, true, true, true, false, true, true, true, false, true, false, true, false, false, false, true, false, false, false, false, false, true, false, true, true, true, false, false, false, true, true, false, true, true, false, false, false, false, true, true, false, true, true, true, false, false, true, false, false, false, true, true, false, true, true, false, true, false, true, true, false, true, false, true, true, false, true, false, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, true, true, false, false, false, false, true, false, false, false, true, false, true, true, true, false, true, false, true, true, false, false, false, false, false, true, true, true, true, false, false, true, false, false, true, true, true, true, false, false, true, true, true, false, true, false, false, true, false, false, false, true, true, true, true, false, true, true, true, false, true, false, true, false, false, false, true, false, false, false, false, false, true, false, true, true, true, false, false, false, true, true, false, true, true, false, false, false, false, true, true, false, true, true, true, false, false, false, false, false, false, true, true, false, true, true, false, true, false, true, true, false, true, false, true, true, false, true, false, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, false, false, false, false, true, true, false, false, false, true, true, true, false, false, true, false, false, false, true, false, false, true, false, true, false, true, true, false, true, true, true, true, false, true, false, false, false, true, false, true, false, true, false, false, false, false, false, true, false, true, true, true, true, false, true, false, true, true, true, true, false, true, true, true, false, true, false, true, false, true, true, true, true, false, true, true, true, false, false, true, false, false, true, true, true, true, true, false, false, false, false, false, true, false, false, false, true, false, false, false, true, true, true, true, true, false, false, true, true, true, false, false, true, true, true, false]);
            let encoded = BinVector::from_bools(&[false, false, true, false, false, false, false, false, true, true, false, false, false, true, true, true, false, false, true, false, false, false, true, false, false, true, false, true, false, true, true, false, true, true, true, true, false, true, false, false, false, true, false, true, false, true, false, false, false, false, false, true, false, true, true, true, true, false, true, false, true, true, true, true, false, true, true, true, false, true, false, true, false, true, true, true, true, false, true, true, true, false, false, true, false, false, true, true, true, true, true, false, false, false, false, false, false, true, false, false, false, true, false, false, false, true, true, true, true, true, false, false, false, true, true, true, false, false, true, true, true, true, false, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, false, false, false, false, true, true, false, false, false, true, true, true, false, false, true, false, false, false, true, false, false, true, false, true, false, true, true, false, true, true, true, true, false, true, false, false, false, true, false, true, false, true, false, false, false, false, false, true, false, true, true, true, true, false, true, false, true, true, true, true, false, true, true, true, true, true, false, true, false, true, true, true, true, false, true, true, true, false, false, true, false, false, true, true, true, true, true, false, false, false, false, false, false, true, false, false, false, true, false, false, false, true, true, true, true, true, false, false, false, true, true, true, false, false, true, true, true, true, false, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, true, false, true, false, true, true, true, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, true, true, false, true, true, true, false, false, false, true, false, false, true, false, true, false, false, true, false, false, false, true, false, false, true, true, true, true, true, false, false, false, false, false, false, false, true, false, false, true, false, true, true, false, false, true, true, true, true, false, true, true, true, true, false, false, false, false, true, false, true, false, false, false, true, false, false, true, true, true, false, true, false, true, false, false, false, true, false, true, false, false, true, true, true, true, false, true, false, false, true, false, false, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, true, false, true, false, true, true, true, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, true, true, false, true, true, true, false, false, false, true, false, false, true, false, true, false, false, true, false, false, false, true, false, false, true, true, true, true, true, false, false, false, false, false, false, false, true, false, false, true, false, true, true, false, false, true, true, true, true, false, true, true, true, true, false, false, false, false, true, false, true, false, false, false, true, false, false, true, true, true, true, false, true, false, true, false, false, false, true, false, true, false, false, true, false, true, true, true, false, true, false, false, false, true, false, false, true, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, true, false, true, false, true, true, true, false, true, true, false, false, true, true, false, false, true, true, false, false, true, true, true, true, false, true, true, true, false, false, false, true, false, false, true, true, true, false, false, true, false, false, false, true, false, false, true, true, true, true, true, false, false, false, false, false, false, false, true, false, false, true, false, true, true, false, false, true, true, true, true, false, true, true, true, true, false, false, false, false, true, false, true, false, false, false, true, false, false, true, true, true, true, false, true, false, true, false, false, false, true, false, true, false, false, true, false, true, true, true, false, true, false, false, false, true, false, false, true, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, true, true, true, false, true, true, false, false, false, true, true, false, false, true, false, true, false, true, false, true, false, false, true, true, true, true, true, false, true, false, false, true, true, true, false, true, true, true, true, true, true, false, true, true, false, false, true, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, false, true, true, false, true, true, false, true, false, false, true, true, true, false, false, false, false, true, true, true, true, true, true, false, true, false, true, false, false, true, true, true, false, false, false, false, true, true, true, true, false, true, true, true, false, false, false, false, true, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, true, true, true, false, true, true, false, false, false, true, true, false, false, true, false, true, false, true, false, true, false, false, true, true, true, true, true, false, true, false, false, true, true, true, false, true, true, true, true, true, true, false, true, true, false, false, true, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, false, true, true, false, true, true, false, true, false, false, true, true, true, false, false, false, false, true, true, true, true, true, true, false, true, false, false, true, false, false, true, true, true, false, false, false, false, true, true, true, true, false, false, true, true, true, false, false, false, false, false, true, true, true, false, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, true, true, true, false, true, true, false, false, false, true, true, false, false, true, false, true, false, true, false, true, false, false, true, true, true, true, true, false, true, false, false, true, true, true, false, true, true, true, true, true, true, false, true, true, false, false, true, false, false, false, true, true, true, true, true, true, true, true, true, true, true, false, true, false, true, false, true, true, false, true, true, false, true, false, false, true, true, true, false, false, false, false, true, true, true, true, true, true, false, true, false, false, true, false, false, true, true, true, false, false, false, false, true, true, true, true, false, false, true, true, true, false, false, false, false, false, true, true, true, false, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, false, true, false, false, true, false, true, false, true, false, true, true, false, true, true, false, true, true, false, false, true, false, false, false, false, false, true, false, false, true, false, true, true, true, false, false, false, true, true, false, true, true, false, true, true, false, true, true, true, false, false, false, true, false, false, true, false, false, true, false, true, true, true, false, true, false, false, false, false, false, true, false, false, false, false, true, false, false, true, false, true, true, true, false, true, false, true, true, false, false, false, true, true, false, false, false, false, false, false, true, true, true, true, true, false, true, false, true, false, true, false, true, false, false, false, false]);
            let encoded = BinVector::from_bools(&[true, false, false, false, false, true, false, false, true, false, true, false, true, false, true, true, false, true, true, false, true, true, false, false, true, false, false, false, false, false, true, false, false, true, false, true, true, true, false, false, false, true, true, false, true, true, false, true, true, false, true, true, true, false, false, false, true, false, false, true, false, false, true, false, true, true, true, false, true, false, false, false, false, false, true, false, false, false, false, true, false, false, true, false, true, true, true, false, true, false, true, true, false, false, true, false, true, true, false, false, false, false, false, false, true, true, true, true, true, false, true, true, false, true, false, true, false, true, false, false, false, false, false, false, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, false, true, false, false, true, false, true, false, true, false, true, true, false, true, true, false, true, true, false, false, true, false, false, false, false, false, true, false, false, true, true, true, true, true, false, false, false, true, true, false, true, true, false, true, true, false, true, true, true, false, false, false, true, false, false, true, false, false, true, false, true, true, true, false, true, false, false, false, false, false, true, false, false, false, false, true, false, false, true, false, true, true, true, false, true, false, true, true, false, false, true, false, true, true, false, false, false, false, false, false, true, true, true, true, true, false, true, true, false, true, false, true, false, true, false, false, false, false, false, false, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, true, true, true, false, false, false, false, true, false, false, false, false, false, false, false, true, false, true, true, false, true, false, false, false, false, true, false, true, false, true, true, false, true, false, true, true, true, false, false, true, true, false, true, true, true, false, true, false, true, false, true, true, false, true, true, false, true, true, true, false, true, true, true, true, false, true, true, true, true, false, false, true, false, false, true, true, false, true, true, true, false, true, false, false, true, true, false, true, true, true, true, false, true, true, true, false, true, false, false, true, false, false, true, false, true, true, false, true, true, false, false, true, false, false, true, true]);
            let encoded = BinVector::from_bools(&[false, false, true, true, true, true, true, false, false, false, false, true, false, false, false, false, false, false, false, true, false, true, true, false, true, false, false, false, false, true, false, true, false, true, true, false, true, false, true, true, true, false, false, true, true, false, true, true, true, false, true, false, true, false, true, true, false, true, true, false, true, true, true, false, true, true, true, true, false, true, true, true, true, false, false, true, false, false, true, true, false, true, true, true, false, true, false, false, true, true, false, true, true, true, true, true, false, true, true, true, false, true, false, false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, false, false, true, true, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, true, true, true, false, false, false, false, true, false, false, false, false, false, false, false, true, false, true, true, false, true, false, false, false, false, true, false, true, false, true, true, false, true, false, true, true, true, false, false, true, true, false, true, true, true, false, true, false, true, false, true, true, false, true, true, false, true, true, true, false, true, true, true, true, false, true, true, true, true, false, false, true, false, true, true, true, false, true, true, true, false, true, false, false, true, true, false, true, true, true, true, true, false, true, true, true, false, true, false, false, true, false, false, true, false, true, false, true, false, true, true, false, false, true, false, false, false, true, true, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, true, false, false, false, true, false, false, true, false, false, false, true, false, true, false, true, true, false, false, true, true, true, true, false, false, false, true, true, true, true, false, true, false, true, true, true, true, false, false, false, true, false, false, false, false, false, false, false, false, false, false, true, true, true, true, false, true, true, true, false, true, false, true, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, true, true, true, true, true, false, true, false, false, true, false, false, false, true, true, false, true, false, false, true, false, true, false, false, false, false, false, true, false, true, true, true, true, false]);
            let encoded = BinVector::from_bools(&[true, true, true, true, true, false, false, false, true, false, false, true, false, false, false, true, false, true, false, true, true, false, false, true, true, true, true, false, false, false, true, true, true, true, false, true, false, true, true, true, true, false, false, false, true, false, false, false, false, false, false, false, false, false, false, true, true, true, true, false, true, true, true, false, true, false, true, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, true, true, true, true, true, false, true, false, true, false, true, false, false, false, true, true, false, true, false, false, true, false, true, false, true, false, false, false, false, true, false, true, true, true, true, true, true, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, true, false, false, false, true, false, false, true, false, false, false, true, false, true, false, true, true, false, false, true, true, true, true, false, false, false, true, false, true, true, false, true, false, true, true, true, true, false, false, false, true, false, false, false, false, false, false, false, false, false, false, true, true, true, true, false, true, true, true, false, true, false, true, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, true, true, true, true, true, false, true, false, true, false, true, false, false, false, true, true, false, true, false, false, true, false, true, false, true, false, false, false, false, true, false, true, true, true, true, true, true, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, true, false, false, false, false, false, true, true, true, false, false, false, true, false, true, true, true, false, true, true, true, false, false, false, false, true, false, false, true, true, true, true, true, false, false, false, false, false, true, true, false, true, false, false, true, true, true, false, true, true, false, false, true, true, false, true, true, false, true, true, false, true, true, true, false, false, false, false, false, false, true, true, false, false, false, false, true, true, true, false, false, false, false, false, false, true, false, true, false, true, true, false, true, false, true, true, true, false, false, true, true, false, false, true, false, false, true, false, false, false, false, true, false, false, false, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, true, false, false, false, false, false, true, true, true, false, false, false, true, false, true, true, true, false, true, true, true, false, false, false, false, true, false, false, true, true, true, true, true, false, false, false, false, false, true, true, false, true, false, false, true, true, true, false, true, true, false, false, true, true, false, true, true, false, true, true, false, true, true, true, false, false, false, false, false, false, true, true, false, false, false, false, true, true, true, false, false, false, false, false, false, true, false, true, false, true, false, true, false, true, false, true, true, true, false, false, true, true, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, false, true, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, true, false, false, false, false, false, true, true, true, false, true, false, true, false, true, true, true, false, true, true, true, false, false, false, false, true, false, false, true, true, true, true, true, false, false, false, false, false, true, true, false, true, false, false, true, true, true, false, true, true, false, false, true, true, false, true, true, false, true, true, false, true, true, true, false, false, false, false, false, false, true, true, false, false, false, false, true, true, true, false, false, false, false, false, false, true, false, true, false, true, false, true, false, true, false, true, true, true, false, false, true, true, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, false, true, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, true, false, false, true, false, false, false, false, true, false, true, false, false, false, true, true, true, false, false, false, true, true, false, false, true, false, true, true, false, true, true, true, false, true, true, true, true, false, false, false, false, true, true, true, false, true, false, false, true, true, false, false, true, true, false, false, false, false, true, true, false, true, true, false, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, true, false, true, true, false, true, true, true, false, false, false, false, true, true, false, true, true, true, true, true, false, false, false, false, false, true, false, false, false, false, false, true, false, true, true, true, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, true, false, false, true, false, false, false, false, true, false, true, false, false, false, true, true, true, false, false, false, true, true, false, false, true, false, true, true, false, true, true, true, false, true, true, true, true, false, false, false, false, true, true, true, false, true, false, false, true, true, false, false, true, true, false, false, false, false, true, true, false, true, true, false, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, true, false, true, true, false, true, true, true, false, false, false, true, false, true, true, false, true, true, true, true, true, false, false, false, false, false, true, false, false, false, false, false, false, true, false, true, true, true, true, false, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, true, false, false, true, false, false, false, false, true, false, true, false, false, false, true, true, true, false, false, false, true, true, false, false, true, false, true, true, false, true, true, true, false, true, true, true, true, false, false, false, false, true, true, true, false, true, false, false, true, true, false, false, true, true, false, false, false, false, true, true, false, true, true, false, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, true, false, false, true, false, true, true, true, false, false, false, true, false, true, true, false, true, true, true, true, true, false, false, false, false, false, true, false, false, false, false, false, false, true, false, true, true, true, true, false, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, true, true, false, true, false, false, false, false, true, false, true, false, false, false, false, true, false, true, false, true, true, true, true, false, true, false, true, false, true, true, false, false, false, false, false, true, false, false, false, true, false, false, false, true, true, true, true, false, false, false, true, true, false, true, false, true, true, true, true, false, false, false, true, true, false, true, false, false, false, false, false, false, false, false, true, true, false, true, true, true, true, false, false, false, false, true, false, false, false, true, true, true, false, true, false, false, false, true, true, false, true, false, false, true, false, false, false, true, true, false, true, false, false, false, true, true]);
            let encoded = BinVector::from_bools(&[true, true, false, true, true, true, false, true, false, false, false, false, true, false, true, false, false, false, false, true, false, true, false, true, true, true, true, false, true, false, true, false, true, true, false, false, false, false, false, true, false, false, false, true, false, false, false, true, true, true, true, false, false, false, true, true, false, true, false, true, true, true, true, false, false, false, true, true, false, true, false, false, false, false, false, false, false, false, true, true, false, true, true, true, true, false, false, false, false, true, false, false, false, true, false, true, true, false, true, false, false, false, true, true, false, true, false, false, true, false, false, false, false, true, true, false, true, false, false, false, false, true, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, true, true, false, true, false, false, false, false, true, false, true, false, false, false, false, true, false, true, false, true, true, true, true, false, true, false, true, false, true, true, false, false, false, false, false, true, false, false, false, true, false, false, false, true, true, true, true, false, false, false, true, true, true, true, false, true, true, true, true, false, false, false, true, true, false, true, false, false, false, false, false, false, false, false, true, true, false, true, true, true, true, false, false, false, false, true, false, false, false, true, false, true, true, false, true, false, false, false, true, true, false, true, false, false, true, false, false, false, false, true, true, false, true, false, false, false, false, true, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, true, true, true, false, false, true, true, false, true, false, true, true, false, false, false, false, true, true, true, false, true, true, true, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, true, false, true, false, true, false, true, true, false, false, false, false, true, true, false, false, false, true, true, false, true, false, false, true, false, false, false, false, false, false, true, true, false, false, false, true, true, false, false, true, false, true, false, false, true, false, true, false, true, true, false, true, false, true, true, true, true, false, false, true, false, true, false, true, true, true, true, false, false, true, true, true, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, true, true, true, false, false, true, true, false, true, false, true, true, false, false, false, false, true, true, true, false, true, true, true, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, true, false, true, false, true, false, true, true, false, false, false, false, true, true, false, false, false, true, true, false, true, false, false, true, false, false, false, false, false, false, true, true, false, false, false, true, true, false, false, true, false, true, false, false, true, false, true, false, true, true, false, true, true, false, true, true, true, true, false, false, true, false, true, false, true, true, true, false, true, false, false, true, true, true, false, true, false, true, false, false, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, true, true, true, true, false, false, true, true, false, true, false, true, true, false, false, false, false, true, true, true, false, true, true, true, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, true, false, true, false, true, false, true, true, false, false, false, false, true, true, false, false, false, true, true, false, true, false, false, true, false, false, false, true, false, false, true, true, false, false, false, true, true, false, false, true, false, true, false, false, true, false, true, false, true, true, false, true, true, false, true, true, true, true, false, false, true, false, true, false, true, true, true, false, true, false, false, true, true, true, false, true, false, true, false, false, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, true, false, true, false, false, true, false, true, true, true, true, true, false, false, true, false, true, true, false, true, true, true, false, true, false, true, true, false, true, true, true, true, true, true, true, false, true, true, false, false, false, true, false, true, true, false, false, false, true, true, true, false, false, true, false, true, true, false, false, false, true, false, false, false, false, true, false, false, true, false, false, true, false, true, false, true, true, true, false, true, false, false, false, true, true, true, true, true, false, true, false, false, true, false, true, false, true, false, false, true, true, false, false, false, true, false, true, false, false, true, true, false, true, false, true, true]);
            let encoded = BinVector::from_bools(&[false, true, false, false, true, false, true, false, false, true, false, true, true, true, true, true, false, false, true, false, true, true, false, true, true, true, false, true, false, true, true, false, true, true, true, true, true, true, true, false, true, true, false, false, false, true, false, true, true, false, false, false, true, true, true, false, false, true, false, true, true, false, false, false, true, false, false, false, false, true, false, false, true, false, false, true, false, true, false, true, true, true, false, true, false, false, false, true, true, true, true, true, false, true, true, false, false, true, false, true, false, true, false, false, true, true, false, false, false, true, true, false, true, false, false, true, true, false, true, true, false, true, false, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, true, false, true, false, false, true, false, true, true, true, true, true, false, false, true, false, true, true, false, true, true, true, false, true, false, true, true, false, true, true, true, true, true, true, true, false, true, true, false, false, false, true, false, true, true, false, false, false, true, true, true, false, false, true, true, true, true, false, false, false, true, false, false, false, false, true, false, false, true, false, false, true, false, true, false, true, true, true, false, true, false, false, false, true, true, true, true, true, false, true, true, false, false, true, false, true, false, true, false, false, true, true, false, false, false, true, true, false, true, false, false, true, true, false, true, true, false, true, false, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, true, true, false, true, false, true, true, false, true, true, true, true, true, false, true, false, false, false, false, false, true, true, false, true, false, true, false, false, false, false, true, false, false, true, false, true, false, true, false, true, true, true, true, true, true, true, true, false, true, true, false, false, false, false, true, true, false, false, false, false, true, true, false, true, false, true, true, false, true, true, true, false, true, false, false, true, false, false, true, false, true, false, true, true, true, true, true, false, false, true, true, false, true, false, false, true, false, true, true, false, false, false, true, false, false, true, true, false, true, true, false, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, true, true, false, true, false, true, true, false, true, true, true, true, true, false, true, false, false, false, false, false, true, true, false, true, false, true, false, false, false, false, true, false, false, true, false, true, false, true, false, true, true, true, true, true, true, true, true, false, true, true, false, false, false, false, true, true, false, false, false, false, true, true, false, true, false, true, true, false, true, true, true, false, true, false, false, true, false, false, true, false, true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, false, true, false, true, true, false, false, false, true, false, false, false, true, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, true, true, false, true, false, true, true, false, true, true, true, true, true, false, true, false, false, false, false, false, true, true, false, true, false, true, false, false, false, false, true, false, false, true, false, true, false, true, false, true, true, true, true, true, true, true, true, false, true, true, false, false, false, false, true, true, false, false, false, false, true, true, false, true, false, true, true, false, true, true, true, false, true, false, false, true, false, true, true, false, true, false, true, true, true, true, true, false, false, true, false, true, false, true, false, false, true, false, true, true, false, false, false, true, false, false, false, true, true, false, true, true, false, false, true, false, true, false, true, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, false, false, false, true, false, true, true, false, true, false, false, false, false, true, true, false, true, false, true, true, false, false, true, false, true, false, false, false, true, false, true, true, true, true, false, false, false, true, true, true, false, false, true, false, true, true, true, false, false, true, false, false, true, true, true, true, true, true, false, true, false, true, true, true, true, true, true, true, false, false, false, false, true, false, true, true, true, true, false, true, true, true, false, true, false, false, false, true, false, false, true, false, true, true, false, true, false, false, true, true, false, false, false, true, false, false, false, true, false, true, true, false, true, true, false, false]);
            let encoded = BinVector::from_bools(&[true, true, false, true, false, false, false, true, false, true, true, false, true, false, false, false, false, true, true, false, true, false, true, true, false, false, true, false, true, false, false, false, true, false, true, true, true, true, false, false, false, true, true, true, false, false, true, false, true, true, true, false, false, true, false, false, true, true, true, true, true, true, false, true, false, true, true, true, true, true, true, true, false, false, false, false, true, false, true, true, true, true, false, true, true, true, false, true, false, false, false, true, false, false, true, true, false, true, true, false, true, false, false, true, true, false, false, false, true, false, false, false, false, true, false, true, true, false, true, true, true, false, false, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, false, false, false, true, false, true, true, false, true, false, false, false, false, true, true, false, true, false, true, true, false, false, true, false, true, false, false, true, true, false, true, true, true, true, false, false, false, true, true, true, false, false, true, false, true, true, true, false, false, true, false, false, true, true, true, true, true, true, false, true, false, true, true, true, true, true, true, true, false, false, false, false, true, false, true, true, true, true, false, true, true, true, false, true, false, false, false, true, false, false, true, true, false, true, true, false, true, false, false, true, true, false, false, false, true, false, false, false, false, true, false, true, true, false, true, true, true, false, false, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, true, false, true, false, true, false, false, false, true, true, false, true, true, false, true, false, false, true, false, false, false, false, false, false, false, true, false, false, true, false, false, true, false, false, true, true, true, false, true, true, true, true, true, false, false, true, false, false, true, false, true, true, false, false, false, false, true, true, false, true, true, false, true, false, false, false, false, true, false, true, false, false, true, true, false, false, false, false, true, true, true, false, true, true, true, false, false, false, true, true, false, true, false, false, false, false, true, false, false, true, true, false, true, false, true, false, false, false, true, true, false, true, true, true, false, true]);
            let encoded = BinVector::from_bools(&[false, false, false, false, true, false, true, false, true, false, false, false, true, true, false, true, true, false, true, false, false, true, false, false, false, false, false, false, false, true, false, false, true, false, false, true, false, false, true, true, true, false, true, true, true, true, true, false, false, true, false, false, true, false, true, true, false, false, false, false, true, true, false, true, true, false, true, false, false, false, false, true, false, true, false, false, true, true, false, false, false, false, true, true, true, false, true, true, true, false, false, false, true, true, true, false, true, false, false, false, false, true, false, false, true, true, false, true, false, true, false, false, false, false, true, true, false, true, false, true, true, false, false, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, true, false, true, false, true, false, false, false, true, true, false, true, true, false, true, false, false, true, false, false, false, false, false, false, false, true, false, false, true, false, false, true, false, false, true, true, true, false, true, true, true, true, true, false, false, true, false, false, true, false, true, true, false, false, false, false, true, true, false, true, true, false, true, false, false, false, false, true, false, true, false, false, true, true, false, false, false, false, true, true, true, false, true, true, true, false, false, false, true, true, true, false, true, false, false, false, false, true, false, false, true, true, false, false, false, true, false, false, false, false, true, true, false, true, false, true, true, false, false, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, true, true, false, true, true, true, false, false, false, false, false, true, false, false, false, false, false, true, false, false, true, false, true, true, false, false, true, false, true, true, false, false, false, true, false, false, false, false, true, false, true, false, false, false, false, true, true, true, false, true, false, true, false, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, false, false, false, false, true, false, false, false, true, true, true, true, false, true, false, true, true, true, true, true, false, true, true, false, true, false, false, false, false, true, true, true, false, false, true, false, true, true, false, true, false, true, false, true, false, true, true, false]);
            let encoded = BinVector::from_bools(&[false, false, true, false, true, true, false, true, true, true, false, false, false, false, false, true, false, false, false, false, false, true, false, false, true, false, true, true, false, false, true, false, true, true, false, false, false, true, false, false, false, false, true, false, true, false, false, false, false, true, true, true, false, true, false, true, false, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, false, false, false, false, true, false, false, false, true, true, true, true, false, true, false, true, true, true, true, true, false, true, true, true, false, true, false, false, false, false, true, true, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, true, false, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, true, true, false, true, true, true, false, false, false, false, false, true, false, false, false, false, false, true, false, false, true, false, true, true, false, false, true, false, true, true, false, false, false, true, false, false, false, false, true, false, true, false, false, false, false, true, true, true, false, true, false, true, false, true, true, true, true, true, true, true, false, true, true, false, true, true, true, true, false, false, true, false, true, false, false, false, true, true, true, true, false, true, false, true, true, true, true, true, false, true, true, true, false, true, false, false, false, false, true, true, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, true, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, true, true, false, true, false, true, false, true, true, true, true, false, false, true, true, false, false, false, false, false, true, true, true, false, true, false, false, false, false, true, true, true, false, true, false, true, true, false, false, false, false, true, true, true, true, false, false, false, true, true, true, false, false, true, true, true, true, false, true, false, false, false, true, false, true, true, false, false, true, true, false, true, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, true, false, true, false, false, false, true, true, false, true, false, true, false, true, false, false, true, false, false, true, false, false, false, true, false, true, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, true, true, false, true, false, true, false, true, true, true, true, false, false, true, true, false, false, false, false, false, true, true, true, false, true, false, false, false, false, true, true, true, false, true, false, true, true, false, false, false, false, true, true, true, true, false, false, false, true, true, true, false, false, true, true, true, true, false, true, false, false, false, true, false, true, true, false, false, true, true, false, true, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, true, false, true, true, false, false, false, true, true, false, true, false, true, false, true, false, false, true, true, false, false, true, false, false, false, true, false, false, true, false, false, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, true, true, false, true, false, true, false, true, true, true, true, false, false, true, true, false, false, false, false, false, true, true, true, false, true, false, false, false, false, true, true, true, false, true, false, true, true, false, false, false, false, true, true, true, true, false, false, false, true, true, true, false, false, true, true, true, true, false, true, false, false, false, true, false, true, true, false, false, true, true, false, true, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, true, false, true, true, false, false, false, true, true, false, true, false, true, false, true, false, false, true, true, false, false, true, false, false, false, true, true, false, true, false, false, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, true, false, false, true, false, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, false, true, true, true, false, false, true, false, false, false, true, true, false, false, true, true, true, true, false, true, true, false, true, false, true, true, true, true, true, false, false, false, true, true, true, true, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, false, false, true, false, false, false, false, true, false, false, true, true, false, false, true, false, false, true, false, false, true, true, false, false, false, true, true, false, true, false, false, true, true, true, true, false, false, true, true, true, false, true]);
            let encoded = BinVector::from_bools(&[true, false, false, true, true, false, false, true, false, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, false, true, true, true, false, false, true, false, false, false, true, true, false, false, true, true, true, true, false, true, true, false, true, false, true, true, true, true, true, false, false, false, true, true, true, true, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, false, false, true, false, false, false, false, true, false, false, true, true, false, false, true, false, true, false, true, false, false, true, true, false, false, false, true, true, false, true, false, false, false, true, true, true, true, false, false, true, false, true, true, false, true, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, true, false, false, true, false, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, false, true, true, true, false, false, true, false, false, false, true, true, false, false, true, true, true, true, false, true, true, false, true, false, true, true, true, true, true, false, false, false, true, true, true, true, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, false, false, true, false, false, false, false, true, false, false, true, true, false, false, true, false, false, false, true, false, false, true, true, false, false, false, true, true, false, true, false, false, false, true, true, true, true, false, false, true, false, true, true, false, true, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, false, false, true, false, true, false, false, false, true, true, true, true, false, true, true, false, true, true, true, true, true, false, false, false, true, false, true, false, false, true, false, true, false, true, true, false, true, false, false, false, true, false, false, false, false, true, false, false, true, true, true, false, false, false, false, true, true, false, false, true, true, true, true, true, true, true, false, true, false, false, true, false, false, false, false, true, false, true, true, false, true, false, true, false, true, true, false, false, true, false, false, true, false, false, true, true, true, true, true, true, true, true, false, false, true, true, true, false, true, true, false, false, true, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, false, false, false, false, true, false, true, false, false, false, true, true, true, true, false, true, true, false, true, true, true, true, true, false, false, false, true, false, true, false, false, true, false, true, false, true, true, false, true, false, false, false, true, false, false, false, false, true, false, false, true, true, true, false, false, false, false, true, true, false, false, true, true, true, true, true, true, true, false, true, false, false, true, false, false, false, false, true, false, true, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, true, true, true, true, true, true, true, false, false, true, true, true, true, false, true, true, false, false, true, true, true, false, true, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, false, false, true, false, true, false, false, false, true, true, true, true, false, true, true, false, true, true, true, true, true, false, false, false, true, false, true, false, true, true, false, true, false, true, true, false, true, false, false, false, true, false, false, false, false, true, false, false, true, true, true, false, false, false, false, true, true, false, false, true, true, true, true, true, true, true, false, true, false, false, true, false, false, false, false, true, false, true, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, true, true, true, true, true, true, true, false, false, true, true, true, true, false, true, true, false, false, true, true, true, false, true, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, false, true, false, false, false, true, true, false, false, false, true, false, true, true, true, true, false, true, false, false, false, true, true, true, true, true, true, false, false, false, true, false, true, false, false, true, true, true, true, true, true, true, false, true, false, true, false, true, false, true, false, false, true, true, true, true, false, false, false, true, false, false, true, true, false, true, false, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, true, false, true, true, false, false, false, false, false, false, true, true, true, true, false, true, true, true, true, false, false, false, false, false, false, true, false, false, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, true, false, true, false, false, false, true, true, false, false, false, true, false, true, true, true, true, false, true, false, false, false, true, true, true, true, true, true, false, false, false, true, false, true, false, false, true, true, true, true, true, true, true, false, true, false, true, false, true, false, true, false, false, true, true, true, true, false, false, false, true, false, false, true, true, false, true, false, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, true, false, true, true, false, false, false, true, false, false, false, true, true, true, true, false, true, true, true, true, false, false, false, false, false, false, false, true, false, false, true, false, true, true, false, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, false, true, false, false, false, true, true, false, false, false, true, false, true, true, true, true, false, true, false, false, false, true, true, true, true, true, true, false, false, false, true, false, true, false, false, true, true, true, true, true, true, true, false, true, false, true, false, true, false, true, false, false, true, true, true, true, false, false, false, true, false, false, true, true, false, true, false, false, true, true, false, false, true, true, true, true, false, true, false, true, false, true, false, true, true, true, true, false, false, false, true, false, false, false, true, true, true, true, false, true, true, true, true, false, false, false, false, false, false, false, true, false, false, true, false, true, true, false, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, false, false, true, true, false, false, false, false, false, false, false, true, false, false, false, false, true, false, true, true, true, false, false, true, true, true, false, true, true, true, true, false, false, false, false, false, false, false, true, true, false, true, false, true, true, false, false, false, false, false, false, false, true, true, false, true, true, true, false, false, true, true, false, false, false, true, false, true, true, true, true, true, true, false, true, false, false, true, true, false, false, true, false, false, true, false, false, false, false, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, false, true, true, true, true, false, false, true, true, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, false, true, false, false, true, true, false, false, false, false, false, false, false, true, false, false, false, false, true, false, true, true, true, false, false, true, true, true, false, true, true, true, true, false, false, false, false, false, false, false, true, true, false, true, false, true, true, false, false, false, false, false, false, false, true, true, false, true, true, true, false, false, true, true, false, false, false, true, false, true, true, true, true, true, true, false, true, false, false, true, true, false, false, true, false, false, true, false, false, false, false, false, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, false, true, true, true, true, true, false, false, true, false, true, true, false, false, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, false, false, true, true, false, false, false, false, false, false, false, true, false, false, false, false, true, false, true, true, true, false, false, true, true, true, false, true, false, true, true, false, false, false, false, false, false, false, true, true, false, true, false, true, true, false, false, false, false, false, false, false, true, true, false, true, true, true, false, false, true, true, false, false, false, true, false, true, true, true, true, true, true, false, true, false, false, true, true, false, false, true, false, false, true, false, false, false, false, false, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, false, true, true, true, true, true, false, false, true, false, true, true, false, false, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, true, false, false, true, true, false, true, true, false, false, true, false, false, false, false, false, false, false, true, true, false, false, false, true, false, true, false, true, true, false, false, true, false, true, false, true, true, false, true, true, false, false, true, false, true, true, false, true, false, false, false, false, true, true, true, true, true, false, false, false, false, true, false, false, true, false, true, true, true, true, false, false, true, false, true, true, true, true, true, false, true, true, false, false, true, true, false, false, true, false, false, false, false, true, true, true, true, false, true, true, true, true, true, true, false, false, true, true, false, false, true, true, true, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, true, false, false, true, true, false, true, true, false, false, true, false, false, false, false, false, false, false, true, true, false, false, false, true, false, true, false, true, true, false, false, true, false, true, false, true, true, false, true, true, false, false, true, false, true, true, false, true, false, false, false, false, true, true, true, true, true, false, false, false, false, true, false, false, true, false, true, true, true, true, false, false, true, false, true, true, true, true, true, false, true, true, false, false, true, true, false, false, true, false, false, false, false, false, true, true, true, true, false, true, true, true, true, true, true, true, false, false, true, true, false, false, true, true, true, true, false, true, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, true, true, false, false, true, true, false, true, true, false, false, true, false, false, false, false, false, false, false, true, true, false, false, false, true, false, true, false, true, true, false, false, true, false, true, false, true, true, false, true, true, false, false, true, false, true, true, false, true, false, false, false, false, true, true, true, true, true, false, false, false, false, false, false, false, true, false, true, true, true, true, false, false, true, false, true, true, true, true, true, false, true, true, false, false, true, true, false, false, true, false, false, false, false, false, true, true, true, true, false, true, true, true, true, true, true, true, false, false, true, true, false, false, true, true, true, true, false, true, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, true, true, true, true, false, true, true, false, true, false, true, false, false, false, true, false, false, true, false, false, false, false, true, true, true, false, true, true, true, true, true, true, false, false, true, true, true, false, false, false, true, false, true, false, true, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, false, true, true, true, false, false, false, false, true, false, false, true, true, true, false, false, true, false, true, false, false, true, false, true, false, true, true, false, false, true, false, true, true, true, false, true, false, true, true, false, true, false, false, true, true, false, true, true, false, true, false, false, false, true, true]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, true, true, true, true, false, true, true, false, true, false, true, false, false, false, true, false, false, true, false, false, false, false, true, true, true, false, true, true, true, true, true, true, false, false, true, true, true, false, false, false, true, false, true, false, true, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, false, true, true, true, false, false, false, false, true, false, false, true, true, true, false, false, true, false, true, false, false, true, false, true, false, true, true, false, false, true, true, false, true, true, true, false, true, false, true, true, false, true, false, false, true, false, true, false, true, true, false, true, false, false, false, false, true, true, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, true, true, true, true, false, true, true, false, true, false, true, false, false, false, true, false, false, true, false, false, false, false, true, true, true, false, true, true, true, true, true, true, false, false, true, true, true, false, false, false, false, false, true, false, true, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, false, true, true, true, false, false, false, false, true, false, false, true, true, true, false, false, true, false, true, false, false, true, false, true, false, true, true, false, false, true, true, false, true, true, true, false, true, false, true, true, false, true, false, false, true, false, true, false, true, true, false, true, false, false, false, false, true, true, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, true, true, false, false, false, true, false, false, true, false, false, false, false, false, true, false, false, false, true, true, false, false, true, true, true, true, false, true, false, true, true, true, true, true, true, false, true, false, true, true, false, true, true, true, false, true, false, false, true, true, true, false, false, false, true, false, false, false, true, true, false, false, false, false, true, true, true, false, true, true, false, false, false, false, true, true, false, false, false, false, true, false, false, true, true, true, false, false, true, false, true, false, false, true, false, true, true, false, false, false, false, false, false, true, false, true, false, false, true, false, false, true, true, true, true, true]);
            let encoded = BinVector::from_bools(&[false, false, true, true, true, true, false, false, false, true, false, false, true, false, false, false, false, false, true, false, false, false, true, true, false, false, true, true, true, true, false, true, false, true, true, true, true, true, true, false, true, false, true, true, false, true, true, true, false, true, false, false, true, true, true, false, false, false, true, false, false, false, true, true, false, false, false, false, true, true, true, false, true, true, false, false, false, false, true, true, false, false, false, false, true, false, false, true, true, true, false, false, true, false, false, true, false, false, true, false, true, true, false, false, false, false, false, false, true, false, false, true, false, false, true, false, false, true, true, true, true, true, true, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, true, true, false, false, false, true, false, false, true, false, false, false, false, false, true, false, false, false, true, true, false, false, true, true, true, true, false, true, false, true, true, true, true, true, true, false, true, false, true, true, false, true, true, true, false, true, false, false, true, true, true, false, false, false, true, false, false, false, true, true, false, false, false, false, true, true, false, false, true, true, false, false, false, false, true, true, false, false, false, false, true, false, false, true, true, true, false, false, true, false, false, true, false, false, true, false, true, true, false, false, false, false, false, false, true, false, false, true, false, false, true, false, false, true, true, true, true, true, true, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, true, true, false, true, true, true, false, true, true, false, true, false, true, false, false, false, false, false, false, false, false, false, false, true, true, false, false, false, true, true, true, false, true, false, true, true, true, true, false, false, true, false, false, true, true, false, false, true, false, false, false, true, true, false, false, true, false, false, true, false, true, false, false, true, true, false, false, true, false, true, true, true, true, false, true, false, true, false, true, false, true, true, false, true, true, false, true, true, true, true, false, false, false, true, true, false, false, true, true, false, true, false, false, false, true, true, false, false, true, true, true, true, true, true, true, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, true, true, false, true, true, true, false, true, true, false, true, false, true, false, false, false, false, false, false, false, false, false, false, true, true, false, false, false, true, true, true, false, true, false, true, true, true, true, false, false, true, false, false, true, true, false, false, true, false, false, false, true, true, false, false, true, false, false, true, false, true, false, false, true, true, false, false, true, false, true, true, true, true, false, true, false, true, false, true, false, true, true, false, true, true, false, true, true, true, true, true, false, false, false, true, true, false, false, true, true, false, true, false, false, false, true, true, true, false, false, true, true, true, true, true, true, true, true, false, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, true, true, false, true, true, true, false, true, true, false, true, false, true, false, false, false, false, false, false, false, false, false, false, true, true, false, false, false, true, true, false, false, true, false, true, true, true, true, false, false, true, false, false, true, true, false, false, true, false, false, false, true, true, false, false, true, false, false, true, false, true, false, false, true, true, false, false, true, false, true, true, true, true, false, true, false, true, false, true, false, true, true, false, true, true, false, true, true, true, true, true, false, false, false, true, true, false, false, true, true, false, true, false, false, false, true, true, true, false, false, true, true, true, true, true, true, true, true, false, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, false, false, true, false, false, true, false, false, false, false, true, false, true, true, true, false, false, false, true, false, false, false, false, true, false, true, false, false, true, false, true, true, false, false, true, false, false, true, false, false, false, true, true, false, true, false, true, true, false, false, true, false, false, true, true, false, true, false, false, false, true, true, true, false, false, false, true, false, true, true, true, false, true, false, false, false, false, false, false, true, false, true, false, false, true, false, false, false, true, true, false, false, true, false, false, true, false, true, false, false, true, true, false, true, true, true, true, false, true, true, true, true, true, false, true, true]);
            let encoded = BinVector::from_bools(&[false, true, false, false, false, false, true, false, false, true, false, false, false, false, true, false, true, true, true, false, false, false, true, false, false, false, false, true, false, true, false, false, true, false, true, true, false, false, true, false, false, true, false, false, false, true, true, false, true, false, true, true, false, false, true, false, false, true, true, false, true, false, false, false, true, true, true, false, false, false, true, false, true, true, true, false, true, false, false, false, false, false, false, true, false, true, false, false, true, false, false, false, true, true, true, false, false, true, false, false, true, false, true, false, false, true, true, false, true, true, false, true, true, false, true, true, true, true, true, true, false, true, true, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, false, false, true, false, false, true, false, false, false, false, true, false, true, true, true, false, false, false, true, false, false, false, false, true, false, true, false, false, true, false, true, true, false, false, true, false, false, true, false, false, false, true, true, false, true, false, true, true, false, false, true, false, false, true, true, false, true, false, false, false, true, true, true, false, false, false, true, false, true, true, true, false, true, false, false, false, false, false, false, true, false, true, false, false, true, false, false, true, true, true, true, false, false, true, false, false, true, false, true, false, false, true, true, false, true, true, false, true, true, false, true, true, true, true, true, true, false, true, true, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, false, true, false, true, false, false, false, false, false, false, true, true, true, false, false, true, false, true, true, true, false, false, true, false, false, true, false, true, false, true, true, true, true, false, false, false, true, false, false, true, false, false, false, true, false, true, false, true, false, false, true, false, false, false, false, true, true, false, false, true, true, false, true, false, true, false, true, true, true, true, false, false, true, true, true, false, true, false, false, false, true, false, true, true, true, true, true, true, true, true, false, true, false, true, false, false, true, true, false, true, true, true, true, false, false, false, false, false, true, true, true, false, true, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, false, false, false, true, false, true, false, false, false, false, false, false, true, true, true, false, false, true, false, true, true, true, false, false, true, false, false, true, false, true, false, true, true, true, true, false, false, false, true, false, false, true, false, false, false, true, false, true, false, true, false, false, true, false, false, false, false, true, true, false, false, true, true, false, true, false, true, false, true, true, true, true, false, false, true, true, true, false, true, false, false, false, true, false, true, true, true, true, true, true, true, true, false, false, true, false, true, false, false, true, true, false, true, true, true, true, false, false, true, false, false, false, true, true, true, false, false, true, true, false, false, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, false, true, false, true, false, false, false, false, false, false, true, true, true, false, false, true, false, true, true, true, false, false, true, false, false, true, false, true, false, true, true, true, true, false, false, false, true, false, false, true, false, false, false, true, false, true, false, true, false, false, true, false, false, false, false, true, true, false, false, true, true, false, true, false, true, false, true, true, true, true, false, false, true, true, true, false, true, false, false, false, true, false, true, true, true, true, true, true, true, true, false, false, true, false, true, false, false, true, true, false, true, true, true, true, false, false, true, false, false, false, true, true, true, false, false, true, true, false, false, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, true, false, false, true, false, true, false, false, true, false, true, false, true, true, true, true, false, true, false, false, false, true, false, false, true, true, false, true, true, false, false, false, false, false, true, false, true, true, false, true, true, true, false, true, true, true, true, false, false, false, true, true, true, false, true, false, true, false, true, false, false, false, true, true, true, false, false, true, true, true, true, true, true, false, true, false, false, true, false, false, true, false, false, true, false, true, false, false, true, false, false, false, true, false, true, false, false, true, false, false, true, true, false, false, true, true, false, false, false, false, true, false, false, false, true, false]);
            let encoded = BinVector::from_bools(&[false, false, true, true, true, false, false, true, false, true, false, false, true, false, true, false, true, true, true, true, false, true, false, false, false, true, false, false, true, true, false, true, true, false, false, false, false, false, true, false, true, true, false, true, true, true, false, true, true, true, true, false, false, false, true, true, true, false, true, false, true, false, true, false, false, false, true, true, true, false, false, true, true, true, true, true, true, false, true, false, false, true, false, false, true, false, false, true, false, true, false, false, true, false, true, false, false, true, false, true, false, false, true, false, false, true, true, false, false, true, false, true, false, false, false, false, true, false, true, false, false, true, false, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, true, false, false, true, false, true, false, false, true, false, true, false, true, true, true, true, false, true, false, false, false, true, false, false, true, true, false, true, true, false, false, false, false, false, true, false, true, true, false, true, true, true, false, true, true, true, true, false, false, false, true, true, true, false, true, false, true, false, true, false, false, false, true, true, true, false, false, true, true, true, true, true, true, false, true, false, false, true, false, false, true, false, false, true, false, true, false, false, true, false, true, false, false, true, false, true, false, false, true, false, true, true, true, false, false, true, false, true, false, false, false, false, true, false, true, false, false, true, false, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, false, true, true, false, true, false, false, true, true, true, false, true, false, false, false, true, true, false, true, false, false, false, false, true, true, false, true, false, false, false, true, false, true, false, true, false, false, true, true, false, true, false, true, false, true, false, true, true, false, false, false, true, false, true, false, true, true, false, false, true, true, true, true, false, false, true, true, true, true, true, false, false, false, true, false, false, false, false, false, false, true, true, true, false, true, false, false, false, true, false, true, true, false, false, false, false, true, false, false, false, false, false, false, false, true, false, true, false, false, true, true, false, false, false, false, true]);
            let encoded = BinVector::from_bools(&[true, false, false, false, false, true, true, false, true, false, false, true, true, true, false, true, false, false, false, true, true, false, true, false, false, false, false, true, true, false, true, false, false, false, true, false, true, false, true, false, false, true, true, false, true, false, true, false, true, false, true, true, false, false, false, true, false, true, false, true, true, false, false, true, true, true, true, false, false, true, true, true, true, true, false, false, false, true, false, false, false, false, false, false, true, true, true, false, true, false, false, false, true, false, true, true, true, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, true, false, false, true, true, false, false, false, false, false, true, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, false, true, true, false, true, false, false, true, true, true, false, false, false, false, false, true, true, false, true, false, false, false, false, true, true, false, true, false, false, false, true, false, true, false, true, false, false, true, true, false, true, false, true, false, true, false, true, true, false, false, false, true, false, true, false, true, true, false, false, true, true, true, true, false, false, true, true, true, true, true, false, false, false, true, false, false, false, false, false, false, true, true, true, false, true, false, false, false, true, false, true, true, true, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, true, false, false, true, true, false, false, false, false, false, true, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, true, true, true, true, false, false, false, false, false, true, true, false, true, false, true, true, false, false, false, true, false, false, true, false, true, true, true, true, true, true, false, true, true, false, false, true, true, true, false, false, false, false, true, false, false, false, true, false, true, false, true, false, true, false, false, true, false, false, false, false, true, true, true, true, true, false, false, true, true, true, false, false, true, true, true, false, false, false, false, true, false, false, false, true, true, true, true, false, false, false, true, true, false, false, false, false, true, false, false, true, false, false, true, true, false, true, true, true, false, true, true, false, false, true, true]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, true, true, true, true, false, false, false, false, false, true, true, false, true, false, true, true, false, false, false, true, false, false, true, false, true, true, true, true, true, true, false, true, true, false, false, true, true, true, false, false, false, false, true, false, false, false, true, false, true, false, true, false, true, false, false, true, false, false, false, false, true, true, true, true, true, false, false, true, true, true, false, false, true, true, true, false, false, false, false, true, false, false, false, true, true, true, true, false, false, true, false, true, true, false, false, false, false, true, false, false, true, false, false, true, true, false, false, true, true, true, false, true, true, false, false, false, true, true, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, true, true, true, true, true, false, false, false, false, false, true, true, false, true, false, true, true, false, false, false, true, false, false, true, false, true, true, true, true, true, true, false, true, true, false, false, true, true, true, false, false, false, false, true, false, false, false, true, false, true, false, true, false, true, false, false, true, false, false, false, false, true, true, true, true, true, false, false, true, true, true, false, false, true, true, true, false, false, false, false, true, false, false, false, true, true, true, true, false, false, true, false, true, true, false, false, false, false, true, false, false, true, false, false, true, true, false, false, true, true, true, false, true, true, false, false, false, true, true, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, false, true, true, true, false, true, true, false, false, false, false, true, false, false, true, true, false, false, false, false, false, true, true, true, false, true, true, false, false, true, false, true, true, true, true, true, false, false, true, false, true, false, true, true, true, false, false, false, true, true, true, true, false, true, false, true, true, false, true, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, true, false, true, false, false, false, true, false, true, false, false, false, true, false, false, false, true, true, true, true, true, true, true, false, false, false, true, true, true, false, true, false, true, false, true, true, true, false, true, false, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, true, false, true, true, true, false, true, true, false, false, false, false, true, false, false, true, true, false, false, false, false, false, true, true, true, false, true, true, false, false, true, false, true, true, true, true, true, false, false, true, false, true, false, true, true, true, false, false, false, true, true, true, true, false, true, false, true, true, false, true, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, true, false, true, false, false, false, true, false, true, false, false, false, true, false, false, false, false, true, true, true, true, true, true, true, false, false, false, true, true, true, false, true, false, false, true, false, true, true, true, false, true, true, false, false, true, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, false, true, true, true, false, true, true, false, false, false, false, true, false, false, true, true, false, false, false, false, false, true, true, true, false, true, true, false, false, true, false, true, true, true, true, true, false, false, true, false, true, false, true, true, true, false, false, false, true, true, true, true, false, true, false, true, true, false, true, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, true, false, true, false, false, false, true, false, true, false, false, false, true, false, false, false, false, true, true, true, true, true, true, true, false, false, false, true, true, true, false, true, false, false, true, false, true, true, true, false, false, true, false, false, true, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, true, true, false, true, false, false, false, true, false, false, true, true, false, false, false, false, false, true, true, true, true, false, false, true, true, true, true, true, false, true, false, true, true, false, true, true, false, true, false, true, false, false, false, false, true, false, true, false, false, true, false, true, false, true, false, true, false, false, false, true, false, false, true, true, true, true, false, true, true, false, false, false, false, false, true, false, false, true, false, true, true, false, true, false, false, true, false, false, false, false, true, true, true, false, false, false, true, false, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, true, true, false, true, false, false, false, true, false, false, true, true, false, false, false, false, false, true, true, true, true, false, false, true, true, true, true, true, false, true, false, true, true, false, true, true, false, true, false, true, false, false, false, false, true, false, true, false, false, true, false, true, false, true, false, true, false, false, false, true, false, false, true, true, true, true, false, true, true, false, false, false, false, false, true, false, false, false, true, false, true, true, false, true, false, false, true, false, false, false, false, true, true, true, true, false, false, false, true, true, false, true, false, false, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, true, true, false, true, false, false, false, true, false, false, true, true, false, false, false, false, false, true, true, true, true, false, false, true, true, true, true, true, false, true, false, true, true, false, true, true, false, true, false, true, false, false, false, false, true, false, true, false, false, true, false, true, false, true, false, true, false, false, false, true, false, false, true, true, true, true, false, true, true, false, false, false, true, false, true, false, false, false, true, false, true, true, false, true, false, false, true, false, false, false, false, true, true, true, true, false, false, false, true, true, false, true, false, false, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, false, false, false, true, false, false, false, true, true, true, true, true, false, true, false, false, false, true, true, true, true, true, false, true, true, false, false, false, true, false, false, true, false, true, true, false, true, false, true, true, false, false, true, true, false, false, false, true, false, true, false, true, false, true, true, true, false, true, true, true, false, true, true, false, true, true, false, false, true, false, true, false, true, true, true, true, false, true, false, false, false, true, false, false, true, true, true, false, false, false, false, false, false, true, false, true, true, true, false, false, true, false, true, true, false, true, true, false, true, true, false, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, false, false, false, false, false, false, true, false, false, false, true, true, true, true, true, false, true, false, false, false, true, true, true, true, true, false, true, true, false, false, false, true, false, false, true, false, true, true, false, true, false, true, true, false, false, true, true, false, false, false, true, false, true, false, true, false, true, true, true, false, true, true, true, false, true, true, false, true, true, false, false, true, false, true, false, true, true, true, true, false, true, false, false, false, true, false, false, true, true, true, false, false, false, true, false, false, false, true, false, true, true, true, false, false, true, false, true, true, false, true, true, true, false, true, true, false, false, false, false, true, false, false, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, false, false, false, true, false, false, false, true, true, true, true, true, false, true, false, false, false, true, true, true, true, true, false, true, true, false, false, false, true, false, false, true, false, true, true, false, true, false, true, true, false, false, true, true, false, false, false, true, false, true, false, true, false, true, true, true, false, true, true, true, false, false, true, false, true, true, false, false, true, false, true, false, true, true, true, true, false, true, false, false, false, true, false, false, true, true, true, false, false, false, true, false, false, false, true, false, true, true, true, false, false, true, false, true, true, false, true, true, true, false, true, true, false, false, false, false, true, false, false, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, false, true, true, true, true, false, true, false, true, true, false, false, false, true, false, true, true, false, true, false, false, false, false, true, true, true, false, false, false, true, true, false, false, true, false, true, true, true, true, false, true, false, true, false, false, false, true, false, true, true, false, true, true, true, true, true, true, true, false, true, false, true, true, false, false, false, true, false, true, false, false, false, true, true, true, false, false, false, false, false, true, false, false, true, true, true, true, true, false, true, false, true, false, true, false, false, true, true, false, true, false, false, false, true, true, false, true, true, true, false, false, false, false, true, false, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, false, true, true, true, true, false, true, false, true, true, false, false, false, true, false, true, true, false, true, false, false, false, false, true, true, true, false, false, false, true, true, false, false, true, false, true, true, true, true, false, true, false, true, false, false, false, true, false, true, true, false, true, true, true, true, true, true, true, false, true, false, true, true, false, false, false, true, false, true, false, false, false, true, true, true, false, false, false, false, false, true, false, false, true, true, true, true, true, false, true, false, false, true, false, true, false, false, true, true, false, true, false, false, false, true, true, false, false, true, true, true, false, false, false, true, false, true, false, true, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, false, true, true, true, true, false, true, false, true, true, false, false, false, true, false, true, true, false, true, false, false, false, false, true, true, true, false, false, true, true, true, false, false, true, false, true, true, true, true, false, true, false, true, false, false, false, true, false, true, true, false, true, true, true, true, true, true, true, false, true, false, true, true, false, false, false, true, false, true, false, false, false, true, true, true, false, false, false, false, false, true, false, false, true, true, true, true, true, false, true, false, false, true, false, true, false, false, true, true, false, true, false, false, false, true, true, false, false, true, true, true, false, false, false, true, false, true, false, true, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, true, true, false, true, true, true, true, true, true, false, false, true, true, true, false, true, true, true, false, false, true, true, true, true, true, false, false, true, false, true, false, false, true, false, false, false, true, true, true, true, false, true, true, false, true, true, true, true, false, false, true, false, true, false, true, false, true, false, false, false, true, true, false, true, false, false, true, false, false, false, false, false, false, false, false, true, false, true, true, true, true, true, false, true, false, true, true, false, true, true, true, true, true, false, false, false, false, false, true, false, true, true, false, false, true, true, false, true, true, true, true, false, false, true, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, true, true, false, true, true, true, true, true, true, false, false, true, true, true, false, true, true, true, false, false, true, true, true, true, true, false, false, true, false, true, false, false, true, false, false, false, true, true, true, true, false, true, true, false, true, true, true, true, false, false, true, false, true, false, true, false, true, false, false, false, true, true, false, true, false, false, true, false, false, false, false, false, false, false, false, true, false, true, true, true, true, true, false, true, false, true, true, false, true, true, true, true, true, true, false, false, false, false, false, true, false, true, true, false, false, true, true, true, false, true, true, true, true, true, false, false, true, false, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, true, true, false, true, true, true, true, true, true, false, false, true, true, true, false, true, true, true, false, true, true, true, true, true, true, false, false, true, false, true, false, false, true, false, false, false, true, true, true, true, false, true, true, false, true, true, true, true, false, false, true, false, true, false, true, false, true, false, false, false, true, true, false, true, false, false, true, false, false, false, false, false, false, false, false, true, false, true, true, true, true, true, false, true, false, true, true, false, true, true, true, true, true, true, false, false, false, false, false, true, false, true, true, false, false, true, true, true, false, true, true, true, true, true, false, false, true, false, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, true, false, true, true, true, true, false, true, false, false, true, false, true, true, true, true, false, true, false, true, true, true, false, false, false, true, true, true, true, true, false, true, true, false, true, false, true, false, true, false, true, false, false, true, false, false, true, true, false, false, true, false, true, true, false, true, false, true, false, true, false, true, true, true, false, false, false, true, true, false, true, true, true, false, false, true, true, false, false, true, false, false, false, true, true, true, true, true, true, true, true, true, true, false, true, true, false, false, true, false, false, false, false, true, false, false, false, false, false, false, true, false, false, true, true, false]);
            let encoded = BinVector::from_bools(&[false, false, false, true, true, false, true, true, true, true, false, true, false, false, true, false, true, true, true, true, false, true, false, true, true, true, false, false, false, true, true, true, true, true, false, true, true, false, true, false, true, false, true, false, true, false, false, true, false, false, true, true, false, false, true, false, true, true, false, true, false, true, false, true, false, true, true, true, false, false, false, true, true, false, true, true, true, false, false, true, true, false, false, true, false, false, false, true, true, true, true, true, true, true, false, true, true, true, false, true, true, false, false, true, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, true, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, true, false, true, true, true, true, false, true, false, false, true, false, true, true, true, true, false, true, false, true, true, true, false, false, false, true, true, true, true, true, false, true, true, false, true, false, true, false, true, false, true, false, false, true, false, false, true, true, false, false, true, false, true, true, false, true, false, true, false, true, false, true, true, true, false, false, false, true, true, false, true, true, true, false, false, true, true, false, false, true, false, false, false, true, true, true, true, true, true, true, false, true, true, true, false, true, true, false, false, true, false, false, false, true, true, false, false, false, false, false, false, false, true, false, false, false, true, true, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, true, true, true, false, true, true, false, true, false, false, true, false, false, false, false, true, false, false, true, true, true, true, false, true, true, false, true, true, false, true, true, true, false, false, true, false, false, true, false, true, false, true, false, true, false, false, false, true, false, false, false, false, false, true, true, true, true, true, false, false, false, true, true, true, true, true, false, true, true, true, false, false, false, false, false, false, false, false, true, false, false, false, false, false, true, true, true, true, false, false, false, true, true, true, true, false, true, false, true, false, false, false, false, false, true, false, true, true, false, true, true, true, true, false, true, true]);
            let encoded = BinVector::from_bools(&[false, false, true, true, true, true, true, false, true, true, false, true, false, false, true, false, false, false, false, true, false, false, true, true, true, true, false, true, true, false, true, true, false, true, true, true, false, false, true, false, false, true, false, true, false, true, false, true, false, false, false, true, false, false, false, false, false, true, true, true, true, true, false, false, false, true, true, true, true, true, false, true, true, true, false, false, false, false, false, false, false, false, true, false, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, true, false, true, false, false, false, false, false, true, false, false, true, true, false, true, true, true, false, true, false, true, false, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, true, true, true, false, true, true, false, true, false, false, true, false, false, false, false, true, false, false, true, true, true, true, false, true, true, false, true, false, false, true, true, true, false, false, true, false, false, true, false, true, false, true, false, true, false, false, false, true, false, false, false, false, false, true, true, true, true, true, false, false, false, true, true, true, true, true, false, true, true, true, false, false, false, false, false, false, false, false, true, false, false, false, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, true, false, true, false, false, false, false, false, true, false, false, true, true, false, true, true, true, false, true, false, true, false, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, true, true, true, false, true, true, true, true, false, true, false, false, true, false, false, true, false, false, true, false, true, true, true, false, false, true, true, true, false, true, true, true, false, true, false, true, true, false, false, true, true, true, false, true, true, false, true, true, false, true, false, true, true, false, true, false, true, false, true, true, false, false, true, false, false, false, true, false, true, false, false, false, false, true, true, false, true, false, true, false, false, false, false, true, false, false, false, true, false, true, true, false, false, false, true, true, false, false, false, false, true, false, true, false, true, true, true, false, false, false, false, true, false, true, false, false]);
            let encoded = BinVector::from_bools(&[true, true, false, true, true, true, true, false, true, true, true, true, false, true, false, false, true, false, false, true, false, false, true, false, true, true, true, false, false, true, true, true, false, true, true, true, false, true, false, true, true, false, false, true, true, true, false, true, true, false, true, true, false, true, false, true, true, false, true, false, true, false, true, true, false, false, true, false, false, false, true, false, true, false, false, false, false, true, true, false, true, false, true, false, false, false, false, true, false, false, false, true, false, true, true, true, false, false, false, true, true, false, false, false, false, true, false, true, false, true, false, true, true, false, false, false, false, true, true, false, true, false, false, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, true, true, true, false, true, true, true, true, false, true, false, false, true, false, false, true, false, false, true, false, true, true, true, false, false, true, true, true, false, true, true, true, false, true, false, true, true, false, false, true, true, true, false, true, true, false, true, true, false, true, false, true, true, false, true, false, true, false, true, true, false, true, true, false, false, false, true, false, true, false, false, false, false, true, true, false, true, false, true, false, false, false, false, true, false, false, false, true, false, true, true, true, false, false, false, true, true, false, false, false, false, true, false, true, false, true, false, true, true, false, false, false, false, true, true, false, true, false, false, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, true, false, false, true, false, true, false, true, true, true, false, false, false, true, false, true, true, true, true, true, false, false, true, true, true, false, false, false, false, false, true, true, false, false, false, true, true, false, false, true, false, false, true, false, true, true, true, false, false, true, true, false, true, false, false, true, true, false, false, false, true, false, true, false, false, false, false, false, false, false, true, false, true, true, false, false, false, true, false, false, false, false, true, true, false, false, true, false, false, false, false, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, false, false, true, false, true, false, false, true, true, false]);
            let encoded = BinVector::from_bools(&[false, true, false, true, true, false, false, true, false, true, false, true, true, true, false, false, false, true, false, true, true, true, true, true, false, false, true, true, true, false, false, false, false, false, true, true, false, false, false, true, true, false, false, true, false, false, true, false, true, true, true, false, false, true, true, false, true, false, false, true, true, false, false, false, true, false, true, false, false, false, false, false, false, false, true, false, true, true, false, false, false, true, false, false, false, false, true, true, false, false, true, false, false, false, true, false, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, false, false, false, true, false, true, false, false, false, true, true, true, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, true, false, false, true, false, true, false, true, true, true, false, false, false, true, false, true, true, true, true, true, false, false, true, true, true, false, false, false, false, false, false, true, false, false, false, true, true, false, false, true, false, false, true, false, true, true, true, false, false, true, true, false, true, false, false, true, true, false, false, false, true, false, true, false, false, false, false, false, false, false, true, false, true, true, false, false, false, true, false, false, false, false, true, true, false, false, true, false, false, false, true, false, false, true, false, true, false, false, false, false, true, false, false, true, false, false, false, false, false, false, true, false, true, false, false, false, true, true, true, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, true, false, true, true, true, false, false, true, true, false, false, false, true, true, true, false, false, true, false, true, false, true, true, false, true, true, true, false, false, true, true, false, true, false, false, false, true, false, false, false, true, true, true, false, true, false, true, false, false, true, false, false, false, false, true, false, true, false, false, true, false, true, false, true, false, false, true, true, true, true, true, true, false, true, false, true, true, true, false, false, true, false, false, false, true, false, false, true, false, false, false, true, true, false, false, true, false, true, true, false, true, true, false, true, true, true, false, true, false, false, false, false, false, false, false, false]);
            let encoded = BinVector::from_bools(&[false, false, true, false, true, false, true, true, true, false, false, true, true, false, false, false, true, true, true, false, false, true, false, true, false, true, true, false, true, true, true, false, false, true, true, false, true, false, false, false, true, false, false, false, true, true, true, false, true, false, true, false, false, true, false, false, false, false, true, false, true, false, false, true, false, true, false, true, false, false, true, true, true, true, true, true, false, true, false, true, true, true, false, false, true, false, false, false, true, false, false, true, false, false, false, false, true, true, false, false, true, false, true, true, false, true, true, false, true, true, false, true, false, true, false, false, false, false, false, false, false, false, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, true, false, true, true, true, false, false, true, true, false, false, false, true, true, true, false, false, true, false, true, false, true, true, false, true, true, true, false, false, true, true, false, true, false, false, false, true, false, false, false, true, true, true, false, true, false, true, false, true, true, false, false, false, false, true, false, true, false, false, true, false, true, false, true, false, false, true, true, true, true, true, true, false, true, false, true, true, true, false, false, true, false, false, false, true, false, false, true, false, false, false, false, true, true, false, false, true, false, true, true, false, true, true, false, true, true, false, true, false, true, false, false, false, false, false, false, false, false, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, true, false, true, false, true, false, false, true, false, true, true, false, false, true, true, true, true, true, true, false, true, false, false, false, true, true, true, true, true, false, false, true, true, true, false, false, false, false, false, true, true, true, false, true, true, false, false, true, false, true, false, true, true, true, true, true, true, false, false, true, false, false, true, true, true, false, true, false, false, true, false, false, false, false, true, false, true, true, true, true, false, false, true, true, true, true, false, true, false, true, false, false, true, false, false, true, true, true, false, true, false, true, false, false, true, false, false, false, false, true, false, false, true, false, false, false]);
            let encoded = BinVector::from_bools(&[false, true, true, true, true, false, true, false, true, false, false, true, false, true, true, false, false, true, true, true, true, true, true, false, true, false, false, false, true, true, true, true, true, false, false, true, true, true, false, false, false, false, false, true, true, true, false, true, true, false, false, true, false, true, false, true, true, true, true, true, true, false, false, true, false, false, true, true, true, false, true, false, false, true, false, false, false, false, true, false, true, true, true, true, false, false, true, true, true, true, false, true, false, true, true, false, false, true, false, false, true, true, true, false, true, false, true, false, false, true, false, false, false, false, false, true, false, false, false, true, false, false, false, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, true, false, true, false, true, false, false, true, false, true, true, false, false, true, true, true, true, true, true, false, true, false, false, false, true, true, true, true, true, false, false, true, true, true, false, false, false, false, false, true, true, true, false, true, true, false, false, true, false, true, false, true, true, true, true, true, true, false, false, true, false, false, true, true, true, false, true, false, false, true, false, false, false, false, true, false, true, true, true, true, true, false, true, true, true, true, false, true, false, true, true, false, false, true, false, false, true, true, true, false, true, false, true, false, false, true, false, false, false, false, false, true, false, false, false, true, false, false, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, false, false, true, true, true, false, false, false, false, false, false, false, true, true, true, false, true, false, true, true, false, true, false, false, false, false, false, true, true, false, false, false, true, true, true, false, false, false, false, false, true, true, false, false, true, false, true, false, false, false, true, true, false, false, true, true, true, false, true, true, true, false, true, true, true, false, false, false, false, false, true, true, false, true, false, false, false, true, true, false, false, true, false, false, true, false, false, true, true, false, false, true, false, true, false, true, false, true, false, false, true, true, false, true, true, false, true, false, false, true, true, true, false, false, true, false]);
            let encoded = BinVector::from_bools(&[false, false, true, false, false, false, true, true, true, false, false, false, false, false, false, false, true, true, true, false, true, false, true, true, false, true, false, false, false, false, false, true, true, false, false, false, true, true, true, false, false, false, false, false, true, true, false, false, true, false, true, false, false, false, true, true, false, false, true, true, true, false, true, true, true, false, true, true, true, false, false, false, false, false, true, true, false, true, false, false, false, true, true, false, false, true, false, false, true, false, false, true, true, false, true, false, true, false, true, false, true, false, true, false, false, true, true, false, true, true, true, false, true, false, false, true, true, true, true, false, false, true, true, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, false, false, true, true, true, false, false, false, false, false, false, false, true, true, true, false, true, false, true, true, false, true, false, false, false, false, false, true, true, false, false, false, true, true, true, false, false, false, false, false, true, true, false, false, true, false, true, false, false, false, true, true, false, false, true, true, true, false, true, true, true, false, true, true, true, false, false, false, true, false, true, true, false, true, false, false, false, true, true, false, false, true, false, false, true, false, false, true, true, false, true, false, true, false, true, false, true, false, true, false, false, true, true, false, true, true, true, false, true, false, false, true, true, true, true, false, false, true, true, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, true, false, false, true, false, true, true, true, true, true, false, false, false, true, true, false, true, true, true, false, true, true, false, true, false, true, true, false, false, true, false, true, true, true, false, false, false, true, false, false, false, false, false, true, true, true, true, false, false, false, false, false, false, false, true, true, false, false, true, false, true, true, true, false, true, false, true, false, false, false, true, true, false, true, false, true, false, false, false, true, false, false, true, false, false, true, false, true, true, false, true, false, true, false, false, true, false, true, true, false, false, false, false, true, true, true, true, true, false, false, false, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, false, false, true, false, false, true, false, true, true, true, true, true, false, false, false, true, true, false, true, true, true, false, true, true, false, true, false, true, true, false, false, true, false, true, true, true, false, false, false, true, false, false, false, false, false, true, true, true, true, false, false, false, false, false, false, false, true, true, false, false, true, false, true, true, true, false, true, false, true, false, false, false, true, true, false, true, false, true, false, false, false, true, false, false, true, false, false, true, false, true, true, false, false, true, false, true, false, false, true, false, true, true, false, false, false, false, true, true, false, true, true, true, false, false, false, true, true, true, true, false, true, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, true, false, false, true, false, true, true, true, true, true, false, false, false, true, true, false, true, true, true, false, true, true, false, true, false, true, true, false, false, true, false, true, true, true, false, false, false, true, false, false, false, false, false, true, true, true, true, false, false, false, false, false, false, false, true, true, false, false, true, false, true, true, true, false, true, false, true, false, false, false, true, true, false, true, false, false, false, false, false, true, false, false, true, false, false, true, false, true, true, false, false, true, false, true, false, false, true, false, true, true, false, false, false, false, true, true, false, true, true, true, false, false, false, true, true, true, true, false, true, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, true, true, true, false, true, true, true, false, false, true, true, false, true, false, false, false, false, true, true, true, false, true, false, false, false, false, false, true, false, false, true, true, true, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, false, false, false, false, false, false, false, true, false, true, false, true, true, false, false, false, true, false, true, false, true, false, true, true, false, true, false, true, false, true, true, true, false, true, true, true, true, false, false, false, false, true, true, false, true, true, true, false, true, true, false, false, true, true, false, false, false, true, true, true, true, true, true, true, false, false, true, false]);
            let encoded = BinVector::from_bools(&[true, true, true, false, true, true, true, false, true, true, true, false, false, true, true, false, true, false, false, false, false, true, true, true, false, true, false, false, false, false, false, true, false, false, true, true, true, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, false, false, false, false, false, false, false, true, false, true, false, true, true, false, false, false, true, false, true, false, true, false, true, true, false, true, false, true, false, true, true, true, false, true, true, true, true, false, false, false, false, true, true, true, false, true, true, true, false, true, true, false, false, true, true, false, false, false, true, true, true, true, true, true, true, true, false, false, false, true, true, false, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, true, true, true, false, true, true, true, false, false, true, true, false, true, false, false, false, false, true, true, true, false, true, false, false, false, false, false, true, false, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, false, false, false, false, false, false, false, true, false, true, false, true, true, false, false, false, true, false, true, false, true, false, true, true, false, true, false, true, false, true, true, true, false, true, true, true, true, false, false, false, false, true, true, true, false, true, true, true, false, true, true, false, false, true, true, false, false, false, true, true, true, true, true, true, true, true, false, false, false, true, true, false, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, true, true, true, false, true, true, true, true, false, true, true, true, false, true, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, true, true, false, false, false, false, false, true, true, true, true, false, true, false, true, false, false, false, true, true, false, true, true, false, true, true, false, true, false, true, false, true, true, true, false, true, false, false, false, false, false, true, true, true, false, true, false, false, true, false, false, false, true, false, false, true, true, true, true, true, false, false, true, false, true, false, true, true, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[false, true, true, true, true, true, true, false, true, true, true, true, false, true, true, true, false, true, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, true, true, false, false, false, false, false, true, true, true, true, false, true, false, true, false, false, false, true, true, false, true, true, false, true, true, false, true, false, true, false, true, true, true, false, true, false, false, false, false, false, true, true, true, false, true, false, false, true, false, false, false, true, false, false, true, true, true, true, true, false, false, false, true, false, true, false, true, true, false, false, false, false, false, false, true, true, false, false, true, false, true, false, true, true, true, true, true, false, false, false, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, true, true, true, false, true, true, true, true, false, true, true, true, false, true, true, false, true, false, false, false, true, false, true, true, false, false, false, true, false, true, true, false, false, false, false, false, true, true, true, true, false, true, true, true, false, false, false, true, true, false, true, true, false, true, true, false, true, false, true, false, true, true, true, false, true, false, false, false, false, false, true, true, true, false, true, false, false, true, false, false, false, true, false, false, true, true, true, true, true, false, false, false, true, false, true, false, true, true, false, false, false, false, false, false, true, true, false, false, true, false, true, false, true, true, true, true, true, false, false, false, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, false, true, false, true, true, false, false, true, true, false, true, true, true, true, true, false, true, false, false, true, false, true, false, true, false, false, false, false, true, true, false, true, true, false, true, false, false, true, false, true, false, false, true, true, true, false, true, false, false, true, false, true, true, true, false, false, false, true, true, true, false, true, true, false, true, false, true, true, true, false, true, false, true, true, false, true, true, false, false, false, true, false, true, true, false, false, true, false, true, true, false, true, false, true, true, true, true, true, true, true, true, true, true, true, false, true, false, true, true, false, true, true, true, true, true, true]);
            let encoded = BinVector::from_bools(&[false, false, true, true, false, true, false, true, true, false, false, true, true, false, true, true, true, true, true, false, true, false, false, true, false, true, false, true, false, false, false, false, true, true, false, true, true, false, true, false, false, true, false, true, false, false, true, true, true, false, true, false, false, true, false, true, true, true, false, false, false, true, true, true, false, true, true, false, true, false, true, true, true, false, true, false, true, true, false, true, true, false, false, false, true, false, true, true, false, false, true, false, true, true, true, false, true, false, true, true, true, true, true, true, true, true, true, true, true, false, true, true, false, true, true, false, true, true, false, true, true, true, true, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, false, true, false, true, true, false, false, true, true, false, true, true, true, true, true, false, true, false, false, true, true, true, false, true, false, false, false, false, true, true, false, true, true, false, true, false, false, true, false, true, false, false, true, true, true, false, true, false, false, true, false, true, true, true, false, false, false, true, true, true, false, true, true, false, true, false, true, true, true, false, true, false, true, true, false, true, true, false, false, false, true, false, true, true, false, false, true, false, true, true, true, false, true, false, true, true, true, true, true, true, true, true, true, true, true, false, true, true, false, true, true, false, true, true, false, true, true, true, true, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, true, true, true, false, true, true, true, true, false, true, true, true, true, true, true, false, true, false, false, true, false, true, false, true, true, true, true, true, false, false, false, true, true, false, true, false, true, false, false, false, false, false, true, false, false, false, true, true, false, true, true, true, false, true, true, true, false, false, false, false, true, true, true, true, true, true, true, true, false, true, true, false, true, false, false, true, false, true, false, false, false, true, true, false, false, false, true, true, true, false, false, true, true, false, true, true, true, true, false, false, true, false, false, true, false, true, false, false, false, true, true, true, true, false, true, false]);
            let encoded = BinVector::from_bools(&[true, false, true, false, true, true, true, false, true, true, true, true, false, true, true, true, true, true, true, false, true, false, false, true, false, true, false, true, true, true, true, true, false, false, false, true, true, false, true, false, true, false, false, false, false, false, true, false, false, false, true, true, false, true, true, true, false, true, true, true, false, false, false, false, true, true, true, true, true, true, true, true, false, true, true, false, true, false, false, true, false, true, false, false, false, true, true, false, false, false, true, true, true, false, false, false, true, true, false, true, true, true, true, false, false, true, false, false, true, false, false, true, false, false, false, true, true, true, true, true, false, true, false, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, true, true, true, false, true, true, true, true, false, true, true, true, true, true, true, false, true, false, false, true, false, true, false, true, true, true, true, true, false, false, false, false, true, false, true, false, true, false, false, false, false, false, true, false, false, false, true, true, false, true, true, true, false, true, true, true, false, false, false, false, true, true, true, true, true, true, true, true, false, true, true, false, true, false, false, true, false, true, false, false, false, true, true, false, false, false, true, true, true, false, false, false, true, true, false, true, true, true, true, false, false, true, false, false, true, false, false, true, false, false, false, true, true, true, true, true, false, true, false, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, false, false, false, true, false, false, false, true, false, true, true, false, true, true, false, false, false, false, false, true, true, true, false, false, true, true, false, true, false, true, true, true, true, false, false, false, true, false, false, false, true, false, true, true, false, false, true, true, true, true, true, true, true, true, false, false, false, false, true, false, false, true, true, false, true, true, false, false, true, true, false, false, true, true, true, true, true, false, true, false, true, false, false, false, true, true, true, false, true, false, false, false, false, false, true, true, true, true, false, false, false, true, false, false, true, false, false, false, false, false, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, false, false, false, true, false, false, false, true, false, true, true, false, true, true, false, false, false, false, false, true, true, true, false, false, true, true, false, true, false, true, true, true, true, false, false, false, true, false, false, false, true, false, true, true, false, false, true, true, true, true, true, true, true, true, false, false, false, false, true, false, false, true, true, false, true, true, false, false, true, true, false, false, true, true, true, true, true, false, true, false, true, false, false, false, true, true, true, false, true, true, false, false, false, false, false, true, true, true, true, false, false, false, true, false, false, false, true, false, false, false, false, false, true, true, true, true, false, true, false, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, true, false, false, false, true, false, false, false, true, false, true, true, false, true, true, false, false, false, false, true, true, true, true, false, false, true, true, false, true, false, true, true, true, true, false, false, false, true, false, false, false, true, false, true, true, false, false, true, true, true, true, true, true, true, true, false, false, false, false, true, false, false, true, true, false, true, true, false, false, true, true, false, false, true, true, true, true, true, false, true, false, true, false, false, false, true, true, true, false, true, true, false, false, false, false, false, true, true, true, true, false, false, false, true, false, false, false, true, false, false, false, false, false, true, true, true, true, false, true, false, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, true, true, true, false, true, false, false, false, true, true, false, true, false, false, true, false, false, false, false, true, false, false, true, true, true, true, false, false, false, true, true, true, false, true, true, true, true, false, true, false, false, true, true, false, true, true, true, true, true, true, false, true, true, true, true, true, true, false, false, true, false, false, false, false, true, true, false, true, true, false, false, true, false, false, false, false, false, false, false, false, false, true, true, false, true, true, false, true, true, true, true, true, true, true, false, true, true, true, false, false, false, false, false, false, false, true, false, false, false, true, true, false, false, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, true, true, true, false, true, false, false, false, true, true, false, true, false, false, true, false, false, false, false, true, false, false, true, true, true, true, false, false, false, true, true, true, false, true, true, true, true, false, true, false, false, true, true, false, true, true, true, true, true, true, false, true, true, true, true, true, true, false, false, true, false, false, false, false, true, true, false, true, true, false, false, true, false, false, false, false, false, false, false, false, false, true, true, false, true, true, false, true, true, false, true, true, true, true, true, false, true, true, true, false, false, false, false, false, false, false, false, true, false, false, false, true, true, false, false, false, false, true, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, true, true, true, false, true, true, false, false, true, true, false, true, false, false, true, false, false, false, false, true, false, false, true, true, true, true, false, false, false, true, true, true, false, true, true, true, true, false, true, false, false, true, true, false, true, true, true, true, true, true, false, true, true, true, true, true, true, false, false, true, false, false, false, false, true, true, false, true, true, false, false, true, false, false, false, false, false, false, false, false, false, true, true, false, true, true, false, true, true, false, true, true, true, true, true, false, true, true, true, false, false, false, false, false, false, false, false, true, false, false, false, true, true, false, false, false, false, true, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, false, true, true, true, true, false, false, true, false, false, false, true, true, false, false, true, true, true, true, false, false, true, true, true, false, false, false, false, false, false, false, true, false, true, false, false, true, true, false, true, true, false, false, false, false, false, false, true, true, true, false, true, true, false, false, true, false, true, false, false, false, true, true, false, true, true, true, true, true, true, false, false, true, false, true, true, true, false, true, false, false, false, true, false, true, true, false, true, false, false, true, true, false, true, true, false, false, true, false, false, true, true, false, true, false, false, false, true, true, true, false, false, false, false, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, false, false, true, true, true, true, false, false, true, false, false, false, true, true, false, false, true, true, true, true, false, false, true, true, true, false, false, false, false, false, false, false, true, false, true, false, false, true, true, false, true, true, false, false, false, false, false, false, true, true, true, false, true, true, false, false, true, false, true, false, false, false, true, true, false, true, true, true, true, true, true, false, false, true, false, true, true, true, false, true, false, false, false, true, false, true, true, false, true, false, false, false, true, true, false, true, true, false, false, true, false, false, true, true, false, true, false, false, false, false, true, true, true, false, false, true, false, false, true, true, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, false, true, true, true, true, false, false, true, false, false, false, true, true, false, false, true, true, true, true, false, false, true, true, true, false, false, false, false, false, false, false, true, false, true, false, false, true, true, false, true, true, false, false, false, false, false, false, true, true, true, false, true, true, false, false, true, false, true, false, false, false, true, true, false, true, true, true, true, false, true, false, false, true, false, true, true, true, false, true, false, false, false, true, false, true, true, false, true, false, false, false, true, true, false, true, true, false, false, true, false, false, true, true, false, true, false, false, false, false, true, true, true, false, false, true, false, false, true, true, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, false, true, false, true, true, false, false, false, true, true, true, false, true, false, true, true, true, true, false, false, true, true, true, true, false, false, false, false, false, false, true, false, true, false, false, false, false, true, true, false, false, true, true, true, false, true, false, false, true, false, false, false, false, true, true, true, true, true, true, false, true, false, false, false, false, true, true, true, false, false, true, false, false, true, false, false, true, false, false, false, true, true, true, false, true, true, false, true, true, false, false, true, true, false, false, true, true, true, false, true, false, true, false, false, true, true, false, false, true, false, false, false, true, true, true, true]);
            let encoded = BinVector::from_bools(&[true, true, true, true, false, true, false, true, true, false, false, false, true, true, true, false, true, false, true, true, true, true, false, false, true, true, true, true, false, false, false, false, false, false, true, false, true, false, false, false, false, true, true, false, false, true, true, true, false, true, false, false, true, false, false, false, false, true, true, true, true, true, true, false, true, false, false, false, false, true, true, true, false, false, true, false, false, true, false, false, true, false, false, false, true, true, true, false, true, true, false, true, true, false, true, false, true, true, false, false, true, true, true, false, true, false, true, false, false, true, false, true, false, false, true, false, false, false, true, true, true, true, false, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, false, true, false, true, true, false, false, false, true, true, true, false, true, false, true, true, true, true, false, false, true, true, true, true, false, false, false, false, false, false, true, false, true, false, false, false, false, true, true, false, false, true, true, true, true, true, false, false, true, false, false, false, false, true, true, true, true, true, true, false, true, false, false, false, false, true, true, true, false, false, true, false, false, true, false, false, true, false, false, false, true, true, true, false, true, true, false, true, true, false, true, false, true, true, false, false, true, true, true, false, true, false, true, false, false, true, false, true, false, false, true, false, false, false, true, true, true, true, false, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, true, false, false, true, false, false, true, true, false, false, false, true, false, false, true, true, false, true, true, false, true, true, false, false, true, true, false, true, true, false, true, true, true, false, true, false, false, false, true, false, true, true, false, true, true, true, false, false, true, false, false, false, true, false, false, false, true, true, true, true, false, true, true, false, false, true, false, true, true, false, true, false, true, false, true, false, true, false, false, true, false, true, true, false, true, false, false, true, false, true, false, false, false, true, true, true, true, false, true, true, false, true, true, true, true, true, true, false, true, false, true, false, true, true, false, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, true, false, false, true, false, false, true, true, false, false, false, true, false, false, true, true, false, true, true, false, true, true, false, false, true, true, false, true, true, false, true, true, true, false, true, false, false, false, true, false, true, true, false, true, true, true, false, false, true, false, false, false, true, false, false, false, true, true, true, true, false, true, true, false, false, true, false, true, true, false, true, false, true, false, true, false, true, false, false, true, false, true, true, false, true, false, false, true, false, true, true, false, false, false, true, true, true, true, false, true, true, false, true, true, true, true, false, true, true, false, true, false, true, false, false, true, true, false, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, true, false, false, true, false, false, true, true, true, false, false, true, false, false, true, true, false, true, true, false, true, true, false, false, true, true, false, true, true, false, true, true, true, false, true, false, false, false, true, false, true, true, false, true, true, true, false, false, true, false, false, false, true, false, false, false, true, true, true, true, false, true, true, false, false, true, false, true, true, false, true, false, true, false, true, false, true, false, false, true, false, true, true, false, true, false, false, true, false, true, true, false, false, false, true, true, true, true, false, true, true, false, true, true, true, true, false, true, true, false, true, false, true, false, false, true, true, false, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, true, true, true, false, false, true, true, true, true, false, false, false, true, true, false, true, false, false, true, true, true, true, true, true, true, false, true, true, true, true, true, false, true, true, true, false, true, false, true, false, true, false, false, true, true, true, false, true, false, true, false, true, false, false, true, false, false, true, true, false, false, true, true, false, true, false, true, true, true, true, true, false, true, true, false, true, true, true, true, false, false, true, true, false, false, true, true, true, true, false, true, true, true, true, true, false, false, false, false, true, false, true, true]);
            let encoded = BinVector::from_bools(&[false, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, true, true, true, false, false, true, true, true, true, false, false, false, true, true, false, true, false, false, true, true, true, true, true, true, true, false, true, true, true, true, true, false, true, true, true, false, true, false, true, false, true, false, false, true, true, true, false, true, false, true, false, true, false, false, true, false, false, true, true, false, false, true, true, false, true, false, true, true, true, true, true, false, true, true, false, true, true, false, true, true, false, false, true, true, false, false, true, true, true, true, false, true, true, true, true, true, true, false, false, false, false, true, true, false, true, true, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, true, true, false, false, true, false, true, false, true, false, true, true, false, true, false, true, false, false, true, true, true, true, false, false, false, true, true, false, true, false, false, true, true, true, true, true, true, true, false, true, true, true, true, true, false, true, true, true, false, true, false, true, false, true, false, false, true, true, true, false, true, false, true, false, true, false, false, true, false, false, true, true, false, false, true, true, false, true, false, true, true, true, true, true, false, true, true, false, true, true, false, true, true, false, false, true, true, false, false, true, true, true, true, false, true, true, true, true, true, true, false, false, false, false, true, true, false, true, true, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, true, false, false, false, true, true, false, false, true, true, true, false, true, false, false, false, true, true, false, true, false, true, false, true, true, true, true, true, false, true, false, true, false, true, true, true, false, true, true, true, false, false, true, false, false, false, false, false, true, true, false, true, true, false, true, false, true, true, false, false, false, false, true, false, false, false, false, false, true, true, false, false, true, false, false, false, false, false, false, true, true, true, false, true, false, true, true, true, true, true, false, false, false, true, false, true, true, true, true, true, false, true, false, true, false, true, true, true, false, true, false, false, false, true, true, false]);
            let encoded = BinVector::from_bools(&[true, true, true, true, true, false, false, false, true, true, false, false, true, true, true, false, true, false, false, false, true, true, false, true, false, true, false, true, true, true, true, true, false, true, false, true, false, true, true, true, false, true, true, true, false, false, true, false, false, false, false, false, true, true, false, true, true, false, true, false, true, true, false, false, false, false, true, false, false, false, false, false, true, true, false, false, true, false, false, false, false, false, false, true, true, true, false, true, false, true, true, true, true, true, false, false, false, false, true, false, true, true, true, true, true, false, true, false, true, false, false, true, true, true, false, true, false, false, true, false, true, true, true, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, true, false, false, false, true, false, false, false, true, true, true, false, true, false, false, false, true, true, false, true, false, true, false, true, true, true, true, true, false, true, false, true, false, true, true, true, false, true, true, true, false, false, true, false, false, false, false, false, true, true, false, true, true, false, true, false, true, true, false, false, false, false, true, false, false, false, false, false, true, true, false, false, true, false, false, false, false, false, false, true, true, true, false, true, false, true, true, true, true, true, false, false, false, false, true, false, true, true, true, true, true, false, true, false, true, false, false, true, true, true, false, true, false, false, true, false, true, true, true, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, false, false, false, true, true, false, true, false, false, false, false, false, true, false, true, false, false, true, true, false, true, true, true, true, true, true, true, true, true, true, false, false, true, false, false, true, false, true, false, false, true, false, false, true, false, true, true, false, false, false, true, false, false, true, false, true, true, false, true, false, false, true, true, true, false, true, false, true, true, true, true, true, true, false, true, false, true, false, false, true, true, false, true, false, true, true, true, true, false, false, false, false, true, true, false, true, false, true, false, false, true, true, false, true, true, false, false, false, false, false, false, false, false, true, false, true]);
            let encoded = BinVector::from_bools(&[false, false, true, false, false, false, false, true, true, false, true, false, false, false, false, false, true, false, true, false, false, true, true, false, true, true, true, true, true, true, true, true, true, true, false, false, true, false, false, true, false, true, false, false, true, false, false, true, false, true, true, false, false, false, true, false, false, true, false, true, true, false, true, false, false, true, true, true, false, true, false, true, true, true, true, true, true, false, true, false, true, false, false, true, true, false, true, false, true, true, true, true, false, false, false, false, false, true, true, false, true, false, true, false, false, true, true, false, true, true, false, false, false, false, false, false, false, false, true, false, true, false, true, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, false, false, false, true, true, false, true, false, false, false, false, false, true, false, true, false, false, true, true, false, true, true, true, true, true, true, true, true, true, true, false, false, true, false, false, true, false, true, false, false, true, false, false, true, false, true, true, false, false, false, true, false, false, true, false, true, true, false, true, false, false, true, true, true, false, true, false, true, true, true, true, true, true, false, true, false, true, false, false, true, true, false, true, false, true, true, true, true, false, false, false, false, false, true, true, false, true, false, true, false, false, true, false, false, true, true, false, false, false, false, false, false, false, false, true, false, true, false, true, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, false, true, true, true, false, true, false, true, false, false, true, true, false, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, false, true, false, false, true, false, false, false, true, false, true, true, false, true, true, false, false, false, true, false, false, false, false, true, false, false, false, true, true, false, false, true, true, true, true, true, false, true, true, false, false, false, true, false, true, false, false, false, false, false, true, false, false, true, false, true, true, true, false, true, true, false, false, true, true, false, false, false, false, false, true, false, true, true, true, false, false, false, false, false, true, false, false, true, false, true]);
            let encoded = BinVector::from_bools(&[false, false, true, true, false, true, true, true, false, true, false, true, false, false, true, true, false, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, false, true, false, false, true, false, false, false, true, false, true, true, false, true, true, false, false, false, true, false, false, false, false, true, false, false, false, true, true, false, false, true, true, true, true, true, false, true, true, false, false, false, true, false, true, false, false, false, false, false, true, false, false, true, false, true, true, true, false, true, false, true, false, false, true, true, false, false, false, false, false, true, false, true, true, true, false, false, false, false, false, false, true, false, true, false, true, false, false, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, false, true, true, true, false, true, false, true, false, false, true, true, false, true, false, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, false, true, false, false, true, false, false, false, true, false, true, true, false, true, true, false, false, false, true, false, false, false, false, true, false, false, false, true, true, false, false, true, true, true, true, true, false, true, true, false, false, false, true, false, true, false, false, false, false, false, true, false, false, true, false, true, true, true, false, true, false, true, false, false, true, true, false, false, false, false, false, true, false, true, true, true, false, false, false, false, false, false, true, false, true, false, true, false, false, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, false, false, false, false, false, false, true, true, true, true, false, false, true, false, true, false, false, false, true, true, true, false, false, false, false, false, false, false, false, false, true, false, true, true, false, true, false, false, false, true, false, true, true, false, true, true, true, false, false, false, false, true, false, false, false, false, false, false, true, true, false, false, true, false, true, false, false, true, false, false, false, true, true, true, false, true, true, true, false, true, true, false, false, true, false, true, false, true, true, false, true, true, false, true, false, true, false, false, false, false, true, true, false, true, true, false, true, true, true, false, true, false, false, true, true, true]);
            let encoded = BinVector::from_bools(&[false, false, true, true, false, false, false, false, false, false, true, true, true, true, false, false, true, false, true, false, false, false, true, true, true, false, false, false, false, false, false, false, false, false, true, false, true, true, false, true, false, false, false, true, false, true, true, false, true, true, true, false, false, false, false, true, false, false, false, false, false, false, true, true, false, false, true, false, true, false, false, true, false, false, false, true, true, true, false, true, true, true, false, true, true, false, false, true, false, true, false, true, true, false, false, true, true, false, true, false, true, false, false, false, false, true, true, false, true, true, true, false, true, true, true, false, true, false, false, false, true, true, true, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, false, false, false, false, false, false, true, true, true, true, false, false, true, false, true, false, false, false, true, true, true, false, false, false, false, false, false, false, false, false, true, false, true, true, false, true, false, false, false, true, false, false, true, false, true, true, true, false, false, false, false, true, false, false, false, false, false, false, true, true, false, false, true, false, true, false, false, true, false, false, false, true, true, true, false, true, true, true, false, true, true, false, false, true, false, true, false, true, true, false, false, true, true, false, true, false, true, false, false, false, false, true, true, false, true, true, true, false, true, true, true, false, true, false, false, false, true, true, true, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, true, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, true, true, false, false, true, true, true, false, false, false, false, true, false, true, true, true, false, true, true, true, false, true, true, true, true, true, true, true, true, false, false, false, true, true, true, false, true, true, true, false, false, false, false, true, true, true, false, false, true, true, true, false, true, false, false, false, true, true, false, false, false, true, false, true, true, false, false, true, true, false, true, false, false, true, true, false, true, false, true, false, false, true, true, false, true, false, true, true, true, false, false, false, true, false, true, true, true, true, false]);
            let encoded = BinVector::from_bools(&[false, false, false, false, true, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, true, true, false, false, true, true, true, false, false, false, false, true, false, true, true, true, false, true, true, true, false, true, true, true, true, true, true, true, true, false, false, false, true, true, true, false, true, true, true, false, false, false, false, true, true, true, false, false, true, true, true, false, true, false, false, false, true, true, false, false, false, true, false, true, true, false, false, true, true, false, true, false, false, false, true, true, false, true, false, true, false, false, true, true, false, true, false, true, true, false, true, false, false, false, true, false, true, true, true, true, true, true, false, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, true, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, true, true, false, false, true, true, true, false, false, false, false, true, false, true, true, true, false, true, true, true, false, true, true, true, true, true, true, true, true, false, false, false, true, true, true, false, true, true, false, false, false, false, false, true, true, true, false, false, true, true, true, false, true, false, false, false, true, true, false, false, false, true, false, true, true, false, false, true, true, false, true, false, false, false, true, true, false, true, false, true, false, false, true, true, false, true, false, true, true, false, true, false, false, false, true, false, true, true, true, true, true, true, false, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, true, false, true, true, true, false, true, false, false, false, true, false, true, false, false, false, false, false, true, false, true, false, true, true, false, false, false, true, true, true, false, true, false, true, false, false, false, false, true, false, true, true, false, true, true, true, false, true, true, false, true, true, false, false, true, false, false, false, true, true, true, false, true, true, false, true, false, false, true, true, true, true, false, true, true, false, true, true, true, false, true, true, true, true, false, true, false, false, false, true, true, true, true, true, false, false, false, true, true, false, false, false, true, false, true, false, false, true, false, false, false, false, true, true, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, true, false, true, true, true, false, true, false, false, false, true, false, true, false, false, false, false, false, true, false, true, false, true, true, false, false, false, true, true, true, false, true, false, true, false, false, false, false, true, false, true, true, false, true, true, true, false, true, true, false, true, true, false, false, true, false, false, false, true, true, true, false, true, true, false, true, false, false, true, true, true, true, false, true, true, false, true, true, true, false, true, true, true, true, false, true, false, false, false, true, true, true, true, true, true, false, false, false, true, true, false, false, false, true, false, true, true, false, false, true, false, false, false, false, false, true, true, true, true, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, true, false, true, true, true, false, true, false, false, false, true, false, true, false, false, false, false, false, true, false, true, false, true, true, false, false, false, true, true, true, false, true, false, true, false, false, false, false, true, false, true, true, false, true, true, true, false, true, true, false, true, true, false, false, true, false, false, false, true, true, true, false, true, true, false, true, false, false, true, true, true, true, false, true, true, false, true, true, true, true, true, true, true, true, false, true, false, false, false, true, true, true, true, true, true, false, false, false, true, true, false, false, false, true, false, true, true, false, false, true, false, false, false, false, false, true, true, true, true, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, false, false, false, true, false, false, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, true, true, true, false, true, false, true, true, false, true, false, true, false, true, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, false, false, true, false, false, false, true, false, true, true, false, true, false, false, true, false, true, true, false, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, true, false, false, true, true, false, false, true, true, false, true, true, false, true, false, false, false, false, false, true, true, false, true, false, false, false]);
            let encoded = BinVector::from_bools(&[true, true, false, true, false, false, false, true, false, false, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, true, true, true, false, true, false, true, true, false, true, false, true, false, true, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, false, false, true, false, false, false, true, false, true, true, false, true, false, false, true, false, true, true, false, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, false, true, false, false, true, true, false, false, true, true, false, true, true, false, true, false, false, false, false, false, false, true, true, false, true, true, false, false, false, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, false, false, false, true, false, false, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, true, true, true, false, true, false, true, true, false, true, false, true, false, true, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, false, false, true, false, false, false, true, false, true, true, false, true, false, false, true, false, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, false, true, false, false, true, true, false, false, true, true, false, true, true, false, true, false, false, false, false, false, false, true, true, false, true, true, false, false, false, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, false, true, true, true, false, false, false, false, true, false, true, true, true, true, false, true, false, false, false, true, true, false, true, false, false, true, false, false, true, false, true, false, true, false, true, true, false, false, false, false, true, true, false, true, true, true, true, true, false, false, true, true, true, true, true, true, false, true, true, true, false, false, false, false, true, true, false, false, true, true, false, false, false, false, false, false, true, false, false, true, false, false, false, false, true, false, false, true, true, true, true, true, true, false, false, false, false, true, true, true, false, true, false, false, true, false, false, true, false, false, true, true, false, true, false, true]);
            let encoded = BinVector::from_bools(&[true, true, false, false, false, true, true, true, false, false, false, false, true, false, true, true, true, true, false, true, false, false, false, true, true, false, true, false, false, true, false, false, true, false, true, false, true, false, true, true, false, false, false, false, true, true, false, true, true, true, true, true, false, false, true, true, true, true, true, true, false, true, true, true, false, false, false, false, true, true, false, false, true, true, false, false, false, false, false, false, true, false, false, true, false, false, false, false, true, false, false, true, true, true, true, true, true, true, false, false, false, false, true, true, true, false, true, false, false, true, false, false, false, true, false, false, true, true, true, false, true, false, false, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, false, true, true, true, false, false, false, false, true, false, true, true, true, true, false, true, false, false, false, true, true, false, true, false, false, true, false, false, true, false, true, false, true, false, true, true, false, false, false, false, true, true, false, true, true, true, true, true, false, false, true, true, true, true, true, true, false, true, true, true, false, false, false, false, true, true, false, false, true, true, false, false, false, false, false, false, true, false, false, true, false, false, false, false, true, false, false, true, false, true, true, true, true, true, false, false, false, false, true, true, true, false, true, false, false, true, false, false, false, true, false, false, true, true, true, false, true, false, false, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, false, false, false, true, true, true, true, false, true, true, false, false, true, true, true, true, true, true, false, false, true, true, true, true, false, false, false, true, false, true, true, false, true, false, false, false, false, false, true, true, true, false, true, false, true, false, false, false, true, true, true, false, false, false, false, true, true, true, true, false, true, false, true, false, false, false, false, true, true, true, true, true, false, false, true, false, true, false, true, true, false, true, false, true, true, true, true, true, false, true, false, false, false, false, true, false, true, true, true, true, false, false, false, true, true, true, true, false, false, false, false, true, true, true, false, true]);
            let encoded = BinVector::from_bools(&[false, false, true, false, false, false, false, true, true, true, true, false, true, true, false, false, true, true, true, true, true, true, false, false, true, true, true, true, false, false, false, true, false, true, true, false, true, false, false, false, false, false, true, true, true, false, true, false, true, false, false, false, true, true, true, false, false, false, false, true, true, true, true, false, true, false, true, false, false, false, false, true, true, true, true, true, false, false, true, false, true, false, true, true, false, true, false, true, true, true, true, true, false, true, false, false, false, false, false, true, false, true, true, true, true, false, false, false, true, true, true, true, true, false, false, false, false, true, false, true, true, false, true, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, false, false, false, true, true, true, true, false, true, true, false, false, true, true, true, true, true, true, false, false, true, true, true, true, false, false, false, true, false, true, true, false, true, false, false, false, false, false, true, true, true, false, true, false, true, false, false, false, true, true, true, false, false, false, false, true, true, true, true, false, true, false, true, false, false, false, false, true, true, true, true, true, false, false, true, false, true, false, true, true, false, true, false, true, true, true, true, true, false, true, false, false, false, false, false, true, false, true, true, true, true, false, false, false, true, true, true, true, true, false, false, false, false, true, false, true, true, false, false, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, true, false, false, true, true, true, false, false, true, false, false, true, false, false, true, false, false, true, true, true, true, true, false, false, true, true, true, false, true, false, false, true, false, true, true, true, false, false, false, false, false, true, true, false, false, false, true, true, true, true, false, false, false, true, true, true, true, false, true, true, true, true, false, false, true, true, false, false, false, false, false, true, true, true, true, false, true, false, false, true, true, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, false, true, true, false, true, true, false, true, false, false, false, false, false, false, true, true, false, false, false, true]);
            let encoded = BinVector::from_bools(&[true, false, false, true, true, false, false, true, true, true, false, false, true, false, false, true, false, false, true, false, false, true, true, true, true, true, false, false, true, true, true, false, true, false, false, true, false, true, true, true, false, false, false, false, false, true, true, false, false, false, true, true, true, true, false, false, false, true, true, true, true, false, true, true, true, true, false, false, true, true, false, false, false, false, false, true, true, true, true, false, true, false, false, true, true, true, true, true, false, false, false, false, false, false, true, false, true, true, true, true, true, false, true, true, false, true, true, false, true, false, false, false, false, false, false, false, true, true, false, false, false, false, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, true, false, false, true, true, true, false, false, true, false, false, true, false, false, true, false, false, true, true, true, true, true, false, false, true, true, true, false, true, false, false, true, false, true, false, true, false, false, false, false, false, true, true, false, false, false, true, true, true, true, false, false, false, true, true, true, true, false, true, true, true, true, false, false, true, true, false, false, false, false, false, true, true, true, true, false, true, false, false, true, true, true, true, true, false, false, false, false, false, false, true, false, true, true, true, true, true, false, true, true, false, true, true, false, true, false, false, false, false, false, false, false, true, true, false, false, false, false, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, false, false, false, true, true, false, false, true, false, true, true, true, false, true, true, true, false, false, true, true, true, true, false, true, false, false, false, false, false, true, false, false, true, true, true, true, true, true, false, true, false, true, true, false, false, false, false, true, false, false, false, true, false, false, false, false, true, true, true, false, false, false, true, true, false, false, true, false, false, true, false, false, true, true, false, true, false, true, false, true, false, false, false, true, false, false, false, true, true, false, true, true, true, true, true, false, true, false, false, false, true, false, false, false, true, false, true, false, true, false, false, true, true, true, false, true]);
            let encoded = BinVector::from_bools(&[false, false, false, true, false, false, false, true, true, false, false, true, false, true, true, true, false, true, true, true, false, false, true, true, true, true, false, true, false, false, false, false, false, true, false, false, true, true, true, true, true, true, false, true, false, true, true, false, false, false, false, true, false, false, false, true, false, false, false, false, true, true, true, false, false, false, true, true, false, false, true, false, false, true, false, false, true, true, false, true, false, true, false, true, false, false, false, true, false, false, false, true, true, false, true, true, true, true, true, true, false, true, false, false, false, true, false, false, false, true, false, false, true, false, true, false, false, true, false, true, true, false, true, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, false, false, false, true, true, false, false, true, false, true, true, true, false, true, true, true, false, false, true, true, true, true, false, true, false, false, false, false, false, true, false, false, true, true, true, true, true, true, false, true, false, true, true, false, false, false, false, true, false, false, false, true, false, false, false, false, true, true, true, false, false, false, true, true, false, false, true, false, false, true, false, false, true, true, false, true, false, true, false, true, false, false, false, true, false, false, false, true, true, false, true, true, true, true, true, true, false, true, false, true, false, true, false, false, false, true, false, false, true, false, true, false, false, true, false, true, true, false, true, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, true, false, false, false, true, true, false, true, true, false, false, false, true, true, true, true, true, false, false, true, false, false, true, true, false, false, false, false, false, true, false, false, false, true, false, true, true, false, false, true, true, false, true, false, false, false, true, true, true, true, true, false, true, false, true, true, false, false, true, true, false, false, false, false, false, false, true, true, true, false, false, false, true, false, false, false, false, true, true, true, false, true, false, true, false, true, false, false, false, false, false, true, true, false, false, true, false, false, true, false, false, false, false, true, true, true, true, false, true, true, false, true, false, false, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, true, false, false, false, true, true, false, true, true, false, false, false, true, true, true, true, true, false, false, true, false, false, true, true, false, false, false, false, false, true, false, false, false, true, false, true, true, false, false, true, true, false, true, false, false, false, true, true, true, true, true, false, true, false, true, true, false, false, true, true, false, false, false, false, false, false, true, true, true, false, false, false, true, false, false, false, false, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, true, true, false, false, true, false, false, true, false, false, false, false, true, true, false, true, true, false, true, true, false, true, false, false, false, true, false, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, true, false, false, false, true, true, false, true, true, false, false, false, true, true, true, true, true, false, false, true, false, false, true, true, false, false, false, false, false, true, false, false, false, true, false, true, true, false, false, true, true, false, true, false, false, false, true, true, true, true, true, false, true, true, true, true, false, false, true, true, false, false, false, false, false, false, true, true, true, false, false, false, true, false, false, false, false, true, true, true, false, true, false, true, false, true, false, false, false, false, true, false, true, true, false, false, true, false, false, true, false, false, false, false, true, true, false, true, true, false, true, true, false, true, false, false, false, true, false, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, true, true, true, false, false, false, true, true, true, true, true, true, false, true, false, true, false, true, false, false, false, true, true, true, false, false, false, false, false, true, true, false, false, true, true, false, false, true, false, true, true, true, false, false, false, false, true, true, true, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, true, true, true, false, true, true, false, false, false, true, false, false, false, false, false, true, true, true, false, false, false, true, false, true, true, true, false, false, true, true, false, false, true, false, true, true, true, false, false, false, true, false, true, false, true, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, false, true, true, true, false, false, false, true, true, true, true, true, true, false, true, false, true, false, true, false, false, false, true, true, true, false, false, false, false, false, true, true, false, false, true, true, false, false, true, false, true, true, true, false, false, false, false, true, true, true, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, true, true, true, false, true, true, false, false, false, true, false, false, false, false, false, true, true, true, false, false, false, true, false, false, true, true, true, false, false, true, true, false, false, true, false, true, true, true, false, true, false, false, true, false, true, false, true, true, false, true, false, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, true, true, true, false, false, false, true, true, true, true, true, true, false, true, false, true, false, true, false, false, false, true, true, true, false, false, false, false, false, true, true, false, false, true, true, false, false, true, false, true, true, true, false, false, false, false, true, true, true, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, true, true, true, false, true, true, false, false, false, true, false, false, false, false, false, true, true, true, false, false, false, true, false, false, true, true, true, false, false, true, true, false, false, true, false, false, true, true, false, true, false, false, true, false, true, false, true, true, false, true, false, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, false, false, false, true, true, false, true, true, true, true, false, true, true, true, false, true, false, true, true, false, false, true, true, true, true, true, false, false, false, false, true, true, false, true, true, true, false, false, false, false, false, false, true, false, true, true, true, true, true, false, false, false, true, false, false, false, false, true, false, true, true, true, false, true, true, false, true, false, true, false, false, false, true, false, false, false, false, false, false, true, true, true, true, false, false, false, false, false, false, false, true, false, true, true, false, false, true, false, false, false, true, false, false, false, false, false, false, true, false, true, true, false, true, false, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, false, false, false, false, true, true, false, true, true, true, true, false, true, true, true, false, true, false, true, true, false, false, true, true, true, true, true, false, false, false, false, true, true, false, true, true, true, false, false, false, false, false, false, true, false, true, true, true, true, true, false, false, false, true, false, false, false, false, true, false, true, true, true, false, true, true, false, true, false, true, false, false, false, true, false, false, false, false, false, false, true, true, true, true, false, false, false, false, false, false, false, true, true, false, true, true, false, false, true, false, false, false, true, false, false, false, false, true, false, false, true, false, true, true, false, false, true, false, false, false, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, false, false, false, true, true, false, true, true, true, true, false, true, true, true, false, true, false, true, true, false, false, true, true, true, true, true, false, false, false, false, true, true, false, true, true, true, false, false, false, false, false, false, true, false, true, true, true, true, true, false, false, false, true, false, false, false, false, true, false, true, true, true, false, true, true, false, true, false, true, false, false, false, true, false, false, false, false, false, false, true, true, true, true, false, false, false, false, false, false, false, false, true, false, true, true, false, false, true, false, false, false, true, false, false, false, false, true, false, false, true, false, true, true, false, false, true, false, false, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, false, true, false, false, true, true, true, false, true, false, false, false, true, false, true, false, true, true, true, true, true, true, true, true, true, false, false, true, false, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, true, false, true, false, false, true, true, true, false, false, true, false, true, true, false, true, true, false, true, true, false, false, true, true, true, true, true, false, true, true, false, true, false, false, true, false, false, true, false, false, true, false, false, false, false, false, true, false, false, false, true, true, true, false, true, true, false, true, false, true, true, true, true, false, true, false, true, false]);
            let encoded = BinVector::from_bools(&[false, false, true, true, false, true, false, false, true, true, true, false, true, false, false, false, true, false, true, false, true, true, true, true, true, true, true, true, true, false, false, true, false, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, true, false, true, false, false, true, true, true, false, false, true, false, true, true, false, true, true, false, true, true, false, false, true, true, true, true, true, false, true, true, false, true, false, false, true, false, false, true, false, false, true, false, true, false, false, false, false, true, false, false, false, true, true, true, false, true, true, false, false, true, false, true, true, true, true, false, true, true, false, true, true, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, false, true, false, false, true, true, true, false, true, false, false, false, true, false, true, false, true, true, true, true, true, true, true, true, true, false, false, true, false, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, true, false, true, false, false, true, true, true, false, false, true, false, true, true, false, true, true, false, true, true, false, false, true, true, true, true, true, false, true, true, false, true, false, false, true, false, false, true, false, false, true, false, true, false, false, false, false, true, false, false, false, true, true, true, false, true, true, false, false, true, false, true, true, true, true, false, true, true, false, true, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, true, true, false, true, true, false, false, false, true, false, false, true, false, false, true, true, false, false, false, false, false, true, false, true, true, false, false, false, true, false, false, true, true, false, false, true, false, false, false, false, true, false, false, false, true, false, true, false, false, true, true, true, true, false, false, false, false, true, false, true, true, true, false, false, true, true, false, true, true, true, false, true, true, true, true, true, false, false, false, true, true, false, true, false, false, false, true, false, true, false, true, false, true, true, true, false, true, false, false, false, false, true, false, true, true, false, true, false, false, false, true, true, true, true, true, false]);
            let encoded = BinVector::from_bools(&[false, false, true, false, true, true, false, true, true, false, false, false, true, false, false, true, false, false, true, true, false, false, false, false, false, true, false, true, true, false, false, false, true, false, false, true, true, false, false, true, false, false, false, false, true, false, false, false, true, false, true, false, false, true, true, true, true, false, false, false, false, true, false, true, true, true, false, false, true, true, false, true, true, true, false, true, true, true, true, true, false, false, false, true, true, false, true, false, false, false, true, false, true, false, false, true, false, true, true, true, false, true, false, false, false, false, true, false, true, true, true, false, true, false, false, false, true, true, false, true, true, true, false, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, true, true, false, true, true, false, false, false, true, false, false, true, false, false, true, true, false, false, false, false, false, true, false, false, true, false, false, false, true, false, false, true, true, false, false, true, false, false, false, false, true, false, false, false, true, false, true, false, false, true, true, true, true, false, false, false, false, true, false, true, true, true, false, false, true, true, false, true, true, true, false, true, true, true, true, true, false, false, false, true, true, false, true, false, false, false, true, false, true, false, false, true, false, true, true, true, false, true, false, false, false, false, true, false, true, true, true, false, true, false, false, false, true, true, false, true, true, true, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, true, true, false, false, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, false, true, true, false, true, false, true, true, true, true, true, false, true, false, false, true, false, false, true, true, true, true, false, true, false, false, false, false, true, false, false, false, true, false, true, false, true, true, true, false, false, true, false, true, false, true, true, true, true, true, true, true, true, false, true, true, false, true, true, false, false, false, true, true, true, true, true, true, true, false, false, true, true, true, false, false, true, false, true, false, true, true, false, false, false, true, false, false, false, false, true, true, false, true, false, false, true]);
            let encoded = BinVector::from_bools(&[false, false, true, false, true, true, false, false, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, false, true, true, false, true, false, true, true, true, true, true, false, true, false, false, true, false, false, true, true, true, true, false, true, false, false, false, false, true, false, false, false, true, false, true, false, true, true, true, false, false, true, false, true, false, true, true, true, true, true, true, true, true, false, true, true, false, true, true, false, false, false, true, true, true, true, true, true, true, false, false, true, true, true, true, false, false, true, false, true, false, true, true, false, false, false, true, false, false, false, false, false, true, true, false, false, true, false, false, false, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, true, true, false, false, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, false, false, true, false, true, false, true, true, true, true, true, false, true, false, false, true, false, false, true, true, true, true, false, true, false, false, false, false, true, false, false, false, true, false, true, false, true, true, true, false, false, true, false, true, false, true, true, true, true, true, true, true, true, false, true, true, false, true, true, false, false, false, true, true, true, true, true, true, true, false, false, true, true, true, true, false, false, true, false, true, false, true, true, false, false, false, true, false, false, false, false, false, true, true, false, false, true, false, false, false, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, false, false, true, true, true, false, true, false, false, false, true, false, true, true, false, true, false, true, true, false, false, false, false, true, false, true, true, true, false, true, false, false, false, false, false, true, false, true, true, false, true, false, true, false, true, true, false, false, false, false, true, true, true, false, true, true, false, false, true, false, true, false, false, true, true, true, false, false, true, true, true, true, true, false, false, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, true, true, true, true, true, false, true, true, false, true, false, false, false, true, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, false, false, true, true, true, false, true, false, false, false, true, false, true, true, false, true, false, true, true, false, false, false, false, true, false, true, true, true, false, true, false, false, false, false, false, true, false, true, true, false, true, false, true, false, true, true, false, false, false, false, true, true, true, false, true, true, false, false, true, false, true, false, false, true, true, true, false, false, true, true, true, true, true, false, false, true, true, true, false, false, false, false, false, false, false, true, true, true, true, false, true, true, true, true, true, true, false, false, false, true, true, true, true, true, false, true, true, true, false, true, false, false, false, true, true, true, false, true, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, false, false, true, true, true, false, true, false, false, false, true, false, true, true, false, true, false, true, true, false, false, false, false, true, false, true, true, true, true, true, false, false, false, false, false, true, false, true, true, false, true, false, true, false, true, true, false, false, false, false, true, true, true, false, true, true, false, false, true, false, true, false, false, true, true, true, false, false, true, true, true, true, true, false, false, true, true, true, false, false, false, false, false, false, false, true, true, true, true, false, true, true, true, true, true, true, false, false, false, true, true, true, true, true, false, true, true, true, false, true, false, false, false, true, true, true, false, true, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, false, false, true, true, false, true, false, false, false, true, true, false, false, false, true, true, true, true, false, true, false, false, false, false, true, false, false, false, true, true, false, false, false, true, true, true, false, false, true, false, true, true, true, false, false, true, true, true, false, false, true, true, true, true, true, false, false, true, false, true, false, true, true, true, true, false, true, false, true, false, true, false, true, false, true, true, true, false, true, false, false, false, true, true, false, true, true, true, true, false, true, true, false, false, true, true, false, true, false, false, true, true, true, true, true, true, true, false, false, true, true, false, true, false, true, true]);
            let encoded = BinVector::from_bools(&[true, false, false, false, false, false, true, true, false, true, false, false, false, true, true, false, false, false, true, true, true, true, false, true, false, false, false, false, true, false, false, false, true, true, false, false, false, true, true, true, false, false, true, false, true, true, true, false, false, true, true, true, false, false, true, true, true, true, true, false, false, true, false, true, false, true, true, true, true, false, true, false, true, false, true, false, true, false, true, true, true, false, true, false, false, false, true, true, false, true, true, true, true, false, true, true, true, false, false, true, true, false, true, false, false, true, true, true, true, true, true, true, true, false, false, true, true, false, true, true, false, true, false, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, false, false, true, true, false, true, false, false, false, true, true, false, false, false, true, true, true, true, false, true, false, false, false, false, true, false, false, false, true, true, false, false, false, true, true, true, false, false, true, false, true, true, true, false, false, true, true, true, false, false, true, true, true, true, true, false, false, true, false, true, false, true, true, true, true, false, true, false, true, false, true, false, true, false, true, true, true, false, true, false, false, false, true, true, false, true, true, true, true, false, true, true, true, false, false, false, true, false, true, false, false, true, true, true, true, true, true, true, true, false, false, true, true, false, true, true, false, true, false, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, true, false, true, false, false, true, false, false, false, false, true, false, false, false, false, false, false, false, false, false, true, true, true, true, false, true, false, true, true, true, true, true, true, false, true, false, true, true, false, true, false, false, true, true, true, false, false, true, true, true, true, true, true, false, false, false, false, true, false, false, true, false, true, true, false, false, true, false, true, true, true, false, false, true, true, true, true, false, false, true, true, true, true, false, false, true, false, true, true, false, true, false, false, false, true, true, true, true, false, false, true, true, true, false, true, true, false, false, true, true, true, false, false, false, false]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, true, false, true, false, false, true, false, false, false, false, true, false, false, false, false, false, false, false, false, false, true, true, true, true, false, true, false, true, true, true, true, true, true, false, true, false, true, true, false, true, false, false, true, true, true, false, false, true, true, true, true, true, true, false, false, false, false, true, false, false, true, false, true, true, false, false, true, false, true, true, true, false, false, true, true, true, true, false, false, true, true, true, true, false, false, true, false, true, true, false, false, true, false, false, false, true, true, true, true, false, false, true, true, true, false, false, true, true, false, false, true, true, true, true, false, false, false, true, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, true, false, true, false, false, true, false, false, false, false, true, false, false, false, false, false, false, false, false, false, true, true, true, true, false, true, false, true, true, true, true, true, true, false, true, false, true, true, false, true, false, false, true, true, true, false, false, true, true, true, true, true, true, false, false, false, false, true, false, false, true, false, true, true, false, false, true, false, true, true, true, false, false, true, true, true, true, false, false, true, true, true, true, false, false, true, false, true, true, false, false, true, false, false, true, true, true, true, true, false, false, true, true, true, false, false, true, true, false, false, true, true, true, true, false, false, false, true, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, true, false, true, false, true, true, true, true, false, true, true, true, true, true, true, true, false, false, true, false, true, false, false, false, false, true, false, false, true, true, true, true, true, false, true, false, false, false, true, false, false, true, false, false, false, true, false, true, false, true, true, false, false, true, true, false, true, true, false, true, false, true, true, true, true, false, false, true, false, false, false, false, false, false, false, true, true, false, false, false, false, true, true, true, false, false, true, false, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, false, true, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, true, false, true, false, true, true, true, true, false, true, true, true, true, true, true, true, false, false, true, false, true, false, false, false, false, true, false, false, true, true, true, true, true, false, true, false, false, false, true, false, false, true, false, false, false, true, false, true, false, true, true, false, false, true, true, false, true, true, false, true, false, true, true, true, true, false, false, true, true, false, false, false, false, false, false, false, true, true, false, false, false, false, true, true, true, true, false, false, true, false, false, false, false, true, false, false, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, false, true, true, false, true, false, true, true, true, true, false, true, true, true, true, true, true, true, false, false, true, false, true, false, false, false, false, true, false, false, true, true, true, true, true, false, true, false, false, false, true, false, false, true, false, false, false, true, false, true, false, true, true, false, false, true, true, false, true, true, false, true, false, true, true, true, true, false, false, true, true, false, false, false, true, false, false, false, true, true, false, false, false, false, true, true, true, true, false, false, true, false, false, false, false, true, false, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, false, true, false, true, false, true, true, true, false, false, true, false, false, false, false, false, false, true, false, false, false, true, false, false, true, true, false, false, false, false, false, false, false, false, false, false, true, false, false, true, true, true, false, true, true, false, true, true, false, false, true, true, false, false, false, true, false, false, false, false, false, false, true, true, false, false, true, false, true, true, true, false, false, true, false, false, false, false, false, false, true, false, false, false, true, false, true, true, false, true, true, false, false, true, true, true, true, true, true, false, true, true, false, false, true, true, true, true, false, false, true, false, false, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, false, true, false, true, false, true, true, true, false, false, true, false, false, false, false, false, false, true, false, false, false, true, false, false, true, true, false, false, false, false, false, false, false, false, false, false, true, false, false, true, true, true, false, true, true, false, true, true, false, false, true, true, false, false, false, true, false, false, false, false, false, false, true, true, false, false, true, false, true, true, true, false, false, true, false, false, false, false, false, false, true, false, false, false, true, false, true, true, false, false, true, true, false, false, true, true, true, true, true, true, false, true, true, false, false, true, true, true, true, true, false, false, true, false, false, false, true, true, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, false, true, false, true, false, true, true, true, false, false, true, false, false, false, false, false, false, true, false, false, false, true, false, false, true, true, false, false, false, false, false, false, false, false, false, false, true, false, false, true, true, true, false, true, true, false, true, true, false, false, true, true, false, false, false, true, false, false, false, true, false, false, true, true, false, false, true, false, true, true, true, false, false, true, false, false, false, false, false, false, true, false, false, false, true, false, true, true, false, false, true, true, false, false, true, true, true, true, true, true, false, true, true, false, false, true, true, true, true, true, false, false, true, false, false, false, true, true, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, false, false, false, true, false, true, true, true, false, true, false, false, true, true, false, false, false, false, false, true, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, false, true, false, false, false, true, false, false, true, false, true, true, false, false, true, false, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, true, false, false, false, false, true, false, true, false, true, false, false, false, false, false, true, false, true, false, false, true, true, false, true, true, false, true, false, true, false, true, true, true, true, false, false, true, false, false, true]);
            let encoded = BinVector::from_bools(&[true, true, true, true, false, false, false, true, false, true, true, true, false, true, false, false, true, true, false, false, false, false, false, true, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, false, true, false, false, false, true, false, false, true, false, true, true, false, false, true, false, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, true, false, false, false, false, true, false, true, false, true, false, false, false, false, false, false, true, false, true, false, false, true, true, false, true, true, false, true, false, true, false, false, true, true, true, true, false, false, true, true, false, false, true, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, false, false, false, true, false, true, true, true, false, true, false, false, true, true, false, false, false, false, false, true, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, false, false, false, true, false, true, false, true, false, false, false, true, false, false, false, true, false, false, true, false, true, true, false, false, true, false, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, true, false, false, false, false, true, false, true, false, true, false, false, false, false, false, false, true, false, true, false, false, true, true, false, true, true, false, true, false, true, false, false, true, true, true, true, false, false, true, true, false, false, true, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, false, false, true, false, false, false, true, false, true, false, true, true, true, true, false, true, true, true, true, false, true, true, true, false, false, false, true, true, true, false, true, false, true, false, false, true, false, false, true, true, false, false, false, false, false, true, false, false, true, false, false, true, true, true, true, false, false, true, false, true, false, false, true, false, true, false, false, false, true, true, true, false, true, true, true, false, false, false, true, true, true, false, false, false, false, true, true, true, true, false, false, true, false, true, true, true, false, false, true, true, true, false, false, false, false, true, true, false, true, true, true, false, false, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, false, false, false, false, true, false, false, false, true, false, true, false, true, true, true, true, false, true, true, true, true, false, true, true, true, false, false, false, true, true, true, false, true, false, true, false, false, true, false, false, true, true, false, false, false, false, false, true, false, false, true, false, false, true, true, true, true, false, false, true, false, true, false, false, true, false, true, false, false, false, true, true, true, false, true, true, true, false, false, false, true, true, true, false, false, false, false, true, true, true, true, false, false, false, true, false, true, true, true, false, false, true, true, true, false, false, false, false, false, true, true, false, true, true, true, false, false, false, true, false, true, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, false, false, true, false, false, false, true, false, true, false, true, true, true, true, false, true, false, true, true, false, true, true, true, false, false, false, true, true, true, false, true, false, true, false, false, true, false, false, true, true, false, false, false, false, false, true, false, false, true, false, false, true, true, true, true, false, false, true, false, true, false, false, true, false, true, false, false, false, true, true, true, false, true, true, true, false, false, false, true, true, true, false, false, false, false, true, true, true, true, false, false, false, true, false, true, true, true, false, false, true, true, true, false, false, false, false, false, true, true, false, true, true, true, false, false, false, true, false, true, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, true, true, false, true, true, true, false, true, false, true, true, false, false, true, true, true, false, true, false, true, true, false, false, true, true, false, false, false, true, true, true, true, false, false, true, false, false, true, true, false, true, true, false, false, true, true, false, true, true, false, false, true, false, true, true, true, false, false, true, true, true, true, false, true, false, true, false, false, false, false, false, true, true, true, false, false, true, false, true, false, true, false, true, true, false, true, false, true, false, false, false, true, true, true, false, false, true, true, false, true, false, false, true, false, true, true, false, true, true, true, true, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, false, true, false, true, true, false, true, true, true, false, true, false, true, true, false, false, true, true, true, false, true, false, true, true, false, false, true, true, false, false, false, true, true, true, true, false, false, true, false, false, true, true, false, true, true, false, false, true, true, false, true, true, false, false, true, false, true, true, true, false, false, true, true, true, true, false, true, false, true, false, false, false, false, false, true, true, true, false, false, true, false, true, false, true, false, true, true, false, true, false, true, false, false, true, false, true, true, true, false, false, true, true, false, true, false, false, true, false, true, true, true, false, true, true, true, true, false, false, false, true, false, false, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, true, true, false, false, true, true, false, true, false, true, true, false, false, true, true, true, false, true, false, true, true, false, false, true, true, false, false, false, true, true, true, true, false, false, true, false, false, true, true, false, true, true, false, false, true, true, false, true, true, false, false, true, false, true, true, true, false, false, true, true, true, true, false, true, false, true, false, false, false, false, false, true, true, true, false, false, true, false, true, false, true, false, true, true, false, true, false, true, false, false, true, false, true, true, true, false, false, true, true, false, true, false, false, true, false, true, true, true, false, true, true, true, true, false, false, false, true, false, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, true, true, true, true, false, true, false, true, false, true, false, false, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, true, false, true, true, false, false, true, true, false, true, true, true, false, true, true, false, true, true, false, true, false, false, true, true, false, true, false, false, false, false, false, false, true, true, false, false, true, false, false, true, false, true, true, false, true, true, false, false, false, false, true, false, true, false, true, true, true, false, true, false, false, true, false, true, false, false, true, true, true, true, false, false, false, false, false, true, true, true, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[true, true, false, true, true, true, true, true, false, true, false, true, false, true, false, false, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, true, false, true, true, false, false, true, true, false, true, true, true, false, true, true, false, true, true, false, true, false, false, true, true, false, true, false, false, false, false, false, false, true, true, false, false, true, false, false, true, false, true, true, false, true, true, false, false, false, false, true, false, true, false, true, true, true, false, false, true, false, false, true, false, true, false, false, true, true, true, true, false, false, true, false, false, false, true, true, true, true, true, true, true, false, true, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, true, true, true, true, false, true, false, true, false, true, false, false, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, true, false, true, true, false, false, true, true, false, true, true, true, false, true, false, false, true, true, false, true, false, false, true, true, false, true, false, false, false, false, false, false, true, true, false, false, true, false, false, true, false, true, true, false, true, true, false, false, false, false, true, false, true, false, true, true, true, false, false, true, false, false, true, false, true, false, false, true, true, true, true, false, false, true, false, false, false, true, true, true, true, true, true, true, false, true, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, false, false, false, true, false, true, false, true, false, true, false, true, true, false, true, true, true, false, true, true, true, false, false, true, false, true, true, true, false, false, false, true, true, false, true, true, false, true, true, false, false, false, true, true, true, false, true, true, true, true, true, true, false, true, false, false, false, false, true, false, false, true, false, true, true, false, true, true, true, false, false, true, true, false, false, false, true, true, false, true, true, true, false, false, false, false, true, true, true, false, false, true, true, false, true, false, true, false, false, true, false, true, true, false, false, true, true, false, false, false, false, true, false, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, false, false, false, true, false, true, false, true, false, true, false, true, true, false, true, true, true, false, true, true, true, false, false, true, false, true, true, true, false, false, false, true, true, false, true, true, false, true, true, false, false, false, true, true, true, false, true, true, true, true, true, true, false, true, false, false, false, false, true, false, false, true, false, true, true, false, true, true, true, false, false, true, true, false, false, false, true, true, false, true, true, true, false, false, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, false, true, false, true, true, false, false, false, true, true, false, false, false, false, true, true, false, false, true, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, true, false, false, false, true, false, true, false, true, false, true, false, true, true, false, true, true, true, false, true, true, true, false, false, true, false, true, true, true, false, false, false, true, true, false, true, true, false, true, true, false, false, false, true, true, true, false, true, true, true, true, true, true, false, true, false, false, false, false, true, false, false, true, false, true, true, true, true, true, true, false, false, true, true, false, false, false, true, true, false, true, true, true, false, false, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, false, true, false, true, true, false, false, false, true, true, false, false, false, false, true, true, false, false, true, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, false, false, false, true, true, true, true, false, true, false, true, false, false, false, false, false, true, false, false, true, true, true, true, false, false, true, true, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, true, false, true, true, true, false, false, false, true, false, false, false, false, true, true, true, true, false, true, false, false, false, true, true, true, false, true, true, false, true, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, false, true, false, true, false, true, false, false, false, true, false, true, false, false, true, true, false, false, true, true, false, false, true, true, true, false]);
            let encoded = BinVector::from_bools(&[true, false, false, true, false, false, false, true, true, true, true, false, true, false, true, false, false, false, false, false, true, false, false, true, true, true, true, false, false, true, true, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, true, false, true, true, true, false, false, false, true, false, false, false, false, true, true, true, true, false, true, false, false, false, true, true, true, false, true, true, false, true, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, true, false, true, false, true, false, true, false, false, false, true, false, true, false, false, true, false, true, false, false, true, true, false, false, true, true, true, true, false, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, false, false, false, true, true, true, true, false, true, false, true, false, false, false, false, false, true, false, false, true, true, true, true, false, false, true, true, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, true, false, true, true, true, false, false, false, true, false, false, false, false, true, true, true, true, false, true, false, false, false, true, true, true, false, true, true, false, true, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, true, false, true, false, true, false, true, false, false, false, true, false, true, false, false, true, false, true, false, false, true, true, true, false, true, true, true, true, false, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, false, false, true, false, true, true, true, false, true, true, false, true, true, true, false, false, false, true, true, false, false, false, false, false, true, true, true, true, true, false, true, true, false, true, false, false, true, true, false, false, true, false, true, false, false, false, false, false, true, false, true, false, false, false, false, false, true, false, true, false, false, true, true, true, false, false, false, true, true, true, false, false, false, true, false, false, true, true, false, false, true, true, true, false, false, false, true, false, false, false, true, false, false, false, false, false, true, false, true, false, false, true, true, false, false, true, true, false, false, false, true, true, false, true, true, false]);
            let encoded = BinVector::from_bools(&[false, true, false, false, false, false, true, false, true, true, true, false, true, true, false, true, true, true, false, false, false, true, true, false, false, false, false, false, true, true, true, true, true, false, true, true, false, true, false, false, true, true, false, false, true, false, true, false, false, false, false, false, true, false, true, false, false, false, false, false, true, false, true, false, false, true, true, true, false, false, false, true, true, true, false, false, false, true, false, false, true, true, false, false, true, true, true, false, false, false, true, false, false, false, false, true, false, false, false, false, false, true, false, true, false, false, true, true, false, false, false, true, true, false, false, false, true, true, false, false, true, true, true, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, false, false, true, false, true, true, true, false, true, true, false, true, true, true, false, false, false, true, true, false, false, false, false, false, true, true, true, true, true, false, true, true, false, true, false, false, true, true, false, false, true, false, true, false, false, false, false, false, true, false, true, false, false, false, false, false, true, false, true, false, false, true, true, true, false, false, false, true, true, true, false, false, false, true, false, false, true, true, false, false, true, true, true, false, false, false, true, false, false, false, false, true, false, false, false, false, false, true, false, true, false, false, true, true, false, false, false, true, true, false, true, false, true, true, false, false, true, true, true, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, true, true, true, true, true, true, false, false, false, false, false, false, true, true, false, false, false, false, true, false, true, true, true, true, true, false, true, true, false, true, false, true, false, false, false, false, true, true, false, true, true, true, true, true, false, true, false, true, false, true, true, false, true, true, false, true, false, true, false, false, true, true, true, false, false, true, false, false, true, true, true, true, true, true, true, false, false, true, true, true, true, true, true, true, false, true, true, true, false, false, false, false, false, false, true, true, false, false, true, true, false, false, false, false, false, true, true, false, true, true, false, false, false, true, true, true]);
            let encoded = BinVector::from_bools(&[false, true, false, false, true, true, true, true, true, true, false, false, false, false, false, false, true, true, false, false, false, false, true, false, true, true, true, true, true, false, true, true, false, true, false, true, false, false, false, false, true, true, false, true, true, true, true, true, false, true, false, true, false, true, true, false, true, true, false, true, false, true, false, false, true, true, true, false, false, true, false, false, true, true, true, true, true, true, true, false, false, true, true, true, true, true, true, true, false, true, true, true, false, false, true, false, false, false, false, true, true, false, false, true, true, false, false, false, false, false, true, true, true, false, true, true, false, false, true, false, true, true, true, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, true, true, true, true, true, true, false, false, false, false, false, false, true, true, false, false, false, false, true, false, true, true, true, true, true, false, true, true, false, true, false, true, false, false, false, false, true, true, false, true, true, true, true, true, false, true, false, true, false, true, true, false, true, true, false, true, false, true, false, false, true, true, true, false, false, true, false, false, false, true, true, true, true, true, true, false, false, true, true, true, true, true, true, true, false, true, true, true, false, false, true, false, false, false, false, true, true, false, false, true, true, false, false, false, false, false, true, true, true, false, true, true, false, false, true, false, true, true, true, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, true, false, false, false, false, true, true, false, false, true, true, false, true, false, true, true, false, false, false, true, true, false, true, false, true, true, false, false, false, false, false, false, true, false, true, false, true, true, false, false, true, true, false, true, true, true, false, false, true, true, false, true, false, false, true, false, false, true, false, false, true, true, true, false, true, true, false, false, true, true, true, false, true, true, false, true, true, true, false, false, true, true, true, true, true, true, true, true, false, false, true, false, true, true, false, false, false, true, false, true, true, false, true, true, false, false, false, false, false, false, false, false, true, true, true, true]);
            let encoded = BinVector::from_bools(&[false, true, false, true, true, false, false, false, false, true, true, false, false, true, true, false, true, false, true, true, false, false, false, true, true, false, true, false, true, true, false, false, false, false, false, false, true, false, true, false, true, true, false, false, true, true, false, true, true, true, false, false, true, true, false, true, false, false, true, false, false, true, false, false, true, true, true, false, true, true, false, false, true, true, true, false, true, true, false, true, true, true, false, false, true, true, true, true, true, true, true, true, false, false, true, true, false, true, true, false, false, false, true, false, true, true, false, true, true, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, true, false, false, false, false, true, true, false, false, true, true, false, true, false, true, true, false, false, false, true, true, false, true, false, true, true, false, false, false, false, false, false, true, false, true, false, true, true, false, false, true, true, false, true, true, true, false, false, true, true, false, true, false, false, true, false, false, true, false, false, true, true, true, false, true, true, false, false, true, true, true, false, true, true, false, true, true, true, false, false, true, true, true, true, true, true, true, true, false, false, true, true, false, true, true, false, false, false, true, false, true, true, false, true, true, false, false, false, true, false, false, false, false, false, true, true, true, true, true, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, false, true, false, false, false, false, true, true, true, true, false, true, true, false, true, true, false, false, true, false, true, true, false, false, true, false, true, false, true, true, false, true, true, true, false, true, false, true, false, false, false, false, true, true, false, true, true, false, false, true, true, false, true, false, false, true, true, true, false, true, true, true, true, false, true, true, false, true, true, false, false, true, false, false, false, true, false, false, false, false, false, false, false, false, true, false, false, false, false, true, true, true, true, true, true, true, true, false, true, false, false, true, false, false, true, false, false, true, true, false, false, true, false, false, false, false]);
            let encoded = BinVector::from_bools(&[true, false, true, true, false, true, false, false, false, false, true, true, true, true, false, true, true, false, true, true, false, false, true, false, true, true, false, false, true, false, true, false, true, true, false, true, true, true, false, true, false, true, false, false, false, false, true, true, false, true, true, false, false, true, true, false, true, false, false, true, true, true, false, true, true, true, true, false, true, true, false, true, true, false, false, true, false, false, false, true, false, false, false, false, false, false, false, false, true, false, false, false, false, true, true, true, true, true, true, true, true, true, false, true, false, false, true, false, false, true, true, false, false, true, true, false, false, true, false, false, false, false, false, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, false, true, false, false, false, false, true, true, true, true, false, true, true, false, true, true, false, false, true, false, true, true, false, false, true, false, true, false, true, true, false, true, true, true, false, true, false, true, false, false, false, false, true, true, false, true, true, false, false, true, true, false, true, false, false, true, true, true, false, true, true, true, true, false, true, true, false, true, true, false, false, true, false, false, false, true, false, false, false, false, false, false, false, false, true, false, false, false, false, true, true, true, true, true, true, true, true, true, false, true, false, false, true, false, false, true, true, false, false, true, true, false, false, true, false, false, false, false, true, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, true, true, true, true, true, true, true, false, false, true, false, true, false, true, true, false, true, true, false, false, true, true, true, false, false, true, true, true, false, false, true, true, false, true, false, false, true, false, false, false, true, false, false, true, true, false, false, true, false, false, true, true, true, false, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, false, false, false, true, false, false, false, true, false, true, false, true, false, false, false, false, true, false, true, false, true, true, true, true, false, false, false, false, true, false, false, true, false, true, true, false, false, false, false, false, true, true, false, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, true, true, true, true, true, true, true, false, false, true, false, true, false, true, true, false, true, true, false, false, true, true, true, false, false, true, true, true, false, false, true, true, false, true, false, false, true, false, false, false, true, false, false, true, true, false, false, true, false, false, true, true, true, false, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, false, false, false, true, false, false, false, true, false, true, false, true, false, false, false, false, true, false, true, true, false, true, true, true, true, false, false, false, false, true, false, false, true, false, true, true, true, false, false, false, false, false, true, false, true, false, true, false, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, true, true, true, true, true, true, true, false, false, true, false, true, false, true, true, false, true, true, false, false, true, true, true, false, false, true, true, true, false, false, true, true, false, true, false, false, true, false, false, false, true, false, false, true, true, false, false, true, false, false, true, true, true, false, true, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, false, false, false, true, false, false, false, true, false, true, false, true, false, false, false, false, true, false, true, true, false, true, true, true, true, false, false, false, false, true, false, false, true, false, true, true, true, false, false, false, false, false, true, false, true, false, false, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, true, false, true, false, true, false, false, true, true, true, true, true, false, false, false, true, true, false, false, true, true, false, true, true, false, false, false, false, false, true, true, true, false, true, true, false, false, false, false, false, true, true, true, true, false, false, false, false, false, true, false, false, false, false, true, false, true, false, false, false, true, true, true, false, true, false, false, true, false, false, false, false, false, true, false, true, false, false, false, true, true, true, false, false, false, false, false, true, false, true, true, true, false, true, true, false, false, false, false, false, true, false, false, true, false, false, false, true, false, false, true, false, false, true, true, false]);
            let encoded = BinVector::from_bools(&[true, true, true, false, true, false, true, false, true, false, false, true, true, true, true, true, false, false, false, true, true, false, false, true, true, false, true, true, false, false, false, false, false, true, true, true, false, true, true, false, false, false, false, false, true, true, true, true, false, false, false, false, false, true, false, false, false, false, true, false, true, false, false, false, true, true, true, false, true, false, false, true, false, false, false, false, false, true, false, true, false, false, false, true, true, true, false, false, false, false, false, true, false, true, false, true, true, false, true, true, false, false, false, false, false, true, false, false, true, false, true, false, false, true, false, false, true, false, false, false, true, true, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, true, false, true, false, true, false, false, true, true, true, true, true, false, false, false, true, true, false, false, true, true, false, true, true, false, false, false, false, false, true, true, true, false, true, true, false, false, false, false, false, true, true, true, true, false, false, false, false, false, true, false, false, false, false, true, false, true, false, false, false, true, true, true, false, true, false, false, true, false, false, false, false, false, true, false, true, false, false, false, true, true, true, false, false, false, false, false, true, false, true, false, true, true, false, true, true, false, false, false, false, false, true, false, true, true, false, true, false, false, true, false, false, true, false, false, false, true, true, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, true, true, true, true, true, false, true, false, true, false, true, true, false, true, true, false, true, true, true, true, false, false, false, false, true, false, false, true, false, true, false, false, true, false, false, false, true, false, true, true, false, false, true, true, true, false, false, true, true, true, true, true, true, true, true, true, false, true, false, true, false, false, false, true, false, false, true, false, false, true, true, false, true, false, true, true, false, true, false, true, false, true, false, false, false, false, true, true, true, true, false, false, true, false, false, false, true, false, false, false, false, false, true, false, true, false, false, true, true, false, false, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[true, true, true, true, true, true, true, true, true, false, true, false, true, false, true, true, false, true, true, false, true, true, true, true, false, false, false, false, true, false, false, true, false, true, false, false, true, false, false, false, true, false, true, true, false, false, true, true, true, false, false, true, true, true, true, true, true, true, true, true, false, true, false, true, false, false, false, true, false, false, true, false, false, true, true, false, true, false, true, true, false, true, false, true, false, true, false, false, false, false, true, true, true, true, false, false, false, true, false, false, false, true, false, false, false, false, false, true, false, true, true, false, false, true, true, false, false, true, true, true, true, false, false, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, true, true, true, true, true, false, true, false, true, false, true, true, false, true, true, false, true, true, true, true, false, false, false, false, true, false, false, true, false, true, false, false, true, false, false, false, true, false, true, true, false, false, true, true, true, false, false, true, true, true, true, true, true, true, true, true, false, true, false, true, false, false, false, true, false, false, true, false, false, true, true, false, true, false, true, true, false, true, false, true, false, true, false, false, false, false, true, true, true, true, false, false, false, true, false, false, false, true, false, false, false, false, false, true, false, true, true, false, false, true, true, false, false, true, true, true, true, false, false, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, true, true, false, false, false, false, false, false, true, false, true, true, true, false, true, true, true, false, false, true, false, false, false, true, false, false, false, false, true, true, true, false, true, false, true, false, true, false, true, true, false, false, true, false, false, true, false, true, true, false, false, true, true, true, false, true, false, true, false, false, true, false, true, true, false, true, true, false, true, false, false, true, false, true, false, false, true, false, false, false, true, false, false, true, false, false, false, false, true, false, true, false, false, false, true, true, true, false, false, true, true, true, true, true, true, true, true, false, true, true, true, false, false, true, true, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, true, true, false, false, false, false, false, false, true, false, true, true, true, false, true, true, true, false, false, true, false, false, false, true, false, false, false, false, true, true, true, false, true, false, true, false, true, false, true, true, false, false, true, false, false, true, false, true, true, false, false, true, true, true, false, true, false, true, false, false, true, false, true, true, false, true, true, false, true, false, false, true, false, true, false, false, true, false, false, false, true, false, false, true, false, false, false, false, true, false, true, true, false, false, false, true, true, true, false, false, true, true, true, true, true, true, true, true, true, false, true, true, true, false, true, false, true, true, true, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, true, true, false, false, false, false, false, false, true, false, true, true, true, false, true, true, true, false, false, true, false, false, false, true, false, false, false, false, true, true, true, false, true, false, true, false, true, false, true, true, false, false, true, false, false, true, false, true, true, false, false, true, true, true, false, true, false, true, false, false, true, false, true, true, false, true, true, false, true, false, false, true, false, true, false, false, true, false, false, false, true, false, false, true, false, false, false, false, true, false, true, true, false, false, false, true, true, true, false, false, true, true, true, true, true, true, true, true, false, false, true, true, true, false, true, false, true, true, true, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, true, false, true, false, true, false, false, true, true, false, true, true, true, false, false, true, true, false, false, false, true, false, false, true, true, false, false, true, false, true, true, true, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, true, false, true, false, false, false, true, true, true, false, false, true, true, false, true, true, false, true, false, false, true, true, false, false, true, true, false, true, true, false, true, false, true, true, false, true, false, true, true, false, false, false, false, true, false, true, false, false, false, true, false, false, false, true, false, false, true, false, false, true, false, true, false, true, true, true, false, true, true]);
            let encoded = BinVector::from_bools(&[true, true, false, false, true, false, true, false, true, false, false, true, true, false, true, true, true, false, false, true, true, false, false, false, true, false, false, true, true, false, false, true, false, true, true, true, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, true, false, true, false, false, false, true, true, true, false, false, true, true, false, true, true, false, true, false, false, true, true, false, false, true, true, false, true, true, false, true, false, true, true, false, true, false, true, true, false, false, false, false, true, true, false, true, false, false, false, true, false, false, false, true, false, false, true, false, false, false, true, false, true, false, true, true, true, true, false, true, true, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, true, false, true, false, true, false, false, true, true, false, true, true, true, false, false, true, true, false, false, false, true, false, false, true, true, false, false, true, false, true, true, true, true, false, true, false, true, false, false, false, false, true, false, false, true, false, false, true, false, true, false, false, false, true, true, true, false, false, true, true, false, true, true, false, true, false, false, true, true, false, false, true, true, false, true, true, false, true, false, true, true, false, true, false, true, true, false, false, false, false, true, true, false, true, false, false, false, true, false, false, false, true, false, false, true, false, false, false, true, false, true, false, true, true, true, true, false, false, true, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, false, false, false, false, false, true, false, true, false, true, true, false, false, true, false, false, false, false, true, true, false, false, true, false, true, true, true, true, true, false, false, false, true, false, false, false, true, true, true, true, false, true, true, false, false, true, false, false, false, false, false, true, true, true, false, false, true, false, true, false, false, true, false, false, false, false, true, false, true, true, true, false, true, true, false, false, true, false, true, false, true, false, false, false, false, true, true, false, true, false, false, false, true, true, false, true, true, true, false, false, true, true, true, false, false, false, false, true, true, true, true, false, true, true, true, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, false, false, false, false, false, true, false, true, false, true, true, false, false, true, false, false, false, false, true, true, false, false, true, false, true, true, true, true, true, false, false, false, true, false, false, false, true, true, true, true, false, true, true, false, false, true, false, false, false, false, false, true, true, true, false, false, true, false, true, false, false, true, false, false, false, false, true, false, true, true, true, false, true, true, false, false, true, false, true, false, true, false, false, false, false, true, true, false, true, false, false, false, false, true, true, false, true, true, true, false, false, true, true, true, false, false, false, false, false, true, true, true, true, false, false, true, true, true, false, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, false, false, false, false, false, true, false, true, false, true, true, false, false, true, false, false, false, false, true, true, false, false, true, false, true, true, true, true, true, false, false, false, true, false, false, false, true, true, true, true, false, true, true, false, false, true, false, false, false, false, false, true, true, true, false, false, true, false, true, false, false, true, false, false, false, false, true, false, true, true, true, false, true, true, false, false, true, false, true, false, true, false, false, false, false, true, true, false, true, true, false, false, false, true, true, false, true, true, true, false, false, true, true, true, false, false, false, false, false, true, true, true, true, false, false, true, true, true, false, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, true, false, true, false, true, true, true, false, false, true, false, false, true, true, true, false, true, false, true, true, false, true, true, false, false, true, true, false, true, true, true, false, true, false, false, false, true, true, false, true, false, false, true, true, true, false, false, false, true, false, true, true, true, false, true, false, true, true, false, true, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, true, true, false, false, true, false, false, false, false, true, true, true, true, true, false, false, false, false, false, false, true, false, true, false, false, true, false, false, true, false, true, false, false, true, true, true, true, true, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, true, false, true, false, true, true, true, false, false, true, false, false, true, true, true, false, true, false, true, true, false, true, true, false, false, true, true, false, true, true, true, false, true, false, false, false, true, true, false, true, false, false, true, true, true, false, false, false, true, false, true, true, true, false, true, false, true, true, false, true, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, true, true, false, false, true, false, false, false, false, true, true, true, true, false, true, false, false, false, false, false, false, true, false, true, false, false, true, false, false, true, true, false, true, false, false, true, true, true, true, true, true, true, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, true, false, false, false, true, true, true, false, false, true, false, false, true, true, true, false, true, false, true, true, false, true, true, false, false, true, true, false, true, true, true, false, true, false, false, false, true, true, false, true, false, false, true, true, true, false, false, false, true, false, true, true, true, false, true, false, true, true, false, true, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, true, true, false, false, true, false, false, false, false, true, true, true, true, false, true, false, false, false, false, false, false, true, false, true, false, false, true, false, false, true, true, false, true, false, false, true, true, true, true, true, true, true, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, true, true, true, true, true, false, false, true, true, true, false, false, false, true, false, true, false, true, true, false, false, false, false, false, true, true, true, true, true, true, true, false, false, true, true, true, true, true, true, true, true, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, true, true, false, true, true, true, false, true, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, false, false, true, true, false, false, false, true, false, true, true, true, true, true, true, true, false, true, false, true, true, true, false, true, true, false, false, false, true, true, false, true, false, true, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, true, true, true, true, true, false, false, true, true, true, false, false, false, true, false, true, false, true, true, false, false, false, false, false, true, true, true, true, true, true, true, false, false, true, true, true, true, true, true, true, true, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, true, true, false, true, true, true, false, true, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, false, false, true, true, false, false, false, true, false, true, false, true, true, true, true, true, true, false, true, false, true, true, true, false, true, true, false, false, false, false, true, true, false, true, true, false, true, false, false, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, true, true, true, true, true, false, false, true, true, true, false, false, false, true, false, true, false, true, true, false, false, false, false, false, true, true, true, true, true, true, true, false, false, true, true, true, true, true, true, true, true, false, false, true, true, true, true, false, false, false, false, true, true, true, true, false, false, true, true, false, true, true, true, false, true, true, false, false, false, false, true, false, true, true, true, true, true, true, true, true, false, false, true, true, false, false, false, true, false, true, false, true, true, true, true, true, true, false, true, false, true, true, true, false, true, true, false, false, false, false, true, true, false, true, true, false, false, false, false, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, true, false, true, false, true, true, false, false, false, true, false, true, false, false, true, false, true, true, false, false, false, true, true, true, false, false, true, true, false, false, true, false, true, false, true, true, true, false, true, true, true, true, false, true, false, false, false, true, true, true, false, true, false, true, false, true, true, false, false, false, true, true, false, false, false, false, false, true, true, false, true, true, true, true, true, false, false, true, true, true, true, true, false, true, true, true, false, false, true, false, false, true, false, false, false, true, false, true, false, true, true, false, true, true, false, true, true, false, true, false, false, false, false, true, true, false]);
            let encoded = BinVector::from_bools(&[false, true, false, false, true, false, true, false, true, true, false, false, false, true, false, true, false, false, true, false, true, true, false, false, false, true, true, true, false, false, true, true, false, false, true, false, true, false, true, true, true, false, true, true, true, true, false, true, false, false, false, true, true, true, false, true, false, true, false, true, true, false, false, false, true, true, false, false, false, false, false, true, true, false, true, true, true, true, true, false, false, true, true, true, true, true, false, true, true, true, false, false, true, false, false, false, true, false, false, false, true, false, true, false, true, true, false, true, true, false, false, true, true, false, true, false, false, false, false, false, true, true, true, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, true, false, true, false, true, true, false, false, false, true, false, true, false, false, true, false, true, true, false, false, false, true, true, true, false, false, true, true, false, false, true, false, true, false, true, true, true, false, true, true, true, true, false, true, false, false, false, true, true, true, false, true, false, true, false, true, true, false, false, false, true, true, false, false, false, false, false, true, true, false, true, true, true, true, true, false, false, true, true, true, true, true, false, true, true, true, true, false, true, false, false, false, true, false, false, false, true, false, true, false, true, true, false, true, true, false, false, true, true, false, true, false, false, false, false, false, true, true, true, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, false, true, false, false, true, true, true, true, true, true, false, false, false, false, false, false, false, true, false, true, false, true, false, false, false, false, false, false, true, false, true, false, true, true, true, true, true, false, true, true, true, true, false, true, false, false, false, false, false, false, true, false, true, true, false, false, true, false, true, false, true, true, false, false, true, true, true, true, false, false, true, false, true, true, false, true, true, false, false, true, true, true, false, false, false, false, false, true, true, false, true, true, true, false, true, false, false, true, true, false, false, false, true, true, false, true, false, false, false, true, false, false, true, true, true, true]);
            let encoded = BinVector::from_bools(&[false, true, false, true, false, true, false, false, true, true, true, true, true, true, false, false, false, false, false, false, false, true, false, true, false, true, false, false, false, false, false, false, true, false, true, false, true, true, true, true, true, false, true, true, true, true, false, true, false, false, false, false, false, false, true, false, true, true, false, false, true, false, true, false, true, true, false, false, true, true, true, true, false, false, true, false, true, true, false, true, true, false, false, true, true, true, false, false, false, false, false, true, true, false, true, true, true, true, false, true, false, false, true, true, false, false, false, true, true, false, false, true, false, false, false, true, false, false, true, true, true, true, true, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, false, true, false, false, true, true, true, true, true, true, false, false, false, false, false, false, false, true, false, true, false, true, false, false, false, false, false, false, true, false, true, false, true, true, true, true, true, false, true, true, true, true, false, true, false, false, false, false, false, false, true, false, true, true, false, false, true, false, true, false, true, true, false, false, true, true, true, true, false, false, true, false, true, true, false, true, true, false, false, true, true, true, false, false, false, false, false, true, true, false, true, true, true, true, false, true, false, false, true, true, false, false, false, true, true, false, false, true, false, false, false, true, false, false, true, true, true, true, true, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, true, false, false, true, true, true, true, false, true, false, true, true, true, true, true, false, true, true, true, false, false, true, true, true, false, false, true, true, true, false, true, true, true, true, false, true, true, false, true, true, false, true, true, true, true, true, true, false, false, true, false, false, false, true, false, true, true, false, true, true, false, false, false, true, true, false, true, true, true, true, true, true, true, false, false, true, true, false, true, false, false, true, true, true, true, false, true, true, true, true, true, true, false, false, true, true, false, false, false, true, true, true, true, true, true, false, true, false, true, false, false, false, false, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, true, false, false, true, true, true, true, false, true, false, true, true, true, true, true, false, true, true, true, false, false, true, true, true, false, false, true, true, true, false, true, true, true, true, false, true, true, false, true, true, false, true, true, true, true, true, true, false, false, true, false, false, false, true, false, true, true, false, true, true, false, false, false, true, true, false, true, true, true, true, true, true, true, false, false, true, true, false, true, false, false, true, true, true, true, false, true, true, true, false, true, true, true, false, false, true, true, false, false, false, true, true, true, true, true, true, true, false, true, false, true, false, false, true, false, false, false, true, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, true, false, false, true, true, true, true, false, true, false, true, true, true, true, true, false, true, true, true, false, false, true, true, true, false, false, true, true, true, false, true, true, true, true, false, true, true, false, true, true, false, true, true, true, true, true, true, false, false, true, false, false, false, true, false, true, true, false, true, true, false, false, false, true, true, false, true, true, true, true, true, true, true, false, false, true, true, false, true, false, false, true, true, true, true, false, true, true, true, false, true, true, true, false, false, true, true, false, false, false, true, true, true, true, true, true, true, false, true, false, true, false, true, true, false, false, false, true, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, false, false, false, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, false, true, true, false, false, true, false, true, false, true, false, true, false, false, true, false, false, true, true, false, false, false, false, false, true, false, false, true, false, true, false, true, true, false, false, false, false, false, false, false, true, true, true, true, true, false, false, true, true, false, true, true, true, true, false, true, false, true, false, false, true, true, false, true, true, true, false, true, false, false, false, true, true, false, false, true, true, true, true, true, false, true, false, false, true, false, true, false, false, true, true, false, true, false, false, false, false]);
            let encoded = BinVector::from_bools(&[false, false, true, false, false, false, false, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, false, true, true, false, false, true, false, true, false, true, false, true, false, false, true, false, false, true, true, false, false, false, false, false, true, false, false, true, false, true, false, true, true, false, false, false, false, false, false, false, true, true, true, true, true, false, false, true, true, false, true, true, true, true, false, true, false, true, false, false, true, true, false, true, true, true, false, true, false, false, false, true, true, true, false, false, true, true, true, true, true, false, true, false, false, true, false, false, true, false, false, true, true, false, true, false, false, false, false, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, false, false, false, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, false, true, true, false, false, true, false, true, false, true, false, true, false, false, true, false, false, true, false, false, false, false, false, false, true, false, false, true, false, true, false, true, true, false, false, false, false, false, false, false, true, true, true, true, true, false, false, true, true, false, true, true, true, true, false, true, false, true, false, false, true, true, false, true, true, true, false, true, false, false, false, true, true, true, false, false, true, true, true, true, true, false, true, false, false, true, false, false, true, false, false, true, true, false, true, false, false, false, false, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, true, false, false, false, true, true, true, true, false, false, false, false, false, false, false, false, true, true, false, true, true, true, true, true, true, false, false, true, false, false, true, false, false, true, false, true, false, false, true, true, true, false, true, false, false, false, true, true, true, false, false, false, false, true, true, true, true, true, true, true, false, false, true, false, false, true, false, false, false, true, false, true, false, false, true, false, true, false, false, true, true, true, true, false, false, true, true, false, true, true, false, true, true, true, false, false, true, false, false, false, true, false, true, false, false, true, false, true, false, true, false, false, false, false, true, false]);
            let encoded = BinVector::from_bools(&[true, true, true, true, true, false, false, false, true, true, true, true, false, false, false, false, false, false, false, false, true, true, false, true, true, true, true, true, true, false, false, true, false, false, true, false, false, true, false, true, false, false, true, true, true, false, true, false, false, false, true, true, true, false, false, false, false, true, true, true, true, true, true, true, false, false, true, false, false, true, false, false, false, true, false, true, false, false, true, false, true, false, false, true, true, true, true, false, false, true, true, false, true, true, false, false, true, true, true, false, false, true, false, false, false, true, false, true, false, false, true, true, false, true, false, true, false, false, false, false, false, true, false, false, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, true, false, false, false, true, true, true, true, false, false, false, false, false, false, false, false, true, true, false, true, true, true, true, true, true, false, false, true, false, false, true, false, false, true, false, true, false, false, true, true, true, false, true, false, false, true, true, true, true, false, false, false, false, true, true, true, true, true, true, true, false, false, true, false, false, true, false, false, false, true, false, true, false, false, true, false, true, false, false, true, true, true, true, false, false, true, true, false, true, true, false, false, true, true, true, false, false, true, false, false, false, true, false, true, false, false, true, true, false, true, false, true, false, false, false, false, false, true, false, false, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, false, false, true, true, false, false, true, false, true, false, false, false, true, true, false, true, true, false, false, true, false, false, false, true, true, true, false, false, false, true, true, false, true, false, false, false, false, false, false, false, true, true, false, false, false, true, false, true, false, true, false, false, false, true, true, true, false, false, true, true, true, false, false, false, true, true, true, false, false, false, false, true, true, true, true, false, true, false, false, true, true, false, true, true, false, true, true, false, true, false, true, false, true, true, true, false, true, false, false, true, true, true, false, true, false, true, false, false, false, true, false, false, false, true, false, true]);
            let encoded = BinVector::from_bools(&[true, true, true, true, false, false, true, true, false, false, true, false, true, false, false, false, true, true, false, true, true, false, false, true, false, false, false, true, true, true, false, false, false, true, true, false, true, false, false, false, false, false, false, false, true, true, false, false, false, true, false, true, false, true, false, false, false, true, true, true, false, false, true, true, true, false, false, false, true, true, true, false, false, false, false, true, true, true, true, false, true, false, false, true, true, false, true, true, false, true, true, false, true, false, true, true, false, true, true, true, false, true, false, false, true, true, true, false, true, false, true, true, false, false, false, true, false, false, true, false, true, false, true, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, false, false, true, true, false, false, true, true, true, false, false, false, true, true, false, true, true, false, false, true, false, false, false, true, true, true, false, false, false, true, true, false, true, false, false, false, false, false, false, false, true, true, false, false, false, true, false, true, false, true, false, false, false, true, true, true, false, false, true, true, true, false, false, false, true, true, true, false, false, false, false, true, true, true, true, false, true, false, false, true, true, false, true, true, false, true, true, false, true, false, true, true, false, true, true, true, false, true, false, false, true, true, true, false, true, false, true, true, false, false, false, true, false, false, true, false, true, false, true, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, true, false, false, false, true, true, true, false, true, false, true, false, true, false, true, false, false, true, false, false, false, true, true, false, true, false, true, true, true, false, false, false, false, true, false, true, false, false, true, true, false, true, true, false, true, false, false, true, true, true, true, false, false, false, true, true, false, false, false, true, false, true, true, false, false, false, true, false, true, false, true, false, false, false, false, false, true, true, true, false, true, false, true, false, true, false, false, true, false, true, true, true, false, true, false, true, false, true, true, true, true, false, true, true, false, true, false, true, false, false, true, false, false, false, false, false]);
            let encoded = BinVector::from_bools(&[false, true, true, false, true, false, false, false, true, true, true, false, true, false, true, false, true, false, true, false, false, true, false, false, false, true, true, false, true, false, true, true, true, false, false, false, false, true, false, true, false, false, true, true, false, true, true, false, true, false, false, true, true, true, true, false, false, false, true, true, false, false, false, true, false, true, true, false, false, false, true, false, true, false, true, false, false, false, false, false, true, true, true, false, true, false, true, false, true, false, false, true, false, true, true, true, true, false, true, false, true, false, true, true, true, true, false, true, true, false, false, true, false, true, false, false, true, false, true, false, false, false, false, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, true, false, false, false, true, true, true, false, true, false, true, false, true, false, true, false, false, true, false, false, false, true, true, false, true, false, true, true, true, false, false, false, false, true, false, true, false, false, true, true, false, true, true, false, true, false, false, true, true, true, true, false, false, false, true, true, false, false, false, true, false, true, true, false, false, false, true, false, true, false, true, false, false, false, false, false, true, true, true, false, true, false, true, false, true, false, false, true, false, true, true, true, true, false, true, false, true, false, true, true, true, true, false, true, false, false, false, true, false, true, false, false, true, false, true, false, false, false, false, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, false, true, false, false, false, false, false, false, true, true, false, true, true, true, true, false, false, true, true, true, false, true, true, true, true, false, false, false, false, true, false, true, false, false, true, true, false, true, true, false, true, false, true, true, true, true, true, true, false, false, false, true, true, true, false, false, true, true, true, false, true, true, true, true, false, true, true, true, true, false, false, true, true, false, true, false, false, false, true, false, true, false, false, true, true, true, true, false, false, true, true, false, false, false, false, false, true, true, false, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[true, true, true, false, false, true, false, false, false, false, false, false, true, true, false, true, true, true, true, false, false, true, true, true, false, true, true, true, true, false, false, false, false, true, false, true, false, false, true, true, false, true, true, false, true, false, true, true, true, true, true, true, false, false, false, true, true, true, false, false, true, true, true, false, true, true, true, true, false, true, true, true, true, false, false, true, true, false, true, false, false, false, true, false, true, false, false, true, true, true, true, false, false, true, true, true, false, false, false, false, false, true, true, false, true, true, true, true, true, true, false, false, true, true, true, true, true, true, true, true, true, false, false, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, false, true, true, false, false, false, false, false, true, true, false, true, true, true, true, false, false, true, true, true, false, true, true, true, true, false, false, false, false, true, false, true, false, false, true, true, false, true, true, false, true, false, true, true, true, true, true, true, false, false, false, true, true, true, false, false, true, true, true, false, true, true, true, true, false, true, true, true, true, false, false, true, true, false, true, false, false, false, true, false, true, false, false, true, true, true, true, false, false, true, true, true, false, false, false, false, false, true, true, false, true, true, true, true, true, true, false, false, true, true, true, true, true, true, true, true, true, false, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, true, true, true, false, true, false, false, true, false, true, true, true, false, false, true, false, false, false, false, false, true, false, true, false, false, false, true, false, false, false, true, false, true, true, false, false, false, true, true, true, false, false, false, true, false, true, true, false, false, true, true, false, false, false, true, true, false, false, false, true, true, true, true, true, false, false, false, false, false, false, true, false, true, true, false, false, true, false, false, false, false, false, false, false, true, true, false, false, false, false, false, true, true, false, false, true, true, true, false, false, true, false, true, true, false, false, false, true, true, true, true, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, false, true, true, true, true, false, true, false, false, true, false, true, true, true, false, false, true, false, false, false, false, false, true, false, true, false, false, false, true, false, false, false, true, false, true, true, false, false, false, true, true, true, false, false, false, true, false, true, true, false, false, true, true, false, false, false, true, true, false, false, false, true, true, true, true, true, false, false, false, false, false, false, true, false, true, true, false, false, true, false, false, false, false, false, false, false, true, true, false, false, false, false, false, false, true, true, false, false, true, true, true, false, false, true, false, true, true, false, false, false, false, true, true, true, true, false, true, false, true, false, false, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, true, true, true, false, true, false, false, true, false, true, true, true, false, false, true, false, false, false, false, false, true, false, true, false, false, false, true, false, false, false, true, false, true, true, false, false, false, true, true, true, false, true, false, true, false, true, true, false, false, true, true, false, false, false, true, true, false, false, false, true, true, true, true, true, false, false, false, false, false, false, true, false, true, true, false, false, true, false, false, false, false, false, false, false, true, true, false, false, false, false, false, false, true, true, false, false, true, true, true, false, false, true, false, true, true, false, false, false, false, true, true, true, true, false, true, false, true, false, false, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, true, false, false, true, false, false, true, false, true, false, true, false, false, true, true, false, true, true, false, true, true, true, true, false, true, false, true, true, true, true, true, false, false, true, false, false, false, false, false, true, true, false, false, false, true, false, false, true, false, false, false, false, true, false, false, false, false, true, true, false, true, false, true, false, true, true, false, true, true, true, true, false, false, false, false, false, false, false, true, true, false, true, true, true, false, true, true, true, false, true, false, true, true, false, false, true, false, false, false, true, true, true, true, true, false, true, false, false, true, false, true, false, true, true, false, false]);
            let encoded = BinVector::from_bools(&[false, false, false, true, true, false, false, true, false, false, true, false, true, false, true, false, false, true, true, false, true, true, false, true, true, true, true, false, true, false, true, true, true, true, true, false, false, true, false, false, false, false, false, true, true, false, false, false, true, false, false, true, false, false, false, false, true, false, false, false, false, true, true, false, true, false, true, false, true, true, false, true, true, true, true, false, false, false, false, false, false, false, true, true, false, true, true, true, false, true, true, true, false, true, true, false, true, true, false, false, true, false, false, false, true, true, true, true, true, false, true, true, false, false, true, false, true, false, true, true, true, false, true, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, true, false, false, true, false, false, true, false, true, false, true, false, false, true, true, false, true, true, false, true, true, true, true, false, true, false, true, true, true, true, true, false, false, true, false, false, false, false, false, true, true, false, false, false, true, false, false, true, false, false, false, false, true, false, false, false, false, true, true, false, true, true, true, false, true, true, false, true, true, true, true, false, false, false, false, false, false, false, true, true, false, true, true, true, false, true, true, true, false, true, true, false, true, true, false, false, true, false, false, false, true, true, true, true, true, false, true, true, false, false, true, false, true, false, true, true, true, false, true, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, false, true, false, false, true, true, true, true, true, true, false, false, false, false, true, true, false, false, true, true, false, true, false, true, true, true, true, false, true, true, true, false, false, false, true, false, true, true, false, false, false, false, false, false, false, true, true, false, true, true, false, true, false, true, false, true, false, false, false, true, true, true, false, false, false, true, false, false, false, false, true, true, true, false, false, true, false, true, false, true, false, true, false, false, true, false, false, true, false, true, true, false, true, false, false, false, true, false, true, false, true, false, false, true, false, true, true, true, true, true, false, false, true, true, false]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, false, true, false, false, true, true, true, true, true, true, false, false, false, false, true, true, false, false, true, true, false, true, false, true, true, true, true, false, true, true, true, false, false, false, true, false, true, true, false, false, false, false, false, false, false, true, true, false, true, true, false, true, false, true, false, true, false, false, false, true, true, true, false, false, false, true, false, false, false, false, true, true, true, false, false, true, false, true, false, true, false, true, false, false, true, false, false, true, false, true, true, true, false, true, false, false, false, true, false, true, false, true, false, false, true, true, false, true, true, true, true, true, false, true, false, true, true, true, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, false, true, false, false, true, true, true, true, true, true, false, false, false, false, true, true, false, false, true, true, false, true, false, true, true, true, true, false, true, true, true, false, false, false, true, false, true, true, false, false, false, false, false, false, false, true, true, false, true, true, false, true, false, true, false, true, false, false, false, true, true, false, false, false, false, true, false, false, false, false, true, true, true, false, false, true, false, true, false, true, false, true, false, false, true, false, false, true, false, true, true, true, false, true, false, false, false, true, false, true, false, true, false, false, true, true, false, true, true, true, true, true, false, true, false, true, true, true, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, false, false, true, false, true, true, true, true, true, true, false, false, true, true, true, true, true, false, false, true, false, false, false, false, false, false, true, false, true, true, false, true, true, true, true, true, false, false, false, false, true, true, true, false, true, true, true, true, false, true, false, true, true, false, true, false, true, true, false, true, false, true, false, true, false, true, false, true, true, true, true, false, false, true, true, false, false, true, false, true, false, false, true, false, false, true, true, true, true, false, true, true, false, true, false, false, false, true, true, true, false, true, false, false, false, false, true, true, false, true, false, true, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, false, true, false, false, false, true, false, true, true, true, true, true, true, false, false, true, true, true, true, true, false, false, true, false, false, false, false, false, false, true, false, true, true, false, true, true, true, true, true, false, false, false, false, true, true, true, false, true, true, true, true, false, true, false, true, true, false, true, false, true, true, false, true, false, true, false, true, false, true, false, true, true, true, true, false, false, true, true, false, false, true, false, true, false, false, true, false, false, true, true, true, true, false, true, true, true, false, true, false, false, false, true, true, true, false, true, false, false, false, false, false, true, true, false, true, false, true, false, false, true, false, false, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, false, false, true, false, true, true, true, true, true, true, false, false, true, true, true, true, true, false, false, true, false, false, false, false, false, false, true, false, true, true, false, true, true, true, true, true, false, false, false, false, true, true, true, false, true, true, true, true, false, true, false, true, true, false, true, false, true, true, false, true, false, true, false, true, false, true, false, true, true, true, true, false, false, true, true, false, false, true, false, true, false, true, true, false, false, true, true, true, true, false, true, true, true, false, true, false, false, false, true, true, true, false, true, false, false, false, false, false, true, true, false, true, false, true, false, false, true, false, false, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, false, false, false, true, false, false, true, false, true, false, false, false, false, false, true, true, true, true, false, true, true, true, true, false, true, true, true, true, false, true, true, true, false, true, false, true, true, true, false, true, true, true, false, true, false, true, true, true, true, false, true, true, false, false, true, false, true, false, true, true, false, false, true, true, true, false, false, true, false, true, true, true, false, true, true, false, false, false, true, false, true, true, true, false, false, true, false, true, false, false, true, false, false, true, false, true, true, true, false, true, false, false, false, true, true, true, false, true, false, false, false, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, true, true, false, false, false, true, false, false, true, false, true, false, false, false, false, false, true, true, true, true, false, true, true, true, true, false, true, true, true, true, false, true, true, true, false, true, false, true, true, true, false, true, true, true, false, true, false, true, true, true, true, false, true, true, false, false, true, false, true, false, true, true, false, false, true, true, true, false, false, true, false, true, true, true, false, true, true, false, false, false, true, false, true, true, true, false, false, true, false, true, false, false, true, true, false, false, true, false, true, true, true, false, true, false, false, false, true, true, true, true, false, true, false, false, false, false, true, false, true, false, true, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, false, false, false, true, false, false, true, false, true, false, false, false, false, false, true, true, true, true, false, true, true, true, true, false, true, true, true, true, false, true, true, true, false, true, false, true, true, true, false, true, true, true, false, true, false, true, true, true, true, false, true, true, false, false, true, false, true, false, true, true, false, false, true, true, true, false, false, true, false, true, true, true, false, true, true, false, false, false, true, false, true, true, true, false, false, true, false, true, false, false, true, true, false, false, true, false, true, true, true, false, true, false, false, false, true, true, true, true, false, true, true, false, false, false, true, false, true, false, true, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, true, false, true, false, true, false, true, false, false, true, true, false, false, true, true, false, true, true, true, false, false, true, false, true, false, false, true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, false, false, false, true, true, false, false, false, false, false, false, false, false, true, true, false, true, true, true, true, false, true, true, true, false, false, true, true, false, false, true, true, true, true, false, false, false, false, true, true, true, false, true, false, false, true, true, false, false, false, false, true, false, false, false, true, false, true, true, false, false, false, false, true, false, true, true, false, false, false, true, false, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, true, false, true, false, true, false, true, false, false, true, true, false, false, true, true, false, true, true, true, false, false, true, false, true, false, false, true, true, true, true, true, true, false, true, true, false, true, true, true, true, true, false, false, false, true, true, false, false, false, false, false, false, false, false, true, true, false, true, true, true, true, false, true, true, true, false, false, true, true, false, false, true, true, true, true, false, false, false, false, true, true, true, false, true, false, false, true, true, false, false, false, false, false, true, false, false, false, true, false, true, true, false, false, false, false, false, true, false, true, true, false, false, false, true, true, false, false, false, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, true, true, false, true, false, true, false, true, false, false, true, true, false, false, true, true, false, true, true, true, false, false, true, false, true, false, false, true, true, true, false, true, true, false, true, true, false, true, true, true, true, true, false, false, false, true, true, false, false, false, false, false, false, false, false, true, true, false, true, true, true, true, false, true, true, true, false, false, true, true, false, false, true, true, true, true, false, false, false, false, true, true, true, false, true, false, false, true, true, false, false, false, false, false, true, false, false, false, true, false, true, true, false, false, false, false, false, true, false, true, true, false, false, false, true, true, false, false, false, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, true, false, true, false, false, true, true, true, false, false, true, false, false, false, false, true, true, true, false, true, true, true, false, true, true, false, true, false, false, true, false, false, true, true, true, false, true, true, false, false, true, true, true, false, true, true, true, false, false, false, true, true, false, true, true, true, false, true, true, true, true, true, false, true, true, true, true, false, false, true, true, true, false, true, false, false, false, true, true, true, false, true, false, false, false, true, true, false, false, false, true, false, false, false, false, true, false, false, false, false, true, false, true, true, false, true, true, true, false, true, true, true, false, false, false, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, true, false, true, false, false, true, true, true, false, false, true, false, false, false, false, true, true, true, false, true, true, true, false, true, true, false, true, false, false, true, false, false, true, true, true, false, true, true, false, false, true, true, true, false, true, true, true, false, false, false, true, true, false, true, true, true, false, true, true, true, true, true, false, true, true, true, true, false, false, true, true, true, false, true, false, false, false, true, true, true, false, true, false, false, false, true, true, false, false, false, false, true, false, false, false, false, true, false, false, false, false, true, false, true, true, false, true, true, true, true, false, true, true, true, false, false, false, false, false, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, true, false, true, false, false, true, true, true, false, false, true, false, false, false, false, true, true, true, false, true, true, true, false, true, true, false, true, false, false, true, false, false, true, true, true, false, true, true, false, false, true, true, true, false, true, true, true, false, false, false, true, true, false, true, true, true, false, true, true, true, true, true, false, true, true, true, true, false, false, true, true, true, false, true, false, false, false, true, true, true, false, true, false, false, false, true, true, false, false, false, false, true, false, false, false, false, true, false, false, false, false, true, false, true, true, false, true, true, true, true, false, true, true, true, false, false, false, false, false, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, true, false, false, false, true, true, false, true, false, true, true, false, false, false, true, false, false, true, true, false, true, true, false, false, true, true, true, false, false, true, false, true, false, false, true, true, true, false, true, false, true, false, false, false, false, true, false, true, false, false, true, false, true, true, true, false, false, false, true, false, true, false, true, false, true, false, true, false, false, false, false, false, false, false, true, true, true, false, false, true, false, true, false, false, true, true, false, true, false, true, false, false, true, false, true, false, true, true, true, false, false, false, false, true, true, false, false, false, false, true, true, false, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, true, false, false, false, true, true, false, true, false, true, true, false, false, false, true, false, false, true, true, false, true, true, false, false, true, true, true, false, false, true, false, true, false, false, true, true, true, false, true, false, true, false, false, false, false, true, false, true, false, false, true, false, true, true, true, false, false, false, true, false, true, false, true, false, true, false, true, false, false, false, false, false, false, false, true, true, true, false, false, true, false, true, false, false, true, true, false, true, false, true, true, false, false, true, false, true, false, true, true, true, false, false, false, false, true, false, true, false, false, false, false, true, true, false, false, true, false, false, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, true, true, false, false, false, true, true, false, true, false, true, true, false, false, false, true, false, false, true, true, false, true, true, false, false, true, true, true, false, false, true, false, true, false, false, true, true, true, false, true, false, true, false, false, false, false, true, false, true, false, false, true, false, true, true, true, false, false, false, true, false, true, false, true, false, true, false, true, false, false, false, false, false, false, false, true, true, true, false, false, true, false, true, false, false, true, true, false, true, false, true, true, false, false, true, false, true, false, true, true, true, false, false, false, false, true, false, true, false, false, false, false, true, true, true, false, true, false, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, false, true, false, true, true, false, true, true, true, false, true, true, false, false, true, false, false, false, true, false, true, false, true, false, false, false, true, true, true, true, false, true, true, true, true, false, false, false, false, false, false, true, false, true, false, true, true, true, true, true, true, false, false, false, true, true, true, false, true, false, true, false, true, false, true, false, true, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, true, false, false, true, false, true, false, true, true, true, false, false, true, false, true, false, false, true]);
            let encoded = BinVector::from_bools(&[false, true, false, false, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, false, true, false, true, true, false, true, true, true, false, true, true, false, false, true, false, false, false, true, false, true, false, true, false, false, false, true, true, true, true, false, true, true, true, true, false, false, false, false, false, false, true, false, true, false, true, true, true, true, true, true, false, false, false, true, true, true, false, true, false, true, false, true, false, true, false, true, true, false, false, false, false, false, false, false, true, true, false, false, false, false, false, false, true, true, false, false, true, false, true, false, true, true, true, true, false, false, true, false, true, true, false, false, true, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, false, false, true, false, false, false, true, true, true, true, false, false, true, true, false, false, true, false, true, true, false, true, true, true, false, true, true, false, false, true, false, false, false, true, false, true, false, true, false, false, false, true, true, true, true, false, true, true, true, true, false, false, false, false, false, false, true, false, true, false, true, true, true, true, true, true, true, false, false, true, true, true, false, true, false, true, false, true, false, true, false, true, true, false, false, false, false, false, false, false, true, true, false, false, false, false, false, false, true, true, false, false, true, false, true, false, true, true, true, true, false, false, true, false, true, true, false, false, true, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, true, true, true, true, false, true, true, true, true, false, true, true, false, false, false, true, true, true, true, true, true, true, true, false, false, false, true, true, false, false, true, true, true, true, false, false, false, true, true, false, true, false, true, true, true, false, true, false, true, false, false, false, false, false, true, false, false, false, true, false, false, true, false, false, false, false, true, false, false, false, false, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, false, true, true, false, true, true, false, true, false, true, false, false, true, true, false, true, false, true, false, false, false, true]);
            let encoded = BinVector::from_bools(&[true, true, false, false, true, true, true, true, false, true, true, true, true, false, true, true, false, false, false, true, true, true, true, true, true, true, true, false, false, false, true, true, false, false, true, true, true, true, false, false, false, true, true, false, true, false, true, true, true, false, true, false, true, false, false, false, false, false, true, false, false, false, true, false, false, true, false, false, false, false, true, false, false, false, false, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, true, true, false, true, false, false, true, false, true, false, true, true, false, true, true, false, true, false, true, false, false, false, true, true, false, true, false, true, true, false, false, false, true, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, true, true, true, true, false, true, true, true, true, false, true, true, false, false, false, true, true, true, true, true, true, true, true, false, false, false, true, true, false, false, true, true, true, true, false, false, false, true, true, false, true, false, true, true, true, false, true, false, true, false, false, false, false, false, true, false, false, false, true, false, false, true, false, false, false, false, true, false, false, false, false, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, true, true, false, true, false, false, true, false, true, false, true, true, false, true, true, false, true, false, true, false, false, false, false, true, false, true, false, true, true, false, false, false, true, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, true, false, false, true, false, false, true, false, false, true, false, true, false, true, true, true, false, true, false, true, true, true, true, true, false, true, false, false, true, true, false, false, true, true, false, true, false, false, false, false, true, true, true, true, false, false, false, true, true, false, false, true, false, false, false, false, true, false, true, true, true, true, true, true, false, false, false, true, false, true, true, false, true, false, false, true, true, true, false, true, true, false, false, true, false, false, true, false, false, false, true, true, false, false, true, true, false, true, false, true, true, true, false, false, false, false, true, false, false, true, false, true, true, false, false, true]);
            let encoded = BinVector::from_bools(&[true, false, false, true, true, false, false, true, false, false, true, false, false, true, false, true, false, true, true, true, false, true, false, true, true, true, true, true, false, true, false, false, true, true, false, false, true, true, false, true, false, false, false, false, true, true, true, true, false, false, false, true, true, false, false, true, false, false, false, false, true, false, true, true, true, true, true, true, false, false, false, true, false, true, true, false, true, false, false, true, true, true, false, true, true, false, false, true, false, false, true, false, false, false, false, true, true, false, false, true, true, false, true, false, true, true, true, false, false, false, false, false, true, false, false, true, false, true, false, true, false, false, true, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, true, false, false, true, false, false, true, false, false, true, false, true, false, true, true, true, false, true, false, true, true, true, true, true, false, true, false, false, true, true, false, false, true, true, false, true, false, false, false, false, true, true, true, true, false, false, false, true, true, false, false, true, false, false, false, false, true, false, true, true, true, true, true, true, false, false, false, true, false, true, true, false, true, false, false, true, true, true, false, true, true, false, false, true, false, false, true, false, false, false, false, true, true, false, false, true, false, false, true, false, true, true, true, false, false, false, false, false, true, false, false, true, false, true, false, true, false, false, true, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, false, false, true, false, true, true, false, true, true, true, false, false, false, true, false, false, true, true, false, true, false, false, true, true, true, false, false, false, false, false, true, true, false, true, true, true, false, false, false, true, false, false, false, false, false, false, false, false, true, true, true, true, true, false, true, true, false, false, false, true, true, true, true, false, true, true, true, true, false, false, false, false, true, false, false, false, false, true, false, true, false, true, true, false, false, false, false, false, true, true, true, true, true, false, false, true, true, true, false, true, true, true, true, false, false, false, true, false, false, false, true, false, false, true, false, true]);
            let encoded = BinVector::from_bools(&[false, false, false, false, false, false, true, false, true, true, false, true, true, true, false, false, false, true, false, false, true, true, false, true, false, false, true, true, true, false, false, false, false, false, true, true, false, true, true, true, false, false, false, true, false, false, false, false, false, false, false, false, true, true, true, true, true, false, true, true, false, false, false, true, true, true, true, false, true, true, true, true, false, false, false, false, true, false, false, false, false, true, false, true, false, true, true, false, false, false, false, false, true, true, false, true, true, true, false, false, true, true, true, false, true, true, true, true, false, false, true, false, true, false, false, false, true, false, false, false, true, false, false, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, false, false, true, false, true, true, false, true, true, true, false, false, false, true, false, false, true, true, false, true, false, false, true, true, true, false, false, false, false, false, true, true, false, true, true, true, false, false, false, true, false, false, false, false, false, false, false, false, true, true, true, true, true, false, true, true, false, false, false, true, true, true, true, false, true, true, true, true, false, false, false, false, true, false, false, false, false, true, false, true, true, true, true, false, false, false, false, false, true, true, false, true, true, true, false, false, true, true, true, false, true, true, true, true, false, false, true, false, true, false, false, false, true, false, false, false, true, false, false, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, true, true, true, true, true, true, false, true, true, true, true, false, false, true, false, false, true, false, true, false, false, false, false, false, false, false, true, false, false, true, true, false, false, false, false, false, false, true, false, true, true, false, true, false, true, true, true, true, true, true, true, false, false, false, true, false, true, true, true, false, false, true, true, false, false, false, false, false, true, false, true, true, false, false, true, false, true, true, true, false, false, false, false, true, false, true, true, true, false, true, true, false, false, false, true, false, false, false, false, true, true, true, true, false, false, true, false, true, false, true, false, true, false, false, false, false]);
            let encoded = BinVector::from_bools(&[true, true, false, true, true, true, true, true, true, true, false, true, true, true, true, false, false, true, false, false, true, false, true, false, false, false, false, false, false, false, true, false, false, true, true, false, false, false, false, false, false, true, false, true, true, false, true, false, true, true, true, true, true, true, true, false, false, false, true, false, true, true, true, false, false, true, true, false, false, false, false, false, true, false, true, true, false, false, true, false, true, true, true, false, false, false, false, true, false, true, true, true, false, true, true, true, false, false, false, true, false, false, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, true, true, false, false, false, true, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, true, true, true, true, true, true, false, true, true, true, true, false, false, true, false, false, true, false, true, false, false, false, false, false, true, false, true, false, false, true, true, false, false, false, false, false, false, true, false, true, true, false, true, false, true, true, true, true, true, true, true, false, false, false, true, false, true, true, true, false, false, true, true, false, false, false, false, false, true, false, true, true, false, false, true, false, true, true, true, false, false, false, false, true, false, true, true, true, false, true, true, true, false, false, false, true, false, false, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, true, true, false, false, false, true, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, false, true, false, true, false, false, false, true, true, true, true, true, false, false, false, true, false, true, true, false, true, false, false, false, true, true, false, true, true, false, false, true, true, true, true, false, false, false, false, false, true, true, true, false, true, true, true, false, false, false, true, false, false, false, false, false, true, false, true, true, false, true, false, true, true, true, true, true, true, true, false, false, true, true, true, false, false, false, false, true, false, false, false, true, true, true, true, true, false, false, false, true, false, false, true, true, false, true, false, true, true, true, false, false, false, false, false, true, false, false, true, false, true, false, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, true, false, true, false, true, false, false, false, true, true, true, true, true, false, false, false, true, false, true, true, false, true, false, false, false, true, true, false, true, true, false, false, true, true, true, true, false, false, false, false, false, true, true, true, false, true, true, true, false, false, false, true, false, false, false, false, false, true, false, true, true, false, true, false, true, true, true, true, true, true, true, false, false, true, true, true, false, false, false, false, true, false, false, false, true, true, true, true, true, false, false, true, false, true, false, false, true, true, false, true, false, true, true, true, false, false, false, false, false, false, true, false, false, true, false, false, true, false, true, true, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, false, true, false, true, false, false, false, true, true, true, true, true, false, false, false, true, false, true, true, false, true, false, false, false, true, true, false, true, true, true, false, true, true, true, true, false, false, false, false, false, true, true, true, false, true, true, true, false, false, false, true, false, false, false, false, false, true, false, true, true, false, true, false, true, true, true, true, true, true, true, false, false, true, true, true, false, false, false, false, true, false, false, false, true, true, true, true, true, false, false, true, false, true, false, false, true, true, false, true, false, true, true, true, false, false, false, false, false, false, true, false, false, true, false, false, true, false, true, true, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, true, false, true, true, false, false, true, false, false, false, true, false, false, false, true, true, true, false, false, true, true, true, false, false, false, true, false, false, true, false, true, false, true, true, true, false, false, true, false, false, false, true, true, false, true, false, false, false, false, false, true, true, true, false, true, true, true, true, true, false, false, false, false, true, true, true, true, true, false, true, true, true, true, true, true, false, true, false, false, false, true, true, false, false, false, false, true, false, false, true, false, true, true, false, false, false, false, true, false, true, false, false, false, true, false, true, false, false, false, false, false, true, true, false, false, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, true, false, true, true, false, false, true, false, false, false, true, false, false, false, true, true, true, false, false, true, true, true, false, false, false, true, false, false, true, false, true, false, true, true, true, false, false, true, false, false, false, true, true, false, true, false, false, false, false, false, true, true, true, false, true, true, true, true, true, false, false, false, false, true, true, true, true, true, false, true, true, true, true, true, true, false, true, false, false, false, true, true, false, false, false, false, true, false, false, true, true, false, true, true, false, false, false, false, true, false, true, false, false, false, true, false, false, true, false, false, false, false, false, true, true, true, false, false, false, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, true, false, true, true, false, false, true, false, false, false, true, false, false, false, true, true, true, false, false, true, true, true, false, false, false, true, false, false, true, false, true, false, true, true, true, false, false, true, false, false, false, true, true, false, true, false, false, false, false, false, true, true, true, true, true, true, true, true, true, false, false, false, false, true, true, true, true, true, false, true, true, true, true, true, true, false, true, false, false, false, true, true, false, false, false, false, true, false, false, true, true, false, true, true, false, false, false, false, true, false, true, false, false, false, true, false, false, true, false, false, false, false, false, true, true, true, false, false, false, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, true, false, false, false, true, true, false, false, true, true, false, false, false, true, true, true, false, false, false, false, false, false, true, false, true, true, false, true, false, true, true, false, true, false, true, true, true, false, true, false, true, false, false, false, true, true, true, false, false, false, false, true, true, true, true, true, true, false, false, false, true, false, true, true, false, false, false, true, true, true, true, false, true, false, false, false, true, true, false, false, false, false, true, false, false, true, false, true, false, false, true, true, false, false, true, true, true, true, true, true, false, false, true, false, false, false, true, true, true, true, false, false, false, true, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, true, false, false, false, true, true, false, false, true, true, false, false, false, true, true, true, false, false, false, false, false, false, true, false, true, true, false, true, false, true, true, false, true, false, true, true, true, false, true, false, true, false, false, false, true, true, true, false, false, false, false, true, true, true, true, true, true, false, false, false, true, false, true, true, false, false, false, true, true, true, true, false, true, false, false, false, true, true, false, false, false, false, true, false, false, true, false, true, false, false, true, true, true, false, false, true, true, true, true, true, true, false, false, true, false, false, false, false, true, true, true, true, false, false, true, false, true, false, false, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, true, false, false, false, true, true, false, false, true, true, false, false, false, true, true, true, false, false, false, false, false, false, true, false, true, true, false, true, false, true, true, false, true, false, true, true, true, false, true, false, true, false, false, false, true, true, true, false, false, false, false, true, true, true, true, true, true, false, false, false, true, false, true, true, false, false, false, true, true, true, true, false, true, false, false, false, true, true, false, false, false, false, true, false, false, true, false, false, false, false, true, true, true, false, false, true, true, true, true, true, true, false, false, true, false, false, false, false, true, true, true, true, false, false, true, false, true, false, false, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, false, true, true, true, false, true, false, false, true, true, true, false, true, false, false, true, true, true, true, false, false, true, true, true, true, false, false, false, true, false, false, true, true, false, false, true, false, true, false, true, true, true, true, true, false, true, true, false, true, false, true, false, false, true, true, false, false, false, true, false, true, true, false, false, false, false, false, false, false, false, true, false, false, false, true, false, true, true, false, false, true, true, true, false, false, false, true, true, false, false, true, false, false, false, false, true, true, false, false, false, true, false, false, false, false, true, false, true, false, false, true, false, false, true, true, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, false, true, true, true, false, true, false, false, true, true, true, false, true, false, false, true, true, true, true, false, false, true, true, true, true, false, false, false, true, false, false, true, true, false, false, true, false, true, false, true, true, true, true, true, false, true, true, false, true, false, true, false, false, true, true, false, false, false, true, false, true, true, false, false, false, false, false, false, false, false, true, false, false, false, true, false, true, true, false, false, true, true, true, false, false, false, true, true, false, false, false, true, false, false, false, false, true, true, false, false, false, true, false, false, false, false, true, true, false, true, false, false, true, false, true, false, true, true, false, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, false, true, true, true, false, false, false, false, true, true, true, false, true, false, false, true, true, true, true, false, false, true, true, true, true, false, false, false, true, false, false, true, true, false, false, true, false, true, false, true, true, true, true, true, false, true, true, false, true, false, true, false, false, true, true, false, false, false, true, false, true, true, false, false, false, false, false, false, false, false, true, false, false, false, true, false, true, true, false, false, true, true, true, false, false, false, true, true, false, false, false, true, false, false, false, false, true, true, false, false, false, true, false, false, false, false, true, true, false, true, false, false, true, false, true, false, true, true, false, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, false, false, true, false, true, true, true, true, false, false, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, true, true, true, false, false, true, true, false, false, false, true, false, false, false, false, false, false, true, true, false, false, false, true, false, false, false, true, false, true, false, false, true, true, true, false, true, true, false, true, false, true, false, true, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, false, false, false, false, true, true, false, true, true, true, false, false, false, false, false, false, false, true, false, true, true, false, true, false, true, false, false, true, true]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, false, false, true, false, true, true, true, true, false, false, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, true, true, true, false, false, true, true, false, false, false, true, false, false, false, false, false, false, true, true, false, false, false, true, false, false, false, true, false, true, false, false, true, true, true, false, true, true, false, true, false, true, false, true, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, false, false, false, false, false, true, true, false, true, true, true, false, false, false, false, false, false, false, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, true, false, false, true, false, true, true, true, true, false, false, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, true, true, true, false, false, true, true, false, false, false, true, false, false, false, false, false, false, true, true, false, false, false, true, false, false, false, true, false, true, false, false, true, true, true, false, true, true, true, true, false, true, false, true, true, true, true, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, false, false, false, false, false, true, true, false, true, true, true, false, false, false, false, false, false, false, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, false, false, false, true, true, true, false, false, true, false, true, false, false, true, false, false, true, true, true, true, false, true, false, true, false, false, false, false, false, true, false, false, false, true, true, false, true, true, false, true, false, false, true, false, true, true, true, true, true, true, false, true, false, false, false, true, true, false, true, true, false, true, false, true, false, true, false, false, false, false, true, true, false, true, false, false, false, false, false, true, false, true, false, true, true, false, false, false, false, true, false, true, false, true, true, false, false, true, true, true, true, true, true, false, true, false, false, true, false, true, false, false, false, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, false, false, false, true, true, true, false, false, true, false, true, false, false, true, false, false, true, true, true, true, false, true, false, true, false, false, false, false, false, true, false, false, false, true, true, false, true, true, false, true, false, false, true, false, true, true, true, true, true, true, false, true, false, false, false, true, true, false, true, true, false, true, false, true, false, true, false, false, false, false, true, true, false, true, false, false, false, false, false, true, false, true, false, true, true, false, false, false, false, false, true, false, true, false, true, true, false, false, true, true, true, true, true, true, false, false, true, false, false, true, false, true, false, true, false, false, false, true, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, true, false, false, false, true, true, true, false, false, true, false, true, false, false, true, false, false, true, true, true, true, false, true, false, true, false, false, true, false, false, true, false, false, false, true, true, false, true, true, false, true, false, false, true, false, true, true, true, true, true, true, false, true, false, false, false, true, true, false, true, true, false, true, false, true, false, true, false, false, false, false, true, true, false, true, false, false, false, false, false, true, false, true, false, true, true, false, false, false, false, false, true, false, true, false, true, true, false, false, true, true, true, true, true, true, false, false, true, false, false, true, false, true, false, true, false, false, false, true, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, true, false, false, true, true, false, true, true, true, false, true, false, false, false, true, false, true, false, true, true, false, false, true, true, true, true, true, true, true, false, false, false, true, false, false, true, true, true, true, true, false, true, true, true, false, true, true, true, false, true, false, true, true, true, false, false, true, true, false, false, true, true, false, false, true, false, true, false, true, true, true, false, false, true, false, false, false, false, true, true, true, true, true, false, true, false, true, false, true, true, true, false, false, false, true, true, false, true, false, false, false, true, false, true, true, true, true, true, false, true, false, true, false, false, false, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, true, false, false, true, true, false, true, true, true, false, true, false, false, false, true, false, true, false, true, true, false, false, true, true, true, true, true, true, true, false, false, false, true, false, false, true, true, true, true, true, false, true, true, true, false, true, true, true, false, true, false, true, true, true, false, false, true, true, false, false, true, true, false, false, true, false, true, false, true, true, true, false, false, true, false, false, false, false, true, true, true, true, true, false, true, false, true, false, true, true, true, true, false, false, false, true, true, false, true, false, false, false, true, false, true, true, false, true, true, true, false, true, false, true, false, false, false, false, true, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, true, false, false, true, true, false, true, true, true, false, true, false, false, false, true, false, true, false, true, true, false, false, true, true, true, true, true, true, true, false, false, false, true, false, false, true, true, true, true, true, false, true, true, true, false, true, true, true, false, true, false, true, true, true, false, false, true, true, false, false, true, true, false, false, true, false, true, false, true, true, true, false, false, true, false, false, false, false, true, true, true, true, true, false, true, false, true, false, true, true, true, true, false, false, false, true, true, false, true, false, false, false, true, false, true, true, false, true, true, true, false, true, false, true, false, false, false, false, true, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, true, true, true, true, true, true, false, true, false, false, false, false, false, false, false, true, true, true, false, false, false, true, true, true, true, false, true, true, false, true, false, true, true, false, false, true, true, true, true, false, false, true, false, true, false, false, false, true, false, true, true, false, true, false, false, true, true, false, false, true, true, false, true, true, false, false, false, true, true, true, true, true, true, false, false, true, true, false, true, false, false, false, true, false, false, true, true, false, true, true, true, true, true, false, false, true, true, true, true, false, true, true, false, false, false, true, true, true, false, false, false, false, false, false, true, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, true, true, true, true, true, true, false, true, false, false, false, false, false, false, false, true, true, true, false, false, false, true, true, true, true, false, true, true, false, true, false, true, true, false, false, true, true, true, true, false, false, true, false, true, false, false, false, true, false, true, true, false, true, false, false, true, true, false, false, true, true, false, true, true, false, false, false, true, true, true, true, true, true, false, false, true, true, false, true, false, false, false, true, false, false, true, true, false, true, true, false, true, true, true, false, false, true, true, true, true, false, true, true, false, false, false, false, true, true, true, false, false, false, false, false, false, false, true, false, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, true, true, true, true, true, true, false, true, false, false, false, false, false, false, false, true, true, true, false, false, false, true, true, true, true, false, true, true, false, true, false, true, true, false, false, true, true, true, true, false, false, true, false, true, false, false, false, true, false, true, true, false, true, false, false, false, true, false, false, true, true, false, true, true, false, false, false, true, true, true, true, true, true, false, false, true, true, false, true, false, false, false, true, false, false, true, true, false, true, true, false, true, true, true, false, false, true, true, true, true, false, true, true, false, false, false, false, true, true, true, false, false, false, false, false, false, false, true, false, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, false, false, true, false, false, false, true, false, false, false, true, true, true, false, true, false, false, false, true, false, false, true, true, false, false, false, true, true, false, true, true, false, true, false, true, true, true, false, false, true, false, true, false, true, true, false, true, false, false, false, false, false, true, false, false, true, true, true, false, false, false, true, false, true, true, false, true, false, true, false, false, false, false, true, false, false, false, false, true, true, false, true, false, true, false, true, true, false, true, false, false, false, false, false, false, false, true, true, false, false, false, true, true, false, true, true, false, true, true, false, true, false, true, false, false, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, false, false, true, false, false, false, true, false, false, false, true, true, true, false, true, false, false, false, true, false, false, true, true, false, false, false, true, true, false, true, true, false, true, false, true, true, true, false, false, true, false, true, false, true, true, false, true, false, false, false, false, false, true, false, false, true, true, true, false, false, false, true, false, true, true, false, true, false, true, false, false, false, false, true, false, false, false, false, true, true, false, true, false, true, false, true, true, false, true, false, true, false, false, false, false, false, false, true, true, false, false, false, true, true, false, true, true, true, false, true, true, false, true, false, false, true, false, false, false, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, false, false, true, false, false, false, true, false, false, false, true, true, true, false, true, false, false, false, true, false, false, true, true, false, false, false, true, true, false, true, true, false, true, false, true, true, true, false, false, true, false, true, false, true, true, false, true, false, false, false, false, false, true, false, false, true, true, true, false, false, false, true, false, true, true, false, true, false, true, false, false, false, false, true, false, false, false, false, false, true, false, true, false, true, false, true, true, false, true, false, true, false, false, false, false, false, false, true, true, false, false, false, true, true, false, true, true, true, false, true, true, false, true, false, false, true, false, false, false, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, true, false, false, false, true, false, true, true, true, false, false, false, true, false, true, false, true, true, true, false, false, false, false, false, true, false, false, false, true, true, true, true, false, false, false, true, false, true, false, false, false, true, true, true, false, true, false, true, true, true, true, false, true, false, false, true, false, false, true, false, true, true, true, false, false, true, true, false, true, true, true, true, true, false, false, true, false, true, false, false, true, true, true, false, true, false, true, false, true, false, true, false, true, true, false, false, true, true, false, true, true, false, true, false, false, false, false, true, false, false, true, false, true, false, true, true]);
            let encoded = BinVector::from_bools(&[false, false, true, true, true, false, false, false, true, false, true, true, true, false, false, false, true, false, true, false, true, true, true, false, false, false, false, false, true, false, false, false, true, true, true, true, false, false, false, true, false, true, false, false, false, true, true, true, false, true, false, true, true, true, true, false, true, false, false, true, false, false, true, false, true, true, true, false, false, true, true, false, true, true, true, true, true, false, false, true, false, true, false, false, true, true, true, false, true, false, true, false, true, false, true, true, false, true, true, false, false, true, true, false, true, true, false, true, false, false, true, false, false, true, false, false, true, false, true, true, false, true, true, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, true, false, false, false, true, false, true, true, true, false, false, false, true, false, true, false, true, true, true, false, false, false, false, false, true, false, false, false, true, true, true, true, false, false, false, true, false, true, false, false, false, true, true, true, false, true, false, true, true, true, true, false, true, false, false, true, false, false, true, false, true, true, true, false, false, true, true, false, true, true, true, true, true, false, false, true, false, true, false, false, true, true, true, false, true, false, true, false, true, false, true, true, false, true, true, false, false, true, true, false, true, true, false, true, false, false, true, false, false, false, false, false, true, false, true, true, false, true, true, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, true, false, true, true, true, true, true, true, true, false, false, false, false, false, true, false, true, false, true, true, true, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, true, false, true, true, false, true, false, true, true, false, false, false, false, false, false, true, true, false, true, false, true, false, false, false, false, true, true, true, false, true, true, true, false, true, false, false, true, true, false, false, true, false, true, true, false, true, true, true, true, false, false, true, true, true, false, false, true, true, false, true, true, false, false, false, true, true, false, true, true, true, false, false, true, true, false, false, true, false]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, true, false, true, true, true, true, true, true, true, false, false, false, false, false, true, false, true, false, true, true, true, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, true, false, true, true, false, true, false, true, true, false, false, false, false, false, false, true, true, false, true, false, true, false, false, false, false, true, true, true, false, true, true, true, false, true, false, false, true, true, false, false, true, false, true, true, false, true, true, true, true, false, false, true, true, true, true, false, false, true, true, false, true, true, false, false, false, true, true, false, false, true, true, true, false, false, true, true, true, false, false, true, false, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, true, false, true, true, true, true, true, true, true, false, false, false, false, false, true, false, true, false, true, true, true, true, false, false, false, true, false, false, false, false, true, false, false, false, true, false, false, true, false, true, true, false, true, false, true, true, false, false, false, false, false, false, false, true, false, true, false, true, false, false, false, false, true, true, true, false, true, true, true, false, true, false, false, true, true, false, false, true, false, true, true, false, true, true, true, true, false, false, true, true, true, true, false, false, true, true, false, true, true, false, false, false, true, true, false, false, true, true, true, false, false, true, true, true, false, false, true, false, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, true, false, false, false, true, true, false, true, true, true, true, true, true, true, true, true, true, false, true, false, true, false, false, false, true, true, false, true, false, true, true, true, true, false, true, true, true, false, false, true, true, true, false, true, true, true, true, true, false, false, false, true, false, true, true, true, false, true, true, false, true, false, false, false, false, true, false, false, true, true, false, false, false, true, false, true, true, false, true, true, true, false, true, true, false, false, false, true, false, false, false, false, true, true, true, true, false, false, false, true, true, false, false, true, true, false, true, true, true, false, true, false, false, false, false, false]);
            let encoded = BinVector::from_bools(&[false, false, false, true, true, false, false, false, true, true, false, true, true, true, true, true, true, true, true, true, true, false, true, false, true, false, false, false, true, true, false, true, false, true, true, true, true, false, true, true, true, false, false, true, true, true, false, true, true, true, true, true, false, false, false, true, false, true, true, true, false, true, true, false, true, false, false, false, false, true, false, false, true, true, false, false, false, true, false, true, true, false, true, true, true, false, true, true, false, false, false, true, false, false, true, false, false, true, true, true, true, false, false, false, true, true, false, false, true, true, false, false, true, true, true, false, true, false, false, false, false, false, true, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, true, false, false, false, true, true, false, true, true, true, true, true, true, true, true, true, true, false, true, false, true, false, false, false, true, true, false, true, false, true, true, true, true, false, true, true, true, false, false, true, true, true, false, true, true, true, true, true, false, false, false, true, false, true, false, true, false, true, true, false, true, false, false, false, false, true, false, false, true, true, false, false, false, true, false, true, true, false, true, true, true, false, true, true, false, false, false, true, false, false, true, false, false, true, true, true, true, false, false, false, true, true, false, false, true, true, false, false, true, true, true, false, true, false, false, false, false, false, true, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, true, false, true, true, false, true, true, false, false, false, false, false, false, false, false, true, true, false, true, true, true, true, false, false, false, false, false, true, false, true, false, true, true, false, true, false, false, false, true, false, false, true, false, true, false, true, false, false, true, false, false, false, false, false, false, true, false, false, true, false, true, true, true, true, false, false, false, false, true, true, false, true, true, false, false, true, true, false, false, false, false, true, true, true, false, true, false, true, true, true, false, false, false, false, false, false, true, false, true, true, true, false, true, false, false, false, true, true, true, true, false, false, false, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, true, false, true, true, false, true, true, false, false, false, false, false, false, false, false, true, true, false, true, true, true, true, false, false, false, false, false, true, false, true, false, true, true, false, true, false, false, false, true, false, false, true, false, true, false, true, false, false, true, false, false, false, false, false, false, true, false, false, true, false, true, true, true, true, false, false, false, false, true, true, false, true, true, false, false, true, true, false, false, false, false, true, true, true, false, true, false, true, true, false, true, false, false, false, false, false, false, true, false, true, true, true, false, true, false, true, false, false, true, true, true, true, false, false, false, false, false, false, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, true, false, true, true, false, true, true, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, false, false, false, false, false, true, false, true, false, true, true, false, true, false, false, false, true, false, false, true, false, true, false, true, false, false, true, false, false, false, false, false, false, true, false, false, true, false, true, true, true, true, false, false, false, false, true, true, false, true, true, false, false, true, true, false, false, false, false, true, true, true, false, true, false, true, true, false, true, false, false, false, false, false, false, true, false, true, true, true, false, true, false, true, false, false, true, true, true, true, false, false, false, false, false, false, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, true, true, true, true, true, false, true, false, false, true, false, true, true, false, true, true, true, false, false, true, true, false, true, false, true, false, false, false, false, true, true, true, false, false, false, true, true, false, true, true, true, false, false, true, true, false, true, false, false, false, true, false, false, true, false, false, false, true, true, false, false, true, true, false, true, false, false, true, true, true, false, false, false, false, false, true, true, true, true, true, false, true, false, false, true, true, true, false, true, false, false, true, false, true, false, false, true, true, true, true, false, true, true, false, true, true, false, true, false, true, true, false, true, false, true, false]);
            let encoded = BinVector::from_bools(&[true, false, false, false, true, true, true, true, true, false, true, false, false, true, false, true, true, false, true, true, true, false, false, true, true, false, true, false, true, false, false, false, false, true, true, true, false, false, false, true, true, false, true, true, true, false, false, true, true, false, true, false, false, false, true, false, false, true, false, false, false, true, true, false, false, true, true, false, true, false, false, true, true, true, false, false, false, false, false, true, true, true, true, true, false, true, false, false, true, true, true, false, true, false, true, false, true, false, true, false, false, true, true, true, true, false, true, true, false, true, true, true, false, true, false, true, true, false, true, true, false, true, false, false, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, true, true, true, true, true, false, true, false, false, true, false, true, true, false, true, true, true, false, false, true, true, false, true, false, true, false, false, false, false, true, true, true, false, false, false, true, true, false, true, true, true, false, false, true, true, false, true, false, false, false, true, false, false, true, false, false, false, true, true, false, false, true, true, false, true, false, false, true, true, true, false, false, false, false, false, true, true, true, true, false, false, true, false, false, true, true, true, false, true, false, true, false, true, false, true, false, false, true, true, true, true, false, true, true, false, true, true, true, false, true, false, true, true, false, true, true, false, true, false, false, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, true, true, false, false, true, false, false, true, true, false, true, true, false, true, true, false, false, false, false, false, true, false, true, false, true, true, false, false, false, false, true, false, false, true, true, false, false, true, true, false, false, true, true, true, true, true, true, false, true, false, true, false, true, true, false, false, false, false, false, false, false, false, true, true, true, true, true, false, false, false, true, false, false, true, false, false, false, false, true, false, false, false, true, false, true, true, true, false, true, false, false, true, true, false, false, false, false, true, false, false, false, false, false, true, true, true, false, false, true, true, false, false, true, false, false, false]);
            let encoded = BinVector::from_bools(&[true, true, false, true, true, true, false, false, true, false, false, true, true, false, true, true, false, true, true, false, false, false, false, false, true, false, true, false, true, true, false, false, false, false, true, false, false, true, true, false, false, true, true, false, false, true, true, true, true, true, true, false, true, false, true, false, true, true, false, false, false, false, false, false, false, false, true, true, true, true, true, false, false, false, true, false, false, true, false, false, false, false, true, false, false, false, true, false, true, true, true, false, true, false, false, false, true, true, false, false, false, false, true, false, false, false, false, false, true, true, true, true, false, false, true, true, false, false, true, true, false, false, true, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, true, true, false, false, true, false, false, true, true, false, true, true, false, true, true, false, false, false, false, false, true, false, true, false, true, true, false, false, false, false, true, false, false, false, true, false, false, true, true, false, false, true, true, true, true, true, true, false, true, false, true, false, true, true, false, false, false, false, false, false, false, false, true, true, true, true, true, false, false, false, true, false, false, true, false, false, false, false, true, false, false, false, true, false, true, true, true, false, true, false, false, false, true, true, false, false, false, false, true, false, false, false, false, false, true, true, true, true, false, false, true, true, false, false, true, true, false, false, true, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, false, false, false, false, false, true, false, false, true, false, false, false, true, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, true, false, false, true, false, false, false, true, true, true, false, false, false, false, false, false, false, true, true, false, true, true, true, false, false, true, false, true, true, false, false, true, true, true, false, false, false, false, true, false, false, false, true, false, false, true, true, false, true, false, true, true, false, true, true, false, true, true, true, false, true, false, false, true, false, true, true, true, false, true, false, true, false, true, false, false, true, true, false, true, false, true, false, true, true, false, true, false]);
            let encoded = BinVector::from_bools(&[true, false, false, true, false, false, false, false, false, true, false, false, true, false, false, false, true, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, true, false, false, true, false, false, false, true, true, true, false, false, false, false, false, false, false, true, true, false, true, true, true, false, false, true, false, true, true, false, false, true, true, true, false, false, false, false, true, false, false, false, true, false, false, true, true, false, true, false, true, true, false, true, true, false, true, true, true, false, true, false, false, false, true, false, true, true, true, false, true, false, true, false, true, false, false, true, true, true, false, true, false, true, false, true, true, true, false, true, false, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, false, false, false, false, false, true, false, false, true, false, false, false, true, false, true, false, false, false, true, true, true, true, false, false, true, true, false, true, true, false, false, true, false, false, false, true, true, true, false, false, false, false, false, false, false, true, true, false, true, true, true, false, false, true, false, true, true, false, false, true, true, true, false, false, false, false, true, false, false, false, true, false, false, true, true, false, true, false, true, true, false, true, true, false, true, true, true, false, true, false, false, false, true, false, true, true, true, false, true, false, true, false, true, false, false, true, true, true, false, true, false, true, false, true, true, true, false, false, false, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, true, true, false, false, true, false, true, true, true, true, true, true, false, true, true, true, false, true, false, false, true, true, false, false, true, true, false, true, false, false, false, true, true, false, false, true, false, false, false, false, false, true, true, true, false, false, true, true, false, false, false, true, false, false, true, false, true, true, true, false, false, true, true, false, true, false, true, true, false, false, false, false, false, false, false, false, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, false, false, true, true, false, false, false, false, true, false, false, false, true, true, false, true, false, true, true, true, false, true, true, false]);
            let encoded = BinVector::from_bools(&[true, true, true, true, true, true, false, false, true, false, true, true, true, true, true, true, false, true, true, true, false, true, false, false, true, true, false, false, true, true, false, true, false, false, false, true, true, false, false, true, false, false, false, false, false, true, true, true, false, false, true, true, false, false, false, true, false, false, true, false, true, true, true, false, false, true, true, false, true, false, true, true, false, false, false, false, false, false, false, false, true, true, false, false, false, false, false, false, false, true, true, true, true, true, false, true, true, false, false, true, true, false, false, false, false, true, false, false, false, true, false, true, false, true, false, true, true, true, true, false, true, true, true, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, true, true, false, false, true, false, true, true, true, true, true, true, false, true, true, true, false, true, false, false, true, true, false, false, true, true, false, true, false, false, false, true, true, false, false, true, false, false, false, false, false, true, true, true, false, false, true, true, false, false, false, true, false, false, true, false, true, true, true, false, false, true, true, false, true, false, true, true, false, false, false, false, false, false, false, false, true, true, false, false, false, false, false, false, false, false, true, true, true, true, false, true, true, false, false, true, true, false, false, false, false, true, false, false, false, true, false, true, false, true, false, true, true, true, true, false, true, true, true, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, false, true, false, false, false, true, false, false, true, true, false, true, false, false, false, false, true, false, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, true, true, false, true, false, true, true, true, false, false, true, false, true, false, false, false, false, false, false, false, false, false, true, false, false, true, true, true, true, true, false, false, false, true, false, true, true, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, true, true, true, false, true, false, false, true, true, true, true, false, false, false, false, false, true, false, true, false, false, true, true, true, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, true, false, true, false, false, false, true, false, false, true, true, false, true, false, false, false, false, true, false, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, true, true, false, true, false, true, true, true, false, false, true, false, true, false, false, false, false, false, false, false, false, false, true, false, false, true, true, true, true, true, false, false, false, true, false, true, true, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, true, true, true, false, false, true, false, false, true, true, true, true, false, false, false, false, false, true, false, false, true, false, false, true, true, true, false, false, false, true, false, false, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, false, true, false, false, false, true, false, false, true, true, false, true, false, false, false, false, true, false, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, true, true, false, true, false, true, true, true, false, false, true, false, true, false, false, false, false, false, false, false, false, false, true, false, false, true, true, true, true, true, false, false, false, true, false, true, true, true, false, true, false, true, true, false, false, true, false, true, false, true, false, false, true, true, true, true, false, false, true, false, false, true, true, true, true, false, false, false, false, false, true, false, false, true, false, false, true, true, true, false, false, true, true, false, false, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, true, false, false, true, true, true, false, true, false, false, true, true, true, false, false, false, false, true, true, true, true, true, true, false, false, true, false, true, true, false, true, false, false, true, false, true, false, false, false, true, false, true, true, false, false, false, false, false, true, true, false, true, true, false, false, false, false, true, false, false, false, false, false, true, true, false, false, true, true, false, true, true, false, false, false, true, true, true, true, true, false, false, false, true, false, false, false, false, false, true, false, false, true, false, false, false, false, true, false, false, false, false, false, false, false, true, true, true, false, false, false, false, true, false, true, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, true, false, false, true, true, true, false, true, false, false, true, true, true, false, false, false, false, true, true, true, true, true, true, false, false, true, false, true, true, false, true, false, false, true, false, true, false, false, false, true, false, true, true, false, false, false, false, false, true, true, false, true, true, false, false, false, false, true, false, false, false, false, false, true, true, false, false, true, true, false, true, true, false, false, false, true, true, true, true, true, false, false, false, true, false, false, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, false, false, false, false, false, true, true, true, false, false, false, false, true, true, false, true, true, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, true, false, false, true, true, true, false, true, false, false, true, true, true, false, false, false, false, true, true, true, true, true, true, false, false, true, false, true, true, false, true, false, false, true, false, true, false, false, false, true, false, true, true, false, false, false, false, false, true, true, false, true, true, false, false, false, false, true, false, false, false, false, false, true, true, false, false, true, true, false, true, true, true, false, false, true, true, true, true, true, false, false, false, true, false, false, false, false, false, true, false, false, false, true, false, false, false, false, true, false, false, false, false, false, false, false, false, true, true, true, false, false, false, false, true, true, false, true, true, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, false, false, true, true, false, true, false, false, false, true, true, true, false, false, true, false, true, true, false, false, false, true, true, false, false, true, false, true, true, false, true, true, false, true, true, true, true, true, false, true, true, true, true, true, false, false, false, true, true, true, true, true, false, true, false, false, true, false, false, true, false, true, false, true, false, true, true, true, true, true, true, true, false, true, false, false, false, false, true, true, false, true, false, false, true, false, true, true, false, false, false, false, false, false, false, false, true, false, true, true, true, true, true, true, false, false, false, true, true, true, false, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[true, true, true, true, false, false, true, true, false, true, false, false, false, true, true, true, false, false, true, false, true, true, false, false, false, true, true, false, false, true, false, true, true, false, true, true, false, true, true, true, true, true, false, true, true, true, true, true, false, false, false, true, true, true, true, true, false, true, false, false, true, false, false, true, false, true, false, true, false, true, true, true, true, true, true, true, false, true, false, false, false, false, true, true, false, true, false, false, true, false, true, true, false, false, false, false, false, false, false, false, false, true, false, true, true, true, true, true, true, false, true, false, false, true, true, true, false, false, true, false, true, false, true, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, false, false, true, true, false, true, false, false, false, true, true, true, false, false, true, false, true, true, false, false, false, true, true, false, false, true, false, true, true, false, true, true, false, true, true, true, true, true, false, true, true, true, true, true, false, false, false, true, true, true, true, false, false, true, false, false, true, false, false, true, false, true, false, true, false, true, true, true, true, true, true, true, false, true, false, false, false, false, true, true, false, true, false, false, true, false, true, true, false, false, false, false, false, false, false, false, false, true, false, true, true, true, true, true, true, false, true, false, false, true, true, true, false, false, true, false, true, false, true, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, true, true, false, false, false, false, false, false, true, true, true, false, false, true, true, false, false, true, true, false, true, false, false, false, false, false, false, true, true, false, false, false, false, true, true, false, false, false, false, true, false, true, false, false, false, true, true, true, false, true, true, false, true, true, true, true, true, true, true, true, false, true, true, true, true, true, false, true, false, true, true, true, false, false, false, true, false, true, false, false, true, true, true, true, true, false, true, false, true, false, true, true, true, false, false, true, true, false, true, true, true, false, true, false, true, true, true, true, false, true, false, false, true, false, false, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, true, true, false, false, false, false, false, false, true, true, true, false, false, true, true, false, false, true, true, false, true, false, false, false, false, false, false, true, true, false, false, false, false, true, true, false, false, false, false, true, false, true, false, false, false, true, true, true, false, true, true, false, true, true, true, true, true, true, true, true, false, true, true, true, true, true, false, true, false, true, true, true, false, false, false, true, false, true, false, false, true, true, true, true, true, false, true, false, true, false, true, true, true, true, false, false, true, true, false, true, true, true, false, true, false, true, true, true, true, true, false, true, false, false, true, true, false, false, true, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, true, true, false, false, false, false, false, false, true, true, true, false, false, true, true, false, false, true, true, false, true, false, false, false, false, false, false, true, true, false, false, false, false, true, true, false, false, true, false, true, false, true, false, false, false, true, true, true, false, true, true, false, true, true, true, true, true, true, true, true, false, true, true, true, true, true, false, true, false, true, true, true, false, false, false, true, false, true, false, false, true, true, true, true, true, false, true, false, true, false, true, true, true, true, false, false, true, true, false, true, true, true, false, true, false, true, true, true, true, true, false, true, false, false, true, true, false, false, true, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, false, false, false, false, true, true, false, true, true, true, false, false, false, true, false, true, true, true, true, false, true, false, true, false, true, true, false, false, true, true, true, false, false, false, false, true, true, false, true, true, true, true, true, true, false, true, true, false, true, false, false, true, false, false, true, false, false, true, false, false, true, true, false, false, true, true, true, false, true, true, false, true, true, true, false, false, true, true, true, true, true, true, false, true, true, false, true, true, true, false, true, true, true, true, false, false, false, true, true, false, true, true, true, false, false, false, true, true, true, true, false, false, true, true, false, false]);
            let encoded = BinVector::from_bools(&[true, false, false, false, false, false, false, false, true, true, false, true, true, true, false, false, false, true, false, true, true, true, true, false, true, false, true, false, true, true, false, false, true, true, true, false, false, false, false, true, true, false, true, true, true, true, true, true, false, true, true, false, true, false, false, true, false, false, true, false, false, true, false, false, true, true, false, false, true, true, true, false, true, true, false, true, true, true, false, false, true, true, true, true, true, true, false, true, true, false, true, true, true, false, false, true, true, true, true, false, false, false, true, true, false, true, true, true, false, false, true, false, true, true, true, true, false, false, true, true, true, false, true, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, false, false, false, false, true, true, false, true, true, true, false, false, false, true, false, true, true, true, true, false, true, false, true, false, true, true, false, false, true, true, true, false, false, false, false, true, true, false, true, true, true, true, true, true, false, true, true, false, true, false, false, true, false, false, true, false, false, true, false, false, true, true, false, false, true, true, true, false, true, true, false, true, true, true, false, false, true, true, true, true, true, true, false, true, false, false, true, true, true, false, false, true, true, true, true, false, false, false, true, true, false, true, true, true, false, false, true, false, true, true, true, true, false, false, true, true, true, false, true, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, false, true, true, true, false, true, true, false, true, false, true, true, false, false, true, false, true, true, false, true, false, true, true, false, true, true, true, false, true, true, true, false, false, false, true, false, false, true, true, true, true, false, false, true, false, true, true, false, true, true, true, false, true, false, false, false, true, false, true, true, true, false, false, false, true, false, true, true, true, false, true, true, false, false, false, false, false, true, false, false, true, true, true, false, true, false, true, true, true, false, true, true, false, false, true, true, true, false, true, true, true, true, true, true, false, false, true, false, true, true, true, false, true, false, false, true]);
            let encoded = BinVector::from_bools(&[true, true, false, false, false, true, true, true, false, true, true, false, true, false, true, true, false, false, true, false, true, true, false, true, false, true, true, false, true, true, true, false, true, true, true, false, false, false, true, false, false, true, true, true, true, false, false, true, false, true, true, false, true, true, true, false, true, false, false, false, true, false, true, true, true, false, false, false, true, false, true, true, true, false, true, true, false, false, false, false, false, true, false, false, true, true, true, false, true, false, true, true, true, false, true, true, true, false, false, true, true, true, false, true, true, true, true, true, true, false, false, false, true, false, true, true, true, false, true, true, false, false, false, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, false, true, true, true, false, true, true, false, true, false, true, true, false, false, true, false, true, true, false, true, false, true, true, false, true, true, true, false, true, true, true, false, false, false, true, false, false, true, true, true, true, false, false, true, false, true, true, false, true, true, true, false, true, false, false, false, true, false, true, false, true, false, false, false, true, false, true, true, true, false, true, true, false, false, false, false, false, true, false, false, true, true, true, false, true, false, true, true, true, false, true, true, true, false, false, true, true, true, false, true, true, true, true, true, true, false, false, false, true, false, true, true, true, false, true, true, false, false, false, true, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, false, true, false, false, false, false, false, true, false, false, false, false, true, false, true, false, true, true, true, true, false, true, true, false, true, false, true, false, true, false, false, false, false, false, true, false, false, true, false, false, false, false, true, true, true, false, true, false, true, true, true, false, false, false, true, false, false, true, true, true, true, false, true, true, true, true, true, false, false, true, false, true, false, false, false, true, false, true, true, true, false, true, false, false, false, false, false, false, true, true, false, false, false, false, false, true, true, false, true, true, true, false, false, true, false, true, true, false, false, true, false, true, false, false, true, true]);
            let encoded = BinVector::from_bools(&[false, false, true, false, false, true, false, false, false, false, false, true, false, false, false, false, true, false, true, false, true, true, true, true, false, true, true, false, true, false, true, false, true, false, false, false, false, false, true, false, false, true, false, false, false, false, true, true, true, false, true, false, true, true, true, false, false, false, true, false, false, true, true, true, true, false, true, true, true, true, true, false, false, true, false, true, false, false, false, true, false, true, true, true, false, true, false, false, false, false, false, false, true, true, true, false, false, false, false, false, true, true, false, true, true, true, false, false, true, false, false, true, true, false, false, true, false, true, true, false, false, true, true, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, false, true, false, false, false, false, false, true, false, false, false, false, true, false, true, false, true, true, true, true, false, true, true, false, true, false, true, false, true, false, false, false, false, false, true, false, false, true, false, false, false, false, true, true, true, false, true, false, true, true, true, false, false, false, true, false, false, true, true, true, true, false, true, true, true, true, true, false, false, true, false, true, false, false, false, true, false, true, true, true, false, true, false, false, false, false, false, false, true, true, true, false, false, false, false, false, true, true, false, true, true, true, false, false, true, false, false, true, true, false, false, true, false, true, true, false, false, true, true, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, true, false, false, true, false, true, true, true, true, true, true, false, true, false, false, false, false, true, false, true, false, false, true, true, false, true, false, false, false, false, true, false, false, true, true, true, true, true, false, false, true, false, false, true, false, false, true, false, true, false, false, false, false, true, true, true, false, false, false, true, true, false, true, true, false, true, false, true, true, true, true, true, false, true, true, false, false, false, false, true, false, false, true, true, true, false, true, false, true, false, false, false, true, true, false, true, false, false, true, true, true, true, false, false, true, false, true, false, true, true, true, false, true, true, true, true]);
            let encoded = BinVector::from_bools(&[false, true, true, true, true, false, false, true, false, true, true, true, true, true, true, false, true, false, false, false, false, true, false, true, false, false, true, true, false, true, false, false, false, false, true, false, false, true, true, true, true, true, false, false, true, false, false, true, false, false, true, false, true, false, false, false, false, true, true, true, false, false, false, true, true, false, true, true, false, true, false, true, true, true, true, true, false, true, true, false, false, false, false, true, false, false, true, true, true, false, true, false, true, false, true, false, false, true, true, false, true, false, false, true, true, true, true, false, false, true, false, false, true, false, true, true, true, false, false, true, true, true, true, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, true, false, false, true, false, true, true, true, true, true, true, false, true, false, false, false, false, true, false, true, false, false, true, true, false, true, false, false, false, false, true, false, false, true, true, true, true, true, false, false, true, false, false, true, false, false, true, false, true, false, false, false, false, true, true, true, false, false, false, true, true, false, true, true, false, true, false, true, true, true, true, true, false, true, true, false, false, false, false, true, false, false, true, true, false, false, true, false, true, false, true, false, false, true, true, false, true, false, false, true, true, true, true, false, false, true, false, false, true, false, true, true, true, false, false, true, true, true, true, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, false, true, false, false, false, false, false, true, true, true, true, false, true, true, false, true, false, false, true, true, true, false, false, false, true, true, false, true, true, false, false, false, false, true, false, false, true, true, false, false, false, true, false, true, false, false, false, true, true, true, false, true, false, true, false, true, true, false, false, false, false, true, true, true, true, true, false, true, true, true, false, true, false, true, false, false, false, false, false, false, true, false, false, true, false, true, false, true, false, false, false, true, true, true, true, true, true, true, false, false, true, false, true, true, true, false, true, true, true, true, true, true, false, false, false, false]);
            let encoded = BinVector::from_bools(&[true, true, false, true, false, true, false, false, false, false, false, true, true, true, true, false, true, true, false, true, false, false, true, true, true, false, false, false, true, true, false, true, true, false, false, false, false, true, false, false, true, true, false, false, false, true, false, true, false, false, false, true, true, true, false, true, false, true, false, true, true, false, false, false, false, true, true, true, true, true, false, true, true, true, false, true, false, true, false, false, false, false, false, false, true, false, false, true, false, true, false, true, false, false, false, false, true, true, true, true, true, true, true, false, false, true, false, true, true, true, true, false, true, true, true, true, true, true, false, false, false, false, true, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, false, true, false, false, false, false, false, true, true, true, true, false, true, true, false, true, false, false, true, true, true, false, false, false, true, true, false, true, true, false, false, false, false, true, false, false, true, true, false, false, false, true, false, true, false, false, false, true, true, true, false, true, false, true, false, true, true, false, false, false, false, true, true, true, true, true, true, true, true, true, false, true, false, true, false, false, false, false, false, false, true, false, false, true, false, true, false, true, false, false, false, false, true, true, true, true, true, true, true, false, false, true, false, true, true, true, true, false, true, true, true, true, true, true, false, false, false, false, true, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, false, true, false, false, true, false, false, false, true, true, false, false, true, false, false, true, true, true, false, false, false, true, true, true, false, true, true, true, false, false, false, true, true, false, true, false, false, true, true, true, false, true, true, false, true, false, true, false, true, false, false, false, false, false, false, true, false, false, true, true, true, false, true, false, false, false, true, true, false, true, false, true, true, true, false, true, false, false, false, false, false, true, true, true, true, false, true, false, false, false, true, false, false, false, false, true, false, true, true, false, false, true, true, false, true, true, false, false, true, true, false, true, false, false, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, false, true, false, false, true, false, false, false, true, true, false, false, true, false, false, true, true, true, false, false, false, true, true, true, false, true, true, true, false, false, false, true, true, false, true, false, false, true, true, true, false, true, true, false, true, false, true, false, true, false, false, false, false, false, false, true, false, false, true, true, true, false, true, false, false, false, true, true, false, true, false, true, true, true, false, true, false, false, false, false, false, true, true, true, true, false, true, false, false, false, false, true, false, false, false, false, true, false, true, true, false, false, true, true, false, true, true, true, false, false, true, true, false, true, true, false, false, true, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, false, true, false, false, true, false, false, false, true, true, false, false, true, false, false, true, true, true, false, false, false, true, true, true, false, true, true, true, false, false, false, true, true, false, true, false, false, true, true, true, false, true, true, false, true, false, true, false, true, false, false, false, false, false, false, true, false, false, true, true, true, false, true, false, false, false, true, true, false, true, false, true, true, true, false, true, false, false, false, false, false, true, true, true, true, false, true, false, false, false, false, true, false, false, false, false, true, false, true, true, false, false, true, true, false, true, true, true, false, false, true, true, false, true, true, false, true, true, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, true, true, true, true, false, false, true, false, true, true, true, false, false, true, true, true, false, false, true, false, false, true, false, true, true, false, false, false, false, true, false, false, true, true, false, false, true, true, true, true, false, false, true, false, true, false, false, true, true, false, false, true, true, true, true, true, false, true, true, false, false, true, false, false, true, false, false, true, true, true, false, true, true, false, true, true, true, false, true, false, false, false, true, true, true, false, false, true, true, true, false, false, true, false, true, false, true, false, false, true, true, true, true, true, false, true, false, true, true, true, false, true, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, true, true, true, true, true, false, false, true, false, true, true, true, false, false, true, true, true, false, false, true, false, false, true, false, true, true, false, false, false, false, true, false, false, true, true, false, false, true, true, true, true, false, false, true, false, true, false, false, true, true, false, false, true, true, true, true, true, false, true, true, false, false, true, false, false, true, false, false, true, true, true, false, true, true, false, true, true, true, false, true, false, false, false, true, true, true, false, false, true, true, true, true, false, false, true, false, true, false, true, false, false, true, true, true, true, true, false, true, true, false, true, true, true, false, true, false, false, true, false, true, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, true, true, true, true, false, false, true, false, true, true, true, false, false, true, true, true, false, false, true, false, false, true, false, true, true, false, false, false, false, true, false, false, true, true, false, false, true, true, true, true, false, false, true, false, true, false, false, true, true, false, false, true, true, true, true, true, false, true, true, false, false, true, false, false, true, false, false, true, true, true, false, true, true, false, false, true, true, false, true, false, false, false, true, true, true, false, false, true, true, true, true, false, false, true, false, true, false, true, false, false, true, true, true, true, true, false, true, true, false, true, true, true, false, true, false, false, true, false, true, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, false, true, false, true, false, false, true, false, true, false, true, false, true, false, false, false, true, false, false, false, true, false, true, false, false, true, true, true, false, true, false, false, false, true, true, false, false, false, true, false, true, true, false, true, false, true, false, false, true, false, false, false, false, false, true, true, true, false, true, false, false, false, true, true, true, false, true, false, false, true, false, true, false, true, true, true, false, false, true, true, false, true, true, true, false, true, true, false, false, true, false, true, true, true, false, false, true, false, false, true, false, true, false, true, false, false, false, true, true, true, false, false, true, false, false, true]);
            let encoded = BinVector::from_bools(&[false, false, true, false, false, true, false, true, false, false, true, false, true, false, true, false, true, false, false, false, true, false, false, false, true, false, true, false, false, true, true, true, false, true, false, false, false, true, true, false, false, false, true, false, true, true, false, true, false, true, false, false, true, false, false, false, false, false, true, true, true, false, true, false, false, false, true, true, true, false, true, false, false, true, false, true, false, true, true, true, false, false, true, true, false, true, true, true, false, true, true, false, false, true, true, false, true, true, true, false, false, true, false, false, true, false, true, false, true, false, false, false, false, true, true, true, false, false, true, true, false, false, true, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, false, true, false, true, false, false, true, false, true, false, true, false, true, false, false, false, true, false, false, false, true, false, true, false, false, true, true, true, false, true, false, false, false, true, true, false, false, false, true, false, true, true, false, true, false, true, false, false, true, false, false, false, false, false, true, true, true, false, true, false, false, false, true, true, true, false, true, false, false, true, false, true, false, true, true, true, false, false, true, true, false, true, true, true, false, false, true, false, false, true, true, false, true, true, true, false, false, true, false, false, true, false, true, false, true, false, false, false, false, true, true, true, false, false, true, true, false, false, true, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, true, false, true, false, false, true, false, false, true, false, false, true, false, false, true, true, true, false, false, false, false, true, false, true, true, true, false, false, true, false, false, true, false, true, true, true, false, false, false, true, false, true, true, false, true, true, false, false, true, false, false, false, true, false, true, true, false, false, true, false, false, false, false, true, false, true, true, false, true, false, false, true, false, true, true, true, false, false, true, true, true, false, true, true, true, false, false, true, false, false, true, true, false, true, false, false, false, true, true, true, false, false, false, false, true, false, true, false, true, true, true, true, false, true, false, false, false]);
            let encoded = BinVector::from_bools(&[true, false, false, true, false, true, false, false, true, false, false, true, false, false, true, false, false, true, true, true, false, false, false, false, true, false, true, true, true, false, false, true, false, false, true, false, true, true, true, false, false, false, true, false, true, true, false, true, true, false, false, true, false, false, false, true, false, true, true, false, false, true, false, false, false, false, true, false, true, true, false, true, false, false, true, false, true, true, true, false, false, true, true, true, false, true, true, true, false, false, true, false, false, true, true, true, false, true, false, false, false, true, true, true, false, false, false, false, true, false, false, true, false, true, true, true, true, false, true, true, false, false, false, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, true, false, true, false, false, true, false, false, true, false, false, true, false, false, true, true, true, false, false, false, false, true, false, true, true, true, false, false, true, false, false, true, false, true, true, true, false, false, false, true, false, true, true, false, true, true, false, false, true, false, false, false, true, false, true, true, false, false, true, false, false, false, true, true, false, true, true, false, true, false, false, true, false, true, true, true, false, false, true, true, true, false, true, true, true, false, false, true, false, false, true, true, true, false, true, false, false, false, true, true, true, false, false, false, false, true, false, false, true, false, true, true, true, true, false, true, true, false, false, false, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, true, true, false, true, false, true, false, true, false, true, false, true, true, true, false, true, false, true, true, false, true, false, true, false, false, true, true, true, false, true, true, true, false, false, true, false, true, false, false, false, true, false, false, false, true, true, true, true, false, true, true, false, true, false, false, true, true, true, true, false, false, false, false, true, true, false, false, true, false, true, false, false, false, true, false, false, false, false, true, false, true, false, true, true, false, true, false, true, true, false, false, true, true, true, true, true, true, false, true, false, false, false, true, false, true, false, false, true, false, true, false, true, false, false, false, true]);
            let encoded = BinVector::from_bools(&[false, false, true, true, true, true, false, true, false, true, false, true, false, true, false, true, true, true, false, true, false, true, true, false, true, false, true, false, false, true, true, true, false, true, true, true, false, false, true, false, true, false, false, false, true, false, false, false, true, true, true, true, false, true, true, false, true, false, false, true, true, true, true, false, false, false, false, true, true, false, false, true, false, true, false, false, false, true, false, false, false, false, true, false, true, false, true, true, false, true, false, true, true, false, false, false, true, true, true, true, true, true, false, true, false, false, false, true, false, true, true, false, false, true, false, true, false, true, true, false, false, false, false, true, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, true, true, false, true, false, true, false, true, false, true, false, true, true, true, false, true, false, true, true, false, true, false, true, false, false, true, true, true, false, true, true, true, false, false, true, false, true, false, false, false, true, false, false, false, true, true, true, true, false, true, true, false, true, false, false, true, true, true, true, false, false, false, false, true, true, false, false, true, false, true, false, false, false, true, false, false, false, false, true, false, true, false, true, true, false, true, false, true, true, false, false, false, true, true, true, true, true, true, false, true, false, false, false, true, false, true, true, false, false, true, false, true, false, true, true, false, false, false, false, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, false, true, false, false, true, false, false, true, false, true, true, true, false, true, true, true, true, false, true, false, true, true, true, true, true, false, true, true, false, true, true, false, true, true, false, false, false, true, true, false, true, true, false, true, false, false, false, true, false, false, true, true, true, false, true, true, true, true, false, false, true, false, false, false, true, false, false, true, true, true, false, true, false, true, false, false, true, true, false, false, true, false, true, true, true, false, true, false, false, true, false, false, true, true, false, false, false, true, true, true, true, true, true, false, false, true, true, false, true, true, false, false, false, true, false, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, false, true, false, false, true, false, false, true, false, true, true, true, false, true, true, true, true, false, true, false, true, true, true, true, true, false, true, true, false, true, true, false, true, true, false, false, false, true, true, false, true, true, false, true, false, false, false, true, false, false, true, true, true, false, true, true, true, true, false, false, true, false, false, false, true, false, false, true, true, true, false, true, false, true, false, false, true, true, false, false, true, false, true, true, true, false, true, false, false, true, true, false, false, true, true, false, false, false, true, true, true, true, true, true, false, false, false, true, true, false, true, true, false, false, true, false, true, false, false, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, false, true, false, false, true, false, true, true, false, true, true, true, false, true, true, true, true, false, true, false, true, true, true, true, true, false, true, true, false, true, true, false, true, true, false, false, false, true, true, false, true, true, false, true, false, false, false, true, false, false, true, true, true, false, true, true, true, true, false, false, true, false, false, false, true, false, false, true, true, true, false, true, false, true, false, false, true, true, false, false, true, false, true, true, true, false, true, false, false, true, true, false, false, true, true, false, false, false, true, true, true, true, true, true, false, false, false, true, true, false, true, true, false, false, true, false, true, false, false, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, false, true, false, false, false, true, false, true, true, true, true, false, false, false, false, true, false, false, true, false, true, true, true, false, true, false, false, true, true, true, true, true, true, true, true, false, false, false, true, true, true, true, false, true, true, true, false, true, false, true, true, true, true, true, true, true, false, false, true, true, true, true, true, false, false, true, false, false, false, false, false, false, false, true, false, true, true, false, true, false, false, true, false, true, true, false, true, true, false, false, true, false, true, true, true, false, true, true, false, false, false, false, true, true, true, true, true, true, false, true, false, true, false, true, true]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, false, true, false, false, false, true, false, true, true, true, true, false, false, false, false, true, false, false, true, false, true, true, true, false, true, false, false, true, true, true, true, true, true, true, true, false, false, false, true, true, true, true, false, true, true, true, false, true, false, true, true, true, true, true, true, true, false, false, true, true, true, true, true, false, false, true, false, false, false, false, false, false, false, true, false, true, true, false, true, false, false, true, false, true, true, false, true, true, false, false, false, true, false, true, true, true, false, true, true, false, false, false, false, true, true, true, true, true, true, true, false, true, false, false, true, false, true, false, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, true, false, true, false, false, false, true, false, true, true, true, true, true, false, false, false, true, false, false, true, false, true, true, true, false, true, false, false, true, true, true, true, true, true, true, true, false, false, false, true, true, true, true, false, true, true, true, false, true, false, true, true, true, true, true, true, true, false, false, true, true, true, true, true, false, false, true, false, false, false, false, false, false, false, true, false, true, true, false, true, false, false, true, false, true, true, false, true, true, false, false, false, true, false, true, true, true, false, true, true, false, false, false, false, true, true, true, true, true, true, true, false, true, false, false, true, false, true, false, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, true, false, false, true, false, false, false, true, true, true, true, false, true, true, false, false, false, false, false, false, true, false, false, false, true, false, false, true, true, false, false, true, false, true, false, true, false, false, false, true, false, false, true, true, true, true, false, false, false, false, true, true, true, false, true, true, true, true, false, false, true, true, true, false, false, true, false, false, true, false, false, true, false, true, true, true, false, false, true, true, false, true, false, true, true, true, false, true, false, true, false, false, true, false, true, false, false, true, true, false, false, true, false, false, true, true, false, true, true, true, true, true, true, false, false, true]);
            let encoded = BinVector::from_bools(&[true, true, false, true, true, false, false, true, false, false, false, true, true, true, true, false, true, true, false, false, false, false, false, false, true, false, false, false, true, false, false, true, true, false, false, true, false, true, false, true, false, false, false, true, false, false, true, true, true, true, false, false, false, false, true, true, true, false, true, true, true, true, false, false, true, true, true, false, false, true, false, false, true, false, false, true, false, true, true, true, false, false, true, true, false, true, false, true, true, true, false, true, false, true, false, false, false, true, false, true, false, false, true, true, false, false, true, false, false, true, false, true, false, true, true, true, true, true, true, true, false, false, true, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, true, false, false, true, false, false, false, true, true, true, true, false, true, true, false, false, false, false, false, false, true, false, false, false, true, false, false, true, true, false, false, true, false, true, false, true, false, false, false, true, false, false, true, true, true, true, false, false, false, false, true, true, true, false, true, true, true, true, false, false, true, true, true, false, false, true, false, false, true, false, false, true, false, true, true, true, false, false, true, true, false, true, false, true, true, true, false, true, false, true, false, false, false, true, false, true, false, false, true, true, false, false, true, false, false, true, false, true, false, true, true, true, true, true, false, true, false, false, true, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, true, true, false, false, true, false, true, true, true, false, false, false, true, false, false, true, true, false, true, true, false, true, false, true, true, false, false, false, false, false, false, true, false, true, false, false, false, true, false, false, false, true, false, true, true, true, false, true, true, false, true, false, true, true, false, false, false, false, true, false, true, false, true, false, false, true, true, true, false, true, false, false, false, false, false, true, false, true, false, true, false, false, true, false, false, false, false, false, true, true, true, true, true, true, true, false, true, false, false, true, false, false, true, true, false, true, true, false, false, false, false, true, false, false, true, true]);
            let encoded = BinVector::from_bools(&[true, true, false, true, true, true, false, false, true, false, true, true, true, false, false, false, true, false, false, true, true, false, true, true, false, true, false, true, true, false, false, false, false, false, false, true, false, true, false, false, false, true, false, false, false, true, false, true, true, true, false, true, true, false, true, false, true, true, false, false, false, false, true, false, true, false, true, false, false, true, true, true, false, true, false, false, false, false, false, true, false, true, false, true, false, false, true, false, false, false, false, false, true, true, true, true, true, true, true, true, false, true, false, false, true, false, false, true, true, false, false, true, true, false, false, false, false, true, false, false, false, true, true, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, true, true, false, false, true, false, true, true, true, false, false, false, true, false, false, true, true, false, true, true, false, true, false, true, true, false, false, false, false, false, false, true, false, true, false, false, false, true, false, false, false, true, false, true, true, true, false, true, true, false, true, false, true, true, false, false, false, false, true, true, true, false, true, false, false, true, true, true, false, true, false, false, false, false, false, true, false, true, false, true, false, false, true, false, false, false, false, false, true, true, true, true, true, true, true, true, false, true, false, false, true, false, false, true, true, false, false, true, true, false, false, false, false, true, false, false, false, true, true, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, true, true, true, false, false, false, false, false, false, false, true, false, true, true, false, true, false, true, false, false, true, false, true, true, true, true, false, true, false, false, true, false, true, true, false, true, true, false, true, false, true, true, true, true, false, false, false, true, false, true, true, false, false, true, true, false, true, false, true, true, true, true, false, false, true, false, true, false, false, true, false, true, true, false, true, false, false, false, true, false, false, false, false, true, false, true, false, false, true, true, true, false, true, false, true, false, false, true, false, true, true, false, true, false, true, true, true, true, true, true, true, true, true, true, true, true]);
            let encoded = BinVector::from_bools(&[true, false, true, false, true, true, true, false, false, false, false, false, false, false, true, false, true, true, false, true, false, true, false, false, true, false, true, true, true, true, false, true, false, false, true, false, true, true, false, true, true, false, true, false, true, true, true, true, false, false, false, true, false, true, true, false, false, true, true, false, true, false, true, true, true, true, false, false, true, false, true, false, false, true, false, true, true, false, true, false, false, false, true, false, false, false, false, true, false, true, false, false, true, true, false, true, false, true, false, true, false, false, true, false, true, true, false, true, false, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, true, true, true, false, false, false, false, false, false, false, true, false, true, true, false, true, false, true, false, false, true, false, true, true, true, true, false, true, false, false, true, false, true, true, false, true, true, false, true, false, true, true, true, true, false, false, false, true, false, true, true, false, false, true, true, false, true, false, true, true, true, true, false, false, true, false, true, false, false, true, false, true, true, false, true, false, false, false, true, false, false, false, false, true, false, true, false, false, true, true, false, true, true, true, false, true, false, false, true, false, true, true, false, true, false, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, true, false, true, false, true, false, false, false, true, false, false, false, true, true, true, true, false, true, true, false, true, true, true, true, true, true, true, true, true, true, false, true, false, false, false, false, true, false, false, true, true, true, true, false, false, true, false, false, false, false, false, true, false, false, false, false, true, false, false, true, true, false, true, false, true, true, true, false, false, false, true, true, true, true, true, true, false, false, true, true, true, true, false, true, true, false, true, false, false, true, true, true, true, false, false, true, true, false, false, true, true, true, false, false, false, false, true, false, false, true, true, false, true, false, true, true]);
            let encoded = BinVector::from_bools(&[false, false, false, true, true, false, true, false, true, false, false, false, true, false, false, false, true, true, true, true, false, true, true, false, true, true, true, true, true, true, true, true, true, true, false, true, false, false, false, false, true, false, false, true, true, true, true, false, false, true, false, false, false, false, false, true, false, false, false, false, true, false, false, true, true, false, true, false, true, true, true, false, false, false, true, true, true, true, true, true, false, false, true, true, true, true, false, true, true, false, true, false, false, true, false, true, true, true, false, false, true, true, false, false, true, true, true, false, false, false, true, false, true, false, false, true, true, false, true, true, false, true, true, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, true, false, true, false, true, false, false, false, true, false, false, false, true, true, true, true, false, true, true, false, true, true, false, true, true, true, true, true, true, true, false, true, false, false, false, false, true, false, false, true, true, true, true, false, false, true, false, false, false, false, false, true, false, false, false, false, true, false, false, true, true, false, true, false, true, true, true, false, false, false, true, true, true, true, true, true, false, false, true, true, true, true, false, true, true, false, true, false, false, true, false, true, true, true, false, false, true, true, false, false, true, true, true, false, false, false, true, false, true, false, false, true, true, false, true, true, false, true, true, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, false, false, true, true, false, false, false, false, true, false, false, true, true, true, false, false, true, false, true, false, false, false, true, true, true, false, false, false, false, false, false, true, true, false, true, true, false, false, true, false, false, false, true, false, false, false, true, true, false, false, false, true, true, false, true, true, false, true, true, false, false, true, true, true, true, false, true, false, false, false, false, false, false, false, false, true, true, false, true, false, false, true, true, false, true, false, false, true, false, false, true, true, true, false, false, true, true, false, true, true, false, false, false, false, true, true, false, true, false, false, false, true, false, false, false, false]);
            let encoded = BinVector::from_bools(&[true, true, true, true, false, false, true, true, false, false, false, false, true, false, false, true, true, true, false, false, true, false, true, false, false, false, true, true, true, false, false, false, false, false, false, true, true, false, true, true, false, false, true, false, false, false, true, false, false, false, true, true, false, false, false, true, true, false, true, true, false, true, true, false, false, true, true, true, true, false, true, false, false, false, false, false, false, false, false, true, true, false, true, false, false, true, true, false, true, false, false, true, false, false, false, true, true, true, false, false, true, true, false, true, true, false, false, false, false, true, true, true, false, true, false, false, false, true, false, false, false, false, false, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, false, false, true, true, false, false, false, false, true, false, false, true, true, true, false, false, true, false, true, false, false, false, true, true, true, false, false, false, false, false, false, true, true, false, true, true, false, false, true, false, false, false, true, false, false, false, true, true, false, false, true, true, true, false, true, true, false, true, true, false, false, true, true, true, true, false, true, false, false, false, false, false, false, false, false, true, true, false, true, false, false, true, true, false, true, false, false, true, false, false, false, true, true, true, false, false, true, true, false, true, true, false, false, false, false, true, true, true, false, true, false, false, false, true, false, false, false, false, false, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, true, true, true, false, false, false, true, true, false, true, true, true, false, false, false, true, false, true, true, false, false, true, true, false, true, false, true, false, true, false, true, false, false, true, false, false, false, false, true, true, false, true, false, true, false, true, false, false, true, false, true, false, false, true, false, false, false, true, true, false, true, true, false, true, true, true, true, true, true, true, true, true, false, true, true, false, false, true, false, true, true, false, false, true, false, true, true, true, true, false, true, true, true, false, false, false, false, true, false, false, true, true, false, true, true, true, false, false, true, true, true, false, true, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, false, false, true, true, true, false, false, false, true, true, false, true, true, true, false, false, false, true, false, true, true, false, false, true, true, false, true, false, true, false, true, false, true, false, false, true, false, false, false, false, true, true, false, true, false, true, false, true, false, false, true, false, true, false, false, true, false, false, false, true, true, false, true, true, false, true, true, true, true, true, true, true, true, true, false, true, true, false, false, true, false, true, true, false, false, true, false, true, true, true, true, false, false, true, true, true, false, false, false, false, true, false, false, true, true, false, true, true, false, true, false, false, true, true, true, false, true, true, true, false, true, true, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, true, true, true, false, false, false, true, true, false, true, true, true, false, false, false, true, false, true, true, false, false, false, true, false, true, false, true, false, true, false, true, false, false, true, false, false, false, false, true, true, false, true, false, true, false, true, false, false, true, false, true, false, false, true, false, false, false, true, true, false, true, true, false, true, true, true, true, true, true, true, true, true, false, true, true, false, false, true, false, true, true, false, false, true, false, true, true, true, true, false, false, true, true, true, false, false, false, false, true, false, false, true, true, false, true, true, false, true, false, false, true, true, true, false, true, true, true, false, true, true, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, false, false, false, true, false, true, false, false, false, false, true, true, true, false, true, true, true, false, false, true, false, true, true, true, true, true, true, true, true, false, true, true, false, false, true, false, false, true, true, true, true, true, false, true, true, true, false, false, true, true, true, false, false, false, true, true, true, false, true, true, false, false, false, true, true, false, true, true, false, false, true, true, true, false, false, false, true, false, false, false, true, true, false, false, true, false, false, false, true, false, true, false, false, false, false, false, false, true, false, false, false, false, true, true, false, false, false, false, false, true, false, true, true, false, true, true, true]);
            let encoded = BinVector::from_bools(&[false, true, true, false, false, false, true, false, true, false, false, false, false, true, true, true, false, true, true, true, false, false, true, false, true, true, true, true, true, true, true, true, false, true, true, false, false, true, false, false, true, true, true, true, true, false, true, true, true, false, false, true, true, true, false, false, false, true, true, true, false, true, true, false, false, false, true, true, false, true, true, false, false, true, true, true, false, false, false, true, false, false, false, true, true, false, false, true, false, false, false, true, false, true, true, false, false, false, false, false, false, true, false, false, false, false, true, true, false, false, false, false, false, false, true, false, true, true, false, false, true, true, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, false, false, false, true, false, true, false, false, false, false, true, true, true, false, true, true, true, false, false, true, false, true, true, true, true, true, true, true, true, false, true, true, false, false, true, false, false, true, false, true, true, true, false, true, true, true, false, false, true, true, true, false, false, false, true, true, true, false, true, true, false, false, false, true, true, false, true, true, false, false, true, true, true, false, false, false, true, false, false, false, true, true, false, false, true, false, false, false, true, false, true, true, false, false, false, false, false, false, true, false, false, false, false, true, true, false, false, false, false, false, false, true, false, true, true, false, false, true, true, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, false, true, true, true, false, true, true, false, false, false, false, false, false, true, true, false, false, false, false, true, false, true, false, false, true, false, false, false, false, true, false, true, true, true, false, true, false, true, true, false, false, true, true, true, false, false, true, true, false, true, false, true, false, false, false, false, true, false, true, false, true, true, true, false, true, true, false, false, false, true, false, false, false, true, true, false, true, false, false, true, false, true, true, false, true, true, false, false, true, false, true, true, true, true, false, true, true, true, true, true, false, false, true, false, true, true, true, true, false, true, true, true, false, true, true, true]);
            let encoded = BinVector::from_bools(&[false, false, false, true, false, true, true, true, false, true, true, false, false, false, false, false, false, true, true, false, false, false, false, true, false, true, false, false, true, false, false, false, false, true, false, true, true, true, false, true, false, true, true, false, false, true, true, true, false, false, true, true, false, true, false, true, false, false, false, false, true, false, true, false, true, true, true, false, true, true, false, false, false, true, false, false, false, true, true, false, true, false, false, true, false, true, true, false, true, true, false, false, true, false, true, true, true, true, true, false, true, true, true, true, true, false, false, true, false, true, true, true, true, true, false, true, true, true, false, false, true, true, true, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, false, true, true, true, false, true, true, false, false, false, false, false, false, true, true, false, false, false, false, true, false, true, false, false, true, false, false, false, false, true, false, true, true, true, false, true, false, true, true, false, false, true, true, true, false, false, true, true, false, true, false, true, false, false, false, false, true, false, true, false, true, true, false, false, true, true, false, false, false, true, false, false, false, true, true, false, true, false, false, true, false, true, true, false, true, true, false, false, true, false, true, true, true, true, true, false, true, true, true, true, true, false, false, true, false, true, true, true, true, true, false, true, true, true, false, false, true, true, true, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, true, true, true, false, true, true, false, true, true, true, true, true, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, false, false, true, false, true, true, true, false, true, false, false, false, false, true, true, true, true, false, true, true, true, true, true, true, true, false, false, false, true, false, false, false, true, true, false, true, false, true, false, false, false, false, false, true, true, false, true, false, false, false, true, false, false, true, false, true, false, false, false, false, false, true, true, false, true, true, true, false, true, false, false, false, true, true, true, true, false, false, false, true, true, true, false, false, true]);
            let encoded = BinVector::from_bools(&[false, false, true, false, true, true, true, false, true, true, false, true, true, true, true, true, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, false, false, true, false, true, true, true, false, true, false, false, false, false, true, true, true, true, false, true, true, true, true, true, true, true, false, false, false, true, false, false, false, true, true, false, true, false, true, false, false, false, false, false, true, true, false, true, false, false, false, true, false, false, true, false, true, false, false, false, false, false, false, true, true, false, true, true, true, false, true, false, false, false, true, true, false, true, true, false, false, false, true, true, false, true, false, false, true, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, true, true, true, false, true, true, false, true, true, true, true, true, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, false, false, true, false, true, true, true, false, true, false, false, false, false, true, true, true, true, false, true, true, true, true, true, true, true, false, false, false, true, false, false, false, true, false, false, true, false, true, false, false, false, false, false, true, true, false, true, false, false, false, true, false, false, true, false, true, false, false, false, false, false, false, true, true, false, true, true, true, false, true, false, false, false, true, true, false, true, true, false, false, false, true, true, false, true, false, false, true, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, false, false, false, false, false, false, false, true, false, false, true, false, true, true, true, false, false, true, true, false, false, false, true, false, true, false, false, false, false, true, false, false, true, true, false, false, false, true, true, true, true, true, false, true, true, false, false, false, false, true, true, true, true, false, true, false, true, false, false, true, false, true, true, true, false, true, false, false, false, false, false, false, false, false, true, true, true, true, false, false, true, false, false, false, true, false, true, false, false, true, false, true, false, false, true, true, false, true, true, false, false, false, true, true, true, true, true, false, true, true, true, false, true, false, true, true]);
            let encoded = BinVector::from_bools(&[true, true, false, true, false, false, false, false, false, false, false, true, false, false, true, false, true, true, true, false, false, true, true, false, false, false, true, false, true, false, false, false, false, true, false, false, true, true, false, false, false, true, true, true, true, true, false, true, true, false, false, false, false, true, true, true, true, false, true, false, true, false, false, true, false, true, true, true, false, true, false, false, false, false, false, false, false, false, true, true, true, true, false, false, true, false, false, false, true, false, true, false, false, true, true, false, true, false, false, true, true, false, true, true, false, false, false, true, true, true, true, true, true, false, true, true, true, false, true, true, false, true, true, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, false, false, false, false, false, false, false, true, false, false, true, false, true, true, true, false, false, true, true, false, false, false, true, false, true, false, false, false, false, true, false, false, true, true, false, false, false, true, true, true, true, true, false, true, true, false, false, false, false, true, true, true, true, false, true, false, true, false, false, true, false, true, true, true, false, true, false, false, false, false, false, false, false, false, false, true, true, true, false, false, true, false, false, false, true, false, true, false, false, true, true, false, true, false, false, true, true, false, true, true, false, false, false, true, true, true, true, true, true, false, true, true, true, false, true, true, false, true, true, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, false, true, true, false, false, true, false, false, true, false, true, false, true, false, false, false, true, true, false, false, false, true, false, false, false, true, true, true, true, true, true, false, false, true, false, false, true, true, true, true, true, false, false, false, false, false, true, true, false, false, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, false, false, true, true, false, false, true, false, true, true, true, false, false, false, false, true, false, false, true, false, false, true, false, true, true, true, false, false, false, false, true, true, true, false, true, true, true, true, false, true, true, true, false, false, false, true, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[false, false, false, true, false, true, true, false, false, true, false, false, true, false, true, false, true, false, false, false, true, true, false, false, false, true, false, false, false, true, true, true, true, true, true, false, false, true, false, false, true, true, true, true, true, false, false, false, false, false, true, true, false, false, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, false, false, true, true, false, false, true, false, true, true, true, false, false, false, false, true, false, false, true, false, false, true, false, true, true, false, true, false, false, false, false, true, true, true, false, true, true, true, true, false, true, true, true, true, false, false, false, true, true, true, true, true, false, false, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, false, true, true, false, false, true, false, false, true, false, true, false, true, false, false, false, true, true, false, false, false, true, false, false, false, true, true, true, true, true, true, false, false, true, false, false, true, true, true, true, true, false, false, false, false, false, true, true, false, false, true, false, false, true, true, false, true, false, true, false, false, false, true, false, true, false, false, true, true, false, false, true, false, true, true, true, false, false, false, false, true, false, false, true, false, false, true, false, true, true, false, true, false, false, false, false, true, true, true, false, true, true, true, true, false, true, true, true, true, false, false, false, true, true, true, true, true, false, false, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, true, false, false, false, true, true, true, true, false, true, false, true, false, true, false, false, true, false, true, false, true, true, true, false, true, false, false, false, false, true, false, false, true, false, true, false, true, false, true, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, true, false, true, true, true, true, true, true, false, true, false, true, true, true, false, false, false, true, true, true, false, true, false, false, false, true, true, false, false, false, false, false, true, true, true, true, true, true, false, false, true, true, true, false, true, true, false, false, false, false, true, false, true, true, true, false, true, true, false, true, false]);
            let encoded = BinVector::from_bools(&[true, true, true, true, true, false, false, false, true, true, true, true, false, true, false, true, false, true, false, false, true, false, true, false, true, true, true, false, true, false, false, false, false, true, false, false, true, false, true, false, true, false, true, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, true, false, true, true, true, true, true, true, false, true, false, true, true, true, false, false, false, true, true, true, false, true, false, false, false, true, true, false, false, false, false, false, true, true, true, true, true, true, true, false, false, true, true, true, false, true, true, false, false, false, false, false, true, false, true, true, true, false, true, true, true, false, true, true, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, true, false, false, false, true, true, true, true, false, true, true, true, false, true, false, false, true, false, true, false, true, true, true, false, true, false, false, false, false, true, false, false, true, false, true, false, true, false, true, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, true, false, true, true, true, true, true, true, false, true, false, true, true, true, false, false, false, true, true, true, false, true, false, false, false, true, true, false, false, false, false, false, true, true, true, true, true, true, true, false, false, true, true, true, false, true, true, false, false, false, false, false, true, false, true, true, true, false, true, true, true, false, true, true, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, false, true, true, true, false, true, true, false, false, false, true, false, false, false, false, false, true, false, true, true, true, false, false, false, false, false, true, true, true, false, true, true, true, true, false, true, false, false, false, false, false, true, false, false, false, false, false, true, true, false, true, false, false, false, true, false, true, true, false, false, false, false, true, false, false, true, true, false, false, true, true, true, false, true, true, false, false, true, true, true, false, true, true, false, false, false, true, true, true, true, false, true, true, true, true, false, true, false, true, true, false, false, false, true, false, false, false, false, true, true, false, false, false, true, true, true]);
            let encoded = BinVector::from_bools(&[false, false, true, true, false, true, true, true, false, true, true, false, false, false, true, false, false, false, false, false, true, false, true, true, true, false, false, false, false, false, true, true, true, false, true, true, true, true, false, true, false, false, false, false, false, true, false, false, false, false, false, true, true, false, true, false, false, false, true, false, true, true, false, false, false, false, true, false, false, true, true, false, false, true, true, true, false, true, true, false, false, true, true, true, false, true, true, false, false, false, true, true, true, true, true, false, true, true, true, true, false, true, false, true, true, false, false, false, true, false, true, false, false, false, true, true, false, false, true, false, true, true, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, false, true, true, true, false, true, true, false, false, false, true, false, false, false, false, false, true, false, true, true, true, false, false, false, false, false, true, true, true, false, true, true, true, true, false, true, false, false, false, false, false, true, false, false, false, false, false, true, true, true, true, false, false, false, true, false, true, true, false, false, false, false, true, false, false, true, true, false, false, true, true, true, false, true, true, false, false, true, true, true, false, true, true, false, false, false, true, true, true, true, true, false, true, true, true, true, false, true, false, true, true, false, false, false, true, false, true, false, false, false, true, true, false, false, true, false, true, true, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, true, true, true, true, true, false, true, true, false, false, true, false, false, true, false, false, false, true, false, false, false, false, true, true, false, true, true, false, false, true, true, false, false, false, false, true, true, false, false, false, true, false, false, true, false, false, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, false, true, false, false, false, false, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, false, true, false, true, true, true, false, true, true, true, true, false, false, true, true, false, false, false, true, true, true, false, false, true, false, false, false, false, true, true, true, true, false]);
            let encoded = BinVector::from_bools(&[false, true, false, false, true, true, true, true, true, false, true, true, false, false, true, false, false, true, false, false, false, true, false, false, false, false, true, true, false, true, true, false, false, true, true, false, false, false, false, true, true, false, false, false, true, false, false, true, false, false, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, false, true, false, false, false, false, false, true, true, false, false, true, false, true, false, true, false, false, true, false, true, false, false, true, false, true, true, true, false, true, true, true, true, true, false, false, true, true, false, false, false, true, true, true, false, false, false, true, false, false, false, false, true, false, true, true, true, false, false, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, true, true, true, true, true, false, true, true, false, false, true, false, false, true, false, false, false, true, false, false, false, false, true, true, false, true, true, false, false, true, true, false, false, false, false, true, true, false, false, false, true, false, false, true, false, false, true, false, true, true, false, false, true, true, true, true, false, true, false, true, false, false, true, false, false, false, false, false, true, true, false, false, true, false, true, false, true, false, false, true, true, true, false, false, true, false, true, true, true, false, true, true, true, true, true, false, false, true, true, false, false, false, true, true, true, false, false, false, true, false, false, false, false, true, false, true, true, true, false, false, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, true, true, true, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, false, false, true, false, false, false, false, true, true, true, false, false, true, false, false, true, true, true, true, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, false, true, false, false, false, true, false, true, false, true, true, false, false, false, false, false, true, false, false, false, true, false, true, true, false, false, false, true, true, true, true, false, false, true, true, true, false, true, false, false, false, false, true, true, true, true, true, false, true, false, false, true, true, true, true, true, true, true]);
            let encoded = BinVector::from_bools(&[true, true, true, true, true, true, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, false, false, true, false, false, false, false, true, true, true, false, false, true, false, false, true, true, true, true, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, false, true, false, false, false, true, false, true, false, true, true, false, false, false, false, false, true, false, false, false, true, false, true, true, false, false, false, true, true, true, true, false, false, false, true, true, true, false, true, false, false, false, false, true, true, true, true, true, true, false, true, false, false, true, true, true, true, true, true, true, true, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, true, true, true, false, false, true, false, false, false, false, true, false, false, false, true, false, false, false, false, false, true, false, false, false, false, true, true, true, false, false, true, false, false, true, true, true, true, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false, true, true, true, false, false, false, true, false, false, false, true, false, true, false, true, true, false, false, false, false, false, true, false, false, false, true, false, true, true, false, false, false, true, true, true, true, false, false, false, true, true, true, false, true, false, false, false, false, true, true, true, true, true, true, false, true, false, false, true, true, true, true, true, true, true, true, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, true, false, true, false, false, true, true, true, false, true, false, false, true, false, true, true, false, true, true, false, true, true, false, true, true, false, true, false, true, false, false, true, true, false, false, true, false, true, true, true, true, false, true, true, false, true, true, true, false, false, true, true, false, true, true, true, true, false, true, true, true, true, true, false, false, true, false, true, true, false, true, false, false, false, true, false, true, false, true, false, true, true, false, true, true, false, true, false, false, true, false, false, true, false, false, false, false, false, true, true, false, true, true, false, true, false, false, true, true, false, true, true, true, false, false, true]);
            let encoded = BinVector::from_bools(&[false, false, true, true, true, false, true, false, false, true, true, true, false, true, false, false, true, false, true, true, false, true, true, false, true, true, false, true, true, false, true, false, true, false, false, true, true, false, false, true, false, true, true, true, true, false, true, true, false, true, true, true, false, false, true, true, false, true, true, true, true, false, true, true, true, true, true, false, false, true, false, true, true, false, true, false, false, false, true, false, true, false, true, false, true, true, false, true, true, false, true, false, false, true, true, false, false, true, false, false, false, false, false, true, true, false, true, true, false, true, false, false, false, true, true, false, true, true, true, true, false, false, false, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, true, false, true, false, false, false, true, true, false, true, false, false, true, false, true, true, false, true, true, false, true, true, false, true, true, false, true, false, true, false, false, true, true, false, false, true, false, true, true, true, true, false, true, true, false, true, true, true, false, false, true, true, false, true, true, true, true, false, true, true, true, true, true, false, false, true, false, true, true, false, true, false, false, false, true, false, true, false, true, false, true, true, false, true, true, false, true, false, false, true, true, false, false, true, false, false, false, false, false, true, true, false, true, true, false, true, false, false, false, true, true, false, true, true, true, true, false, false, false, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, false, false, true, false, true, true, false, false, true, false, false, true, true, false, false, false, true, true, false, false, true, true, true, false, false, false, false, true, false, true, true, false, false, false, true, false, true, false, false, true, true, true, true, true, false, true, true, false, false, true, true, false, false, false, false, false, true, false, true, true, false, true, false, true, false, false, false, true, true, false, true, false, true, true, false, true, true, false, true, false, false, false, true, false, false, false, false, true, true, true, true, false, false, true, true, true, false, true, false, true, true, true, false, false, false, false, true, true, false, true, false, true, false, true, false, true]);
            let encoded = BinVector::from_bools(&[false, true, false, false, false, false, true, false, true, true, false, false, true, false, false, true, true, false, false, false, true, true, false, false, true, true, true, false, false, false, false, true, false, true, true, false, false, false, true, false, true, false, false, true, true, true, true, true, false, true, true, false, false, true, true, false, false, false, false, false, true, false, true, true, false, true, false, true, false, false, false, true, true, false, true, false, true, true, false, true, true, false, true, false, false, false, true, false, false, false, false, true, true, true, true, true, false, false, true, true, true, false, true, false, true, true, true, false, false, false, false, false, true, true, false, true, false, true, true, false, true, false, true, true, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, false, false, true, false, true, true, false, false, true, false, false, true, true, false, false, false, true, true, false, false, true, true, true, false, false, false, false, true, false, true, true, false, false, false, true, false, true, false, false, true, true, true, true, true, false, true, true, false, false, true, true, false, false, false, false, false, true, false, true, true, true, true, false, true, false, false, false, true, true, false, true, false, true, true, false, true, true, false, true, false, false, false, true, false, false, false, false, true, true, true, true, true, false, false, true, true, true, false, true, false, true, true, true, false, false, false, false, false, true, true, false, true, false, true, true, false, true, false, true, true, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, true, false, true, true, false, false, true, false, false, true, false, false, true, true, false, false, false, true, false, true, false, true, false, true, true, true, false, true, true, true, false, false, true, true, true, true, false, true, false, false, false, true, false, true, false, false, true, false, false, true, true, false, false, true, false, false, true, false, true, true, true, true, false, true, true, false, true, true, false, true, true, false, false, false, false, true, false, true, true, true, true, true, false, true, true, false, true, true, true, true, false, true, true, true, true, false, false, true, true, false, true, true, false, true, true, false, true, false, false, true, false, true, true, true, false, true]);
            let encoded = BinVector::from_bools(&[false, false, true, false, true, false, true, true, false, false, true, false, false, true, false, false, true, true, false, false, false, true, false, true, false, true, false, true, true, true, false, true, true, true, false, false, true, true, true, true, false, true, false, false, false, true, false, true, false, false, true, false, false, true, true, false, false, true, false, false, true, false, true, true, true, true, false, true, true, false, true, true, false, true, true, false, false, false, false, true, false, true, true, true, true, true, false, true, true, false, true, true, true, true, true, false, true, true, true, true, false, false, true, true, false, true, true, false, true, true, false, false, true, false, false, true, false, true, false, true, true, false, false, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, true, false, true, true, false, false, true, false, false, true, false, false, true, true, false, false, false, true, false, true, false, true, false, true, true, true, false, true, true, true, false, false, true, true, true, true, false, true, false, false, false, true, false, true, false, false, true, false, false, true, true, false, false, true, false, false, true, false, true, true, true, true, false, true, true, false, true, true, false, true, true, false, false, false, false, true, false, true, true, true, true, true, false, true, false, false, true, true, true, true, true, false, true, true, true, true, false, false, true, true, false, true, true, false, true, true, false, false, true, false, false, true, false, true, false, true, true, false, false, true, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, true, false, true, false, true, false, true, false, false, true, true, false, false, true, false, false, false, true, false, true, true, false, true, true, true, false, true, true, false, true, false, false, true, true, false, false, false, false, false, true, true, true, true, true, true, false, false, true, false, true, false, false, true, false, false, true, true, true, false, false, false, false, false, true, true, true, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, true, false, false, false, false, false, true, false, true, false, false, true, true, false, false, true, false, true, true, false, false, true, true, false, false, false, true, false, true, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, false, true, true, true, false, true, false, true, false, true, false, false, true, true, false, false, true, false, false, false, true, false, true, true, false, true, true, true, false, true, true, false, true, false, false, true, true, false, false, false, false, false, true, true, true, true, true, true, false, false, true, false, true, false, false, true, false, false, true, true, true, false, false, false, false, false, true, true, true, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, true, false, false, false, false, false, true, false, false, true, false, false, true, true, false, false, true, false, true, true, false, false, true, false, true, false, false, false, true, false, true, false, false, true, false, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, true, false, true, false, true, false, true, false, false, true, true, false, false, true, false, false, false, true, false, true, true, false, true, true, true, false, false, true, false, true, false, false, true, true, false, false, false, false, false, true, true, true, true, true, true, false, false, true, false, true, false, false, true, false, false, true, true, true, false, false, false, false, false, true, true, true, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, false, true, false, false, false, false, false, true, false, false, true, false, false, true, true, false, false, true, false, true, true, false, false, true, false, true, false, false, false, true, false, true, false, false, true, false, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, true, false, false, false, true, false, false, false, true, false, true, false, false, false, false, true, true, false, true, true, true, true, false, false, true, true, false, false, false, false, true, true, false, false, false, true, true, true, false, true, false, true, false, true, false, true, false, true, true, true, false, true, true, false, false, false, false, false, false, true, true, true, false, false, true, true, true, true, true, false, false, false, true, false, true, true, true, false, false, false, false, true, false, true, false, false, true, true, false, true, false, false, false, false, true, true, true, true, true, false, false, true, false, false, true, true, false, false, false, false, true, true, false, true, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, true, true, false, false, false, true, false, false, false, true, false, true, false, false, false, false, true, true, false, true, true, true, true, false, false, true, true, false, false, false, false, true, true, false, false, false, true, true, true, false, true, false, true, false, true, false, true, false, true, true, true, false, true, true, false, false, false, false, false, false, true, true, true, false, false, true, true, true, true, true, false, false, false, true, false, true, true, true, false, false, false, false, true, false, true, false, false, true, true, false, true, true, false, false, false, false, true, true, true, true, true, false, false, true, false, false, true, false, true, false, false, false, false, true, true, true, false, true, true, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, true, false, false, false, true, false, false, false, true, false, true, false, false, false, false, true, true, false, true, true, true, true, false, false, true, true, false, false, false, false, true, true, false, false, false, true, true, true, false, true, false, true, false, true, false, true, false, true, true, true, false, true, true, false, false, false, false, false, false, true, true, true, false, false, true, true, true, true, true, false, false, false, true, false, true, true, false, false, false, false, false, true, false, true, false, false, true, true, false, true, true, false, false, false, false, true, true, true, true, true, false, false, true, false, false, true, false, true, false, false, false, false, true, true, true, false, true, true, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, true, true, false, false, false, false, false, false, true, true, false, false, true, true, false, true, true, true, true, false, true, false, true, true, false, false, false, false, false, false, false, false, false, false, false, true, true, false, true, true, true, true, true, true, false, false, true, true, true, true, true, false, false, true, true, false, false, true, false, false, false, false, false, false, false, true, false, false, true, false, false, false, true, true, true, false, false, true, true, false, false, true, true, true, true, false, true, false, false, false, false, true, false, false, false, false, false, false, true, true, false, true, true, false, false, true, false, false, true, true, false, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, false, true, false, true, true, false, false, false, false, false, false, true, true, false, false, true, true, false, true, true, true, true, false, true, false, true, true, false, false, false, false, false, false, false, false, false, false, false, true, true, false, true, true, true, true, true, true, false, false, true, true, true, true, true, false, false, true, true, false, false, true, false, false, false, false, false, false, false, true, false, false, true, false, false, false, true, true, true, false, false, true, true, false, false, true, true, true, true, false, true, false, false, false, false, false, true, false, false, false, false, false, false, true, true, false, true, true, false, false, false, true, false, false, true, true, false, false, false, false, true, false, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, true, true, false, false, false, false, false, false, true, true, false, false, true, true, false, true, false, true, true, false, true, false, true, true, false, false, false, false, false, false, false, false, false, false, false, true, true, false, true, true, true, true, true, true, false, false, true, true, true, true, true, false, false, true, true, false, false, true, false, false, false, false, false, false, false, true, false, false, true, false, false, false, true, true, true, false, false, true, true, false, false, true, true, true, true, false, true, false, false, false, false, false, true, false, false, false, false, false, false, true, true, false, true, true, false, false, false, true, false, false, true, true, false, false, false, false, true, false, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, false, true, true, false, true, true, true, false, true, true, true, true, false, false, false, false, true, false, false, true, true, false, false, true, true, false, false, true, false, true, true, false, false, true, false, true, true, true, true, false, true, false, true, true, true, false, false, false, true, false, false, false, true, false, false, true, false, false, true, true, false, false, false, false, false, false, true, false, true, false, false, false, false, false, true, true, true, true, false, true, false, true, true, true, false, false, false, true, false, true, true, true, true, false, true, false, false, true, false, false, false, true, false, true, true, true, true, true, true, true, true, false, true, true, true, false]);
            let encoded = BinVector::from_bools(&[false, false, true, false, false, true, true, false, true, true, true, false, true, true, true, true, false, false, false, false, true, false, false, true, true, false, false, true, true, false, false, true, false, true, true, false, false, true, false, true, true, true, true, false, true, false, true, true, true, false, false, false, true, false, false, false, true, false, false, true, false, false, true, true, false, false, false, false, false, false, true, false, true, false, false, false, false, false, true, true, true, true, false, true, false, true, true, true, false, false, false, true, false, true, true, true, true, true, false, true, false, false, true, false, false, false, true, false, true, true, false, true, true, true, true, true, true, false, false, true, true, true, true, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, false, true, true, false, true, true, true, false, true, true, true, true, false, false, false, false, true, false, false, true, false, false, false, true, true, false, false, true, false, true, true, false, false, true, false, true, true, true, true, false, true, false, true, true, true, false, false, false, true, false, false, false, true, false, false, true, false, false, true, true, false, false, false, false, false, false, true, false, true, false, false, false, false, false, true, true, true, true, false, true, false, true, true, true, false, false, false, true, false, true, true, true, true, true, false, true, false, false, true, false, false, false, true, false, true, true, false, true, true, true, true, true, true, false, false, true, true, true, true, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, true, true, true, true, true, true, true, true, false, true, false, false, true, false, true, false, true, false, true, false, false, true, false, true, false, false, false, false, false, false, true, false, true, true, true, true, true, false, false, true, true, true, true, false, true, false, false, true, false, true, true, true, true, false, true, false, true, true, true, true, true, false, false, true, false, true, false, true, true, false, true, false, true, true, false, true, false, false, true, false, true, false, false, false, true, false, true, false, true, false, false, true, false, false, true, false, true, false, true, true, true, false, false, false, false, true, false, false, false, true, true, false, true, false, true, true, true]);
            let encoded = BinVector::from_bools(&[true, false, true, true, true, true, true, true, true, true, true, false, true, false, false, true, false, true, false, true, false, true, false, false, true, false, true, false, false, false, false, false, false, true, false, true, true, true, true, true, false, false, true, true, true, true, false, true, false, false, true, false, true, true, true, true, false, true, false, true, true, true, true, true, false, false, true, false, true, false, true, true, false, true, false, true, true, false, true, false, false, true, false, true, false, false, false, true, false, true, false, true, false, false, true, true, false, false, true, false, true, false, true, true, true, false, false, false, false, true, true, false, false, false, true, true, false, true, true, false, true, true, true, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, true, true, true, true, true, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, false, true, false, true, false, false, false, false, false, false, true, false, true, true, true, true, true, false, false, true, true, true, true, false, true, false, false, true, false, true, true, true, true, false, true, false, true, true, true, true, true, false, false, true, false, true, false, true, true, false, true, false, true, true, false, true, false, false, true, false, true, false, false, false, true, false, true, false, true, false, false, true, true, false, false, true, false, true, false, true, true, true, false, false, false, false, true, true, false, false, false, true, true, false, true, true, false, true, true, true, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, true, false, true, false, false, true, true, false, true, true, true, true, false, false, true, false, false, true, false, false, true, false, true, false, true, true, true, false, false, false, true, false, false, true, false, false, false, false, true, true, false, true, false, true, false, false, true, false, true, true, true, true, false, true, false, true, true, true, true, true, false, true, false, true, false, false, false, true, true, false, true, true, false, false, false, true, true, false, true, false, false, false, false, true, false, true, false, false, false, false, true, false, false, false, true, false, true, true, true, true, true, true, false, true, false, true, false, false, true, true, true, false, true, true, true, false]);
            let encoded = BinVector::from_bools(&[false, true, true, true, true, false, true, false, false, true, true, false, true, true, true, true, false, false, true, false, false, true, false, false, true, false, true, false, true, true, true, false, false, false, true, false, false, true, false, false, false, false, true, true, false, true, false, true, false, false, true, false, true, true, true, true, false, true, false, true, true, true, true, true, false, true, false, true, false, false, false, true, true, false, true, true, false, false, false, true, true, false, true, false, false, false, false, true, false, true, false, false, false, false, false, true, false, false, false, true, false, true, true, true, true, true, true, false, true, false, true, true, false, false, true, true, true, false, true, true, true, true, false, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, true, false, true, false, false, true, true, false, true, true, true, true, false, false, true, false, false, true, false, false, true, false, true, false, true, true, true, false, false, false, true, false, false, true, false, false, false, false, true, true, false, true, false, true, false, false, true, false, true, true, true, true, false, true, false, true, true, true, true, true, false, true, false, true, true, false, false, true, true, false, true, true, false, false, false, true, true, false, true, false, false, false, false, true, false, true, false, false, false, false, false, true, false, false, false, true, false, true, true, true, true, true, true, false, true, false, true, true, false, false, true, true, true, false, true, true, true, true, false, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, false, false, true, false, true, true, true, false, true, false, false, false, true, false, false, true, false, true, true, false, true, false, false, false, false, false, true, false, true, true, true, true, true, true, true, false, false, true, false, true, true, false, false, true, true, true, true, false, false, true, false, false, false, true, false, false, true, false, false, true, true, true, true, false, true, false, false, false, false, false, false, false, true, true, false, false, false, true, true, false, false, false, false, true, false, true, true, true, true, true, false, true, true, false, true, true, true, false, false, false, false, false, false, false, false, true, false, true, false, true, false, true, false, true, true, false]);
            let encoded = BinVector::from_bools(&[false, false, true, false, false, false, true, false, true, true, true, false, true, false, false, false, true, false, false, true, false, true, true, false, true, false, false, false, false, false, true, false, true, true, true, true, true, true, true, false, false, true, false, true, true, false, false, true, true, true, true, false, false, true, false, false, false, true, false, false, true, false, false, true, true, true, true, false, true, false, false, false, false, false, false, false, true, true, false, false, false, true, true, false, false, false, false, true, false, true, true, true, true, true, false, false, true, true, false, true, true, true, false, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, false, true, true, true, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, false, false, true, false, true, true, true, false, true, false, false, false, true, false, false, true, false, true, true, false, true, false, false, false, false, false, true, false, true, true, true, true, true, true, true, false, false, true, false, true, true, false, false, true, true, true, true, false, false, true, false, false, false, true, false, false, true, false, false, true, true, true, true, false, true, false, false, false, false, false, false, false, true, true, false, false, false, true, true, false, false, false, false, false, false, true, true, true, true, true, false, false, true, true, false, true, true, true, false, false, false, false, false, false, false, false, true, true, false, true, false, true, false, true, true, false, true, true, true, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, false, false, false, false, true, true, true, true, true, true, true, false, true, true, true, true, true, true, false, false, false, true, true, true, false, true, true, false, false, true, false, true, false, true, true, true, true, false, true, true, false, false, true, false, false, false, false, true, true, true, false, false, false, false, true, true, true, true, true, false, true, true, false, false, false, true, false, false, false, false, false, true, true, true, false, false, true, true, false, false, true, false, true, true, false, false, true, true, false, true, false, false, true, true, false, false, false, false, true, true, true, true, true, false, true, true, false, false, true, false, true, false, true, true, true, false, true]);
            let encoded = BinVector::from_bools(&[false, false, true, false, false, false, false, true, true, true, true, true, true, true, false, true, true, true, true, true, true, false, false, false, true, true, true, false, true, true, false, false, true, false, true, false, true, true, true, true, false, true, true, false, false, true, false, false, false, false, true, true, true, false, false, false, false, true, true, true, true, true, false, true, true, false, false, false, true, false, false, false, false, false, true, true, true, false, false, true, true, false, false, true, false, true, true, false, false, true, true, false, true, false, true, false, true, true, false, false, false, false, true, true, true, true, true, false, true, true, false, false, false, true, false, true, false, true, true, true, true, false, false, true, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, false, true, false, false, true, true, true, true, true, true, true, false, true, true, true, true, true, true, false, false, false, true, true, true, false, true, true, false, false, true, false, true, false, true, true, true, true, false, true, true, false, false, true, false, false, false, false, true, true, true, false, false, false, false, true, true, true, true, true, false, true, true, false, false, false, true, false, false, false, false, false, true, true, true, false, false, true, true, false, false, true, false, true, true, false, false, true, true, false, true, false, true, false, true, true, false, false, false, false, true, true, true, true, true, false, true, true, false, false, false, true, false, true, false, true, true, true, true, false, false, true, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, false, false, false, true, true, true, false, true, true, true, true, false, false, true, false, false, true, false, false, true, true, true, true, true, false, false, false, false, false, true, false, false, true, false, true, false, false, false, true, true, false, false, false, false, false, true, false, false, true, false, false, true, false, true, false, true, true, true, true, false, true, true, false, true, false, true, true, true, false, false, true, true, false, false, true, true, true, true, true, true, true, true, false, true, false, true, true, false, true, true, false, true, false, true, true, true, false, true, true, false, true, false, false, false, true, false, false, false, true, false, true, false, false, true, true, true, true, false]);
            let encoded = BinVector::from_bools(&[true, false, false, false, false, true, true, true, false, true, true, true, true, false, false, true, false, false, true, false, false, true, true, true, true, true, false, false, false, false, false, true, false, false, true, false, true, false, false, false, true, true, false, false, false, false, false, true, false, false, true, false, false, true, false, true, false, true, true, true, true, false, true, true, false, true, false, true, true, true, false, false, true, true, false, false, true, true, true, true, true, true, true, true, false, true, false, true, true, false, true, true, false, true, true, false, true, true, true, false, true, true, false, true, false, false, false, true, false, false, true, false, true, false, true, false, false, true, true, true, true, true, true, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, false, false, false, true, true, true, false, true, true, true, true, false, false, true, false, false, true, false, false, true, true, true, true, true, false, false, false, false, false, true, false, false, true, false, true, false, false, false, true, true, false, false, false, false, false, true, false, false, true, false, false, true, false, true, false, true, true, true, true, false, true, true, false, true, false, true, true, true, false, false, true, true, false, false, true, true, true, true, true, true, true, true, false, true, false, true, true, true, true, true, false, true, true, false, true, true, true, false, true, true, false, true, false, false, false, true, false, false, true, false, true, false, true, false, false, true, true, true, true, true, true, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, false, true, false, false, false, true, true, true, true, false, false, true, true, true, false, true, true, false, true, true, false, false, true, false, true, false, false, false, false, false, false, true, false, true, true, true, false, false, false, true, false, true, false, true, false, false, false, false, true, false, true, false, true, false, true, true, false, true, true, true, true, false, false, false, true, false, true, false, false, false, true, false, false, false, false, false, true, false, false, true, true, true, false, true, false, false, false, false, true, false, true, false, false, false, false, false, false, false, true, true, false, false, false, true, false, false, false, false, true, false, true, false, true, true, true, true]);
            let encoded = BinVector::from_bools(&[false, false, true, true, false, true, false, false, false, true, true, true, true, false, false, true, true, true, false, true, true, false, true, true, false, false, true, false, true, false, false, false, false, false, false, true, false, true, true, true, false, false, false, true, false, true, false, true, false, false, false, false, true, false, true, false, true, false, true, true, false, true, true, true, true, false, false, false, true, false, true, false, false, false, true, false, false, false, false, false, true, false, false, true, true, true, false, true, false, false, false, false, true, false, true, true, false, false, false, false, false, false, false, true, true, false, false, false, true, false, false, false, false, false, true, false, true, false, false, true, true, true, false, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, false, true, false, false, false, true, true, true, true, false, false, true, true, true, false, true, true, true, true, true, false, false, true, false, true, false, false, false, false, false, false, true, false, true, true, true, false, false, false, true, false, true, false, true, false, false, false, false, true, false, true, false, true, false, true, true, false, true, true, true, true, false, false, false, true, false, true, false, false, false, true, false, false, false, false, false, true, false, false, true, true, true, false, true, false, false, false, false, true, false, true, true, false, false, false, false, false, false, false, true, true, false, false, false, true, false, false, false, false, false, true, false, true, false, false, true, true, true, false, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, true, true, true, false, true, false, true, true, false, false, false, true, false, false, false, false, true, true, false, true, false, true, false, true, true, true, true, false, true, false, true, false, false, true, true, false, false, false, false, true, true, true, false, true, true, false, false, true, true, false, false, false, true, true, false, false, false, true, true, true, true, true, false, false, true, true, false, false, true, false, true, true, true, false, false, true, false, true, false, false, true, false, true, false, false, true, true, true, true, false, true, false, false, false, false, true, true, false, true, true, false, true, true, true, true, true, true, false, false, true, false, true, true, false, true, false]);
            let encoded = BinVector::from_bools(&[false, false, false, false, true, true, true, false, true, false, true, true, false, false, false, true, false, false, false, false, true, true, false, true, false, true, false, true, true, true, true, false, true, false, true, false, false, true, true, false, false, false, false, true, true, true, false, true, true, false, false, true, true, false, false, false, true, true, false, false, false, true, true, true, true, true, false, false, true, true, false, false, true, false, true, true, true, false, false, true, false, true, false, false, true, false, true, false, false, true, true, true, true, false, false, true, false, false, false, false, true, true, false, true, true, false, true, true, true, true, true, true, true, false, false, true, false, true, false, true, false, true, false, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, true, true, true, false, true, false, true, true, false, false, false, true, false, false, false, false, true, true, false, true, false, false, false, true, true, true, true, false, true, false, true, false, false, true, true, false, false, false, false, true, true, true, false, true, true, false, false, true, true, false, false, false, true, true, false, false, false, true, true, true, true, true, false, false, true, true, false, false, true, false, true, true, true, false, false, true, false, true, false, false, true, false, true, false, false, true, true, true, true, false, false, true, false, false, false, false, true, true, false, true, true, false, true, true, true, true, true, true, true, false, false, true, false, true, false, true, false, true, false, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, false, true, false, false, false, false, true, true, true, false, false, false, false, true, false, true, true, false, false, false, false, false, true, false, true, true, true, false, true, false, true, false, true, false, true, true, false, true, true, true, false, true, false, false, false, false, false, false, true, true, true, true, true, false, true, true, false, true, true, false, true, false, true, true, false, false, false, true, true, true, true, true, false, true, false, true, true, false, true, true, true, false, true, true, false, true, false, false, true, true, true, true, false, true, false, false, true, true, false, true, true, false, true, false, false, true, true, true, false, false, false, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[false, false, true, true, false, true, false, false, false, false, true, true, true, false, false, false, false, true, false, true, true, false, false, false, false, false, true, false, true, true, true, false, true, false, true, false, true, false, true, true, false, true, true, true, false, true, false, false, false, false, false, false, true, true, true, true, true, false, true, true, false, true, true, false, true, false, true, true, false, false, false, true, true, true, true, true, false, true, false, true, true, false, true, true, true, false, true, true, false, true, false, false, true, true, true, true, true, false, true, false, false, true, true, false, true, true, false, true, false, false, true, true, true, true, false, false, false, true, false, true, true, false, false, false, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, false, true, false, false, false, false, true, true, true, false, false, false, false, true, false, true, true, false, false, false, false, false, true, false, true, true, true, false, true, false, true, false, true, false, true, true, false, true, true, true, false, true, false, false, false, false, false, false, true, true, true, true, true, false, true, true, false, true, true, false, true, false, true, true, false, false, false, true, true, true, true, true, false, true, false, true, true, false, true, true, true, false, true, true, false, true, false, false, true, true, true, true, true, false, true, false, false, true, true, false, true, true, false, true, false, false, true, true, true, false, false, false, false, true, false, true, true, false, false, false, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, false, false, false, false, false, false, true, false, false, true, false, false, false, true, true, true, false, true, false, true, true, true, false, true, true, false, false, false, false, true, true, true, true, true, true, false, true, true, true, false, false, true, true, true, true, false, false, true, true, false, false, true, false, false, true, true, true, true, true, true, true, true, true, false, true, false, true, true, true, true, false, false, true, true, false, true, true, true, true, true, false, true, false, false, false, true, true, true, true, false, true, false, false, true, true, true, false, false, true, true, false, false, false, true, true, false, true, false, false, true, true, true, true, false, true, false]);
            let encoded = BinVector::from_bools(&[true, true, true, false, false, false, false, false, false, false, true, false, false, true, false, false, false, true, true, true, false, true, false, true, true, true, false, true, true, false, false, false, false, true, true, true, true, true, true, false, true, true, true, false, false, true, true, true, true, false, false, true, true, false, false, true, false, false, true, true, true, true, true, true, true, true, true, false, true, false, true, true, true, true, false, false, true, true, false, true, true, true, true, true, false, true, false, false, false, true, true, true, true, false, false, true, false, false, true, true, true, false, false, true, true, false, false, false, true, true, false, false, true, false, false, true, true, true, false, true, false, true, true, false, false, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, false, false, false, false, false, false, true, false, false, true, false, false, false, true, true, true, false, true, false, true, true, true, false, true, true, false, false, false, false, true, true, true, true, true, true, false, true, true, true, false, false, true, true, true, true, false, false, true, true, false, false, true, false, false, true, true, true, true, true, true, true, true, true, false, true, false, true, true, true, true, false, false, true, true, false, true, true, true, true, true, false, true, false, false, false, true, true, true, false, false, false, true, false, false, true, true, true, false, false, true, true, false, false, false, true, true, false, false, true, false, false, true, true, true, false, true, false, true, true, false, false, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, false, true, false, false, false, false, false, false, true, false, false, true, true, true, true, false, true, true, true, true, false, false, false, false, true, true, true, false, true, false, false, true, true, false, true, false, true, true, true, true, true, false, true, false, true, true, false, false, false, false, true, true, true, false, false, false, true, false, false, true, false, true, true, true, true, true, false, true, false, false, true, false, true, false, true, true, true, false, true, false, false, true, true, false, false, false, true, false, false, true, false, true, true, true, false, false, false, true, true, true, false, false, true, true, true, false, true, false, false, false, false, false, true, false, true, true]);
            let encoded = BinVector::from_bools(&[false, false, false, true, false, true, false, false, false, false, false, false, true, false, false, true, true, true, true, false, true, true, true, true, false, false, false, false, true, true, true, false, true, false, false, true, true, false, true, false, true, true, true, true, true, false, true, false, true, true, false, false, false, false, true, true, true, false, false, false, true, false, false, true, false, true, true, true, true, true, false, true, false, false, true, false, true, false, true, true, true, false, true, false, false, true, true, false, false, false, true, false, false, true, true, false, true, true, true, false, false, false, true, true, true, false, false, true, true, true, false, false, true, false, false, false, false, false, false, true, false, true, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, false, true, false, false, false, false, false, false, true, false, false, true, true, true, true, false, true, true, true, true, false, false, false, false, true, true, true, false, true, false, false, true, true, false, true, false, true, true, true, true, true, false, true, false, true, true, true, false, false, false, true, true, true, false, false, false, true, false, false, true, false, true, true, true, true, true, false, true, false, false, true, false, true, false, true, true, true, false, true, false, false, true, true, false, false, false, true, false, false, true, true, false, true, true, true, false, false, false, true, true, true, false, false, true, true, true, false, false, true, false, false, false, false, false, false, true, false, true, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, true, true, true, false, false, true, false, false, true, true, true, true, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, true, true, true, false, false, false, true, true, true, false, true, true, true, false, true, false, true, false, true, true, false, true, true, false, true, false, false, false, true, true, true, true, true, false, true, true, false, true, true, true, true, true, true, false, false, false, false, false, false, true, true, true, false, false, false, false, true, false, true, false, true, true, true, false, false, true, true, false, true, false, false, true, false, true, true, false, true, true, false, true, true, false, false, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[false, false, true, true, true, false, false, true, false, false, true, true, true, true, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, true, true, true, false, false, false, true, true, true, false, true, true, true, false, true, false, true, false, true, true, false, true, true, false, true, false, false, false, true, true, true, true, true, false, true, true, false, true, true, true, true, true, true, false, false, false, false, false, false, true, true, true, false, false, false, false, true, false, true, false, true, true, true, true, false, false, true, true, false, true, false, false, true, false, true, true, false, true, true, true, false, true, true, false, false, true, true, true, true, false, false, false, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, true, true, true, false, false, true, false, false, true, true, true, true, false, false, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false, true, true, true, true, false, false, false, true, true, true, false, true, true, true, false, true, false, true, false, true, true, false, true, true, false, true, false, false, false, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, true, true, true, false, false, false, false, true, false, true, false, true, true, true, true, false, false, true, true, false, true, false, false, true, false, true, true, false, true, true, true, false, true, true, false, false, true, true, true, true, false, false, false, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, false, true, false, false, false, false, true, true, false, true, true, true, false, true, true, false, true, true, true, true, false, false, false, true, true, true, false, true, true, true, false, true, false, false, false, false, true, true, false, true, false, false, false, true, false, true, true, true, false, true, true, true, false, true, false, true, true, true, false, false, true, true, false, true, true, true, false, false, false, false, true, true, true, true, false, false, false, true, true, false, false, false, false, false, true, true, true, true, false, false, true, false, false, true, true, true, true, false, true, false, true, true, true, true, false, true, true, true, true, true, false, false, true, true, true, true, true]);
            let encoded = BinVector::from_bools(&[false, false, false, false, true, false, false, false, false, true, true, false, true, true, true, false, true, true, false, true, true, true, true, false, false, false, true, true, true, false, true, true, true, false, true, false, false, false, false, true, true, false, true, false, false, false, true, false, true, true, true, false, true, true, true, false, true, false, true, true, true, false, false, true, true, false, true, true, true, false, false, false, false, true, true, true, true, false, false, false, true, true, false, false, false, false, false, true, true, true, true, false, false, true, true, false, false, true, true, true, true, false, true, false, true, true, true, true, false, true, true, true, true, true, true, false, false, true, false, true, true, true, false, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, false, true, false, false, false, false, true, false, false, true, true, true, false, true, true, false, true, true, true, true, false, false, false, true, true, true, false, true, true, true, false, true, false, false, false, false, true, true, false, true, false, false, false, true, false, true, true, true, false, true, true, true, false, true, false, true, true, true, false, false, true, true, false, true, true, true, false, false, false, false, true, true, true, true, false, false, false, true, true, false, false, false, false, false, true, true, true, true, false, false, true, true, false, false, true, true, true, true, false, true, false, true, true, true, true, false, true, true, true, true, true, true, false, false, true, false, true, true, true, false, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, true, true, false, true, true, false, false, false, false, false, true, true, true, false, true, false, true, false, false, true, true, true, true, false, false, false, false, false, true, false, false, false, false, true, true, false, false, false, true, true, false, true, false, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, true, false, false, true, true, false, false, true, true, true, false, true, true, false, true, true, true, true, true, false, true, true, true, true, true, false, true, false, true, true, true, true, true, false, false, false, false, true, true, true, false, true, false, true, false, true, false, true, true, true, false, false, true, true, false, true, false, true]);
            let encoded = BinVector::from_bools(&[false, false, false, true, true, true, false, true, true, false, false, false, false, false, true, true, true, false, true, false, true, false, false, true, true, true, true, false, false, false, false, false, true, false, false, false, false, true, true, false, false, false, true, true, false, true, false, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, true, false, false, true, true, false, false, true, true, true, false, true, true, false, true, true, true, true, true, false, true, true, true, true, true, false, true, false, true, true, true, true, true, true, false, false, false, false, true, true, true, false, true, false, true, false, true, false, false, true, true, true, false, false, true, true, true, false, true, false, false, true, false, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, true, true, false, true, false, false, false, false, false, false, true, true, true, false, true, false, true, false, false, true, true, true, true, false, false, false, false, false, true, false, false, false, false, true, true, false, false, false, true, true, false, true, false, true, false, true, false, true, false, true, false, false, false, false, true, false, false, true, true, false, false, true, true, false, false, true, true, true, false, true, true, false, true, true, true, true, true, false, true, true, true, true, true, false, true, false, true, true, true, true, true, true, false, false, false, false, true, true, true, false, true, false, true, false, true, false, false, true, true, true, false, false, true, true, true, false, true, false, false, true, false, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, true, true, false, true, true, true, false, false, true, true, true, true, true, false, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, true, false, true, true, false, true, false, false, true, true, true, true, false, false, true, true, true, true, false, true, true, true, false, true, false, false, false, false, true, false, false, false, false, false, false, true, false, false, true, true, true, true, true, true, false, true, true, true, true, false, true, true, false, false, false, false, false, false, true, true, false, true, true, false, true, false, true, false, true, true, false, false, false, false, true, false, false, false, true, true, false, false, true, true, true, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, true, true, false, true, true, true, false, false, true, true, true, true, true, false, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, true, false, true, true, false, true, false, false, true, true, true, true, false, false, true, true, true, true, false, true, true, true, false, true, false, false, false, false, true, false, false, false, false, false, false, true, false, false, true, true, true, true, true, true, false, true, true, true, true, false, true, true, false, false, false, false, false, false, true, true, false, false, true, true, false, true, false, true, false, true, true, false, false, false, false, true, false, false, false, false, true, true, false, false, true, false, true, true, false, false, false, false, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, true, true, false, true, true, true, false, false, true, false, true, true, true, false, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, true, false, true, true, false, true, false, false, true, true, true, true, false, false, true, true, true, true, false, true, true, true, false, true, false, false, false, false, true, false, false, false, false, false, false, true, false, false, true, true, true, true, true, true, false, true, true, true, true, false, true, true, false, false, false, false, false, false, true, true, false, false, true, true, false, true, false, true, false, true, true, false, false, false, false, true, false, false, false, false, true, true, false, false, true, false, true, true, false, false, false, false, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, true, false, true, false, true, false, true, false, true, false, false, true, false, true, true, true, true, true, true, false, true, false, false, true, true, false, false, false, false, false, true, false, false, true, true, true, false, false, false, true, false, false, true, false, true, true, false, true, false, true, false, true, true, false, false, true, true, true, true, true, false, false, true, false, true, true, true, true, true, true, true, false, true, true, true, false, true, true, false, true, true, true, false, true, false, true, true, true, true, false, true, false, true, false, true, false, true, true, true, false, true, true, true, true, true, true, false, true, false, true, false, true, true, true, false, true, true, true]);
            let encoded = BinVector::from_bools(&[true, true, true, false, true, false, true, false, true, false, true, false, false, true, false, true, true, true, true, true, true, false, true, false, false, true, true, false, false, false, false, false, true, false, false, true, true, true, false, false, false, true, false, false, true, false, true, true, false, true, false, true, false, true, true, false, false, true, true, true, true, true, false, false, true, false, true, true, true, true, true, true, true, false, true, true, true, false, true, true, false, true, true, true, false, true, false, true, true, true, true, false, true, false, true, true, false, true, false, true, true, true, false, true, true, true, true, true, true, false, false, true, false, true, false, true, true, true, false, false, true, true, true, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, true, false, true, false, true, false, true, false, true, false, false, true, false, true, true, true, true, true, true, false, true, false, false, true, true, false, false, false, false, false, true, false, false, true, true, true, false, false, false, true, false, false, true, false, true, true, false, true, false, true, false, true, true, false, false, true, true, true, true, true, false, false, true, false, true, true, true, true, true, true, true, false, true, false, true, false, true, true, false, true, true, true, false, true, false, true, true, true, true, false, true, false, true, true, false, true, false, true, true, true, false, true, true, true, true, true, true, false, false, true, false, true, false, true, true, true, false, false, true, true, true, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, false, false, false, true, true, true, false, false, true, false, true, true, false, false, false, false, false, true, true, true, false, true, false, true, false, true, true, false, true, false, true, false, true, false, false, true, false, true, false, false, false, false, true, true, true, true, true, true, false, false, false, true, true, true, true, false, true, true, false, false, false, false, false, false, true, true, false, true, false, true, false, false, true, true, true, true, false, false, false, false, true, true, true, false, true, true, false, false, true, true, false, false, true, false, true, true, false, true, true, true, true, false, true, true, true, false, false, false, false, true, true, false, false, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, true, false, false, false, true, true, true, false, false, true, false, true, true, false, false, false, false, false, true, true, true, false, true, false, true, false, true, true, false, true, false, true, false, true, false, false, true, false, true, false, false, false, false, true, true, true, true, true, true, false, false, false, true, true, true, true, false, true, true, false, false, false, false, false, false, true, true, false, true, false, true, false, false, true, true, true, true, false, false, false, false, true, true, true, false, true, true, false, false, true, true, false, false, true, true, false, true, true, false, true, true, true, true, false, true, true, true, false, false, true, false, false, true, true, false, false, false, false, false, true, false, false, false, true, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, false, false, false, true, true, true, false, false, true, false, true, true, false, false, false, false, false, true, true, true, false, true, false, true, false, true, true, false, true, false, true, false, true, false, false, true, false, true, false, false, false, false, true, true, true, true, true, true, false, false, false, true, true, true, true, false, true, true, false, false, false, false, false, false, true, true, false, true, false, true, false, false, true, true, true, true, false, false, false, false, true, true, true, false, true, true, false, false, true, true, false, false, true, true, false, true, true, false, true, true, true, true, false, true, true, true, false, false, true, false, true, true, true, false, false, false, false, false, true, false, false, false, true, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, true, true, true, true, false, false, false, false, true, true, false, false, false, false, true, true, false, false, false, false, true, true, false, false, false, false, false, true, false, false, true, false, false, true, true, false, false, true, true, true, false, true, false, false, true, true, true, true, true, true, true, true, false, false, true, true, false, false, false, false, true, false, false, false, true, false, true, false, true, true, true, true, true, false, false, false, true, true, false, false, false, true, false, false, true, false, true, true, true, true, true, true, true, true, false, false, true, true, true, true, true, true, false, false, false, false, false, false, false, false, true, false, true, false, true, true, true]);
            let encoded = BinVector::from_bools(&[true, true, false, true, true, true, true, false, false, false, false, true, true, false, false, false, false, true, true, false, false, false, false, true, true, false, false, false, false, false, true, false, false, true, false, false, true, true, false, false, true, true, true, false, true, false, false, true, true, true, true, true, true, true, true, false, false, true, true, false, false, false, false, true, false, false, false, true, false, true, false, true, true, true, true, true, false, false, false, true, true, false, false, false, true, false, false, true, false, true, true, true, true, true, false, true, true, true, false, false, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, true, false, true, true, false, true, true, false, true, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, true, true, true, false, false, false, false, true, true, false, false, false, false, true, true, false, false, false, false, true, true, false, false, false, false, false, true, false, false, true, false, false, true, true, false, false, true, true, true, false, true, false, false, true, true, true, true, true, true, true, true, false, false, true, true, false, false, false, false, true, false, false, false, true, false, true, false, true, true, true, true, true, false, false, false, true, true, false, false, false, true, false, false, true, false, true, true, true, true, true, false, true, true, true, false, false, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, true, false, true, true, false, true, true, false, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, true, false, false, true, false, true, true, true, false, true, false, true, false, true, true, false, true, true, false, false, false, false, true, false, true, false, false, false, true, false, false, true, true, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, true, false, true, true, true, true, false, true, false, true, false, true, false, true, true, true, false, false, true, true, true, false, true, true, false, true, false, true, false, true, true, false, false, true, true, false, true, true, true, true, true, true, true, true, false, true, true, false, false, true, false, true, true, true, true, false, true, false, false, false, true, true, false, false, true, false, false]);
            let encoded = BinVector::from_bools(&[false, false, false, true, true, false, false, true, false, true, true, true, false, true, false, true, false, true, true, false, true, true, false, false, false, false, true, false, true, false, false, false, true, false, false, true, true, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, true, false, true, true, true, true, false, true, false, true, false, true, false, true, true, true, false, false, true, true, true, false, true, true, false, true, false, true, false, true, true, false, false, true, true, false, true, true, true, true, true, false, true, true, true, false, true, true, false, false, true, false, true, true, true, true, false, false, true, false, false, false, true, true, false, true, false, true, false, true, false, true, false, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, true, false, false, true, false, true, true, true, false, true, false, true, false, true, true, false, true, true, false, false, false, false, true, false, true, false, false, false, true, false, false, true, true, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, true, false, true, true, true, true, false, true, false, true, false, true, false, true, true, true, false, false, true, true, true, false, true, true, false, true, false, true, false, true, true, false, false, true, true, false, true, true, true, true, true, false, true, true, true, false, true, true, false, false, true, false, true, true, true, true, false, false, true, false, false, false, false, true, false, true, false, true, false, true, false, true, false, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, false, false, true, false, false, false, true, true, false, false, false, false, true, true, false, true, false, true, true, true, false, false, true, true, true, false, false, true, true, false, true, false, true, true, false, false, false, false, false, false, false, true, true, false, true, true, false, true, false, true, true, true, true, false, false, true, true, false, false, false, false, true, true, false, false, false, false, true, false, true, false, false, false, false, false, false, true, true, false, false, true, true, true, false, true, true, true, false, true, false, true, true, true, true, false, false, false, true, true, false, false, true, true, false, true, true, true, true, true, true, true, false, false, false, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, false, false, true, false, false, false, true, true, false, false, false, false, true, true, false, true, false, true, true, true, false, false, true, true, true, false, false, true, true, false, true, false, true, true, false, false, false, false, false, false, false, true, true, false, true, true, false, true, false, true, true, true, true, false, false, true, true, false, false, false, false, true, true, false, false, false, false, true, false, true, false, false, false, false, false, false, true, true, false, false, true, true, true, false, true, true, true, false, true, false, true, true, true, true, true, false, false, false, true, true, false, false, true, true, false, true, true, true, true, true, true, true, true, false, false, false, false, true, false, false, true, false, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, false, false, false, true, false, false, false, true, true, false, false, false, false, true, true, false, true, false, true, true, true, false, false, true, true, true, false, false, true, true, false, true, false, true, true, false, false, false, false, false, false, false, true, true, false, true, true, false, true, false, true, true, true, true, false, false, true, true, false, false, true, false, true, true, false, false, false, false, true, false, true, false, false, false, false, false, false, true, true, false, false, true, true, true, false, true, true, true, false, true, false, true, true, true, true, true, false, false, false, true, true, false, false, true, true, false, true, true, true, true, true, true, true, true, false, false, false, false, true, false, false, true, false, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, false, true, false, false, true, false, true, false, false, false, true, false, false, false, false, true, true, true, false, true, true, false, true, false, false, false, false, false, false, false, false, true, false, true, true, false, false, false, false, true, true, true, false, true, false, true, false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, false, true, true, true, true, false, false, true, true, true, false, false, false, true, false, false, true, false, false, false, true, false, false, false, false, true, true, false, true, false, true, false, true, false, true, false, false, false, false, false, true, true, true, true, true, true, false]);
            let encoded = BinVector::from_bools(&[true, false, true, false, false, true, false, true, false, false, false, true, false, false, false, false, true, true, true, false, true, true, false, true, false, false, false, false, false, false, false, false, true, false, true, true, false, false, false, false, true, true, true, false, true, false, true, false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, false, true, true, true, true, false, false, true, true, true, false, false, false, true, false, false, true, false, false, false, true, true, false, false, false, false, true, true, false, true, false, true, false, true, false, true, false, true, false, false, false, false, true, true, true, false, true, true, true, true, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, false, true, false, false, true, false, true, false, false, false, true, false, false, false, false, true, true, true, false, true, true, false, true, false, false, false, false, false, false, false, false, true, false, true, true, false, false, false, false, true, true, true, false, true, false, true, false, false, true, false, true, true, false, false, false, true, false, false, true, false, false, false, false, true, false, false, true, false, false, false, true, true, false, true, true, true, true, false, false, true, true, true, false, false, false, true, false, false, true, false, false, false, true, true, false, false, false, false, true, true, false, true, false, true, false, true, false, true, false, true, false, false, false, false, true, true, true, false, false, true, true, true, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[true, true, false, false, false, false, false, false, false, false, true, false, false, false, true, true, false, true, true, false, true, false, true, true, false, false, false, true, false, true, true, false, true, true, true, false, false, true, true, true, true, false, true, true, true, false, true, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, true, false, false, true, false, true, false, true, true, false, true, true, false, true, true, true, true, false, true, false, true, false, false, false, false, true, false, true, true, true, false, true, false, true, true, true, true, false, false, true, true, false, true, true, false, true, true, true, true, false, false, false, true, true, false, true, true, false]);
            let encoded = BinVector::from_bools(&[true, true, false, false, false, false, false, false, false, false, true, false, false, false, true, true, false, true, true, false, true, false, true, true, false, false, false, true, false, true, true, false, true, true, true, false, false, true, true, true, true, false, true, true, true, false, true, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, true, false, false, true, false, true, false, true, true, false, true, true, false, true, true, true, true, false, true, false, true, false, false, false, false, true, false, true, true, true, false, true, false, false, true, true, true, true, false, false, true, true, false, true, true, false, true, true, true, true, true, false, false, false, true, true, true, false, true, true, false, false, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[true, true, false, true, false, false, false, false, false, false, true, false, false, false, true, true, false, true, true, false, true, false, true, true, false, false, false, true, false, true, true, false, true, true, true, false, false, true, true, true, true, false, true, true, true, false, true, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, true, false, false, true, false, true, false, true, true, false, true, true, false, true, true, true, true, false, true, false, true, false, false, false, false, true, false, true, true, true, false, true, false, false, true, true, true, true, false, false, true, true, false, true, true, false, true, true, true, true, true, false, false, false, true, true, true, false, true, true, false, false, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, false, false, true, true, false, true, true, true, true, true, true, true, true, true, true, false, false, false, true, true, false, false, true, true, false, false, false, true, true, false, true, true, false, false, false, true, true, false, true, true, false, true, false, true, true, true, false, true, false, true, false, false, true, true, false, true, false, true, false, true, false, false, true, true, true, false, true, false, true, false, false, false, false, true, true, true, false, false, true, true, false, true, false, true, false, true, false, false, true, false, true, false, false, true, true, true, true, true, true, false, false, false, false, true, false, false, true, true, true, false, false, true, true, false, true, false, true, true, true]);
            let encoded = BinVector::from_bools(&[false, false, false, true, true, false, true, true, true, true, true, true, true, true, true, true, false, false, false, true, true, false, false, true, true, false, false, false, true, true, false, true, true, false, false, false, true, true, false, true, true, false, true, false, true, true, true, false, true, false, true, false, false, true, true, false, true, false, true, false, true, false, false, true, true, true, false, true, false, true, false, false, false, false, true, true, true, false, false, true, true, false, true, false, true, false, true, false, false, true, false, true, false, false, false, true, true, true, true, true, true, false, false, false, false, true, false, false, true, true, true, true, false, false, true, true, false, true, true, false, true, true, false, true, false, true, false]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, false, false, true, true, false, true, true, true, true, true, true, true, true, true, true, false, false, false, true, true, false, false, true, true, false, false, false, true, true, false, true, true, false, false, false, true, true, false, true, true, false, true, false, true, true, true, false, true, false, true, false, false, true, true, false, true, false, true, false, false, false, false, true, true, true, false, true, false, true, false, false, false, false, true, true, true, false, false, true, true, false, true, false, true, false, true, false, false, true, false, true, false, false, false, true, true, true, true, true, true, false, false, false, false, true, false, false, true, true, true, true, false, false, true, true, false, true, true, false, true, true, false, true, false, true, false]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
        {
            let m = BinVector::from_bools(&[false, true, true, true, false, false, false, true, true, false, true, false, true, false, true, false, true, true, false, false, true, false, false, false, true, true, true, false, true, true, true, true, false, true, true, true, false, true, false, true, true, true, true, true, true, false, true, true, false, true, true, false, true, true, true, false, false, true, false, false, true, true, false, true, true, true, false, false, true, true, true, true, true, false, true, false, true, false, false, true, false, false, false, false, true, true, false, true, true, true, false, false, false, false, true, false, false, true, true, true, false, false, false, true, true, true, false, true, false, false, false, true, false, true, true, false, false, false, true, true]);
            let encoded = BinVector::from_bools(&[false, true, true, true, false, false, false, true, true, false, true, false, true, false, true, false, true, true, false, false, true, false, false, false, true, true, true, false, true, true, true, true, false, true, true, true, false, true, false, true, true, true, true, true, true, false, true, true, false, true, true, false, true, true, true, false, false, true, false, false, true, true, false, true, true, true, false, false, true, true, true, true, true, false, true, false, true, false, false, true, false, false, false, false, true, true, false, true, true, true, false, false, false, false, true, true, false, false, true, true, true, false, false, false, true, true, true, false, true, false, false, false, false, true, false, true, true, false, true, false, false, true, false, true, true, true, true]);
            assert_eq!(code.encode(m), encoded);
            
            {
                let errored = BinVector::from_bools(&[false, true, true, true, false, false, false, true, true, false, true, false, true, false, true, false, true, true, false, false, true, false, false, false, true, true, true, false, true, true, true, true, false, true, true, true, false, true, false, true, true, true, true, true, true, false, true, true, false, true, true, false, true, true, true, false, false, true, false, false, true, false, false, true, true, true, false, false, true, true, true, true, true, false, true, false, true, false, false, true, false, false, false, false, true, true, false, true, true, true, false, false, false, false, true, true, false, false, true, true, true, false, false, false, true, true, true, false, true, false, false, false, false, true, false, true, true, false, true, false, false, true, false, true, true, true, true]);
                assert_eq!(m, code.decode_to_message(errored.clone()), "decode to msg failed");
                assert_eq!(encoded, code.decode_to_code(errored), "decode to code failed");
            }
            
        }
        
    }

}
