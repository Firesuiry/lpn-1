use codes::BinaryCode;
use m4ri_rust::friendly::BinMatrix;
use m4ri_rust::friendly::BinVector;
use std::sync::{Once,ONCE_INIT};
use std::boxed::Box;

pub struct HammingCode{{n}}_{{k}};

static INIT: Once = ONCE_INIT;
static mut GENERATOR_MATRIX: *const BinMatrix = 0 as *const BinMatrix;
static mut PARITY_MATRIX: *const BinMatrix = 0 as *const BinMatrix;

fn init() {
    INIT.call_once(|| {
        unsafe { 
            let matrix = Box::new(BinMatrix::new(vec![
                {% for row in generator %}BinVector::from_bools(&[{{ row|boollist }}]),
                {% endfor %}
            ]));
            GENERATOR_MATRIX = Box::into_raw(matrix);

            let matrix = Box::new(BinMatrix::new(vec![
                    {% for row in parity_matrix %}BinVector::from_bools(&[{{ row|boollist }}]),
                    {% endfor %}
            ]));
            PARITY_MATRIX = Box::into_raw(matrix);
        }
    });
}

static SYNDROME: [[bool; {{k}}]; {{ 2**n }}] = [
{% for syndrome in syndromes %}     [{{ syndrome|boollist }}], // {{ syndrome }}
{% endfor %}];

static ENCODE: [[bool; {{ n }}]; {{ 2**k }}] = [
{% for encoding in encodings %}       [{{ encoding|boollist }}], // {{ encoding }}
{% endfor %}];


impl BinaryCode for HammingCode{{n}}_{{k}} {
    fn length() -> usize {
        {{ n }}
    }

    fn dimension() -> usize {
        {{ k }}
    }

    fn generator_matrix(&self) -> &'static BinMatrix {
        init();
        unsafe {
            GENERATOR_MATRIX.as_ref().unwrap()
        }
    }

    fn parity_check_matrix(&self) -> &'static BinMatrix {
        init();
        unsafe {
            PARITY_MATRIX.as_ref().unwrap()
        }
    }

    fn decode_to_message(&self, c: BinVector) -> BinVector {
        debug_assert_eq!(c.len(), Self::length());
        BinVector::from_bools(&SYNDROME[c.as_u32() as usize])
    }

    /// Encode using lookup table
    fn encode(&self, c: BinVector) -> BinVector {
        debug_assert_eq!(c.len(), Self::dimension());
        BinVector::from_bools(&ENCODE[c.as_u32() as usize])
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use m4ri_rust::friendly::BinVector;

    #[test]
    fn size() {
        let code = HammingCode{{n}}_{{k}}.generator_matrix();
        assert_eq!(code.ncols(), {{n}});
        assert_eq!(code.nrows(), {{k}});
    }

    #[test]
    fn decode() {
        let code = HammingCode{{n}}_{{k}};

        let codeword = code.decode_to_message(BinVector::from_elem({{n}}, true));
        assert_eq!(codeword, BinVector::from_elem({{k}}, true));

        let mut vec = BinVector::from_elem({{n}}, true);
        vec.set(0, false);
        let codeword = code.decode_to_message(vec);
        assert_eq!(codeword, BinVector::from_elem({{k}}, true));

        let vec = code.decode_to_code(BinVector::from_elem({{n}}, false));
        assert_eq!(vec, BinVector::from_elem({{n}}, false));
    }

}

